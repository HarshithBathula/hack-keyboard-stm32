
USB HID Keyboard - STM32 F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800da88  0800da88  0001da88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de54  0800de54  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800de54  0800de54  0001de54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de5c  0800de5c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de5c  0800de5c  0001de5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de60  0800de60  0001de60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800de64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  200001a4  0800e008  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800e008  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dde7  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c37  00000000  00000000  0003dfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00042bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00043f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dea  00000000  00000000  00045068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6ec  00000000  00000000  0006ce52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15a4  00000000  00000000  0008953e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015aae2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050b0  00000000  00000000  0015ab34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da70 	.word	0x0800da70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	0800da70 	.word	0x0800da70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005be:	2120      	movs	r1, #32
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80005c2:	f000 ffe4 	bl	800158e <HAL_GPIO_TogglePin>
	int len = sprintf(uart_buff, "ISR callback.\r\n");
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <HAL_GPIO_EXTI_Callback+0x38>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005ca:	f00c fed3 	bl	800d374 <siprintf>
 80005ce:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	4906      	ldr	r1, [pc, #24]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80005da:	f005 f826 	bl	800562a <HAL_UART_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000
 80005ec:	0800da88 	.word	0x0800da88
 80005f0:	20000204 	.word	0x20000204
 80005f4:	200001c0 	.word	0x200001c0

080005f8 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (USBH_HID_GetDeviceType(phost) == HID_KEYBOARD) // if the HID is Mouse
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f009 fea7 	bl	800a354 <USBH_HID_GetDeviceType>
 8000606:	4603      	mov	r3, r0
 8000608:	2b02      	cmp	r3, #2
 800060a:	f040 80e9 	bne.w	80007e0 <USBH_HID_EventCallback+0x1e8>
	{
		HID_KEYBD_Info_TypeDef *Keyboard_Info = USBH_HID_GetKeybdInfo(phost); // get the info
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f009 ffd8 	bl	800a5c4 <USBH_HID_GetKeybdInfo>
 8000614:	6238      	str	r0, [r7, #32]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);					  // get the key pressed
 8000616:	6a38      	ldr	r0, [r7, #32]
 8000618:	f00a f878 	bl	800a70c <USBH_HID_GetASCIICode>
 800061c:	4603      	mov	r3, r0
 800061e:	77fb      	strb	r3, [r7, #31]
		int len = sprintf(uart_buff, "Key Pressed = %c\r\n", key);
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	461a      	mov	r2, r3
 8000624:	4970      	ldr	r1, [pc, #448]	; (80007e8 <USBH_HID_EventCallback+0x1f0>)
 8000626:	4871      	ldr	r0, [pc, #452]	; (80007ec <USBH_HID_EventCallback+0x1f4>)
 8000628:	f00c fea4 	bl	800d374 <siprintf>
 800062c:	61b8      	str	r0, [r7, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	b29a      	uxth	r2, r3
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	496d      	ldr	r1, [pc, #436]	; (80007ec <USBH_HID_EventCallback+0x1f4>)
 8000636:	486e      	ldr	r0, [pc, #440]	; (80007f0 <USBH_HID_EventCallback+0x1f8>)
 8000638:	f004 fff7 	bl	800562a <HAL_UART_Transmit>

		uint8_t modifier_keys = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		int lshift, rshift, lctrl, rctrl, lalt, ralt, lgui, rgui;
		if (Keyboard_Info->lshift == 1U)
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <USBH_HID_EventCallback+0x64>
		{
			modifier_keys |= KBD_LEFT_SHIFT;
 800064a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lshift = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e001      	b.n	8000660 <USBH_HID_EventCallback+0x68>
		}
		else
			lshift = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
		if (Keyboard_Info->rshift == 1U)
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d108      	bne.n	800067a <USBH_HID_EventCallback+0x82>
		{
			modifier_keys |= KBD_RIGHT_SHIFT;
 8000668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rshift = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e001      	b.n	800067e <USBH_HID_EventCallback+0x86>
		}
		else
			rshift = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
		if (Keyboard_Info->lctrl == 1U)
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d108      	bne.n	8000698 <USBH_HID_EventCallback+0xa0>
		{
			modifier_keys |= KBD_LEFT_CTRL;
 8000686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lctrl = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
 8000696:	e001      	b.n	800069c <USBH_HID_EventCallback+0xa4>
		}
		else
			lctrl = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
		if (Keyboard_Info->rctrl == 1U)
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d108      	bne.n	80006b6 <USBH_HID_EventCallback+0xbe>
		{
			modifier_keys |= KBD_RIGHT_CTRL;
 80006a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rctrl = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b4:	e001      	b.n	80006ba <USBH_HID_EventCallback+0xc2>
		}
		else
			rctrl = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (Keyboard_Info->lalt == 1U)
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	78db      	ldrb	r3, [r3, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d108      	bne.n	80006d4 <USBH_HID_EventCallback+0xdc>
		{
			modifier_keys |= KBD_LEFT_ALT;
 80006c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lalt = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	e001      	b.n	80006d8 <USBH_HID_EventCallback+0xe0>
		}
		else
			lalt = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (Keyboard_Info->ralt == 1U)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d108      	bne.n	80006f2 <USBH_HID_EventCallback+0xfa>
		{
			modifier_keys |= KBD_RIGHT_ALT;
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			ralt = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
 80006f0:	e001      	b.n	80006f6 <USBH_HID_EventCallback+0xfe>
		}
		else
			ralt = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (Keyboard_Info->lgui == 1U)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <USBH_HID_EventCallback+0x118>
		{
			modifier_keys |= KBD_LEFT_GUI;
 80006fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lgui = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e001      	b.n	8000714 <USBH_HID_EventCallback+0x11c>
		}
		else
			lgui = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
		if (Keyboard_Info->rgui == 1U)
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <USBH_HID_EventCallback+0x136>
		{
			modifier_keys |= KBD_RIGHT_GUI;
 800071c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rgui = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	e001      	b.n	8000732 <USBH_HID_EventCallback+0x13a>
		}
		else
			rgui = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
		if ((lctrl == 1 || rctrl == 1) && (lalt == 1 || ralt == 1) && ((key == 'h' || key == 'H') || (key == 'c' || key == 'C') || (key == 'q' || key == 'Q')))
 8000732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <USBH_HID_EventCallback+0x146>
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	2b01      	cmp	r3, #1
 800073c:	d131      	bne.n	80007a2 <USBH_HID_EventCallback+0x1aa>
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	2b01      	cmp	r3, #1
 8000742:	d002      	beq.n	800074a <USBH_HID_EventCallback+0x152>
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	2b01      	cmp	r3, #1
 8000748:	d12b      	bne.n	80007a2 <USBH_HID_EventCallback+0x1aa>
 800074a:	7ffb      	ldrb	r3, [r7, #31]
 800074c:	2b68      	cmp	r3, #104	; 0x68
 800074e:	d00e      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	2b48      	cmp	r3, #72	; 0x48
 8000754:	d00b      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	2b63      	cmp	r3, #99	; 0x63
 800075a:	d008      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b43      	cmp	r3, #67	; 0x43
 8000760:	d005      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	2b71      	cmp	r3, #113	; 0x71
 8000766:	d002      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 8000768:	7ffb      	ldrb	r3, [r7, #31]
 800076a:	2b51      	cmp	r3, #81	; 0x51
 800076c:	d119      	bne.n	80007a2 <USBH_HID_EventCallback+0x1aa>
		{
			if (key == 'h' || key == 'H')
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	2b68      	cmp	r3, #104	; 0x68
 8000772:	d002      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000774:	7ffb      	ldrb	r3, [r7, #31]
 8000776:	2b48      	cmp	r3, #72	; 0x48
 8000778:	d102      	bne.n	8000780 <USBH_HID_EventCallback+0x188>
				type_hello_world();
 800077a:	f000 f865 	bl	8000848 <type_hello_world>
			if (key == 'h' || key == 'H')
 800077e:	e02e      	b.n	80007de <USBH_HID_EventCallback+0x1e6>
			else if ((key == 'c' || key == 'C'))
 8000780:	7ffb      	ldrb	r3, [r7, #31]
 8000782:	2b63      	cmp	r3, #99	; 0x63
 8000784:	d02b      	beq.n	80007de <USBH_HID_EventCallback+0x1e6>
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	2b43      	cmp	r3, #67	; 0x43
 800078a:	d028      	beq.n	80007de <USBH_HID_EventCallback+0x1e6>
			{
				// char *command = "echo \"Hello World in command line!\"";
				// type_command(&command, 36);
			}
			else if ((key == 'q' || key == 'Q')){
 800078c:	7ffb      	ldrb	r3, [r7, #31]
 800078e:	2b71      	cmp	r3, #113	; 0x71
 8000790:	d002      	beq.n	8000798 <USBH_HID_EventCallback+0x1a0>
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	2b51      	cmp	r3, #81	; 0x51
 8000796:	d122      	bne.n	80007de <USBH_HID_EventCallback+0x1e6>
				emoji(key);
 8000798:	7ffb      	ldrb	r3, [r7, #31]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f82e 	bl	80007fc <emoji>
			if (key == 'h' || key == 'H')
 80007a0:	e01d      	b.n	80007de <USBH_HID_EventCallback+0x1e6>

			}
		}
		else
		{
			HID_Buffer[0] = modifier_keys;
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007a8:	7013      	strb	r3, [r2, #0]
			HID_Buffer[1] = Keyboard_Info->keys[2];
 80007aa:	6a3b      	ldr	r3, [r7, #32]
 80007ac:	7ada      	ldrb	r2, [r3, #11]
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007b0:	705a      	strb	r2, [r3, #1]
			HID_Buffer[2] = Keyboard_Info->keys[0];
 80007b2:	6a3b      	ldr	r3, [r7, #32]
 80007b4:	7a5a      	ldrb	r2, [r3, #9]
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007b8:	709a      	strb	r2, [r3, #2]
			HID_Buffer[3] = Keyboard_Info->keys[3];
 80007ba:	6a3b      	ldr	r3, [r7, #32]
 80007bc:	7b1a      	ldrb	r2, [r3, #12]
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007c0:	70da      	strb	r2, [r3, #3]
			HID_Buffer[4] = Keyboard_Info->keys[4];
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	7b5a      	ldrb	r2, [r3, #13]
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007c8:	711a      	strb	r2, [r3, #4]
			HID_Buffer[5] = Keyboard_Info->keys[5];
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	7b9a      	ldrb	r2, [r3, #14]
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007d0:	715a      	strb	r2, [r3, #5]
			USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80007d2:	2208      	movs	r2, #8
 80007d4:	4907      	ldr	r1, [pc, #28]	; (80007f4 <USBH_HID_EventCallback+0x1fc>)
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <USBH_HID_EventCallback+0x200>)
 80007d8:	f007 fe54 	bl	8008484 <USBD_HID_SendReport>
		}
	}
}
 80007dc:	e000      	b.n	80007e0 <USBH_HID_EventCallback+0x1e8>
			if (key == 'h' || key == 'H')
 80007de:	bf00      	nop
}
 80007e0:	bf00      	nop
 80007e2:	3738      	adds	r7, #56	; 0x38
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	0800da98 	.word	0x0800da98
 80007ec:	20000204 	.word	0x20000204
 80007f0:	200001c0 	.word	0x200001c0
 80007f4:	20000268 	.word	0x20000268
 80007f8:	200002b4 	.word	0x200002b4

080007fc <emoji>:

void emoji(char key){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
//	uint8_t HID_Buffer[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
	HID_Buffer[0] = 0x08;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <emoji+0x44>)
 8000808:	2208      	movs	r2, #8
 800080a:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2]= 0x37;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <emoji+0x44>)
 800080e:	2237      	movs	r2, #55	; 0x37
 8000810:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000812:	2208      	movs	r2, #8
 8000814:	490a      	ldr	r1, [pc, #40]	; (8000840 <emoji+0x44>)
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <emoji+0x48>)
 8000818:	f007 fe34 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	; 0x64
 800081e:	f000 fbbb 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <emoji+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <emoji+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 800082e:	2208      	movs	r2, #8
 8000830:	4903      	ldr	r1, [pc, #12]	; (8000840 <emoji+0x44>)
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <emoji+0x48>)
 8000834:	f007 fe26 	bl	8008484 <USBD_HID_SendReport>
		HID_Buffer[0] = 0x00; // Left Windows key modifier
		HID_Buffer[2] = 0x37;
		USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));

	}*/
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000268 	.word	0x20000268
 8000844:	200002b4 	.word	0x200002b4

08000848 <type_hello_world>:
// 	keys[2] = Keyboard_Info->keys[0];
// 	return keys;
// }

void type_hello_world(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0x02;
 800084c:	4b6b      	ldr	r3, [pc, #428]	; (80009fc <type_hello_world+0x1b4>)
 800084e:	2202      	movs	r2, #2
 8000850:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0B; // H
 8000852:	4b6a      	ldr	r3, [pc, #424]	; (80009fc <type_hello_world+0x1b4>)
 8000854:	220b      	movs	r2, #11
 8000856:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000858:	2208      	movs	r2, #8
 800085a:	4968      	ldr	r1, [pc, #416]	; (80009fc <type_hello_world+0x1b4>)
 800085c:	4868      	ldr	r0, [pc, #416]	; (8000a00 <type_hello_world+0x1b8>)
 800085e:	f007 fe11 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000862:	2032      	movs	r0, #50	; 0x32
 8000864:	f000 fb98 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000868:	4b64      	ldr	r3, [pc, #400]	; (80009fc <type_hello_world+0x1b4>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x08; // e
 800086e:	4b63      	ldr	r3, [pc, #396]	; (80009fc <type_hello_world+0x1b4>)
 8000870:	2208      	movs	r2, #8
 8000872:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000874:	2208      	movs	r2, #8
 8000876:	4961      	ldr	r1, [pc, #388]	; (80009fc <type_hello_world+0x1b4>)
 8000878:	4861      	ldr	r0, [pc, #388]	; (8000a00 <type_hello_world+0x1b8>)
 800087a:	f007 fe03 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 800087e:	2032      	movs	r0, #50	; 0x32
 8000880:	f000 fb8a 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000884:	4b5d      	ldr	r3, [pc, #372]	; (80009fc <type_hello_world+0x1b4>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 800088a:	4b5c      	ldr	r3, [pc, #368]	; (80009fc <type_hello_world+0x1b4>)
 800088c:	220f      	movs	r2, #15
 800088e:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000890:	2208      	movs	r2, #8
 8000892:	495a      	ldr	r1, [pc, #360]	; (80009fc <type_hello_world+0x1b4>)
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <type_hello_world+0x1b8>)
 8000896:	f007 fdf5 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 800089a:	2032      	movs	r0, #50	; 0x32
 800089c:	f000 fb7c 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008a0:	4b56      	ldr	r3, [pc, #344]	; (80009fc <type_hello_world+0x1b4>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00; // Dummy data between ll in Hello
 80008a6:	4b55      	ldr	r3, [pc, #340]	; (80009fc <type_hello_world+0x1b4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80008ac:	2208      	movs	r2, #8
 80008ae:	4953      	ldr	r1, [pc, #332]	; (80009fc <type_hello_world+0x1b4>)
 80008b0:	4853      	ldr	r0, [pc, #332]	; (8000a00 <type_hello_world+0x1b8>)
 80008b2:	f007 fde7 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80008b6:	2032      	movs	r0, #50	; 0x32
 80008b8:	f000 fb6e 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008bc:	4b4f      	ldr	r3, [pc, #316]	; (80009fc <type_hello_world+0x1b4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 80008c2:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <type_hello_world+0x1b4>)
 80008c4:	220f      	movs	r2, #15
 80008c6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80008c8:	2208      	movs	r2, #8
 80008ca:	494c      	ldr	r1, [pc, #304]	; (80009fc <type_hello_world+0x1b4>)
 80008cc:	484c      	ldr	r0, [pc, #304]	; (8000a00 <type_hello_world+0x1b8>)
 80008ce:	f007 fdd9 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f000 fb60 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008d8:	4b48      	ldr	r3, [pc, #288]	; (80009fc <type_hello_world+0x1b4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x12; // o
 80008de:	4b47      	ldr	r3, [pc, #284]	; (80009fc <type_hello_world+0x1b4>)
 80008e0:	2212      	movs	r2, #18
 80008e2:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80008e4:	2208      	movs	r2, #8
 80008e6:	4945      	ldr	r1, [pc, #276]	; (80009fc <type_hello_world+0x1b4>)
 80008e8:	4845      	ldr	r0, [pc, #276]	; (8000a00 <type_hello_world+0x1b8>)
 80008ea:	f007 fdcb 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80008ee:	2032      	movs	r0, #50	; 0x32
 80008f0:	f000 fb52 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008f4:	4b41      	ldr	r3, [pc, #260]	; (80009fc <type_hello_world+0x1b4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x2C; // space
 80008fa:	4b40      	ldr	r3, [pc, #256]	; (80009fc <type_hello_world+0x1b4>)
 80008fc:	222c      	movs	r2, #44	; 0x2c
 80008fe:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000900:	2208      	movs	r2, #8
 8000902:	493e      	ldr	r1, [pc, #248]	; (80009fc <type_hello_world+0x1b4>)
 8000904:	483e      	ldr	r0, [pc, #248]	; (8000a00 <type_hello_world+0x1b8>)
 8000906:	f007 fdbd 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f000 fb44 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x02;
 8000910:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <type_hello_world+0x1b4>)
 8000912:	2202      	movs	r2, #2
 8000914:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x1A; // W
 8000916:	4b39      	ldr	r3, [pc, #228]	; (80009fc <type_hello_world+0x1b4>)
 8000918:	221a      	movs	r2, #26
 800091a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 800091c:	2208      	movs	r2, #8
 800091e:	4937      	ldr	r1, [pc, #220]	; (80009fc <type_hello_world+0x1b4>)
 8000920:	4837      	ldr	r0, [pc, #220]	; (8000a00 <type_hello_world+0x1b8>)
 8000922:	f007 fdaf 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000926:	2032      	movs	r0, #50	; 0x32
 8000928:	f000 fb36 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 800092c:	4b33      	ldr	r3, [pc, #204]	; (80009fc <type_hello_world+0x1b4>)
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x12; // o
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <type_hello_world+0x1b4>)
 8000934:	2212      	movs	r2, #18
 8000936:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000938:	2208      	movs	r2, #8
 800093a:	4930      	ldr	r1, [pc, #192]	; (80009fc <type_hello_world+0x1b4>)
 800093c:	4830      	ldr	r0, [pc, #192]	; (8000a00 <type_hello_world+0x1b8>)
 800093e:	f007 fda1 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000942:	2032      	movs	r0, #50	; 0x32
 8000944:	f000 fb28 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <type_hello_world+0x1b4>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x15; // r
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <type_hello_world+0x1b4>)
 8000950:	2215      	movs	r2, #21
 8000952:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000954:	2208      	movs	r2, #8
 8000956:	4929      	ldr	r1, [pc, #164]	; (80009fc <type_hello_world+0x1b4>)
 8000958:	4829      	ldr	r0, [pc, #164]	; (8000a00 <type_hello_world+0x1b8>)
 800095a:	f007 fd93 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 800095e:	2032      	movs	r0, #50	; 0x32
 8000960:	f000 fb1a 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <type_hello_world+0x1b4>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <type_hello_world+0x1b4>)
 800096c:	220f      	movs	r2, #15
 800096e:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 8000970:	2208      	movs	r2, #8
 8000972:	4922      	ldr	r1, [pc, #136]	; (80009fc <type_hello_world+0x1b4>)
 8000974:	4822      	ldr	r0, [pc, #136]	; (8000a00 <type_hello_world+0x1b8>)
 8000976:	f007 fd85 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 800097a:	2032      	movs	r0, #50	; 0x32
 800097c:	f000 fb0c 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <type_hello_world+0x1b4>)
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x07; // d
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <type_hello_world+0x1b4>)
 8000988:	2207      	movs	r2, #7
 800098a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 800098c:	2208      	movs	r2, #8
 800098e:	491b      	ldr	r1, [pc, #108]	; (80009fc <type_hello_world+0x1b4>)
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <type_hello_world+0x1b8>)
 8000992:	f007 fd77 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000996:	2032      	movs	r0, #50	; 0x32
 8000998:	f000 fafe 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x02;
 800099c:	4b17      	ldr	r3, [pc, #92]	; (80009fc <type_hello_world+0x1b4>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x1E; // !
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <type_hello_world+0x1b4>)
 80009a4:	221e      	movs	r2, #30
 80009a6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80009a8:	2208      	movs	r2, #8
 80009aa:	4914      	ldr	r1, [pc, #80]	; (80009fc <type_hello_world+0x1b4>)
 80009ac:	4814      	ldr	r0, [pc, #80]	; (8000a00 <type_hello_world+0x1b8>)
 80009ae:	f007 fd69 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80009b2:	2032      	movs	r0, #50	; 0x32
 80009b4:	f000 faf0 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <type_hello_world+0x1b4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x28; // /n
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <type_hello_world+0x1b4>)
 80009c0:	2228      	movs	r2, #40	; 0x28
 80009c2:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80009c4:	2208      	movs	r2, #8
 80009c6:	490d      	ldr	r1, [pc, #52]	; (80009fc <type_hello_world+0x1b4>)
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <type_hello_world+0x1b8>)
 80009ca:	f007 fd5b 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80009ce:	2032      	movs	r0, #50	; 0x32
 80009d0:	f000 fae2 	bl	8000f98 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <type_hello_world+0x1b4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00; // release all the keys pressed
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <type_hello_world+0x1b4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, sizeof(HID_Buffer));
 80009e0:	2208      	movs	r2, #8
 80009e2:	4906      	ldr	r1, [pc, #24]	; (80009fc <type_hello_world+0x1b4>)
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <type_hello_world+0x1b8>)
 80009e6:	f007 fd4d 	bl	8008484 <USBD_HID_SendReport>
	HAL_Delay(50);
 80009ea:	2032      	movs	r0, #50	; 0x32
 80009ec:	f000 fad4 	bl	8000f98 <HAL_Delay>

	HAL_Delay(250);
 80009f0:	20fa      	movs	r0, #250	; 0xfa
 80009f2:	f000 fad1 	bl	8000f98 <HAL_Delay>
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000268 	.word	0x20000268
 8000a00:	200002b4 	.word	0x200002b4

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fa54 	bl	8000eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f818 	bl	8000a40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f8ac 	bl	8000b6c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a14:	f00b fbb8 	bl	800c188 <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 8000a18:	f00c f864 	bl	800cae4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000a1c:	f000 f87c 	bl	8000b18 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a20:	f00c f886 	bl	800cb30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <main+0x38>)
 8000a2a:	f000 fd7f 	bl	800152c <HAL_GPIO_ReadPin>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d1f5      	bne.n	8000a20 <main+0x1c>
		{
			type_hello_world();
 8000a34:	f7ff ff08 	bl	8000848 <type_hello_world>
    MX_USB_HOST_Process();
 8000a38:	e7f2      	b.n	8000a20 <main+0x1c>
 8000a3a:	bf00      	nop
 8000a3c:	40020800 	.word	0x40020800

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00c fb98 	bl	800d184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	4b29      	ldr	r3, [pc, #164]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <SystemClock_Config+0xd0>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <SystemClock_Config+0xd4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ab2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ab8:	2348      	movs	r3, #72	; 0x48
 8000aba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 fac1 	bl	8005054 <HAL_RCC_OscConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ad8:	f000 f8be 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000adc:	230f      	movs	r3, #15
 8000ade:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2102      	movs	r1, #2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fc37 	bl	800436c <HAL_RCC_ClockConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b04:	f000 f8a8 	bl	8000c58 <Error_Handler>
  }
}
 8000b08:	bf00      	nop
 8000b0a:	3750      	adds	r7, #80	; 0x50
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f004 fd1e 	bl	8005590 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f87d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200001c0 	.word	0x200001c0
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a30      	ldr	r2, [pc, #192]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a29      	ldr	r2, [pc, #164]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_GPIO_Init+0xe0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4816      	ldr	r0, [pc, #88]	; (8000c50 <MX_GPIO_Init+0xe4>)
 8000bf8:	f000 fcb0 	bl	800155c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c02:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4810      	ldr	r0, [pc, #64]	; (8000c54 <MX_GPIO_Init+0xe8>)
 8000c14:	f000 faf6 	bl	8001204 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4808      	ldr	r0, [pc, #32]	; (8000c50 <MX_GPIO_Init+0xe4>)
 8000c30:	f000 fae8 	bl	8001204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f000 faac 	bl	8001196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c3e:	2028      	movs	r0, #40	; 0x28
 8000c40:	f000 fac5 	bl	80011ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020800 	.word	0x40020800

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ca2:	2007      	movs	r0, #7
 8000ca4:	f000 fa6c 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_UART_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12b      	bne.n	8000d2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0e:	230c      	movs	r3, #12
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_UART_MspInit+0x8c>)
 8000d2a:	f000 fa6b 	bl	8001204 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40004400 	.word	0x40004400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020000 	.word	0x40020000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <NMI_Handler+0x4>

08000d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <HardFault_Handler+0x4>

08000d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <MemManage_Handler+0x4>

08000d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d90:	f000 f8e2 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000da0:	f000 fc10 	bl	80015c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dac:	4802      	ldr	r0, [pc, #8]	; (8000db8 <OTG_FS_IRQHandler+0x10>)
 8000dae:	f002 f982 	bl	80030b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000790 	.word	0x20000790

08000dbc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <OTG_HS_IRQHandler+0x10>)
 8000dc2:	f000 fe81 	bl	8001ac8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000108c 	.word	0x2000108c

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f00c f986 	bl	800d110 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20000270 	.word	0x20000270
 8000e38:	200013a0 	.word	0x200013a0

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	; (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	; (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f00c f945 	bl	800d11c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fdb7 	bl	8000a04 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000ea4:	0800de64 	.word	0x0800de64
  ldr r2, =_sbss
 8000ea8:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000eac:	200013a0 	.word	0x200013a0

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <HAL_Init+0x40>)
 8000ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_Init+0x40>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_Init+0x40>)
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_Init+0x40>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_Init+0x40>)
 8000ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000edc:	2003      	movs	r0, #3
 8000ede:	f000 f94f 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 f808 	bl	8000ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee8:	f7ff febc 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023c00 	.word	0x40023c00

08000ef8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x54>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x58>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 f967 	bl	80011ea <HAL_SYSTICK_Config>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e00e      	b.n	8000f44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d80a      	bhi.n	8000f42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f92f 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f38:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_InitTick+0x5c>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000274 	.word	0x20000274

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000274 	.word	0x20000274

08000f98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff ffee 	bl	8000f80 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb0:	d005      	beq.n	8000fbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_Delay+0x44>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fbe:	bf00      	nop
 8000fc0:	f7ff ffde 	bl	8000f80 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d8f7      	bhi.n	8000fc0 <HAL_Delay+0x28>
  {
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008

08000fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff6:	68ba      	ldr	r2, [r7, #8]
 8000ff8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001008:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800100c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001012:	4a04      	ldr	r2, [pc, #16]	; (8001024 <__NVIC_SetPriorityGrouping+0x44>)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	60d3      	str	r3, [r2, #12]
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_GetPriorityGrouping+0x18>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	0a1b      	lsrs	r3, r3, #8
 8001032:	f003 0307 	and.w	r3, r3, #7
}
 8001036:	4618      	mov	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	2b00      	cmp	r3, #0
 8001054:	db0b      	blt.n	800106e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	f003 021f 	and.w	r2, r3, #31
 800105c:	4907      	ldr	r1, [pc, #28]	; (800107c <__NVIC_EnableIRQ+0x38>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	095b      	lsrs	r3, r3, #5
 8001064:	2001      	movs	r0, #1
 8001066:	fa00 f202 	lsl.w	r2, r0, r2
 800106a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff29 	bl	8000fe0 <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff3e 	bl	8001028 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff31 	bl	8001044 <__NVIC_EnableIRQ>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff ffa2 	bl	800113c <SysTick_Config>
 80011f8:	4603      	mov	r3, r0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]
 800121e:	e165      	b.n	80014ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	f040 8154 	bne.w	80014e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b01      	cmp	r3, #1
 8001248:	d005      	beq.n	8001256 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001252:	2b02      	cmp	r3, #2
 8001254:	d130      	bne.n	80012b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800128c:	2201      	movs	r2, #1
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 0201 	and.w	r2, r3, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	d017      	beq.n	80012f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	2203      	movs	r2, #3
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d123      	bne.n	8001348 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	220f      	movs	r2, #15
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	691a      	ldr	r2, [r3, #16]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	69b9      	ldr	r1, [r7, #24]
 8001344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0203 	and.w	r2, r3, #3
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 80ae 	beq.w	80014e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b5d      	ldr	r3, [pc, #372]	; (8001504 <HAL_GPIO_Init+0x300>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a5c      	ldr	r2, [pc, #368]	; (8001504 <HAL_GPIO_Init+0x300>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b5a      	ldr	r3, [pc, #360]	; (8001504 <HAL_GPIO_Init+0x300>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013a6:	4a58      	ldr	r2, [pc, #352]	; (8001508 <HAL_GPIO_Init+0x304>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x308>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x21a>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <HAL_GPIO_Init+0x30c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x216>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4d      	ldr	r2, [pc, #308]	; (8001514 <HAL_GPIO_Init+0x310>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x212>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_GPIO_Init+0x314>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x20e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4b      	ldr	r2, [pc, #300]	; (800151c <HAL_GPIO_Init+0x318>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x20a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_GPIO_Init+0x31c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x206>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a49      	ldr	r2, [pc, #292]	; (8001524 <HAL_GPIO_Init+0x320>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x202>
 8001402:	2306      	movs	r3, #6
 8001404:	e00c      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001406:	2307      	movs	r3, #7
 8001408:	e00a      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800140e:	2304      	movs	r3, #4
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x21c>
 800141e:	2300      	movs	r3, #0
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x304>)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001462:	4a31      	ldr	r2, [pc, #196]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001468:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_GPIO_Init+0x324>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800148c:	4a26      	ldr	r2, [pc, #152]	; (8001528 <HAL_GPIO_Init+0x324>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_GPIO_Init+0x324>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e0:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_GPIO_Init+0x324>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	f67f ae96 	bls.w	8001220 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40013800 	.word	0x40013800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020400 	.word	0x40020400
 8001514:	40020800 	.word	0x40020800
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40021000 	.word	0x40021000
 8001520:	40021400 	.word	0x40021400
 8001524:	40021800 	.word	0x40021800
 8001528:	40013c00 	.word	0x40013c00

0800152c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	887b      	ldrh	r3, [r7, #2]
 800153e:	4013      	ands	r3, r2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e001      	b.n	800154e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800156c:	787b      	ldrb	r3, [r7, #1]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001572:	887a      	ldrh	r2, [r7, #2]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001578:	e003      	b.n	8001582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800157a:	887b      	ldrh	r3, [r7, #2]
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
 800159e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015a0:	887a      	ldrh	r2, [r7, #2]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4013      	ands	r3, r2
 80015a6:	041a      	lsls	r2, r3, #16
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	400b      	ands	r3, r1
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	619a      	str	r2, [r3, #24]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015dc:	88fb      	ldrh	r3, [r7, #6]
 80015de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffe6 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f6:	b08f      	sub	sp, #60	; 0x3c
 80015f8:	af0a      	add	r7, sp, #40	; 0x28
 80015fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e054      	b.n	80016b0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d106      	bne.n	8001626 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f00b fabd 	bl	800cba0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f004 fc7a 	bl	8005f3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	687e      	ldr	r6, [r7, #4]
 8001652:	466d      	mov	r5, sp
 8001654:	f106 0410 	add.w	r4, r6, #16
 8001658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001664:	e885 0003 	stmia.w	r5, {r0, r1}
 8001668:	1d33      	adds	r3, r6, #4
 800166a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f004 fb51 	bl	8005d14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f004 fc71 	bl	8005f60 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	687e      	ldr	r6, [r7, #4]
 8001686:	466d      	mov	r5, sp
 8001688:	f106 0410 	add.w	r4, r6, #16
 800168c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001698:	e885 0003 	stmia.w	r5, {r0, r1}
 800169c:	1d33      	adds	r3, r6, #4
 800169e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f005 ff7f 	bl	80075a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016b8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af04      	add	r7, sp, #16
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	70fb      	strb	r3, [r7, #3]
 80016ca:	460b      	mov	r3, r1
 80016cc:	70bb      	strb	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_HCD_HC_Init+0x28>
 80016dc:	2302      	movs	r3, #2
 80016de:	e076      	b.n	80017ce <HAL_HCD_HC_Init+0x116>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	212c      	movs	r1, #44	; 0x2c
 80016ee:	fb01 f303 	mul.w	r3, r1, r3
 80016f2:	4413      	add	r3, r2
 80016f4:	333d      	adds	r3, #61	; 0x3d
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	3338      	adds	r3, #56	; 0x38
 8001708:	787a      	ldrb	r2, [r7, #1]
 800170a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	212c      	movs	r1, #44	; 0x2c
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	4413      	add	r3, r2
 8001718:	3340      	adds	r3, #64	; 0x40
 800171a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800171c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	212c      	movs	r1, #44	; 0x2c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	4413      	add	r3, r2
 800172a:	3339      	adds	r3, #57	; 0x39
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	212c      	movs	r1, #44	; 0x2c
 8001736:	fb01 f303 	mul.w	r3, r1, r3
 800173a:	4413      	add	r3, r2
 800173c:	333f      	adds	r3, #63	; 0x3f
 800173e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001744:	78fb      	ldrb	r3, [r7, #3]
 8001746:	78ba      	ldrb	r2, [r7, #2]
 8001748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800174c:	b2d0      	uxtb	r0, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	212c      	movs	r1, #44	; 0x2c
 8001752:	fb01 f303 	mul.w	r3, r1, r3
 8001756:	4413      	add	r3, r2
 8001758:	333a      	adds	r3, #58	; 0x3a
 800175a:	4602      	mov	r2, r0
 800175c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800175e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001762:	2b00      	cmp	r3, #0
 8001764:	da09      	bge.n	800177a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001766:	78fb      	ldrb	r3, [r7, #3]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	212c      	movs	r1, #44	; 0x2c
 800176c:	fb01 f303 	mul.w	r3, r1, r3
 8001770:	4413      	add	r3, r2
 8001772:	333b      	adds	r3, #59	; 0x3b
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e008      	b.n	800178c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	212c      	movs	r1, #44	; 0x2c
 8001780:	fb01 f303 	mul.w	r3, r1, r3
 8001784:	4413      	add	r3, r2
 8001786:	333b      	adds	r3, #59	; 0x3b
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	212c      	movs	r1, #44	; 0x2c
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	333c      	adds	r3, #60	; 0x3c
 800179a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800179e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	787c      	ldrb	r4, [r7, #1]
 80017a6:	78ba      	ldrb	r2, [r7, #2]
 80017a8:	78f9      	ldrb	r1, [r7, #3]
 80017aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f006 f86c 	bl	8007898 <USB_HC_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd90      	pop	{r4, r7, pc}

080017d6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b084      	sub	sp, #16
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d101      	bne.n	80017f4 <HAL_HCD_HC_Halt+0x1e>
 80017f0:	2302      	movs	r3, #2
 80017f2:	e00f      	b.n	8001814 <HAL_HCD_HC_Halt+0x3e>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	78fa      	ldrb	r2, [r7, #3]
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f006 fabc 	bl	8007d82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	70fb      	strb	r3, [r7, #3]
 800182e:	460b      	mov	r3, r1
 8001830:	70bb      	strb	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001836:	78fb      	ldrb	r3, [r7, #3]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	333b      	adds	r3, #59	; 0x3b
 8001844:	78ba      	ldrb	r2, [r7, #2]
 8001846:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001848:	78fb      	ldrb	r3, [r7, #3]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	212c      	movs	r1, #44	; 0x2c
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	333f      	adds	r3, #63	; 0x3f
 8001856:	787a      	ldrb	r2, [r7, #1]
 8001858:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800185a:	7c3b      	ldrb	r3, [r7, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d112      	bne.n	8001886 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	3342      	adds	r3, #66	; 0x42
 800186e:	2203      	movs	r2, #3
 8001870:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001872:	78fb      	ldrb	r3, [r7, #3]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	212c      	movs	r1, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	4413      	add	r3, r2
 800187e:	333d      	adds	r3, #61	; 0x3d
 8001880:	7f3a      	ldrb	r2, [r7, #28]
 8001882:	701a      	strb	r2, [r3, #0]
 8001884:	e008      	b.n	8001898 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	212c      	movs	r1, #44	; 0x2c
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	3342      	adds	r3, #66	; 0x42
 8001894:	2202      	movs	r2, #2
 8001896:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001898:	787b      	ldrb	r3, [r7, #1]
 800189a:	2b03      	cmp	r3, #3
 800189c:	f200 80c6 	bhi.w	8001a2c <HAL_HCD_HC_SubmitRequest+0x210>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018b9 	.word	0x080018b9
 80018ac:	08001a19 	.word	0x08001a19
 80018b0:	0800191d 	.word	0x0800191d
 80018b4:	0800199b 	.word	0x0800199b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018b8:	7c3b      	ldrb	r3, [r7, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	f040 80b8 	bne.w	8001a30 <HAL_HCD_HC_SubmitRequest+0x214>
 80018c0:	78bb      	ldrb	r3, [r7, #2]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80b4 	bne.w	8001a30 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018c8:	8b3b      	ldrh	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d108      	bne.n	80018e0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3355      	adds	r3, #85	; 0x55
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3355      	adds	r3, #85	; 0x55
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d109      	bne.n	8001908 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f4:	78fb      	ldrb	r3, [r7, #3]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	212c      	movs	r1, #44	; 0x2c
 80018fa:	fb01 f303 	mul.w	r3, r1, r3
 80018fe:	4413      	add	r3, r2
 8001900:	3342      	adds	r3, #66	; 0x42
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001906:	e093      	b.n	8001a30 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001908:	78fb      	ldrb	r3, [r7, #3]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	212c      	movs	r1, #44	; 0x2c
 800190e:	fb01 f303 	mul.w	r3, r1, r3
 8001912:	4413      	add	r3, r2
 8001914:	3342      	adds	r3, #66	; 0x42
 8001916:	2202      	movs	r2, #2
 8001918:	701a      	strb	r2, [r3, #0]
      break;
 800191a:	e089      	b.n	8001a30 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800191c:	78bb      	ldrb	r3, [r7, #2]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d11d      	bne.n	800195e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001922:	78fb      	ldrb	r3, [r7, #3]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	212c      	movs	r1, #44	; 0x2c
 8001928:	fb01 f303 	mul.w	r3, r1, r3
 800192c:	4413      	add	r3, r2
 800192e:	3355      	adds	r3, #85	; 0x55
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	212c      	movs	r1, #44	; 0x2c
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	4413      	add	r3, r2
 8001942:	3342      	adds	r3, #66	; 0x42
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001948:	e073      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	212c      	movs	r1, #44	; 0x2c
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	4413      	add	r3, r2
 8001956:	3342      	adds	r3, #66	; 0x42
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
      break;
 800195c:	e069      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800195e:	78fb      	ldrb	r3, [r7, #3]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	212c      	movs	r1, #44	; 0x2c
 8001964:	fb01 f303 	mul.w	r3, r1, r3
 8001968:	4413      	add	r3, r2
 800196a:	3354      	adds	r3, #84	; 0x54
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	212c      	movs	r1, #44	; 0x2c
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3342      	adds	r3, #66	; 0x42
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
      break;
 8001984:	e055      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	212c      	movs	r1, #44	; 0x2c
 800198c:	fb01 f303 	mul.w	r3, r1, r3
 8001990:	4413      	add	r3, r2
 8001992:	3342      	adds	r3, #66	; 0x42
 8001994:	2202      	movs	r2, #2
 8001996:	701a      	strb	r2, [r3, #0]
      break;
 8001998:	e04b      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800199a:	78bb      	ldrb	r3, [r7, #2]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d11d      	bne.n	80019dc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3355      	adds	r3, #85	; 0x55
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b4:	78fb      	ldrb	r3, [r7, #3]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3342      	adds	r3, #66	; 0x42
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019c6:	e034      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	212c      	movs	r1, #44	; 0x2c
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	3342      	adds	r3, #66	; 0x42
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
      break;
 80019da:	e02a      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019dc:	78fb      	ldrb	r3, [r7, #3]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	212c      	movs	r1, #44	; 0x2c
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	3354      	adds	r3, #84	; 0x54
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d109      	bne.n	8001a04 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3342      	adds	r3, #66	; 0x42
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
      break;
 8001a02:	e016      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3342      	adds	r3, #66	; 0x42
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e00c      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3342      	adds	r3, #66	; 0x42
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
      break;
 8001a2a:	e002      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a2c:	bf00      	nop
 8001a2e:	e000      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a30:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3344      	adds	r3, #68	; 0x44
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	8b3a      	ldrh	r2, [r7, #24]
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	202c      	movs	r0, #44	; 0x2c
 8001a4c:	fb00 f303 	mul.w	r3, r0, r3
 8001a50:	440b      	add	r3, r1
 8001a52:	334c      	adds	r3, #76	; 0x4c
 8001a54:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a56:	78fb      	ldrb	r3, [r7, #3]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	212c      	movs	r1, #44	; 0x2c
 8001a5c:	fb01 f303 	mul.w	r3, r1, r3
 8001a60:	4413      	add	r3, r2
 8001a62:	3360      	adds	r3, #96	; 0x60
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	212c      	movs	r1, #44	; 0x2c
 8001a6e:	fb01 f303 	mul.w	r3, r1, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	3350      	adds	r3, #80	; 0x50
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	212c      	movs	r1, #44	; 0x2c
 8001a80:	fb01 f303 	mul.w	r3, r1, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	3339      	adds	r3, #57	; 0x39
 8001a88:	78fa      	ldrb	r2, [r7, #3]
 8001a8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	212c      	movs	r1, #44	; 0x2c
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	3361      	adds	r3, #97	; 0x61
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	222c      	movs	r2, #44	; 0x2c
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	3338      	adds	r3, #56	; 0x38
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	18d1      	adds	r1, r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f006 f810 	bl	8007adc <USB_HC_StartXfer>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f005 fc9d 	bl	800741e <USB_GetMode>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	f040 80f6 	bne.w	8001cd8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fc01 	bl	80072f8 <USB_ReadInterrupts>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80ec 	beq.w	8001cd6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f005 fbf8 	bl	80072f8 <USB_ReadInterrupts>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b12:	d104      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f005 fbe8 	bl	80072f8 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b32:	d104      	bne.n	8001b3e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 fbd8 	bl	80072f8 <USB_ReadInterrupts>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b52:	d104      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b5c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 fbc8 	bl	80072f8 <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2202      	movs	r2, #2
 8001b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fbba 	bl	80072f8 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8e:	d11c      	bne.n	8001bca <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b98:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001baa:	2110      	movs	r1, #16
 8001bac:	6938      	ldr	r0, [r7, #16]
 8001bae:	f004 fb81 	bl	80062b4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb2:	6938      	ldr	r0, [r7, #16]
 8001bb4:	f004 fbb2 	bl	800631c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f005 fda4 	bl	800770c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f00b f86d 	bl	800cca4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 fb92 	bl	80072f8 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bde:	d102      	bne.n	8001be6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f001 f89e 	bl	8002d22 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f005 fb84 	bl	80072f8 <USB_ReadInterrupts>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d106      	bne.n	8001c08 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f00b f836 	bl	800cc6c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2208      	movs	r2, #8
 8001c06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fb73 	bl	80072f8 <USB_ReadInterrupts>
 8001c12:	4603      	mov	r3, r0
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b10      	cmp	r3, #16
 8001c1a:	d101      	bne.n	8001c20 <HAL_HCD_IRQHandler+0x158>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <HAL_HCD_IRQHandler+0x15a>
 8001c20:	2300      	movs	r3, #0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d012      	beq.n	8001c4c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699a      	ldr	r2, [r3, #24]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 0210 	bic.w	r2, r2, #16
 8001c34:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 ffa1 	bl	8002b7e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699a      	ldr	r2, [r3, #24]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0210 	orr.w	r2, r2, #16
 8001c4a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f005 fb51 	bl	80072f8 <USB_ReadInterrupts>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c60:	d13a      	bne.n	8001cd8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f006 f87a 	bl	8007d60 <USB_HC_ReadInterrupt>
 8001c6c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e025      	b.n	8001cc0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d018      	beq.n	8001cba <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	015a      	lsls	r2, r3, #5
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9e:	d106      	bne.n	8001cae <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8ab 	bl	8001e02 <HCD_HC_IN_IRQHandler>
 8001cac:	e005      	b.n	8001cba <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 fbf9 	bl	80024ac <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d3d4      	bcc.n	8001c74 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	e000      	b.n	8001cd8 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cd6:	bf00      	nop
    }
  }
}
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_HCD_Start+0x16>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e013      	b.n	8001d1c <HAL_HCD_Start+0x3e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	4618      	mov	r0, r3
 8001d04:	f005 fd66 	bl	80077d4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 f905 	bl	8005f1c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d101      	bne.n	8001d3a <HAL_HCD_Stop+0x16>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e00d      	b.n	8001d56 <HAL_HCD_Stop+0x32>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f006 f954 	bl	8007ff4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 fd08 	bl	8007780 <USB_ResetPort>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3360      	adds	r3, #96	; 0x60
 8001d94:	781b      	ldrb	r3, [r3, #0]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3350      	adds	r3, #80	; 0x50
 8001dbc:	681b      	ldr	r3, [r3, #0]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b082      	sub	sp, #8
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f005 fd4c 	bl	8007874 <USB_GetCurrentFrame>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f005 fd27 	bl	8007846 <USB_GetHostSpeed>
 8001df8:	4603      	mov	r3, r0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d11a      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2304      	movs	r3, #4
 8001e42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3361      	adds	r3, #97	; 0x61
 8001e52:	2206      	movs	r2, #6
 8001e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 ff8e 	bl	8007d82 <USB_HC_Halt>
 8001e66:	e0af      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7e:	d11b      	bne.n	8001eb8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	212c      	movs	r1, #44	; 0x2c
 8001e9a:	fb01 f303 	mul.w	r3, r1, r3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3361      	adds	r3, #97	; 0x61
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f005 ff66 	bl	8007d82 <USB_HC_Halt>
 8001eb6:	e087      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	d109      	bne.n	8001ee2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	2320      	movs	r3, #32
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	e072      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	015a      	lsls	r2, r3, #5
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4413      	add	r3, r2
 8001eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d11a      	bne.n	8001f2e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	461a      	mov	r2, r3
 8001f06:	2308      	movs	r3, #8
 8001f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	212c      	movs	r1, #44	; 0x2c
 8001f10:	fb01 f303 	mul.w	r3, r1, r3
 8001f14:	4413      	add	r3, r2
 8001f16:	3361      	adds	r3, #97	; 0x61
 8001f18:	2205      	movs	r2, #5
 8001f1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 ff2b 	bl	8007d82 <USB_HC_Halt>
 8001f2c:	e04c      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	015a      	lsls	r2, r3, #5
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4413      	add	r3, r2
 8001f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f44:	d11b      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f52:	461a      	mov	r2, r3
 8001f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f58:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	212c      	movs	r1, #44	; 0x2c
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3361      	adds	r3, #97	; 0x61
 8001f68:	2208      	movs	r2, #8
 8001f6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f005 ff03 	bl	8007d82 <USB_HC_Halt>
 8001f7c:	e024      	b.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d119      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3361      	adds	r3, #97	; 0x61
 8001fb4:	2206      	movs	r2, #6
 8001fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 fedd 	bl	8007d82 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fde:	d112      	bne.n	8002006 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f005 fec9 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	015a      	lsls	r2, r3, #5
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002002:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002004:	e24e      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	f040 80df 	bne.w	80021dc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	212c      	movs	r1, #44	; 0x2c
 800202c:	fb01 f303 	mul.w	r3, r1, r3
 8002030:	4413      	add	r3, r2
 8002032:	3348      	adds	r3, #72	; 0x48
 8002034:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	0159      	lsls	r1, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	440b      	add	r3, r1
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002048:	1ad2      	subs	r2, r2, r3
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	202c      	movs	r0, #44	; 0x2c
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	440b      	add	r3, r1
 8002056:	3350      	adds	r3, #80	; 0x50
 8002058:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3361      	adds	r3, #97	; 0x61
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	212c      	movs	r1, #44	; 0x2c
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	4413      	add	r3, r2
 8002078:	335c      	adds	r3, #92	; 0x5c
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2301      	movs	r3, #1
 800208e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	212c      	movs	r1, #44	; 0x2c
 8002096:	fb01 f303 	mul.w	r3, r1, r3
 800209a:	4413      	add	r3, r2
 800209c:	333f      	adds	r3, #63	; 0x3f
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	333f      	adds	r3, #63	; 0x3f
 80020b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d111      	bne.n	80020dc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	4611      	mov	r1, r2
 80020c2:	4618      	mov	r0, r3
 80020c4:	f005 fe5d 	bl	8007d82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d4:	461a      	mov	r2, r3
 80020d6:	2310      	movs	r3, #16
 80020d8:	6093      	str	r3, [r2, #8]
 80020da:	e03a      	b.n	8002152 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	212c      	movs	r1, #44	; 0x2c
 80020e2:	fb01 f303 	mul.w	r3, r1, r3
 80020e6:	4413      	add	r3, r2
 80020e8:	333f      	adds	r3, #63	; 0x3f
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d009      	beq.n	8002104 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	333f      	adds	r3, #63	; 0x3f
 80020fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002100:	2b01      	cmp	r3, #1
 8002102:	d126      	bne.n	8002152 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	0151      	lsls	r1, r2, #5
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	440a      	add	r2, r1
 800211a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002122:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3360      	adds	r3, #96	; 0x60
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b2d9      	uxtb	r1, r3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	202c      	movs	r0, #44	; 0x2c
 8002140:	fb00 f303 	mul.w	r3, r0, r3
 8002144:	4413      	add	r3, r2
 8002146:	3360      	adds	r3, #96	; 0x60
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f00a fdb7 	bl	800ccc0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d12b      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3348      	adds	r3, #72	; 0x48
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	202c      	movs	r0, #44	; 0x2c
 8002170:	fb00 f202 	mul.w	r2, r0, r2
 8002174:	440a      	add	r2, r1
 8002176:	3240      	adds	r2, #64	; 0x40
 8002178:	8812      	ldrh	r2, [r2, #0]
 800217a:	fbb3 f3f2 	udiv	r3, r3, r2
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 818e 	beq.w	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3354      	adds	r3, #84	; 0x54
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	f083 0301 	eor.w	r3, r3, #1
 800219c:	b2d8      	uxtb	r0, r3
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	212c      	movs	r1, #44	; 0x2c
 80021a4:	fb01 f303 	mul.w	r3, r1, r3
 80021a8:	4413      	add	r3, r2
 80021aa:	3354      	adds	r3, #84	; 0x54
 80021ac:	4602      	mov	r2, r0
 80021ae:	701a      	strb	r2, [r3, #0]
}
 80021b0:	e178      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	3354      	adds	r3, #84	; 0x54
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2d8      	uxtb	r0, r3
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3354      	adds	r3, #84	; 0x54
 80021d6:	4602      	mov	r2, r0
 80021d8:	701a      	strb	r2, [r3, #0]
}
 80021da:	e163      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	f040 80f6 	bne.w	80023e0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	3361      	adds	r3, #97	; 0x61
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d109      	bne.n	800221c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	212c      	movs	r1, #44	; 0x2c
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	3360      	adds	r3, #96	; 0x60
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	e0c9      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	212c      	movs	r1, #44	; 0x2c
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	4413      	add	r3, r2
 8002228:	3361      	adds	r3, #97	; 0x61
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d109      	bne.n	8002244 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	212c      	movs	r1, #44	; 0x2c
 8002236:	fb01 f303 	mul.w	r3, r1, r3
 800223a:	4413      	add	r3, r2
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	2205      	movs	r2, #5
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e0b5      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	212c      	movs	r1, #44	; 0x2c
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	4413      	add	r3, r2
 8002250:	3361      	adds	r3, #97	; 0x61
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b06      	cmp	r3, #6
 8002256:	d009      	beq.n	800226c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	3361      	adds	r3, #97	; 0x61
 8002266:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002268:	2b08      	cmp	r3, #8
 800226a:	d150      	bne.n	800230e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	335c      	adds	r3, #92	; 0x5c
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	fb00 f303 	mul.w	r3, r0, r3
 8002288:	440b      	add	r3, r1
 800228a:	335c      	adds	r3, #92	; 0x5c
 800228c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	212c      	movs	r1, #44	; 0x2c
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	335c      	adds	r3, #92	; 0x5c
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d912      	bls.n	80022c8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	3360      	adds	r3, #96	; 0x60
 80022c2:	2204      	movs	r2, #4
 80022c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022c6:	e073      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	212c      	movs	r1, #44	; 0x2c
 80022ce:	fb01 f303 	mul.w	r3, r1, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	3360      	adds	r3, #96	; 0x60
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	015a      	lsls	r2, r3, #5
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4413      	add	r3, r2
 8002302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002306:	461a      	mov	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800230c:	e050      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	212c      	movs	r1, #44	; 0x2c
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	4413      	add	r3, r2
 800231a:	3361      	adds	r3, #97	; 0x61
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d122      	bne.n	8002368 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	212c      	movs	r1, #44	; 0x2c
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800234a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002352:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	015a      	lsls	r2, r3, #5
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4413      	add	r3, r2
 800235c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e023      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	4413      	add	r3, r2
 8002374:	3361      	adds	r3, #97	; 0x61
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b07      	cmp	r3, #7
 800237a:	d119      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	212c      	movs	r1, #44	; 0x2c
 8002382:	fb01 f303 	mul.w	r3, r1, r3
 8002386:	4413      	add	r3, r2
 8002388:	335c      	adds	r3, #92	; 0x5c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	202c      	movs	r0, #44	; 0x2c
 8002394:	fb00 f303 	mul.w	r3, r0, r3
 8002398:	440b      	add	r3, r1
 800239a:	335c      	adds	r3, #92	; 0x5c
 800239c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3360      	adds	r3, #96	; 0x60
 80023ac:	2204      	movs	r2, #4
 80023ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	461a      	mov	r2, r3
 80023be:	2302      	movs	r3, #2
 80023c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	b2d9      	uxtb	r1, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	202c      	movs	r0, #44	; 0x2c
 80023cc:	fb00 f303 	mul.w	r3, r0, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3360      	adds	r3, #96	; 0x60
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f00a fc71 	bl	800ccc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023de:	e061      	b.n	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b10      	cmp	r3, #16
 80023f4:	d156      	bne.n	80024a4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	212c      	movs	r1, #44	; 0x2c
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	4413      	add	r3, r2
 8002402:	333f      	adds	r3, #63	; 0x3f
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d111      	bne.n	800242e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	212c      	movs	r1, #44	; 0x2c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4413      	add	r3, r2
 8002416:	335c      	adds	r3, #92	; 0x5c
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f005 fcab 	bl	8007d82 <USB_HC_Halt>
 800242c:	e031      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	212c      	movs	r1, #44	; 0x2c
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	4413      	add	r3, r2
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	333f      	adds	r3, #63	; 0x3f
 8002450:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002452:	2b02      	cmp	r3, #2
 8002454:	d11d      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	212c      	movs	r1, #44	; 0x2c
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	335c      	adds	r3, #92	; 0x5c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d110      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f005 fc78 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	2310      	movs	r3, #16
 80024a2:	6093      	str	r3, [r2, #8]
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d11a      	bne.n	8002512 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	2304      	movs	r3, #4
 80024ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	212c      	movs	r1, #44	; 0x2c
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	4413      	add	r3, r2
 80024fa:	3361      	adds	r3, #97	; 0x61
 80024fc:	2206      	movs	r2, #6
 80024fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fc39 	bl	8007d82 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002510:	e331      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	4413      	add	r3, r2
 800251a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b20      	cmp	r3, #32
 8002526:	d12e      	bne.n	8002586 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	2320      	movs	r3, #32
 8002538:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333d      	adds	r3, #61	; 0x3d
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 8313 	bne.w	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	212c      	movs	r1, #44	; 0x2c
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	333d      	adds	r3, #61	; 0x3d
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3360      	adds	r3, #96	; 0x60
 8002570:	2202      	movs	r2, #2
 8002572:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f005 fbff 	bl	8007d82 <USB_HC_Halt>
}
 8002584:	e2f7      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4413      	add	r3, r2
 800258e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	d112      	bne.n	80025c4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f005 fbe0 	bl	8007d82 <USB_HC_Halt>
}
 80025c2:	e2d8      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d140      	bne.n	800265c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	335c      	adds	r3, #92	; 0x5c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fe:	2b40      	cmp	r3, #64	; 0x40
 8002600:	d111      	bne.n	8002626 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333d      	adds	r3, #61	; 0x3d
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	2340      	movs	r3, #64	; 0x40
 8002624:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	461a      	mov	r2, r3
 8002634:	2301      	movs	r3, #1
 8002636:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	3361      	adds	r3, #97	; 0x61
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f005 fb94 	bl	8007d82 <USB_HC_Halt>
}
 800265a:	e28c      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d12c      	bne.n	80026cc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	212c      	movs	r1, #44	; 0x2c
 8002678:	fb01 f303 	mul.w	r3, r1, r3
 800267c:	4413      	add	r3, r2
 800267e:	3361      	adds	r3, #97	; 0x61
 8002680:	2204      	movs	r2, #4
 8002682:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	333d      	adds	r3, #61	; 0x3d
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	335c      	adds	r3, #92	; 0x5c
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	4611      	mov	r1, r2
 80026b2:	4618      	mov	r0, r3
 80026b4:	f005 fb65 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	461a      	mov	r2, r3
 80026c6:	2340      	movs	r3, #64	; 0x40
 80026c8:	6093      	str	r3, [r2, #8]
}
 80026ca:	e254      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d11a      	bne.n	8002718 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2308      	movs	r3, #8
 80026f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	3361      	adds	r3, #97	; 0x61
 8002702:	2205      	movs	r2, #5
 8002704:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f005 fb36 	bl	8007d82 <USB_HC_Halt>
}
 8002716:	e22e      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b10      	cmp	r3, #16
 800272c:	d140      	bne.n	80027b0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	335c      	adds	r3, #92	; 0x5c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3361      	adds	r3, #97	; 0x61
 800274e:	2203      	movs	r2, #3
 8002750:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	333d      	adds	r3, #61	; 0x3d
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d112      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	212c      	movs	r1, #44	; 0x2c
 800276c:	fb01 f303 	mul.w	r3, r1, r3
 8002770:	4413      	add	r3, r2
 8002772:	333c      	adds	r3, #60	; 0x3c
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d108      	bne.n	800278c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	333d      	adds	r3, #61	; 0x3d
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f005 faf3 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	015a      	lsls	r2, r3, #5
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a8:	461a      	mov	r2, r3
 80027aa:	2310      	movs	r3, #16
 80027ac:	6093      	str	r3, [r2, #8]
}
 80027ae:	e1e2      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d164      	bne.n	8002890 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d111      	bne.n	80027f2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3361      	adds	r3, #97	; 0x61
 80027dc:	2206      	movs	r2, #6
 80027de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 fac9 	bl	8007d82 <USB_HC_Halt>
 80027f0:	e044      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	335c      	adds	r3, #92	; 0x5c
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	202c      	movs	r0, #44	; 0x2c
 800280a:	fb00 f303 	mul.w	r3, r0, r3
 800280e:	440b      	add	r3, r1
 8002810:	335c      	adds	r3, #92	; 0x5c
 8002812:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	335c      	adds	r3, #92	; 0x5c
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d920      	bls.n	800286a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	335c      	adds	r3, #92	; 0x5c
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	2204      	movs	r2, #4
 800284a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	b2d9      	uxtb	r1, r3
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	202c      	movs	r0, #44	; 0x2c
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	4413      	add	r3, r2
 800285c:	3360      	adds	r3, #96	; 0x60
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f00a fa2c 	bl	800ccc0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002868:	e008      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	212c      	movs	r1, #44	; 0x2c
 8002870:	fb01 f303 	mul.w	r3, r1, r3
 8002874:	4413      	add	r3, r2
 8002876:	3360      	adds	r3, #96	; 0x60
 8002878:	2202      	movs	r2, #2
 800287a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	6093      	str	r3, [r2, #8]
}
 800288e:	e172      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a6:	d11b      	bne.n	80028e0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3361      	adds	r3, #97	; 0x61
 80028b6:	2208      	movs	r2, #8
 80028b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f005 fa5c 	bl	8007d82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028dc:	6093      	str	r3, [r2, #8]
}
 80028de:	e14a      	b.n	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	f040 813f 	bne.w	8002b76 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3361      	adds	r3, #97	; 0x61
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d17d      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	3360      	adds	r3, #96	; 0x60
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	212c      	movs	r1, #44	; 0x2c
 8002924:	fb01 f303 	mul.w	r3, r1, r3
 8002928:	4413      	add	r3, r2
 800292a:	333f      	adds	r3, #63	; 0x3f
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d00a      	beq.n	8002948 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	333f      	adds	r3, #63	; 0x3f
 8002940:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002942:	2b03      	cmp	r3, #3
 8002944:	f040 8100 	bne.w	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	212c      	movs	r1, #44	; 0x2c
 8002956:	fb01 f303 	mul.w	r3, r1, r3
 800295a:	4413      	add	r3, r2
 800295c:	3355      	adds	r3, #85	; 0x55
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	f083 0301 	eor.w	r3, r3, #1
 8002964:	b2d8      	uxtb	r0, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3355      	adds	r3, #85	; 0x55
 8002974:	4602      	mov	r2, r0
 8002976:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	2b01      	cmp	r3, #1
 800297e:	f040 80e3 	bne.w	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	334c      	adds	r3, #76	; 0x4c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80d8 	beq.w	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	334c      	adds	r3, #76	; 0x4c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	202c      	movs	r0, #44	; 0x2c
 80029ae:	fb00 f202 	mul.w	r2, r0, r2
 80029b2:	440a      	add	r2, r1
 80029b4:	3240      	adds	r2, #64	; 0x40
 80029b6:	8812      	ldrh	r2, [r2, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	3b01      	subs	r3, #1
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	202c      	movs	r0, #44	; 0x2c
 80029c2:	fb00 f202 	mul.w	r2, r0, r2
 80029c6:	440a      	add	r2, r1
 80029c8:	3240      	adds	r2, #64	; 0x40
 80029ca:	8812      	ldrh	r2, [r2, #0]
 80029cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80b5 	beq.w	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3355      	adds	r3, #85	; 0x55
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2d8      	uxtb	r0, r3
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3355      	adds	r3, #85	; 0x55
 8002a02:	4602      	mov	r2, r0
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e09f      	b.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d109      	bne.n	8002a30 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3360      	adds	r3, #96	; 0x60
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e08b      	b.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3361      	adds	r3, #97	; 0x61
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d109      	bne.n	8002a58 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	212c      	movs	r1, #44	; 0x2c
 8002a4a:	fb01 f303 	mul.w	r3, r1, r3
 8002a4e:	4413      	add	r3, r2
 8002a50:	3360      	adds	r3, #96	; 0x60
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e077      	b.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b05      	cmp	r3, #5
 8002a6a:	d109      	bne.n	8002a80 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3360      	adds	r3, #96	; 0x60
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e063      	b.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3361      	adds	r3, #97	; 0x61
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b06      	cmp	r3, #6
 8002a92:	d009      	beq.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3361      	adds	r3, #97	; 0x61
 8002aa2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d14f      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	335c      	adds	r3, #92	; 0x5c
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	202c      	movs	r0, #44	; 0x2c
 8002ac0:	fb00 f303 	mul.w	r3, r0, r3
 8002ac4:	440b      	add	r3, r1
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	335c      	adds	r3, #92	; 0x5c
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d912      	bls.n	8002b04 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	335c      	adds	r3, #92	; 0x5c
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3360      	adds	r3, #96	; 0x60
 8002afe:	2204      	movs	r2, #4
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e021      	b.n	8002b48 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3360      	adds	r3, #96	; 0x60
 8002b12:	2202      	movs	r2, #2
 8002b14:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b34:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	461a      	mov	r2, r3
 8002b56:	2302      	movs	r3, #2
 8002b58:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	b2d9      	uxtb	r1, r3
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	202c      	movs	r0, #44	; 0x2c
 8002b64:	fb00 f303 	mul.w	r3, r0, r3
 8002b68:	4413      	add	r3, r2
 8002b6a:	3360      	adds	r3, #96	; 0x60
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f00a f8a5 	bl	800ccc0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b08a      	sub	sp, #40	; 0x28
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d004      	beq.n	8002bc4 <HCD_RXQLVL_IRQHandler+0x46>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	f000 80a9 	beq.w	8002d14 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bc2:	e0aa      	b.n	8002d1a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80a6 	beq.w	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3344      	adds	r3, #68	; 0x44
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 809b 	beq.w	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3350      	adds	r3, #80	; 0x50
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	441a      	add	r2, r3
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	202c      	movs	r0, #44	; 0x2c
 8002bfc:	fb00 f303 	mul.w	r3, r0, r3
 8002c00:	440b      	add	r3, r1
 8002c02:	334c      	adds	r3, #76	; 0x4c
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d87a      	bhi.n	8002d00 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3344      	adds	r3, #68	; 0x44
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	b292      	uxth	r2, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f004 f9d4 	bl	8006fd0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	212c      	movs	r1, #44	; 0x2c
 8002c2e:	fb01 f303 	mul.w	r3, r1, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	3344      	adds	r3, #68	; 0x44
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	441a      	add	r2, r3
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	202c      	movs	r0, #44	; 0x2c
 8002c42:	fb00 f303 	mul.w	r3, r0, r3
 8002c46:	440b      	add	r3, r1
 8002c48:	3344      	adds	r3, #68	; 0x44
 8002c4a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	212c      	movs	r1, #44	; 0x2c
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	4413      	add	r3, r2
 8002c58:	3350      	adds	r3, #80	; 0x50
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	441a      	add	r2, r3
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	202c      	movs	r0, #44	; 0x2c
 8002c66:	fb00 f303 	mul.w	r3, r0, r3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3350      	adds	r3, #80	; 0x50
 8002c6e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	0cdb      	lsrs	r3, r3, #19
 8002c80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c84:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3340      	adds	r3, #64	; 0x40
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d13c      	bne.n	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d039      	beq.n	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	015a      	lsls	r2, r3, #5
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	4413      	add	r3, r2
 8002cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3354      	adds	r3, #84	; 0x54
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3354      	adds	r3, #84	; 0x54
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	701a      	strb	r2, [r3, #0]
      break;
 8002cfe:	e00b      	b.n	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3360      	adds	r3, #96	; 0x60
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
      break;
 8002d12:	e001      	b.n	8002d18 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d18:	bf00      	nop
  }
}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d4e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d10b      	bne.n	8002d72 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d102      	bne.n	8002d6a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f009 ff8f 	bl	800cc88 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f043 0302 	orr.w	r3, r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d132      	bne.n	8002de2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0304 	and.w	r3, r3, #4
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d126      	bne.n	8002ddc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d113      	bne.n	8002dbe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da0:	d106      	bne.n	8002db0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2102      	movs	r1, #2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 fcaf 	bl	800770c <USB_InitFSLSPClkSel>
 8002dae:	e011      	b.n	8002dd4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2101      	movs	r1, #1
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 fca8 	bl	800770c <USB_InitFSLSPClkSel>
 8002dbc:	e00a      	b.n	8002dd4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dd2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f009 ff81 	bl	800ccdc <HAL_HCD_PortEnabled_Callback>
 8002dda:	e002      	b.n	8002de2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f009 ff8b 	bl	800ccf8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d103      	bne.n	8002df4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e0a:	b08f      	sub	sp, #60	; 0x3c
 8002e0c:	af0a      	add	r7, sp, #40	; 0x28
 8002e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e116      	b.n	8003048 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d106      	bne.n	8002e3a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f009 faef 	bl	800c418 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d102      	bne.n	8002e54 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 f870 	bl	8005f3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	687e      	ldr	r6, [r7, #4]
 8002e66:	466d      	mov	r5, sp
 8002e68:	f106 0410 	add.w	r4, r6, #16
 8002e6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e74:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e78:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e7c:	1d33      	adds	r3, r6, #4
 8002e7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	f002 ff47 	bl	8005d14 <USB_CoreInit>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0d7      	b.n	8003048 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f003 f85e 	bl	8005f60 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	73fb      	strb	r3, [r7, #15]
 8002ea8:	e04a      	b.n	8002f40 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333d      	adds	r3, #61	; 0x3d
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	333c      	adds	r3, #60	; 0x3c
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	b298      	uxth	r0, r3
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3344      	adds	r3, #68	; 0x44
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eea:	7bfa      	ldrb	r2, [r7, #15]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3340      	adds	r3, #64	; 0x40
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3348      	adds	r3, #72	; 0x48
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	334c      	adds	r3, #76	; 0x4c
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3354      	adds	r3, #84	; 0x54
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3af      	bcc.n	8002eaa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e044      	b.n	8002fda <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d3b5      	bcc.n	8002f50 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	687e      	ldr	r6, [r7, #4]
 8002fec:	466d      	mov	r5, sp
 8002fee:	f106 0410 	add.w	r4, r6, #16
 8002ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ff6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ffa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ffe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003002:	1d33      	adds	r3, r6, #4
 8003004:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003006:	6838      	ldr	r0, [r7, #0]
 8003008:	f002 fff6 	bl	8005ff8 <USB_DevInit>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2202      	movs	r2, #2
 8003016:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e014      	b.n	8003048 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f001 f974 	bl	8004324 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f004 f938 	bl	80072b6 <USB_DevDisconnect>

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003050 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_PCD_Start+0x1c>
 8003068:	2302      	movs	r3, #2
 800306a:	e020      	b.n	80030ae <HAL_PCD_Start+0x5e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003078:	2b01      	cmp	r3, #1
 800307a:	d109      	bne.n	8003090 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003080:	2b01      	cmp	r3, #1
 8003082:	d005      	beq.n	8003090 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003088:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f002 ff41 	bl	8005f1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f004 f8e8 	bl	8007274 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030b6:	b590      	push	{r4, r7, lr}
 80030b8:	b08d      	sub	sp, #52	; 0x34
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f004 f9a6 	bl	800741e <USB_GetMode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f040 84b7 	bne.w	8003a48 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f004 f90a 	bl	80072f8 <USB_ReadInterrupts>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 84ad 	beq.w	8003a46 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	0a1b      	lsrs	r3, r3, #8
 80030f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 f8f7 	bl	80072f8 <USB_ReadInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b02      	cmp	r3, #2
 8003112:	d107      	bne.n	8003124 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f002 0202 	and.w	r2, r2, #2
 8003122:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f004 f8e5 	bl	80072f8 <USB_ReadInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b10      	cmp	r3, #16
 8003136:	d161      	bne.n	80031fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f003 020f 	and.w	r2, r3, #15
 8003154:	4613      	mov	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	4413      	add	r3, r2
 8003164:	3304      	adds	r3, #4
 8003166:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	0c5b      	lsrs	r3, r3, #17
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	2b02      	cmp	r3, #2
 8003172:	d124      	bne.n	80031be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d035      	beq.n	80031ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800318a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800318e:	b29b      	uxth	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	6a38      	ldr	r0, [r7, #32]
 8003194:	f003 ff1c 	bl	8006fd0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	691a      	ldr	r2, [r3, #16]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031a4:	441a      	add	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	6a1a      	ldr	r2, [r3, #32]
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b6:	441a      	add	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	621a      	str	r2, [r3, #32]
 80031bc:	e016      	b.n	80031ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	0c5b      	lsrs	r3, r3, #17
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2b06      	cmp	r3, #6
 80031c8:	d110      	bne.n	80031ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031d0:	2208      	movs	r2, #8
 80031d2:	4619      	mov	r1, r3
 80031d4:	6a38      	ldr	r0, [r7, #32]
 80031d6:	f003 fefb 	bl	8006fd0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6a1a      	ldr	r2, [r3, #32]
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e6:	441a      	add	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699a      	ldr	r2, [r3, #24]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0210 	orr.w	r2, r2, #16
 80031fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f004 f879 	bl	80072f8 <USB_ReadInterrupts>
 8003206:	4603      	mov	r3, r0
 8003208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003210:	f040 80a7 	bne.w	8003362 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f004 f87e 	bl	800731e <USB_ReadDevAllOutEpInterrupt>
 8003222:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003224:	e099      	b.n	800335a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 808e 	beq.w	800334e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f004 f8a2 	bl	8007386 <USB_ReadDevOutEPInterrupt>
 8003242:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800324e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	2301      	movs	r3, #1
 800325e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fed8 	bl	8004018 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00c      	beq.n	800328c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2308      	movs	r3, #8
 8003282:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 ffae 	bl	80041e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	d008      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2310      	movs	r3, #16
 80032a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d030      	beq.n	8003314 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ba:	2b80      	cmp	r3, #128	; 0x80
 80032bc:	d109      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d4:	4613      	mov	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	78db      	ldrb	r3, [r3, #3]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2200      	movs	r2, #0
 80032f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f009 f9a7 	bl	800c650 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	2302      	movs	r3, #2
 8003312:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0320 	and.w	r3, r3, #32
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332a:	461a      	mov	r2, r3
 800332c:	2320      	movs	r3, #32
 800332e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800334c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	3301      	adds	r3, #1
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f af62 	bne.w	8003226 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f003 ffc6 	bl	80072f8 <USB_ReadInterrupts>
 800336c:	4603      	mov	r3, r0
 800336e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003372:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003376:	f040 80db 	bne.w	8003530 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 ffe7 	bl	8007352 <USB_ReadDevAllInEpInterrupt>
 8003384:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800338a:	e0cd      	b.n	8003528 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 80c2 	beq.w	800351c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	b2d2      	uxtb	r2, r2
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 f80d 	bl	80073c2 <USB_ReadDevInEPInterrupt>
 80033a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d057      	beq.n	8003464 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69f9      	ldr	r1, [r7, #28]
 80033d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d4:	4013      	ands	r3, r2
 80033d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	461a      	mov	r2, r3
 80033e6:	2301      	movs	r3, #1
 80033e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d132      	bne.n	8003458 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334c      	adds	r3, #76	; 0x4c
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4403      	add	r3, r0
 8003412:	3348      	adds	r3, #72	; 0x48
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4419      	add	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4403      	add	r3, r0
 8003426:	334c      	adds	r3, #76	; 0x4c
 8003428:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d113      	bne.n	8003458 <HAL_PCD_IRQHandler+0x3a2>
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	3354      	adds	r3, #84	; 0x54
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d108      	bne.n	8003458 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003450:	461a      	mov	r2, r3
 8003452:	2101      	movs	r1, #1
 8003454:	f004 f814 	bl	8007480 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f009 f871 	bl	800c546 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347a:	461a      	mov	r2, r3
 800347c:	2308      	movs	r3, #8
 800347e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f003 0310 	and.w	r3, r3, #16
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	4413      	add	r3, r2
 8003492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003496:	461a      	mov	r2, r3
 8003498:	2310      	movs	r3, #16
 800349a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	461a      	mov	r2, r3
 80034b4:	2340      	movs	r3, #64	; 0x40
 80034b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d023      	beq.n	800350a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80034c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c4:	6a38      	ldr	r0, [r7, #32]
 80034c6:	f002 fef5 	bl	80062b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80034ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	3338      	adds	r3, #56	; 0x38
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	78db      	ldrb	r3, [r3, #3]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d108      	bne.n	80034f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2200      	movs	r2, #0
 80034ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	4619      	mov	r1, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f009 f8be 	bl	800c674 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	461a      	mov	r2, r3
 8003506:	2302      	movs	r3, #2
 8003508:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fcf0 	bl	8003efc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	f47f af2e 	bne.w	800338c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fedf 	bl	80072f8 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003544:	d122      	bne.n	800358c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	69fa      	ldr	r2, [r7, #28]
 8003550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003560:	2b01      	cmp	r3, #1
 8003562:	d108      	bne.n	8003576 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800356c:	2100      	movs	r1, #0
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f009 fa26 	bl	800c9c0 <HAL_PCDEx_LPM_Callback>
 8003574:	e002      	b.n	800357c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f009 f85c 	bl	800c634 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800358a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f003 feb1 	bl	80072f8 <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a0:	d112      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f009 f818 	bl	800c5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035c6:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 fe93 	bl	80072f8 <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035dc:	d121      	bne.n	8003622 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80035ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003612:	2101      	movs	r1, #1
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f009 f9d3 	bl	800c9c0 <HAL_PCDEx_LPM_Callback>
 800361a:	e002      	b.n	8003622 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f008 ffe3 	bl	800c5e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fe66 	bl	80072f8 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003636:	f040 80b7 	bne.w	80037a8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003648:	f023 0301 	bic.w	r3, r3, #1
 800364c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2110      	movs	r1, #16
 8003654:	4618      	mov	r0, r3
 8003656:	f002 fe2d 	bl	80062b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365a:	2300      	movs	r3, #0
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800365e:	e046      	b.n	80036ee <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	461a      	mov	r2, r3
 800366e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003672:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003684:	0151      	lsls	r1, r2, #5
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	440a      	add	r2, r1
 800368a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800368e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003692:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b8:	0151      	lsls	r1, r2, #5
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	440a      	add	r2, r1
 80036be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	3301      	adds	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3b3      	bcc.n	8003660 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800370a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003724:	f043 030b 	orr.w	r3, r3, #11
 8003728:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800373a:	f043 030b 	orr.w	r3, r3, #11
 800373e:	6453      	str	r3, [r2, #68]	; 0x44
 8003740:	e015      	b.n	800376e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003754:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003758:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 030b 	orr.w	r3, r3, #11
 800376c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003780:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003792:	461a      	mov	r2, r3
 8003794:	f003 fe74 	bl	8007480 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80037a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fda3 	bl	80072f8 <USB_ReadInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037bc:	d124      	bne.n	8003808 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f003 fe39 	bl	800743a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 fdee 	bl	80063ae <USB_GetDevSpeed>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681c      	ldr	r4, [r3, #0]
 80037de:	f000 feab 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 80037e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	4620      	mov	r0, r4
 80037ee:	f002 faf3 	bl	8005dd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f008 fecf 	bl	800c596 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695a      	ldr	r2, [r3, #20]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003806:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fd73 	bl	80072f8 <USB_ReadInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f003 0308 	and.w	r3, r3, #8
 8003818:	2b08      	cmp	r3, #8
 800381a:	d10a      	bne.n	8003832 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f008 feac 	bl	800c57a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 0208 	and.w	r2, r2, #8
 8003830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fd5e 	bl	80072f8 <USB_ReadInterrupts>
 800383c:	4603      	mov	r3, r0
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d122      	bne.n	800388c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003852:	2301      	movs	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e014      	b.n	8003882 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385c:	4613      	mov	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d105      	bne.n	800387c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4619      	mov	r1, r3
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fb0f 	bl	8003e9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	3301      	adds	r3, #1
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	429a      	cmp	r2, r3
 800388a:	d3e5      	bcc.n	8003858 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fd31 	bl	80072f8 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a0:	d13b      	bne.n	800391a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	e02b      	b.n	8003900 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3340      	adds	r3, #64	; 0x40
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d115      	bne.n	80038fa <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80038ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da12      	bge.n	80038fa <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	333f      	adds	r3, #63	; 0x3f
 80038e4:	2201      	movs	r2, #1
 80038e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fad0 	bl	8003e9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	3301      	adds	r3, #1
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	429a      	cmp	r2, r3
 8003908:	d3ce      	bcc.n	80038a8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fcea 	bl	80072f8 <USB_ReadInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800392e:	d155      	bne.n	80039dc <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	e045      	b.n	80039c2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d12e      	bne.n	80039bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800395e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003960:	2b00      	cmp	r3, #0
 8003962:	da2b      	bge.n	80039bc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003970:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003974:	429a      	cmp	r2, r3
 8003976:	d121      	bne.n	80039bc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800398a:	2201      	movs	r2, #1
 800398c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b8:	6053      	str	r3, [r2, #4]
            break;
 80039ba:	e007      	b.n	80039cc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	3301      	adds	r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d3b4      	bcc.n	8003936 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f003 fc89 	bl	80072f8 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d10a      	bne.n	8003a08 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f008 fe50 	bl	800c698 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695a      	ldr	r2, [r3, #20]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f003 fc73 	bl	80072f8 <USB_ReadInterrupts>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d115      	bne.n	8003a48 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d002      	beq.n	8003a34 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f008 fe40 	bl	800c6b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
 8003a44:	e000      	b.n	8003a48 <HAL_PCD_IRQHandler+0x992>
      return;
 8003a46:	bf00      	nop
    }
  }
}
 8003a48:	3734      	adds	r7, #52	; 0x34
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd90      	pop	{r4, r7, pc}

08003a4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d101      	bne.n	8003a68 <HAL_PCD_SetAddress+0x1a>
 8003a64:	2302      	movs	r3, #2
 8003a66:	e013      	b.n	8003a90 <HAL_PCD_SetAddress+0x42>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f003 fbd1 	bl	8007228 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	70fb      	strb	r3, [r7, #3]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	803b      	strh	r3, [r7, #0]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	da0f      	bge.n	8003ade <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	3338      	adds	r3, #56	; 0x38
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	705a      	strb	r2, [r3, #1]
 8003adc:	e00f      	b.n	8003afe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	f003 020f 	and.w	r2, r3, #15
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	3304      	adds	r3, #4
 8003af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b0a:	883a      	ldrh	r2, [r7, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	78ba      	ldrb	r2, [r7, #2]
 8003b14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d102      	bne.n	8003b34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_PCD_EP_Open+0xaa>
 8003b3e:	2302      	movs	r3, #2
 8003b40:	e00e      	b.n	8003b60 <HAL_PCD_EP_Open+0xc8>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f002 fc51 	bl	80063f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	da0f      	bge.n	8003b9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	3338      	adds	r3, #56	; 0x38
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4413      	add	r3, r2
 8003b90:	3304      	adds	r3, #4
 8003b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	705a      	strb	r2, [r3, #1]
 8003b9a:	e00f      	b.n	8003bbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d101      	bne.n	8003bd6 <HAL_PCD_EP_Close+0x6e>
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	e00e      	b.n	8003bf4 <HAL_PCD_EP_Close+0x8c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 fc8f 	bl	8006508 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	3304      	adds	r3, #4
 8003c24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2200      	movs	r2, #0
 8003c36:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3e:	7afb      	ldrb	r3, [r7, #11]
 8003c40:	f003 030f 	and.w	r3, r3, #15
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d102      	bne.n	8003c58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6979      	ldr	r1, [r7, #20]
 8003c70:	f002 ff6e 	bl	8006b50 <USB_EP0StartXfer>
 8003c74:	e008      	b.n	8003c88 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6979      	ldr	r1, [r7, #20]
 8003c84:	f002 fd1c 	bl	80066c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca2:	7afb      	ldrb	r3, [r7, #11]
 8003ca4:	f003 020f 	and.w	r2, r3, #15
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	3338      	adds	r3, #56	; 0x38
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d102      	bne.n	8003cec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cec:	7afb      	ldrb	r3, [r7, #11]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	f002 ff24 	bl	8006b50 <USB_EP0StartXfer>
 8003d08:	e008      	b.n	8003d1c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	f002 fcd2 	bl	80066c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d901      	bls.n	8003d44 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e050      	b.n	8003de6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da0f      	bge.n	8003d6c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 020f 	and.w	r2, r3, #15
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	3338      	adds	r3, #56	; 0x38
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	705a      	strb	r2, [r3, #1]
 8003d6a:	e00d      	b.n	8003d88 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d6c:	78fa      	ldrb	r2, [r7, #3]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_EP_SetStall+0x82>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e01e      	b.n	8003de6 <HAL_PCD_EP_SetStall+0xc0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 f962 	bl	8007080 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	b2d9      	uxtb	r1, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	f003 fb52 	bl	8007480 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	460b      	mov	r3, r1
 8003df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dfa:	78fb      	ldrb	r3, [r7, #3]
 8003dfc:	f003 020f 	and.w	r2, r3, #15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d901      	bls.n	8003e0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e042      	b.n	8003e92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	da0f      	bge.n	8003e34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 020f 	and.w	r2, r3, #15
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	4413      	add	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	3338      	adds	r3, #56	; 0x38
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4413      	add	r3, r2
 8003e28:	3304      	adds	r3, #4
 8003e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	705a      	strb	r2, [r3, #1]
 8003e32:	e00f      	b.n	8003e54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_PCD_EP_ClrStall+0x86>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e00e      	b.n	8003e92 <HAL_PCD_EP_ClrStall+0xa4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68f9      	ldr	r1, [r7, #12]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f003 f96a 	bl	800715c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0c      	bge.n	8003ec8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3338      	adds	r3, #56	; 0x38
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00c      	b.n	8003ee2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	f003 020f 	and.w	r2, r3, #15
 8003ece:	4613      	mov	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	3304      	adds	r3, #4
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68f9      	ldr	r1, [r7, #12]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 ff89 	bl	8006e00 <USB_EPStopXfer>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	; 0x28
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	3338      	adds	r3, #56	; 0x38
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	3304      	adds	r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d901      	bls.n	8003f34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e06c      	b.n	800400e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d902      	bls.n	8003f50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3303      	adds	r3, #3
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f58:	e02b      	b.n	8003fb2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d902      	bls.n	8003f76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3303      	adds	r3, #3
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6919      	ldr	r1, [r3, #16]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4603      	mov	r3, r0
 8003f94:	6978      	ldr	r0, [r7, #20]
 8003f96:	f002 ffdd 	bl	8006f54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	441a      	add	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1a      	ldr	r2, [r3, #32]
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	441a      	add	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d809      	bhi.n	8003fdc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d203      	bcs.n	8003fdc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1be      	bne.n	8003f5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d811      	bhi.n	800400c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	2201      	movs	r2, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	43db      	mvns	r3, r3
 8004002:	6939      	ldr	r1, [r7, #16]
 8004004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004008:	4013      	ands	r3, r2
 800400a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3720      	adds	r7, #32
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
	...

08004018 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	333c      	adds	r3, #60	; 0x3c
 8004030:	3304      	adds	r3, #4
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d17b      	bne.n	8004146 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d015      	beq.n	8004084 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4a61      	ldr	r2, [pc, #388]	; (80041e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	f240 80b9 	bls.w	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004068:	2b00      	cmp	r3, #0
 800406a:	f000 80b3 	beq.w	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004080:	6093      	str	r3, [r2, #8]
 8004082:	e0a7      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b00      	cmp	r3, #0
 800408c:	d009      	beq.n	80040a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	015a      	lsls	r2, r3, #5
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	4413      	add	r3, r2
 8004096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409a:	461a      	mov	r2, r3
 800409c:	2320      	movs	r3, #32
 800409e:	6093      	str	r3, [r2, #8]
 80040a0:	e098      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f040 8093 	bne.w	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	4a4b      	ldr	r2, [pc, #300]	; (80041e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d90f      	bls.n	80040d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	461a      	mov	r2, r3
 80040ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	e07e      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	0159      	lsls	r1, r3, #5
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	440b      	add	r3, r1
 80040f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004102:	1ad2      	subs	r2, r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d114      	bne.n	8004138 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d109      	bne.n	800412a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004120:	461a      	mov	r2, r3
 8004122:	2101      	movs	r1, #1
 8004124:	f003 f9ac 	bl	8007480 <USB_EP0_OutStart>
 8004128:	e006      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	441a      	add	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	b2db      	uxtb	r3, r3
 800413c:	4619      	mov	r1, r3
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f008 f9e6 	bl	800c510 <HAL_PCD_DataOutStageCallback>
 8004144:	e046      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d124      	bne.n	8004198 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	461a      	mov	r2, r3
 8004166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	e032      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004184:	461a      	mov	r2, r3
 8004186:	2320      	movs	r3, #32
 8004188:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f008 f9bd 	bl	800c510 <HAL_PCD_DataOutStageCallback>
 8004196:	e01d      	b.n	80041d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d114      	bne.n	80041c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d108      	bne.n	80041c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041c0:	461a      	mov	r2, r3
 80041c2:	2100      	movs	r1, #0
 80041c4:	f003 f95c 	bl	8007480 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f008 f99e 	bl	800c510 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	4f54300a 	.word	0x4f54300a
 80041e4:	4f54310a 	.word	0x4f54310a

080041e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	333c      	adds	r3, #60	; 0x3c
 8004200:	3304      	adds	r3, #4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a15      	ldr	r2, [pc, #84]	; (8004270 <PCD_EP_OutSetupPacket_int+0x88>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d90e      	bls.n	800423c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004234:	461a      	mov	r2, r3
 8004236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f008 f955 	bl	800c4ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <PCD_EP_OutSetupPacket_int+0x88>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d90c      	bls.n	8004264 <PCD_EP_OutSetupPacket_int+0x7c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d108      	bne.n	8004264 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800425c:	461a      	mov	r2, r3
 800425e:	2101      	movs	r1, #1
 8004260:	f003 f90e 	bl	8007480 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	4f54300a 	.word	0x4f54300a

08004274 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
 8004280:	4613      	mov	r3, r2
 8004282:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004292:	883b      	ldrh	r3, [r7, #0]
 8004294:	0419      	lsls	r1, r3, #16
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	430a      	orrs	r2, r1
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
 80042a0:	e028      	b.n	80042f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4413      	add	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	73fb      	strb	r3, [r7, #15]
 80042b4:	e00d      	b.n	80042d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	3340      	adds	r3, #64	; 0x40
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	3301      	adds	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
 80042d2:	7bfa      	ldrb	r2, [r7, #15]
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d3ec      	bcc.n	80042b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80042dc:	883b      	ldrh	r3, [r7, #0]
 80042de:	0418      	lsls	r0, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6819      	ldr	r1, [r3, #0]
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4302      	orrs	r2, r0
 80042ec:	3340      	adds	r3, #64	; 0x40
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	887a      	ldrh	r2, [r7, #2]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	f043 0303 	orr.w	r3, r3, #3
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0cc      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004380:	4b68      	ldr	r3, [pc, #416]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d90c      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b65      	ldr	r3, [pc, #404]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b63      	ldr	r3, [pc, #396]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0b8      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d005      	beq.n	80043cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043c0:	4b59      	ldr	r3, [pc, #356]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4a58      	ldr	r2, [pc, #352]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043d8:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e4:	4b50      	ldr	r3, [pc, #320]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	494d      	ldr	r1, [pc, #308]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d044      	beq.n	800448c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d107      	bne.n	800441a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800440a:	4b47      	ldr	r3, [pc, #284]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d119      	bne.n	800444a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e07f      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d003      	beq.n	800442a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004426:	2b03      	cmp	r3, #3
 8004428:	d107      	bne.n	800443a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442a:	4b3f      	ldr	r3, [pc, #252]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d109      	bne.n	800444a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e06f      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e067      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444a:	4b37      	ldr	r3, [pc, #220]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	4934      	ldr	r1, [pc, #208]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800445c:	f7fc fd90 	bl	8000f80 <HAL_GetTick>
 8004460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	e00a      	b.n	800447a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004464:	f7fc fd8c 	bl	8000f80 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e04f      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	4b2b      	ldr	r3, [pc, #172]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 020c 	and.w	r2, r3, #12
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	429a      	cmp	r2, r3
 800448a:	d1eb      	bne.n	8004464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 030f 	and.w	r3, r3, #15
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d20c      	bcs.n	80044b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	683a      	ldr	r2, [r7, #0]
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <HAL_RCC_ClockConfig+0x1b8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e032      	b.n	800451a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d008      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	4916      	ldr	r1, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	490e      	ldr	r1, [pc, #56]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044f2:	f000 fb7f 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 80044f6:	4602      	mov	r2, r0
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	490a      	ldr	r1, [pc, #40]	; (800452c <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	5ccb      	ldrb	r3, [r1, r3]
 8004506:	fa22 f303 	lsr.w	r3, r2, r3
 800450a:	4a09      	ldr	r2, [pc, #36]	; (8004530 <HAL_RCC_ClockConfig+0x1c4>)
 800450c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800450e:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_ClockConfig+0x1c8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fc fcf0 	bl	8000ef8 <HAL_InitTick>

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	40023c00 	.word	0x40023c00
 8004528:	40023800 	.word	0x40023800
 800452c:	0800daf8 	.word	0x0800daf8
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004

08004538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_RCC_GetHCLKFreq+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	20000000 	.word	0x20000000

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004554:	f7ff fff0 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	0a9b      	lsrs	r3, r3, #10
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40023800 	.word	0x40023800
 8004574:	0800db08 	.word	0x0800db08

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800457c:	f7ff ffdc 	bl	8004538 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0b5b      	lsrs	r3, r3, #13
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCC_GetPCLK2Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40023800 	.word	0x40023800
 800459c:	0800db08 	.word	0x0800db08

080045a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d010      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80045d8:	4b6f      	ldr	r3, [pc, #444]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045de:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	496c      	ldr	r1, [pc, #432]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80045f6:	2301      	movs	r3, #1
 80045f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d010      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004606:	4b64      	ldr	r3, [pc, #400]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	4960      	ldr	r1, [pc, #384]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d017      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004634:	4b58      	ldr	r3, [pc, #352]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	4955      	ldr	r1, [pc, #340]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004652:	d101      	bne.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004654:	2301      	movs	r3, #1
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004660:	2301      	movs	r3, #1
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0308 	and.w	r3, r3, #8
 800466c:	2b00      	cmp	r3, #0
 800466e:	d017      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004670:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004676:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	4946      	ldr	r1, [pc, #280]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800468e:	d101      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800469c:	2301      	movs	r3, #1
 800469e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 808a 	beq.w	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ae:	2300      	movs	r3, #0
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	4b39      	ldr	r3, [pc, #228]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	4a38      	ldr	r2, [pc, #224]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046bc:	6413      	str	r3, [r2, #64]	; 0x40
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80046d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046d6:	f7fc fc53 	bl	8000f80 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046dc:	e008      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046de:	f7fc fc4f 	bl	8000f80 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e278      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0f0      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004706:	6a3b      	ldr	r3, [r7, #32]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d02f      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004714:	6a3a      	ldr	r2, [r7, #32]
 8004716:	429a      	cmp	r2, r3
 8004718:	d028      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004722:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800472a:	4b1d      	ldr	r3, [pc, #116]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d114      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004742:	f7fc fc1d 	bl	8000f80 <HAL_GetTick>
 8004746:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004748:	e00a      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800474a:	f7fc fc19 	bl	8000f80 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f241 3288 	movw	r2, #5000	; 0x1388
 8004758:	4293      	cmp	r3, r2
 800475a:	d901      	bls.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e240      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004760:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d0ee      	beq.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004778:	d114      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800477a:	4b07      	ldr	r3, [pc, #28]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800478a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478e:	4902      	ldr	r1, [pc, #8]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004790:	4313      	orrs	r3, r2
 8004792:	608b      	str	r3, [r1, #8]
 8004794:	e00c      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40007000 	.word	0x40007000
 80047a0:	42470e40 	.word	0x42470e40
 80047a4:	4b4a      	ldr	r3, [pc, #296]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ae:	6093      	str	r3, [r2, #8]
 80047b0:	4b47      	ldr	r3, [pc, #284]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047bc:	4944      	ldr	r1, [pc, #272]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80047d6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80047e4:	4b3a      	ldr	r3, [pc, #232]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f2:	4937      	ldr	r1, [pc, #220]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004806:	4b32      	ldr	r3, [pc, #200]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004814:	492e      	ldr	r1, [pc, #184]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d011      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800482a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800482e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004836:	4926      	ldr	r1, [pc, #152]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004846:	d101      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004848:	2301      	movs	r3, #1
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800485a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800485e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	491a      	ldr	r1, [pc, #104]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800487a:	4b15      	ldr	r3, [pc, #84]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800487c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004880:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004888:	4911      	ldr	r1, [pc, #68]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800489a:	2301      	movs	r3, #1
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d005      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ac:	f040 80ff 	bne.w	8004aae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b6:	f7fc fb63 	bl	8000f80 <HAL_GetTick>
 80048ba:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048bc:	e00e      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048be:	f7fc fb5f 	bl	8000f80 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d907      	bls.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e188      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80048d0:	40023800 	.word	0x40023800
 80048d4:	424711e0 	.word	0x424711e0
 80048d8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048dc:	4b7e      	ldr	r3, [pc, #504]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ea      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004904:	2b00      	cmp	r3, #0
 8004906:	d028      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d124      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004910:	4b71      	ldr	r3, [pc, #452]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	3301      	adds	r3, #1
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004922:	4b6d      	ldr	r3, [pc, #436]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	431a      	orrs	r2, r3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	085b      	lsrs	r3, r3, #1
 8004940:	3b01      	subs	r3, #1
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	4961      	ldr	r1, [pc, #388]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004978:	2b00      	cmp	r3, #0
 800497a:	d035      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004984:	d130      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004986:	4b54      	ldr	r3, [pc, #336]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004998:	4b4f      	ldr	r3, [pc, #316]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	0f1b      	lsrs	r3, r3, #28
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	019b      	lsls	r3, r3, #6
 80049b0:	431a      	orrs	r2, r3
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	3b01      	subs	r3, #1
 80049b8:	041b      	lsls	r3, r3, #16
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	071b      	lsls	r3, r3, #28
 80049c8:	4943      	ldr	r1, [pc, #268]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049d0:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d6:	f023 021f 	bic.w	r2, r3, #31
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049de:	3b01      	subs	r3, #1
 80049e0:	493d      	ldr	r1, [pc, #244]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d029      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fc:	d124      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80049fe:	4b36      	ldr	r3, [pc, #216]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a04:	0c1b      	lsrs	r3, r3, #16
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a10:	4b31      	ldr	r3, [pc, #196]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a16:	0f1b      	lsrs	r3, r3, #28
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	019b      	lsls	r3, r3, #6
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	3b01      	subs	r3, #1
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	431a      	orrs	r2, r3
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	071b      	lsls	r3, r3, #28
 8004a40:	4925      	ldr	r1, [pc, #148]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d016      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	019b      	lsls	r3, r3, #6
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	3b01      	subs	r3, #1
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	061b      	lsls	r3, r3, #24
 8004a72:	431a      	orrs	r2, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	071b      	lsls	r3, r3, #28
 8004a7a:	4917      	ldr	r1, [pc, #92]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a82:	4b16      	ldr	r3, [pc, #88]	; (8004adc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a88:	f7fc fa7a 	bl	8000f80 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a90:	f7fc fa76 	bl	8000f80 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e09f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	f040 8095 	bne.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ab6:	4b0a      	ldr	r3, [pc, #40]	; (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004abc:	f7fc fa60 	bl	8000f80 <HAL_GetTick>
 8004ac0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ac2:	e00f      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ac4:	f7fc fa5c 	bl	8000f80 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d908      	bls.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e085      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004ad6:	bf00      	nop
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470068 	.word	0x42470068
 8004ae0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae4:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af0:	d0e8      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0304 	and.w	r3, r3, #4
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02b      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d127      	bne.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004b1a:	4b34      	ldr	r3, [pc, #208]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	3301      	adds	r3, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	019b      	lsls	r3, r3, #6
 8004b36:	431a      	orrs	r2, r3
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	085b      	lsrs	r3, r3, #1
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	061b      	lsls	r3, r3, #24
 8004b48:	4928      	ldr	r1, [pc, #160]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b50:	4b26      	ldr	r3, [pc, #152]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b56:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	4922      	ldr	r1, [pc, #136]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d01d      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7e:	d118      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	0e1b      	lsrs	r3, r3, #24
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	019b      	lsls	r3, r3, #6
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	085b      	lsrs	r3, r3, #1
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	041b      	lsls	r3, r3, #16
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	4910      	ldr	r1, [pc, #64]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb8:	f7fc f9e2 	bl	8000f80 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bc0:	f7fc f9de 	bl	8000f80 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e007      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bd2:	4b06      	ldr	r3, [pc, #24]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bde:	d1ef      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3730      	adds	r7, #48	; 0x30
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470070 	.word	0x42470070

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf8:	b0ae      	sub	sp, #184	; 0xb8
 8004bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c1a:	4bcb      	ldr	r3, [pc, #812]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	f200 8206 	bhi.w	8005034 <HAL_RCC_GetSysClockFreq+0x440>
 8004c28:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2e:	bf00      	nop
 8004c30:	08004c65 	.word	0x08004c65
 8004c34:	08005035 	.word	0x08005035
 8004c38:	08005035 	.word	0x08005035
 8004c3c:	08005035 	.word	0x08005035
 8004c40:	08004c6d 	.word	0x08004c6d
 8004c44:	08005035 	.word	0x08005035
 8004c48:	08005035 	.word	0x08005035
 8004c4c:	08005035 	.word	0x08005035
 8004c50:	08004c75 	.word	0x08004c75
 8004c54:	08005035 	.word	0x08005035
 8004c58:	08005035 	.word	0x08005035
 8004c5c:	08005035 	.word	0x08005035
 8004c60:	08004e65 	.word	0x08004e65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4bb9      	ldr	r3, [pc, #740]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x358>)
 8004c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004c6a:	e1e7      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c6c:	4bb8      	ldr	r3, [pc, #736]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c72:	e1e3      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c74:	4bb4      	ldr	r3, [pc, #720]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c80:	4bb1      	ldr	r3, [pc, #708]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d071      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8c:	4bae      	ldr	r3, [pc, #696]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	462b      	mov	r3, r5
 8004cb6:	f04f 0000 	mov.w	r0, #0
 8004cba:	f04f 0100 	mov.w	r1, #0
 8004cbe:	0159      	lsls	r1, r3, #5
 8004cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cc4:	0150      	lsls	r0, r2, #5
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4621      	mov	r1, r4
 8004ccc:	1a51      	subs	r1, r2, r1
 8004cce:	6439      	str	r1, [r7, #64]	; 0x40
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	018b      	lsls	r3, r1, #6
 8004ce8:	4641      	mov	r1, r8
 8004cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cee:	4641      	mov	r1, r8
 8004cf0:	018a      	lsls	r2, r1, #6
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	1a51      	subs	r1, r2, r1
 8004cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004d0c:	4649      	mov	r1, r9
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4641      	mov	r1, r8
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4641      	mov	r1, r8
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4622      	mov	r2, r4
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	633b      	str	r3, [r7, #48]	; 0x30
 8004d26:	462b      	mov	r3, r5
 8004d28:	460a      	mov	r2, r1
 8004d2a:	eb42 0303 	adc.w	r3, r2, r3
 8004d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	024b      	lsls	r3, r1, #9
 8004d40:	4621      	mov	r1, r4
 8004d42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d46:	4621      	mov	r1, r4
 8004d48:	024a      	lsls	r2, r1, #9
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d52:	2200      	movs	r2, #0
 8004d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004d60:	f7fb faa6 	bl	80002b0 <__aeabi_uldivmod>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	4613      	mov	r3, r2
 8004d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d6e:	e067      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d70:	4b75      	ldr	r3, [pc, #468]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	099b      	lsrs	r3, r3, #6
 8004d76:	2200      	movs	r2, #0
 8004d78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d92:	4622      	mov	r2, r4
 8004d94:	462b      	mov	r3, r5
 8004d96:	f04f 0000 	mov.w	r0, #0
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	0159      	lsls	r1, r3, #5
 8004da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da4:	0150      	lsls	r0, r2, #5
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4621      	mov	r1, r4
 8004dac:	1a51      	subs	r1, r2, r1
 8004dae:	62b9      	str	r1, [r7, #40]	; 0x28
 8004db0:	4629      	mov	r1, r5
 8004db2:	eb63 0301 	sbc.w	r3, r3, r1
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	018b      	lsls	r3, r1, #6
 8004dc8:	4641      	mov	r1, r8
 8004dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dce:	4641      	mov	r1, r8
 8004dd0:	018a      	lsls	r2, r1, #6
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004dd8:	4649      	mov	r1, r9
 8004dda:	eb63 0b01 	sbc.w	fp, r3, r1
 8004dde:	f04f 0200 	mov.w	r2, #0
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df2:	4692      	mov	sl, r2
 8004df4:	469b      	mov	fp, r3
 8004df6:	4623      	mov	r3, r4
 8004df8:	eb1a 0303 	adds.w	r3, sl, r3
 8004dfc:	623b      	str	r3, [r7, #32]
 8004dfe:	462b      	mov	r3, r5
 8004e00:	eb4b 0303 	adc.w	r3, fp, r3
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004e12:	4629      	mov	r1, r5
 8004e14:	028b      	lsls	r3, r1, #10
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	028a      	lsls	r2, r1, #10
 8004e20:	4610      	mov	r0, r2
 8004e22:	4619      	mov	r1, r3
 8004e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004e28:	2200      	movs	r2, #0
 8004e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004e2c:	677a      	str	r2, [r7, #116]	; 0x74
 8004e2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004e32:	f7fb fa3d 	bl	80002b0 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e40:	4b41      	ldr	r3, [pc, #260]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e62:	e0eb      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e64:	4b38      	ldr	r3, [pc, #224]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e70:	4b35      	ldr	r3, [pc, #212]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d06b      	beq.n	8004f54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7c:	4b32      	ldr	r3, [pc, #200]	; (8004f48 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	2200      	movs	r2, #0
 8004e84:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e90:	2300      	movs	r3, #0
 8004e92:	667b      	str	r3, [r7, #100]	; 0x64
 8004e94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e98:	4622      	mov	r2, r4
 8004e9a:	462b      	mov	r3, r5
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	0159      	lsls	r1, r3, #5
 8004ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eaa:	0150      	lsls	r0, r2, #5
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	1a51      	subs	r1, r2, r1
 8004eb4:	61b9      	str	r1, [r7, #24]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	eb63 0301 	sbc.w	r3, r3, r1
 8004ebc:	61fb      	str	r3, [r7, #28]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004eca:	4659      	mov	r1, fp
 8004ecc:	018b      	lsls	r3, r1, #6
 8004ece:	4651      	mov	r1, sl
 8004ed0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ed4:	4651      	mov	r1, sl
 8004ed6:	018a      	lsls	r2, r1, #6
 8004ed8:	4651      	mov	r1, sl
 8004eda:	ebb2 0801 	subs.w	r8, r2, r1
 8004ede:	4659      	mov	r1, fp
 8004ee0:	eb63 0901 	sbc.w	r9, r3, r1
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ef0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ef4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ef8:	4690      	mov	r8, r2
 8004efa:	4699      	mov	r9, r3
 8004efc:	4623      	mov	r3, r4
 8004efe:	eb18 0303 	adds.w	r3, r8, r3
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	462b      	mov	r3, r5
 8004f06:	eb49 0303 	adc.w	r3, r9, r3
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004f18:	4629      	mov	r1, r5
 8004f1a:	024b      	lsls	r3, r1, #9
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f22:	4621      	mov	r1, r4
 8004f24:	024a      	lsls	r2, r1, #9
 8004f26:	4610      	mov	r0, r2
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f2e:	2200      	movs	r2, #0
 8004f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f32:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004f34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f38:	f7fb f9ba 	bl	80002b0 <__aeabi_uldivmod>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4613      	mov	r3, r2
 8004f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f46:	e065      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x420>
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	00f42400 	.word	0x00f42400
 8004f50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f54:	4b3d      	ldr	r3, [pc, #244]	; (800504c <HAL_RCC_GetSysClockFreq+0x458>)
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	099b      	lsrs	r3, r3, #6
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	4611      	mov	r1, r2
 8004f60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f64:	653b      	str	r3, [r7, #80]	; 0x50
 8004f66:	2300      	movs	r3, #0
 8004f68:	657b      	str	r3, [r7, #84]	; 0x54
 8004f6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004f6e:	4642      	mov	r2, r8
 8004f70:	464b      	mov	r3, r9
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	0159      	lsls	r1, r3, #5
 8004f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f80:	0150      	lsls	r0, r2, #5
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4641      	mov	r1, r8
 8004f88:	1a51      	subs	r1, r2, r1
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	018b      	lsls	r3, r1, #6
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004faa:	4651      	mov	r1, sl
 8004fac:	018a      	lsls	r2, r1, #6
 8004fae:	4651      	mov	r1, sl
 8004fb0:	1a54      	subs	r4, r2, r1
 8004fb2:	4659      	mov	r1, fp
 8004fb4:	eb63 0501 	sbc.w	r5, r3, r1
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	00eb      	lsls	r3, r5, #3
 8004fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fc6:	00e2      	lsls	r2, r4, #3
 8004fc8:	4614      	mov	r4, r2
 8004fca:	461d      	mov	r5, r3
 8004fcc:	4643      	mov	r3, r8
 8004fce:	18e3      	adds	r3, r4, r3
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	464b      	mov	r3, r9
 8004fd4:	eb45 0303 	adc.w	r3, r5, r3
 8004fd8:	607b      	str	r3, [r7, #4]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	028b      	lsls	r3, r1, #10
 8004fea:	4621      	mov	r1, r4
 8004fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	028a      	lsls	r2, r1, #10
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005000:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005002:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005006:	f7fb f953 	bl	80002b0 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4613      	mov	r3, r2
 8005010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005014:	4b0d      	ldr	r3, [pc, #52]	; (800504c <HAL_RCC_GetSysClockFreq+0x458>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	0f1b      	lsrs	r3, r3, #28
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800502a:	fbb2 f3f3 	udiv	r3, r2, r3
 800502e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005032:	e003      	b.n	800503c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800503a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005040:	4618      	mov	r0, r3
 8005042:	37b8      	adds	r7, #184	; 0xb8
 8005044:	46bd      	mov	sp, r7
 8005046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	00f42400 	.word	0x00f42400

08005054 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e28d      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8083 	beq.w	800517a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005074:	4b94      	ldr	r3, [pc, #592]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f003 030c 	and.w	r3, r3, #12
 800507c:	2b04      	cmp	r3, #4
 800507e:	d019      	beq.n	80050b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005080:	4b91      	ldr	r3, [pc, #580]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005088:	2b08      	cmp	r3, #8
 800508a:	d106      	bne.n	800509a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800508c:	4b8e      	ldr	r3, [pc, #568]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005098:	d00c      	beq.n	80050b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509a:	4b8b      	ldr	r3, [pc, #556]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050a2:	2b0c      	cmp	r3, #12
 80050a4:	d112      	bne.n	80050cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a6:	4b88      	ldr	r3, [pc, #544]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b2:	d10b      	bne.n	80050cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	4b84      	ldr	r3, [pc, #528]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05b      	beq.n	8005178 <HAL_RCC_OscConfig+0x124>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d157      	bne.n	8005178 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e25a      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x90>
 80050d6:	4b7c      	ldr	r3, [pc, #496]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7b      	ldr	r2, [pc, #492]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e01d      	b.n	8005120 <HAL_RCC_OscConfig+0xcc>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0xb4>
 80050ee:	4b76      	ldr	r3, [pc, #472]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a75      	ldr	r2, [pc, #468]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	4b73      	ldr	r3, [pc, #460]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a72      	ldr	r2, [pc, #456]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0xcc>
 8005108:	4b6f      	ldr	r3, [pc, #444]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a6e      	ldr	r2, [pc, #440]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800510e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	4b6c      	ldr	r3, [pc, #432]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a6b      	ldr	r2, [pc, #428]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800511a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800511e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005128:	f7fb ff2a 	bl	8000f80 <HAL_GetTick>
 800512c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005130:	f7fb ff26 	bl	8000f80 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b64      	cmp	r3, #100	; 0x64
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e21f      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005142:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0f0      	beq.n	8005130 <HAL_RCC_OscConfig+0xdc>
 800514e:	e014      	b.n	800517a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005150:	f7fb ff16 	bl	8000f80 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005158:	f7fb ff12 	bl	8000f80 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e20b      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800516a:	4b57      	ldr	r3, [pc, #348]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x104>
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06f      	beq.n	8005266 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005186:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b00      	cmp	r3, #0
 8005190:	d017      	beq.n	80051c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005192:	4b4d      	ldr	r3, [pc, #308]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800519a:	2b08      	cmp	r3, #8
 800519c:	d105      	bne.n	80051aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800519e:	4b4a      	ldr	r3, [pc, #296]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051b2:	2b0c      	cmp	r3, #12
 80051b4:	d11c      	bne.n	80051f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d116      	bne.n	80051f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_RCC_OscConfig+0x186>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d001      	beq.n	80051da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e1d3      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4937      	ldr	r1, [pc, #220]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ee:	e03a      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d020      	beq.n	800523a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051f8:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCC_OscConfig+0x278>)
 80051fa:	2201      	movs	r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051fe:	f7fb febf 	bl	8000f80 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005206:	f7fb febb 	bl	8000f80 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e1b4      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f0      	beq.n	8005206 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	4b28      	ldr	r3, [pc, #160]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4925      	ldr	r1, [pc, #148]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
 8005238:	e015      	b.n	8005266 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_OscConfig+0x278>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fb fe9e 	bl	8000f80 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005248:	f7fb fe9a 	bl	8000f80 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e193      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	4b1b      	ldr	r3, [pc, #108]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d036      	beq.n	80052e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d016      	beq.n	80052a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800527a:	4b15      	ldr	r3, [pc, #84]	; (80052d0 <HAL_RCC_OscConfig+0x27c>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005280:	f7fb fe7e 	bl	8000f80 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005288:	f7fb fe7a 	bl	8000f80 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e173      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_OscConfig+0x274>)
 800529c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0x234>
 80052a6:	e01b      	b.n	80052e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a8:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <HAL_RCC_OscConfig+0x27c>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ae:	f7fb fe67 	bl	8000f80 <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b4:	e00e      	b.n	80052d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b6:	f7fb fe63 	bl	8000f80 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d907      	bls.n	80052d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e15c      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
 80052c8:	40023800 	.word	0x40023800
 80052cc:	42470000 	.word	0x42470000
 80052d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d4:	4b8a      	ldr	r3, [pc, #552]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1ea      	bne.n	80052b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 8097 	beq.w	800541c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f2:	4b83      	ldr	r3, [pc, #524]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	60bb      	str	r3, [r7, #8]
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800530c:	6413      	str	r3, [r2, #64]	; 0x40
 800530e:	4b7c      	ldr	r3, [pc, #496]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	60bb      	str	r3, [r7, #8]
 8005318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800531a:	2301      	movs	r3, #1
 800531c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531e:	4b79      	ldr	r3, [pc, #484]	; (8005504 <HAL_RCC_OscConfig+0x4b0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d118      	bne.n	800535c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800532a:	4b76      	ldr	r3, [pc, #472]	; (8005504 <HAL_RCC_OscConfig+0x4b0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a75      	ldr	r2, [pc, #468]	; (8005504 <HAL_RCC_OscConfig+0x4b0>)
 8005330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005336:	f7fb fe23 	bl	8000f80 <HAL_GetTick>
 800533a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533c:	e008      	b.n	8005350 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800533e:	f7fb fe1f 	bl	8000f80 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e118      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005350:	4b6c      	ldr	r3, [pc, #432]	; (8005504 <HAL_RCC_OscConfig+0x4b0>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d106      	bne.n	8005372 <HAL_RCC_OscConfig+0x31e>
 8005364:	4b66      	ldr	r3, [pc, #408]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005368:	4a65      	ldr	r2, [pc, #404]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6713      	str	r3, [r2, #112]	; 0x70
 8005370:	e01c      	b.n	80053ac <HAL_RCC_OscConfig+0x358>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2b05      	cmp	r3, #5
 8005378:	d10c      	bne.n	8005394 <HAL_RCC_OscConfig+0x340>
 800537a:	4b61      	ldr	r3, [pc, #388]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 800537c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537e:	4a60      	ldr	r2, [pc, #384]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005380:	f043 0304 	orr.w	r3, r3, #4
 8005384:	6713      	str	r3, [r2, #112]	; 0x70
 8005386:	4b5e      	ldr	r3, [pc, #376]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	4a5d      	ldr	r2, [pc, #372]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 800538c:	f043 0301 	orr.w	r3, r3, #1
 8005390:	6713      	str	r3, [r2, #112]	; 0x70
 8005392:	e00b      	b.n	80053ac <HAL_RCC_OscConfig+0x358>
 8005394:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a59      	ldr	r2, [pc, #356]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 800539a:	f023 0301 	bic.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	4b57      	ldr	r3, [pc, #348]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	4a56      	ldr	r2, [pc, #344]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	f023 0304 	bic.w	r3, r3, #4
 80053aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d015      	beq.n	80053e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b4:	f7fb fde4 	bl	8000f80 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ba:	e00a      	b.n	80053d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fb fde0 	bl	8000f80 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0d7      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d2:	4b4b      	ldr	r3, [pc, #300]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0ee      	beq.n	80053bc <HAL_RCC_OscConfig+0x368>
 80053de:	e014      	b.n	800540a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fb fdce 	bl	8000f80 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fb fdca 	bl	8000f80 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e0c1      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053fe:	4b40      	ldr	r3, [pc, #256]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1ee      	bne.n	80053e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800540a:	7dfb      	ldrb	r3, [r7, #23]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005410:	4b3b      	ldr	r3, [pc, #236]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005414:	4a3a      	ldr	r2, [pc, #232]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800541a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80ad 	beq.w	8005580 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 030c 	and.w	r3, r3, #12
 800542e:	2b08      	cmp	r3, #8
 8005430:	d060      	beq.n	80054f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b02      	cmp	r3, #2
 8005438:	d145      	bne.n	80054c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800543a:	4b33      	ldr	r3, [pc, #204]	; (8005508 <HAL_RCC_OscConfig+0x4b4>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fb fd9e 	bl	8000f80 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005448:	f7fb fd9a 	bl	8000f80 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e093      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	4b29      	ldr	r3, [pc, #164]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	019b      	lsls	r3, r3, #6
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	085b      	lsrs	r3, r3, #1
 800547e:	3b01      	subs	r3, #1
 8005480:	041b      	lsls	r3, r3, #16
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	061b      	lsls	r3, r3, #24
 800548a:	431a      	orrs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005490:	071b      	lsls	r3, r3, #28
 8005492:	491b      	ldr	r1, [pc, #108]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 8005494:	4313      	orrs	r3, r2
 8005496:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005498:	4b1b      	ldr	r3, [pc, #108]	; (8005508 <HAL_RCC_OscConfig+0x4b4>)
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fb fd6f 	bl	8000f80 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fb fd6b 	bl	8000f80 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e064      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d0f0      	beq.n	80054a6 <HAL_RCC_OscConfig+0x452>
 80054c4:	e05c      	b.n	8005580 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c6:	4b10      	ldr	r3, [pc, #64]	; (8005508 <HAL_RCC_OscConfig+0x4b4>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fb fd58 	bl	8000f80 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fb fd54 	bl	8000f80 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e04d      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <HAL_RCC_OscConfig+0x4ac>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x480>
 80054f2:	e045      	b.n	8005580 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d107      	bne.n	800550c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e040      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
 8005500:	40023800 	.word	0x40023800
 8005504:	40007000 	.word	0x40007000
 8005508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800550c:	4b1f      	ldr	r3, [pc, #124]	; (800558c <HAL_RCC_OscConfig+0x538>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d030      	beq.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005524:	429a      	cmp	r2, r3
 8005526:	d129      	bne.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005532:	429a      	cmp	r2, r3
 8005534:	d122      	bne.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800553c:	4013      	ands	r3, r2
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005544:	4293      	cmp	r3, r2
 8005546:	d119      	bne.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	3b01      	subs	r3, #1
 8005556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d10f      	bne.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d107      	bne.n	800557c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d001      	beq.n	8005580 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	40023800 	.word	0x40023800

08005590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e03f      	b.n	8005622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fb7c 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f929 	bl	800582c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b08a      	sub	sp, #40	; 0x28
 800562e:	af02      	add	r7, sp, #8
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b20      	cmp	r3, #32
 8005648:	d17c      	bne.n	8005744 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_UART_Transmit+0x2c>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e075      	b.n	8005746 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_UART_Transmit+0x3e>
 8005664:	2302      	movs	r3, #2
 8005666:	e06e      	b.n	8005746 <HAL_UART_Transmit+0x11c>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2221      	movs	r2, #33	; 0x21
 800567a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800567e:	f7fb fc7f 	bl	8000f80 <HAL_GetTick>
 8005682:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	88fa      	ldrh	r2, [r7, #6]
 8005688:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	d108      	bne.n	80056ac <HAL_UART_Transmit+0x82>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d104      	bne.n	80056ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	e003      	b.n	80056b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80056bc:	e02a      	b.n	8005714 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	9300      	str	r3, [sp, #0]
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f840 	bl	800574e <UART_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e036      	b.n	8005746 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10b      	bne.n	80056f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	3302      	adds	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
 80056f4:	e007      	b.n	8005706 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	3301      	adds	r3, #1
 8005704:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1cf      	bne.n	80056be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2200      	movs	r2, #0
 8005726:	2140      	movs	r1, #64	; 0x40
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f810 	bl	800574e <UART_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e006      	b.n	8005746 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	e000      	b.n	8005746 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005744:	2302      	movs	r3, #2
  }
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b090      	sub	sp, #64	; 0x40
 8005752:	af00      	add	r7, sp, #0
 8005754:	60f8      	str	r0, [r7, #12]
 8005756:	60b9      	str	r1, [r7, #8]
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	4613      	mov	r3, r2
 800575c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575e:	e050      	b.n	8005802 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d04c      	beq.n	8005802 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0x30>
 800576e:	f7fb fc07 	bl	8000f80 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800577a:	429a      	cmp	r2, r3
 800577c:	d241      	bcs.n	8005802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	e853 3f00 	ldrex	r3, [r3]
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579e:	637a      	str	r2, [r7, #52]	; 0x34
 80057a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e5      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3314      	adds	r3, #20
 80057b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	613b      	str	r3, [r7, #16]
   return(result);
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057d2:	623a      	str	r2, [r7, #32]
 80057d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	69f9      	ldr	r1, [r7, #28]
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	61bb      	str	r3, [r7, #24]
   return(result);
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e00f      	b.n	8005822 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4013      	ands	r3, r2
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	429a      	cmp	r2, r3
 8005810:	bf0c      	ite	eq
 8005812:	2301      	moveq	r3, #1
 8005814:	2300      	movne	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	461a      	mov	r2, r3
 800581a:	79fb      	ldrb	r3, [r7, #7]
 800581c:	429a      	cmp	r2, r3
 800581e:	d09f      	beq.n	8005760 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3740      	adds	r7, #64	; 0x40
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b0c0      	sub	sp, #256	; 0x100
 8005832:	af00      	add	r7, sp, #0
 8005834:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005848:	68d9      	ldr	r1, [r3, #12]
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	ea40 0301 	orr.w	r3, r0, r1
 8005854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	431a      	orrs	r2, r3
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	431a      	orrs	r2, r3
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005884:	f021 010c 	bic.w	r1, r1, #12
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005892:	430b      	orrs	r3, r1
 8005894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80058a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a6:	6999      	ldr	r1, [r3, #24]
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	ea40 0301 	orr.w	r3, r0, r1
 80058b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8f      	ldr	r3, [pc, #572]	; (8005af8 <UART_SetConfig+0x2cc>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d005      	beq.n	80058cc <UART_SetConfig+0xa0>
 80058c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b8d      	ldr	r3, [pc, #564]	; (8005afc <UART_SetConfig+0x2d0>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d104      	bne.n	80058d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7fe fe54 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 80058d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058d4:	e003      	b.n	80058de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058d6:	f7fe fe3b 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80058da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e8:	f040 810c 	bne.w	8005b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058fe:	4622      	mov	r2, r4
 8005900:	462b      	mov	r3, r5
 8005902:	1891      	adds	r1, r2, r2
 8005904:	65b9      	str	r1, [r7, #88]	; 0x58
 8005906:	415b      	adcs	r3, r3
 8005908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800590a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800590e:	4621      	mov	r1, r4
 8005910:	eb12 0801 	adds.w	r8, r2, r1
 8005914:	4629      	mov	r1, r5
 8005916:	eb43 0901 	adc.w	r9, r3, r1
 800591a:	f04f 0200 	mov.w	r2, #0
 800591e:	f04f 0300 	mov.w	r3, #0
 8005922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800592a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800592e:	4690      	mov	r8, r2
 8005930:	4699      	mov	r9, r3
 8005932:	4623      	mov	r3, r4
 8005934:	eb18 0303 	adds.w	r3, r8, r3
 8005938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800593c:	462b      	mov	r3, r5
 800593e:	eb49 0303 	adc.w	r3, r9, r3
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005952:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800595a:	460b      	mov	r3, r1
 800595c:	18db      	adds	r3, r3, r3
 800595e:	653b      	str	r3, [r7, #80]	; 0x50
 8005960:	4613      	mov	r3, r2
 8005962:	eb42 0303 	adc.w	r3, r2, r3
 8005966:	657b      	str	r3, [r7, #84]	; 0x54
 8005968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800596c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005970:	f7fa fc9e 	bl	80002b0 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <UART_SetConfig+0x2d4>)
 800597a:	fba3 2302 	umull	r2, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	011c      	lsls	r4, r3, #4
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800598c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	64b9      	str	r1, [r7, #72]	; 0x48
 800599c:	415b      	adcs	r3, r3
 800599e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059a4:	4641      	mov	r1, r8
 80059a6:	eb12 0a01 	adds.w	sl, r2, r1
 80059aa:	4649      	mov	r1, r9
 80059ac:	eb43 0b01 	adc.w	fp, r3, r1
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059c4:	4692      	mov	sl, r2
 80059c6:	469b      	mov	fp, r3
 80059c8:	4643      	mov	r3, r8
 80059ca:	eb1a 0303 	adds.w	r3, sl, r3
 80059ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059d2:	464b      	mov	r3, r9
 80059d4:	eb4b 0303 	adc.w	r3, fp, r3
 80059d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059f0:	460b      	mov	r3, r1
 80059f2:	18db      	adds	r3, r3, r3
 80059f4:	643b      	str	r3, [r7, #64]	; 0x40
 80059f6:	4613      	mov	r3, r2
 80059f8:	eb42 0303 	adc.w	r3, r2, r3
 80059fc:	647b      	str	r3, [r7, #68]	; 0x44
 80059fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005a06:	f7fa fc53 	bl	80002b0 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <UART_SetConfig+0x2d4>)
 8005a12:	fba3 2301 	umull	r2, r3, r3, r1
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	2264      	movs	r2, #100	; 0x64
 8005a1a:	fb02 f303 	mul.w	r3, r2, r3
 8005a1e:	1acb      	subs	r3, r1, r3
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <UART_SetConfig+0x2d4>)
 8005a28:	fba3 2302 	umull	r2, r3, r3, r2
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a34:	441c      	add	r4, r3
 8005a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	1891      	adds	r1, r2, r2
 8005a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a50:	415b      	adcs	r3, r3
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a58:	4641      	mov	r1, r8
 8005a5a:	1851      	adds	r1, r2, r1
 8005a5c:	6339      	str	r1, [r7, #48]	; 0x30
 8005a5e:	4649      	mov	r1, r9
 8005a60:	414b      	adcs	r3, r1
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
 8005a64:	f04f 0200 	mov.w	r2, #0
 8005a68:	f04f 0300 	mov.w	r3, #0
 8005a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a70:	4659      	mov	r1, fp
 8005a72:	00cb      	lsls	r3, r1, #3
 8005a74:	4651      	mov	r1, sl
 8005a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	00ca      	lsls	r2, r1, #3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	4642      	mov	r2, r8
 8005a86:	189b      	adds	r3, r3, r2
 8005a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	460a      	mov	r2, r1
 8005a90:	eb42 0303 	adc.w	r3, r2, r3
 8005a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aac:	460b      	mov	r3, r1
 8005aae:	18db      	adds	r3, r3, r3
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	eb42 0303 	adc.w	r3, r2, r3
 8005ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ac2:	f7fa fbf5 	bl	80002b0 <__aeabi_uldivmod>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <UART_SetConfig+0x2d4>)
 8005acc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	2164      	movs	r1, #100	; 0x64
 8005ad4:	fb01 f303 	mul.w	r3, r1, r3
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	3332      	adds	r3, #50	; 0x32
 8005ade:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <UART_SetConfig+0x2d4>)
 8005ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	f003 0207 	and.w	r2, r3, #7
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4422      	add	r2, r4
 8005af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005af4:	e105      	b.n	8005d02 <UART_SetConfig+0x4d6>
 8005af6:	bf00      	nop
 8005af8:	40011000 	.word	0x40011000
 8005afc:	40011400 	.word	0x40011400
 8005b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b16:	4642      	mov	r2, r8
 8005b18:	464b      	mov	r3, r9
 8005b1a:	1891      	adds	r1, r2, r2
 8005b1c:	6239      	str	r1, [r7, #32]
 8005b1e:	415b      	adcs	r3, r3
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
 8005b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b26:	4641      	mov	r1, r8
 8005b28:	1854      	adds	r4, r2, r1
 8005b2a:	4649      	mov	r1, r9
 8005b2c:	eb43 0501 	adc.w	r5, r3, r1
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	00eb      	lsls	r3, r5, #3
 8005b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b3e:	00e2      	lsls	r2, r4, #3
 8005b40:	4614      	mov	r4, r2
 8005b42:	461d      	mov	r5, r3
 8005b44:	4643      	mov	r3, r8
 8005b46:	18e3      	adds	r3, r4, r3
 8005b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b4c:	464b      	mov	r3, r9
 8005b4e:	eb45 0303 	adc.w	r3, r5, r3
 8005b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b66:	f04f 0200 	mov.w	r2, #0
 8005b6a:	f04f 0300 	mov.w	r3, #0
 8005b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b72:	4629      	mov	r1, r5
 8005b74:	008b      	lsls	r3, r1, #2
 8005b76:	4621      	mov	r1, r4
 8005b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	008a      	lsls	r2, r1, #2
 8005b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b84:	f7fa fb94 	bl	80002b0 <__aeabi_uldivmod>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4b60      	ldr	r3, [pc, #384]	; (8005d10 <UART_SetConfig+0x4e4>)
 8005b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b92:	095b      	lsrs	r3, r3, #5
 8005b94:	011c      	lsls	r4, r3, #4
 8005b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ba8:	4642      	mov	r2, r8
 8005baa:	464b      	mov	r3, r9
 8005bac:	1891      	adds	r1, r2, r2
 8005bae:	61b9      	str	r1, [r7, #24]
 8005bb0:	415b      	adcs	r3, r3
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb8:	4641      	mov	r1, r8
 8005bba:	1851      	adds	r1, r2, r1
 8005bbc:	6139      	str	r1, [r7, #16]
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	414b      	adcs	r3, r1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	f04f 0300 	mov.w	r3, #0
 8005bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bd0:	4659      	mov	r1, fp
 8005bd2:	00cb      	lsls	r3, r1, #3
 8005bd4:	4651      	mov	r1, sl
 8005bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bda:	4651      	mov	r1, sl
 8005bdc:	00ca      	lsls	r2, r1, #3
 8005bde:	4610      	mov	r0, r2
 8005be0:	4619      	mov	r1, r3
 8005be2:	4603      	mov	r3, r0
 8005be4:	4642      	mov	r2, r8
 8005be6:	189b      	adds	r3, r3, r2
 8005be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bec:	464b      	mov	r3, r9
 8005bee:	460a      	mov	r2, r1
 8005bf0:	eb42 0303 	adc.w	r3, r2, r3
 8005bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c10:	4649      	mov	r1, r9
 8005c12:	008b      	lsls	r3, r1, #2
 8005c14:	4641      	mov	r1, r8
 8005c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1a:	4641      	mov	r1, r8
 8005c1c:	008a      	lsls	r2, r1, #2
 8005c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c22:	f7fa fb45 	bl	80002b0 <__aeabi_uldivmod>
 8005c26:	4602      	mov	r2, r0
 8005c28:	460b      	mov	r3, r1
 8005c2a:	4b39      	ldr	r3, [pc, #228]	; (8005d10 <UART_SetConfig+0x4e4>)
 8005c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	2164      	movs	r1, #100	; 0x64
 8005c34:	fb01 f303 	mul.w	r3, r1, r3
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	3332      	adds	r3, #50	; 0x32
 8005c3e:	4a34      	ldr	r2, [pc, #208]	; (8005d10 <UART_SetConfig+0x4e4>)
 8005c40:	fba2 2303 	umull	r2, r3, r2, r3
 8005c44:	095b      	lsrs	r3, r3, #5
 8005c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c4a:	441c      	add	r4, r3
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	673b      	str	r3, [r7, #112]	; 0x70
 8005c54:	677a      	str	r2, [r7, #116]	; 0x74
 8005c56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c5a:	4642      	mov	r2, r8
 8005c5c:	464b      	mov	r3, r9
 8005c5e:	1891      	adds	r1, r2, r2
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	415b      	adcs	r3, r3
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	1851      	adds	r1, r2, r1
 8005c6e:	6039      	str	r1, [r7, #0]
 8005c70:	4649      	mov	r1, r9
 8005c72:	414b      	adcs	r3, r1
 8005c74:	607b      	str	r3, [r7, #4]
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c82:	4659      	mov	r1, fp
 8005c84:	00cb      	lsls	r3, r1, #3
 8005c86:	4651      	mov	r1, sl
 8005c88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	00ca      	lsls	r2, r1, #3
 8005c90:	4610      	mov	r0, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	4603      	mov	r3, r0
 8005c96:	4642      	mov	r2, r8
 8005c98:	189b      	adds	r3, r3, r2
 8005c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	eb42 0303 	adc.w	r3, r2, r3
 8005ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb0:	667a      	str	r2, [r7, #100]	; 0x64
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	008b      	lsls	r3, r1, #2
 8005cc2:	4641      	mov	r1, r8
 8005cc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc8:	4641      	mov	r1, r8
 8005cca:	008a      	lsls	r2, r1, #2
 8005ccc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cd0:	f7fa faee 	bl	80002b0 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <UART_SetConfig+0x4e4>)
 8005cda:	fba3 1302 	umull	r1, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2164      	movs	r1, #100	; 0x64
 8005ce2:	fb01 f303 	mul.w	r3, r1, r3
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	011b      	lsls	r3, r3, #4
 8005cea:	3332      	adds	r3, #50	; 0x32
 8005cec:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <UART_SetConfig+0x4e4>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	f003 020f 	and.w	r2, r3, #15
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4422      	add	r2, r4
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	bf00      	nop
 8005d04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d0e:	bf00      	nop
 8005d10:	51eb851f 	.word	0x51eb851f

08005d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d14:	b084      	sub	sp, #16
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	f107 001c 	add.w	r0, r7, #28
 8005d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d122      	bne.n	8005d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d105      	bne.n	8005d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f001 fbe8 	bl	800753c <USB_CoreReset>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
 8005d70:	e01a      	b.n	8005da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 fbdc 	bl	800753c <USB_CoreReset>
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d106      	bne.n	8005d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
 8005d9a:	e005      	b.n	8005da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d10b      	bne.n	8005dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f043 0206 	orr.w	r2, r3, #6
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f043 0220 	orr.w	r2, r3, #32
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd2:	b004      	add	sp, #16
 8005dd4:	4770      	bx	lr
	...

08005dd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b087      	sub	sp, #28
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005de6:	79fb      	ldrb	r3, [r7, #7]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d165      	bne.n	8005eb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	4a41      	ldr	r2, [pc, #260]	; (8005ef4 <USB_SetTurnaroundTime+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d906      	bls.n	8005e02 <USB_SetTurnaroundTime+0x2a>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4a40      	ldr	r2, [pc, #256]	; (8005ef8 <USB_SetTurnaroundTime+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d202      	bcs.n	8005e02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005dfc:	230f      	movs	r3, #15
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	e062      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <USB_SetTurnaroundTime+0x120>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d306      	bcc.n	8005e18 <USB_SetTurnaroundTime+0x40>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4a3b      	ldr	r2, [pc, #236]	; (8005efc <USB_SetTurnaroundTime+0x124>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d202      	bcs.n	8005e18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e12:	230e      	movs	r3, #14
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e057      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4a38      	ldr	r2, [pc, #224]	; (8005efc <USB_SetTurnaroundTime+0x124>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d306      	bcc.n	8005e2e <USB_SetTurnaroundTime+0x56>
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <USB_SetTurnaroundTime+0x128>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d202      	bcs.n	8005e2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e28:	230d      	movs	r3, #13
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	e04c      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	4a33      	ldr	r2, [pc, #204]	; (8005f00 <USB_SetTurnaroundTime+0x128>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d306      	bcc.n	8005e44 <USB_SetTurnaroundTime+0x6c>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a32      	ldr	r2, [pc, #200]	; (8005f04 <USB_SetTurnaroundTime+0x12c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d802      	bhi.n	8005e44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e3e:	230c      	movs	r3, #12
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	e041      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4a2f      	ldr	r2, [pc, #188]	; (8005f04 <USB_SetTurnaroundTime+0x12c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d906      	bls.n	8005e5a <USB_SetTurnaroundTime+0x82>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a2e      	ldr	r2, [pc, #184]	; (8005f08 <USB_SetTurnaroundTime+0x130>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d802      	bhi.n	8005e5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e54:	230b      	movs	r3, #11
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e036      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <USB_SetTurnaroundTime+0x130>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d906      	bls.n	8005e70 <USB_SetTurnaroundTime+0x98>
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <USB_SetTurnaroundTime+0x134>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d802      	bhi.n	8005e70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e6a:	230a      	movs	r3, #10
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	e02b      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4a26      	ldr	r2, [pc, #152]	; (8005f0c <USB_SetTurnaroundTime+0x134>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d906      	bls.n	8005e86 <USB_SetTurnaroundTime+0xae>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a25      	ldr	r2, [pc, #148]	; (8005f10 <USB_SetTurnaroundTime+0x138>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d202      	bcs.n	8005e86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e80:	2309      	movs	r3, #9
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e020      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a21      	ldr	r2, [pc, #132]	; (8005f10 <USB_SetTurnaroundTime+0x138>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d306      	bcc.n	8005e9c <USB_SetTurnaroundTime+0xc4>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a20      	ldr	r2, [pc, #128]	; (8005f14 <USB_SetTurnaroundTime+0x13c>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d802      	bhi.n	8005e9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e96:	2308      	movs	r3, #8
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	e015      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4a1d      	ldr	r2, [pc, #116]	; (8005f14 <USB_SetTurnaroundTime+0x13c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d906      	bls.n	8005eb2 <USB_SetTurnaroundTime+0xda>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a1c      	ldr	r2, [pc, #112]	; (8005f18 <USB_SetTurnaroundTime+0x140>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d202      	bcs.n	8005eb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005eac:	2307      	movs	r3, #7
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e00a      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005eb2:	2306      	movs	r3, #6
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e007      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ebe:	2309      	movs	r3, #9
 8005ec0:	617b      	str	r3, [r7, #20]
 8005ec2:	e001      	b.n	8005ec8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ec4:	2309      	movs	r3, #9
 8005ec6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	029b      	lsls	r3, r3, #10
 8005edc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005ee0:	431a      	orrs	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	371c      	adds	r7, #28
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	00d8acbf 	.word	0x00d8acbf
 8005ef8:	00e4e1c0 	.word	0x00e4e1c0
 8005efc:	00f42400 	.word	0x00f42400
 8005f00:	01067380 	.word	0x01067380
 8005f04:	011a499f 	.word	0x011a499f
 8005f08:	01312cff 	.word	0x01312cff
 8005f0c:	014ca43f 	.word	0x014ca43f
 8005f10:	016e3600 	.word	0x016e3600
 8005f14:	01a6ab1f 	.word	0x01a6ab1f
 8005f18:	01e84800 	.word	0x01e84800

08005f1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f023 0201 	bic.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d115      	bne.n	8005fae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f8e:	2001      	movs	r0, #1
 8005f90:	f7fb f802 	bl	8000f98 <HAL_Delay>
      ms++;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fa3f 	bl	800741e <USB_GetMode>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d01e      	beq.n	8005fe4 <USB_SetCurrentMode+0x84>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b31      	cmp	r3, #49	; 0x31
 8005faa:	d9f0      	bls.n	8005f8e <USB_SetCurrentMode+0x2e>
 8005fac:	e01a      	b.n	8005fe4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fae:	78fb      	ldrb	r3, [r7, #3]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d115      	bne.n	8005fe0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fc0:	2001      	movs	r0, #1
 8005fc2:	f7fa ffe9 	bl	8000f98 <HAL_Delay>
      ms++;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 fa26 	bl	800741e <USB_GetMode>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d005      	beq.n	8005fe4 <USB_SetCurrentMode+0x84>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b31      	cmp	r3, #49	; 0x31
 8005fdc:	d9f0      	bls.n	8005fc0 <USB_SetCurrentMode+0x60>
 8005fde:	e001      	b.n	8005fe4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e005      	b.n	8005ff0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2b32      	cmp	r3, #50	; 0x32
 8005fe8:	d101      	bne.n	8005fee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e000      	b.n	8005ff0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b086      	sub	sp, #24
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006012:	2300      	movs	r3, #0
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	e009      	b.n	800602c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3340      	adds	r3, #64	; 0x40
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	2200      	movs	r2, #0
 8006024:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	3301      	adds	r3, #1
 800602a:	613b      	str	r3, [r7, #16]
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b0e      	cmp	r3, #14
 8006030:	d9f2      	bls.n	8006018 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11c      	bne.n	8006072 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006046:	f043 0302 	orr.w	r3, r3, #2
 800604a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e005      	b.n	800607e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006076:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006084:	461a      	mov	r2, r3
 8006086:	2300      	movs	r3, #0
 8006088:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006090:	4619      	mov	r1, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	461a      	mov	r2, r3
 800609a:	680b      	ldr	r3, [r1, #0]
 800609c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d10c      	bne.n	80060be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d104      	bne.n	80060b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060aa:	2100      	movs	r1, #0
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f965 	bl	800637c <USB_SetDevSpeed>
 80060b2:	e008      	b.n	80060c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060b4:	2101      	movs	r1, #1
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f960 	bl	800637c <USB_SetDevSpeed>
 80060bc:	e003      	b.n	80060c6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060be:	2103      	movs	r1, #3
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f95b 	bl	800637c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060c6:	2110      	movs	r1, #16
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f8f3 	bl	80062b4 <USB_FlushTxFifo>
 80060ce:	4603      	mov	r3, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f91f 	bl	800631c <USB_FlushRxFifo>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d001      	beq.n	80060e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ee:	461a      	mov	r2, r3
 80060f0:	2300      	movs	r3, #0
 80060f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	461a      	mov	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	461a      	mov	r2, r3
 8006108:	2300      	movs	r3, #0
 800610a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	e043      	b.n	800619a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006128:	d118      	bne.n	800615c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10a      	bne.n	8006146 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	461a      	mov	r2, r3
 800613e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e013      	b.n	800616e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	461a      	mov	r2, r3
 8006154:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	e008      	b.n	800616e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	461a      	mov	r2, r3
 800616a:	2300      	movs	r3, #0
 800616c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	2300      	movs	r3, #0
 800617e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	461a      	mov	r2, r3
 800618e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006192:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	3301      	adds	r3, #1
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d3b7      	bcc.n	8006112 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061a2:	2300      	movs	r3, #0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	e043      	b.n	8006230 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061be:	d118      	bne.n	80061f2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d10a      	bne.n	80061dc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	461a      	mov	r2, r3
 80061d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e013      	b.n	8006204 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e8:	461a      	mov	r2, r3
 80061ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e008      	b.n	8006204 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	461a      	mov	r2, r3
 8006200:	2300      	movs	r3, #0
 8006202:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006210:	461a      	mov	r2, r3
 8006212:	2300      	movs	r3, #0
 8006214:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006222:	461a      	mov	r2, r3
 8006224:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006228:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	3301      	adds	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	429a      	cmp	r2, r3
 8006236:	d3b7      	bcc.n	80061a8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006258:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f043 0210 	orr.w	r2, r3, #16
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699a      	ldr	r2, [r3, #24]
 8006270:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <USB_DevInit+0x2b8>)
 8006272:	4313      	orrs	r3, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d005      	beq.n	800628a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	f043 0208 	orr.w	r2, r3, #8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	803c3800 	.word	0x803c3800

080062b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a13      	ldr	r2, [pc, #76]	; (8006318 <USB_FlushTxFifo+0x64>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e01b      	b.n	800630c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	daf2      	bge.n	80062c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	019b      	lsls	r3, r3, #6
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4a08      	ldr	r2, [pc, #32]	; (8006318 <USB_FlushTxFifo+0x64>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e006      	b.n	800630c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d0f0      	beq.n	80062ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	00030d40 	.word	0x00030d40

0800631c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a11      	ldr	r2, [pc, #68]	; (8006378 <USB_FlushRxFifo+0x5c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e018      	b.n	800636c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	daf2      	bge.n	8006328 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2210      	movs	r2, #16
 800634a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3301      	adds	r3, #1
 8006350:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4a08      	ldr	r2, [pc, #32]	; (8006378 <USB_FlushRxFifo+0x5c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d901      	bls.n	800635e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e006      	b.n	800636c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	f003 0310 	and.w	r3, r3, #16
 8006366:	2b10      	cmp	r3, #16
 8006368:	d0f0      	beq.n	800634c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr
 8006378:	00030d40 	.word	0x00030d40

0800637c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f003 0306 	and.w	r3, r3, #6
 80063c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]
 80063d2:	e00a      	b.n	80063ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d002      	beq.n	80063e0 <USB_GetDevSpeed+0x32>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2b06      	cmp	r3, #6
 80063de:	d102      	bne.n	80063e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063e0:	2302      	movs	r3, #2
 80063e2:	75fb      	strb	r3, [r7, #23]
 80063e4:	e001      	b.n	80063ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063e6:	230f      	movs	r3, #15
 80063e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d13a      	bne.n	800648a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	69da      	ldr	r2, [r3, #28]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f303 	lsl.w	r3, r1, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	68f9      	ldr	r1, [r7, #12]
 800642e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006432:	4313      	orrs	r3, r2
 8006434:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d155      	bne.n	80064f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	791b      	ldrb	r3, [r3, #4]
 8006466:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006468:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	059b      	lsls	r3, r3, #22
 800646e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006470:	4313      	orrs	r3, r2
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e036      	b.n	80064f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006490:	69da      	ldr	r2, [r3, #28]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	f003 030f 	and.w	r3, r3, #15
 800649a:	2101      	movs	r1, #1
 800649c:	fa01 f303 	lsl.w	r3, r1, r3
 80064a0:	041b      	lsls	r3, r3, #16
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d11a      	bne.n	80064f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	791b      	ldrb	r3, [r3, #4]
 80064dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064de:	430b      	orrs	r3, r1
 80064e0:	4313      	orrs	r3, r2
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006508:	b480      	push	{r7}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	785b      	ldrb	r3, [r3, #1]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d161      	bne.n	80065e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800653a:	d11f      	bne.n	800657c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	015a      	lsls	r2, r3, #5
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	440a      	add	r2, r1
 8006552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006556:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800655a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	440a      	add	r2, r1
 8006572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006576:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	b29b      	uxth	r3, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659c:	4013      	ands	r3, r2
 800659e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 030f 	and.w	r3, r3, #15
 80065b0:	2101      	movs	r1, #1
 80065b2:	fa01 f303 	lsl.w	r3, r1, r3
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	43db      	mvns	r3, r3
 80065ba:	68f9      	ldr	r1, [r7, #12]
 80065bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c0:	4013      	ands	r3, r2
 80065c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	0159      	lsls	r1, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	440b      	add	r3, r1
 80065da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065de:	4619      	mov	r1, r3
 80065e0:	4b35      	ldr	r3, [pc, #212]	; (80066b8 <USB_DeactivateEndpoint+0x1b0>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	600b      	str	r3, [r1, #0]
 80065e6:	e060      	b.n	80066aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065fe:	d11f      	bne.n	8006640 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	440a      	add	r2, r1
 8006616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800661e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800663a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800663e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	43db      	mvns	r3, r3
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006660:	4013      	ands	r3, r2
 8006662:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	2101      	movs	r1, #1
 8006676:	fa01 f303 	lsl.w	r3, r1, r3
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	43db      	mvns	r3, r3
 800667e:	68f9      	ldr	r1, [r7, #12]
 8006680:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006684:	4013      	ands	r3, r2
 8006686:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	0159      	lsls	r1, r3, #5
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	440b      	add	r3, r1
 800669e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a2:	4619      	mov	r1, r3
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <USB_DeactivateEndpoint+0x1b4>)
 80066a6:	4013      	ands	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	ec337800 	.word	0xec337800
 80066bc:	eff37800 	.word	0xeff37800

080066c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af02      	add	r7, sp, #8
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	785b      	ldrb	r3, [r3, #1]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	f040 815c 	bne.w	800699a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d132      	bne.n	8006750 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006708:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800670c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006728:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800672c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	0cdb      	lsrs	r3, r3, #19
 800674a:	04db      	lsls	r3, r3, #19
 800674c:	6113      	str	r3, [r2, #16]
 800674e:	e074      	b.n	800683a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	0151      	lsls	r1, r2, #5
 8006762:	69fa      	ldr	r2, [r7, #28]
 8006764:	440a      	add	r2, r1
 8006766:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676a:	0cdb      	lsrs	r3, r3, #19
 800676c:	04db      	lsls	r3, r3, #19
 800676e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800678e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	440b      	add	r3, r1
 80067ac:	1e59      	subs	r1, r3, #1
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80067b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80067b8:	4b9d      	ldr	r3, [pc, #628]	; (8006a30 <USB_EPStartXfer+0x370>)
 80067ba:	400b      	ands	r3, r1
 80067bc:	69b9      	ldr	r1, [r7, #24]
 80067be:	0148      	lsls	r0, r1, #5
 80067c0:	69f9      	ldr	r1, [r7, #28]
 80067c2:	4401      	add	r1, r0
 80067c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067c8:	4313      	orrs	r3, r2
 80067ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067e2:	69b9      	ldr	r1, [r7, #24]
 80067e4:	0148      	lsls	r0, r1, #5
 80067e6:	69f9      	ldr	r1, [r7, #28]
 80067e8:	4401      	add	r1, r0
 80067ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067ee:	4313      	orrs	r3, r2
 80067f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	791b      	ldrb	r3, [r3, #4]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d11f      	bne.n	800683a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	0151      	lsls	r1, r2, #5
 800680c:	69fa      	ldr	r2, [r7, #28]
 800680e:	440a      	add	r2, r1
 8006810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006814:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006818:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	0151      	lsls	r1, r2, #5
 800682c:	69fa      	ldr	r2, [r7, #28]
 800682e:	440a      	add	r2, r1
 8006830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006838:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d14b      	bne.n	80068d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	791b      	ldrb	r3, [r3, #4]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d128      	bne.n	80068b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006870:	2b00      	cmp	r3, #0
 8006872:	d110      	bne.n	8006896 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800688e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	e00f      	b.n	80068b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69ba      	ldr	r2, [r7, #24]
 80068c6:	0151      	lsls	r1, r2, #5
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	440a      	add	r2, r1
 80068cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	e133      	b.n	8006b40 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	0151      	lsls	r1, r2, #5
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	440a      	add	r2, r1
 80068ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	791b      	ldrb	r3, [r3, #4]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d015      	beq.n	800692c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 811b 	beq.w	8006b40 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	2101      	movs	r1, #1
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006926:	4313      	orrs	r3, r2
 8006928:	634b      	str	r3, [r1, #52]	; 0x34
 800692a:	e109      	b.n	8006b40 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006938:	2b00      	cmp	r3, #0
 800693a:	d110      	bne.n	800695e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	e00f      	b.n	800697e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6919      	ldr	r1, [r3, #16]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	b298      	uxth	r0, r3
 800698c:	79fb      	ldrb	r3, [r7, #7]
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	4603      	mov	r3, r0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 fade 	bl	8006f54 <USB_WritePacket>
 8006998:	e0d2      	b.n	8006b40 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	015a      	lsls	r2, r3, #5
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	4413      	add	r3, r2
 80069a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	0151      	lsls	r1, r2, #5
 80069ac:	69fa      	ldr	r2, [r7, #28]
 80069ae:	440a      	add	r2, r1
 80069b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b4:	0cdb      	lsrs	r3, r3, #19
 80069b6:	04db      	lsls	r3, r3, #19
 80069b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	015a      	lsls	r2, r3, #5
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	69ba      	ldr	r2, [r7, #24]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d126      	bne.n	8006a34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	691a      	ldr	r2, [r3, #16]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069fc:	69b9      	ldr	r1, [r7, #24]
 80069fe:	0148      	lsls	r0, r1, #5
 8006a00:	69f9      	ldr	r1, [r7, #28]
 8006a02:	4401      	add	r1, r0
 8006a04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	69fa      	ldr	r2, [r7, #28]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a2a:	6113      	str	r3, [r2, #16]
 8006a2c:	e03a      	b.n	8006aa4 <USB_EPStartXfer+0x3e4>
 8006a2e:	bf00      	nop
 8006a30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	699a      	ldr	r2, [r3, #24]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	1e5a      	subs	r2, r3, #1
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	8afa      	ldrh	r2, [r7, #22]
 8006a50:	fb03 f202 	mul.w	r2, r3, r2
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	8afb      	ldrh	r3, [r7, #22]
 8006a68:	04d9      	lsls	r1, r3, #19
 8006a6a:	4b38      	ldr	r3, [pc, #224]	; (8006b4c <USB_EPStartXfer+0x48c>)
 8006a6c:	400b      	ands	r3, r1
 8006a6e:	69b9      	ldr	r1, [r7, #24]
 8006a70:	0148      	lsls	r0, r1, #5
 8006a72:	69f9      	ldr	r1, [r7, #28]
 8006a74:	4401      	add	r1, r0
 8006a76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	0148      	lsls	r0, r1, #5
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	4401      	add	r1, r0
 8006a9c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10d      	bne.n	8006ac6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6919      	ldr	r1, [r3, #16]
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac2:	460a      	mov	r2, r1
 8006ac4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d128      	bne.n	8006b20 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d110      	bne.n	8006b00 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	0151      	lsls	r1, r2, #5
 8006af0:	69fa      	ldr	r2, [r7, #28]
 8006af2:	440a      	add	r2, r1
 8006af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	e00f      	b.n	8006b20 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	015a      	lsls	r2, r3, #5
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	4413      	add	r3, r2
 8006b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	0151      	lsls	r1, r2, #5
 8006b12:	69fa      	ldr	r2, [r7, #28]
 8006b14:	440a      	add	r2, r1
 8006b16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b3a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3720      	adds	r7, #32
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	1ff80000 	.word	0x1ff80000

08006b50 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b087      	sub	sp, #28
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	785b      	ldrb	r3, [r3, #1]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	f040 80ce 	bne.w	8006d0e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d132      	bne.n	8006be0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd8:	0cdb      	lsrs	r3, r3, #19
 8006bda:	04db      	lsls	r3, r3, #19
 8006bdc:	6113      	str	r3, [r2, #16]
 8006bde:	e04e      	b.n	8006c7e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	693a      	ldr	r2, [r7, #16]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	0cdb      	lsrs	r3, r3, #19
 8006bfc:	04db      	lsls	r3, r3, #19
 8006bfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c22:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	699a      	ldr	r2, [r3, #24]
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d903      	bls.n	8006c38 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	68da      	ldr	r2, [r3, #12]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c6e:	6939      	ldr	r1, [r7, #16]
 8006c70:	0148      	lsls	r0, r1, #5
 8006c72:	6979      	ldr	r1, [r7, #20]
 8006c74:	4401      	add	r1, r0
 8006c76:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d11e      	bne.n	8006cc2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d009      	beq.n	8006ca0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c98:	461a      	mov	r2, r3
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	015a      	lsls	r2, r3, #5
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	693a      	ldr	r2, [r7, #16]
 8006cb0:	0151      	lsls	r1, r2, #5
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	440a      	add	r2, r1
 8006cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e097      	b.n	8006df2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ce0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8083 	beq.w	8006df2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	f003 030f 	and.w	r3, r3, #15
 8006cfc:	2101      	movs	r1, #1
 8006cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006d02:	6979      	ldr	r1, [r7, #20]
 8006d04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	634b      	str	r3, [r1, #52]	; 0x34
 8006d0c:	e071      	b.n	8006df2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d28:	0cdb      	lsrs	r3, r3, #19
 8006d2a:	04db      	lsls	r3, r3, #19
 8006d2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	015a      	lsls	r2, r3, #5
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4413      	add	r3, r2
 8006d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d50:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	691a      	ldr	r2, [r3, #16]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006da0:	6939      	ldr	r1, [r7, #16]
 8006da2:	0148      	lsls	r0, r1, #5
 8006da4:	6979      	ldr	r1, [r7, #20]
 8006da6:	4401      	add	r1, r0
 8006da8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006dac:	4313      	orrs	r3, r2
 8006dae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d10d      	bne.n	8006dd2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6919      	ldr	r1, [r3, #16]
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	460a      	mov	r2, r1
 8006dd0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006df0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	785b      	ldrb	r3, [r3, #1]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d14a      	bne.n	8006eb4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e36:	f040 8086 	bne.w	8006f46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	7812      	ldrb	r2, [r2, #0]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e5c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d902      	bls.n	8006e98 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
          break;
 8006e96:	e056      	b.n	8006f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	015a      	lsls	r2, r3, #5
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eb0:	d0e7      	beq.n	8006e82 <USB_EPStopXfer+0x82>
 8006eb2:	e048      	b.n	8006f46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ecc:	d13b      	bne.n	8006f46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	7812      	ldrb	r2, [r2, #0]
 8006ee2:	0151      	lsls	r1, r2, #5
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	440a      	add	r2, r1
 8006ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	7812      	ldrb	r2, [r2, #0]
 8006f06:	0151      	lsls	r1, r2, #5
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	440a      	add	r2, r1
 8006f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d902      	bls.n	8006f2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	75fb      	strb	r3, [r7, #23]
          break;
 8006f2a:	e00c      	b.n	8006f46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f44:	d0e7      	beq.n	8006f16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	460b      	mov	r3, r1
 8006f64:	71fb      	strb	r3, [r7, #7]
 8006f66:	4613      	mov	r3, r2
 8006f68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d123      	bne.n	8006fc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f7a:	88bb      	ldrh	r3, [r7, #4]
 8006f7c:	3303      	adds	r3, #3
 8006f7e:	089b      	lsrs	r3, r3, #2
 8006f80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	e018      	b.n	8006fba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f88:	79fb      	ldrb	r3, [r7, #7]
 8006f8a:	031a      	lsls	r2, r3, #12
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f94:	461a      	mov	r2, r3
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	3301      	adds	r3, #1
 8006fac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	69ba      	ldr	r2, [r7, #24]
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d3e2      	bcc.n	8006f88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3724      	adds	r7, #36	; 0x24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b08b      	sub	sp, #44	; 0x2c
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006fe6:	88fb      	ldrh	r3, [r7, #6]
 8006fe8:	089b      	lsrs	r3, r3, #2
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	f003 0303 	and.w	r3, r3, #3
 8006ff4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	623b      	str	r3, [r7, #32]
 8006ffa:	e014      	b.n	8007026 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	601a      	str	r2, [r3, #0]
    pDest++;
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	3301      	adds	r3, #1
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	3301      	adds	r3, #1
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	3301      	adds	r3, #1
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	3301      	adds	r3, #1
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007020:	6a3b      	ldr	r3, [r7, #32]
 8007022:	3301      	adds	r3, #1
 8007024:	623b      	str	r3, [r7, #32]
 8007026:	6a3a      	ldr	r2, [r7, #32]
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3e6      	bcc.n	8006ffc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800702e:	8bfb      	ldrh	r3, [r7, #30]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d01e      	beq.n	8007072 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800703e:	461a      	mov	r2, r3
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	6812      	ldr	r2, [r2, #0]
 8007046:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	fa22 f303 	lsr.w	r3, r2, r3
 8007054:	b2da      	uxtb	r2, r3
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	701a      	strb	r2, [r3, #0]
      i++;
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	3301      	adds	r3, #1
 800705e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	3301      	adds	r3, #1
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007066:	8bfb      	ldrh	r3, [r7, #30]
 8007068:	3b01      	subs	r3, #1
 800706a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800706c:	8bfb      	ldrh	r3, [r7, #30]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1ea      	bne.n	8007048 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007074:	4618      	mov	r0, r3
 8007076:	372c      	adds	r7, #44	; 0x2c
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	785b      	ldrb	r3, [r3, #1]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d12c      	bne.n	80070f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	db12      	blt.n	80070d4 <USB_EPSetStall+0x54>
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00f      	beq.n	80070d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070f2:	6013      	str	r3, [r2, #0]
 80070f4:	e02b      	b.n	800714e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	db12      	blt.n	800712e <USB_EPSetStall+0xae>
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00f      	beq.n	800712e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	0151      	lsls	r1, r2, #5
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	440a      	add	r2, r1
 8007124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007128:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800712c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	0151      	lsls	r1, r2, #5
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	440a      	add	r2, r1
 8007144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800714c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	785b      	ldrb	r3, [r3, #1]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d128      	bne.n	80071ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007196:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	791b      	ldrb	r3, [r3, #4]
 800719c:	2b03      	cmp	r3, #3
 800719e:	d003      	beq.n	80071a8 <USB_EPClearStall+0x4c>
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	791b      	ldrb	r3, [r3, #4]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d138      	bne.n	800721a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	e027      	b.n	800721a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d003      	beq.n	80071fa <USB_EPClearStall+0x9e>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	791b      	ldrb	r3, [r3, #4]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d10f      	bne.n	800721a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007246:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800724a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	78fb      	ldrb	r3, [r7, #3]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800725c:	68f9      	ldr	r1, [r7, #12]
 800725e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007262:	4313      	orrs	r3, r2
 8007264:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072a2:	f023 0302 	bic.w	r3, r3, #2
 80072a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072d0:	f023 0303 	bic.w	r3, r3, #3
 80072d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e4:	f043 0302 	orr.w	r3, r3, #2
 80072e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	4013      	ands	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007310:	68fb      	ldr	r3, [r7, #12]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	4013      	ands	r3, r2
 8007340:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	0c1b      	lsrs	r3, r3, #16
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	68ba      	ldr	r2, [r7, #8]
 8007372:	4013      	ands	r3, r2
 8007374:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	b29b      	uxth	r3, r3
}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007386:	b480      	push	{r7}
 8007388:	b085      	sub	sp, #20
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4013      	ands	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073b4:	68bb      	ldr	r3, [r7, #8]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b087      	sub	sp, #28
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80073e6:	78fb      	ldrb	r3, [r7, #3]
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	fa22 f303 	lsr.w	r3, r2, r3
 80073f2:	01db      	lsls	r3, r3, #7
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	4013      	ands	r3, r2
 800740e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007410:	68bb      	ldr	r3, [r7, #8]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0301 	and.w	r3, r3, #1
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007454:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007458:	f023 0307 	bic.w	r3, r3, #7
 800745c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800746c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007470:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	460b      	mov	r3, r1
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	333c      	adds	r3, #60	; 0x3c
 8007496:	3304      	adds	r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4a26      	ldr	r2, [pc, #152]	; (8007538 <USB_EP0_OutStart+0xb8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d90a      	bls.n	80074ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b4:	d101      	bne.n	80074ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80074b6:	2300      	movs	r3, #0
 80074b8:	e037      	b.n	800752a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c0:	461a      	mov	r2, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e8:	f043 0318 	orr.w	r3, r3, #24
 80074ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007500:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d10f      	bne.n	8007528 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007522:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	4f54300a 	.word	0x4f54300a

0800753c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800753c:	b480      	push	{r7}
 800753e:	b085      	sub	sp, #20
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <USB_CoreReset+0x64>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d901      	bls.n	800755a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e01b      	b.n	8007592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	daf2      	bge.n	8007548 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f043 0201 	orr.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3301      	adds	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <USB_CoreReset+0x64>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d901      	bls.n	8007584 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e006      	b.n	8007592 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b01      	cmp	r3, #1
 800758e:	d0f0      	beq.n	8007572 <USB_CoreReset+0x36>

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	00030d40 	.word	0x00030d40

080075a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075a4:	b084      	sub	sp, #16
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b086      	sub	sp, #24
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80075b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c4:	461a      	mov	r2, r3
 80075c6:	2300      	movs	r3, #0
 80075c8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d018      	beq.n	8007614 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80075e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d10a      	bne.n	80075fe <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075f6:	f043 0304 	orr.w	r3, r3, #4
 80075fa:	6013      	str	r3, [r2, #0]
 80075fc:	e014      	b.n	8007628 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800760c:	f023 0304 	bic.w	r3, r3, #4
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	e009      	b.n	8007628 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007622:	f023 0304 	bic.w	r3, r3, #4
 8007626:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007628:	2110      	movs	r1, #16
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fe fe42 	bl	80062b4 <USB_FlushTxFifo>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7fe fe6e 	bl	800631c <USB_FlushRxFifo>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800764a:	2300      	movs	r3, #0
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	e015      	b.n	800767c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800765c:	461a      	mov	r2, r3
 800765e:	f04f 33ff 	mov.w	r3, #4294967295
 8007662:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007670:	461a      	mov	r2, r3
 8007672:	2300      	movs	r3, #0
 8007674:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3301      	adds	r3, #1
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	429a      	cmp	r2, r3
 8007682:	d3e5      	bcc.n	8007650 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f04f 32ff 	mov.w	r2, #4294967295
 8007690:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00b      	beq.n	80076b6 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a13      	ldr	r2, [pc, #76]	; (80076f8 <USB_HostInit+0x154>)
 80076aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a13      	ldr	r2, [pc, #76]	; (80076fc <USB_HostInit+0x158>)
 80076b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80076b4:	e009      	b.n	80076ca <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2280      	movs	r2, #128	; 0x80
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a10      	ldr	r2, [pc, #64]	; (8007700 <USB_HostInit+0x15c>)
 80076c0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a0f      	ldr	r2, [pc, #60]	; (8007704 <USB_HostInit+0x160>)
 80076c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d105      	bne.n	80076dc <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f043 0210 	orr.w	r2, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <USB_HostInit+0x164>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076f4:	b004      	add	sp, #16
 80076f6:	4770      	bx	lr
 80076f8:	01000200 	.word	0x01000200
 80076fc:	00e00300 	.word	0x00e00300
 8007700:	00600080 	.word	0x00600080
 8007704:	004000e0 	.word	0x004000e0
 8007708:	a3200008 	.word	0xa3200008

0800770c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800772a:	f023 0303 	bic.w	r3, r3, #3
 800772e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007744:	4313      	orrs	r3, r2
 8007746:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007748:	78fb      	ldrb	r3, [r7, #3]
 800774a:	2b01      	cmp	r3, #1
 800774c:	d107      	bne.n	800775e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007754:	461a      	mov	r2, r3
 8007756:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800775a:	6053      	str	r3, [r2, #4]
 800775c:	e009      	b.n	8007772 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800775e:	78fb      	ldrb	r3, [r7, #3]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d106      	bne.n	8007772 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800776a:	461a      	mov	r2, r3
 800776c:	f241 7370 	movw	r3, #6000	; 0x1770
 8007770:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	68fa      	ldr	r2, [r7, #12]
 80077a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ae:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077b0:	2064      	movs	r0, #100	; 0x64
 80077b2:	f7f9 fbf1 	bl	8000f98 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80077c4:	200a      	movs	r0, #10
 80077c6:	f7f9 fbe7 	bl	8000f98 <HAL_Delay>

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80077f8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <USB_DriveVbus+0x44>
 8007804:	78fb      	ldrb	r3, [r7, #3]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d106      	bne.n	8007818 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007812:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007816:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800781e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007822:	d109      	bne.n	8007838 <USB_DriveVbus+0x64>
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d106      	bne.n	8007838 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007836:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007846:	b480      	push	{r7}
 8007848:	b085      	sub	sp, #20
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	0c5b      	lsrs	r3, r3, #17
 8007864:	f003 0303 	and.w	r3, r3, #3
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	b29b      	uxth	r3, r3
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
	...

08007898 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	70fb      	strb	r3, [r7, #3]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70bb      	strb	r3, [r7, #2]
 80078ae:	4613      	mov	r3, r2
 80078b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80078ba:	78fb      	ldrb	r3, [r7, #3]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078c6:	461a      	mov	r2, r3
 80078c8:	f04f 33ff 	mov.w	r3, #4294967295
 80078cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80078ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d87e      	bhi.n	80079d4 <USB_HC_Init+0x13c>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <USB_HC_Init+0x44>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	080078ed 	.word	0x080078ed
 80078e0:	08007997 	.word	0x08007997
 80078e4:	080078ed 	.word	0x080078ed
 80078e8:	08007959 	.word	0x08007959
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f8:	461a      	mov	r2, r3
 80078fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80078fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007900:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	da10      	bge.n	800792a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007928:	e057      	b.n	80079da <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007932:	2b00      	cmp	r3, #0
 8007934:	d051      	beq.n	80079da <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007936:	78fb      	ldrb	r3, [r7, #3]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	4413      	add	r3, r2
 800793e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	440a      	add	r2, r1
 800794c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007950:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007954:	60d3      	str	r3, [r2, #12]
      break;
 8007956:	e040      	b.n	80079da <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	461a      	mov	r2, r3
 8007966:	f240 639d 	movw	r3, #1693	; 0x69d
 800796a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800796c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	da34      	bge.n	80079de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007974:	78fb      	ldrb	r3, [r7, #3]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	78fa      	ldrb	r2, [r7, #3]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	440a      	add	r2, r1
 800798a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800798e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007992:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007994:	e023      	b.n	80079de <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007996:	78fb      	ldrb	r3, [r7, #3]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	4413      	add	r3, r2
 800799e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a2:	461a      	mov	r2, r3
 80079a4:	f240 2325 	movw	r3, #549	; 0x225
 80079a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da17      	bge.n	80079e2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079cc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80079d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80079d2:	e006      	b.n	80079e2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	77fb      	strb	r3, [r7, #31]
      break;
 80079d8:	e004      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079da:	bf00      	nop
 80079dc:	e002      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079de:	bf00      	nop
 80079e0:	e000      	b.n	80079e4 <USB_HC_Init+0x14c>
      break;
 80079e2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	015a      	lsls	r2, r3, #5
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	78fa      	ldrb	r2, [r7, #3]
 80079f4:	0151      	lsls	r1, r2, #5
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	440a      	add	r2, r1
 80079fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079fe:	f043 0302 	orr.w	r3, r3, #2
 8007a02:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a0a:	699a      	ldr	r2, [r3, #24]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	2101      	movs	r1, #1
 8007a14:	fa01 f303 	lsl.w	r3, r1, r3
 8007a18:	6939      	ldr	r1, [r7, #16]
 8007a1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	da03      	bge.n	8007a3e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3a:	61bb      	str	r3, [r7, #24]
 8007a3c:	e001      	b.n	8007a42 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff feff 	bl	8007846 <USB_GetHostSpeed>
 8007a48:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d106      	bne.n	8007a60 <USB_HC_Init+0x1c8>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d003      	beq.n	8007a60 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	e001      	b.n	8007a64 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a64:	787b      	ldrb	r3, [r7, #1]
 8007a66:	059b      	lsls	r3, r3, #22
 8007a68:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a6c:	78bb      	ldrb	r3, [r7, #2]
 8007a6e:	02db      	lsls	r3, r3, #11
 8007a70:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a74:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a7a:	049b      	lsls	r3, r3, #18
 8007a7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a80:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a82:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a88:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	0159      	lsls	r1, r3, #5
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	440b      	add	r3, r1
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007aa0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	d003      	beq.n	8007ab2 <USB_HC_Init+0x21a>
 8007aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d10f      	bne.n	8007ad2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	78fa      	ldrb	r2, [r7, #3]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	693a      	ldr	r2, [r7, #16]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	; 0x30
 8007ae0:	af02      	add	r7, sp, #8
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	785b      	ldrb	r3, [r3, #1]
 8007af2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007af8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02d      	beq.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	791b      	ldrb	r3, [r3, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d129      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007b0e:	79fb      	ldrb	r3, [r7, #7]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d117      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	79db      	ldrb	r3, [r3, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <USB_HC_StartXfer+0x48>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	79db      	ldrb	r3, [r3, #7]
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d10f      	bne.n	8007b44 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	6a3b      	ldr	r3, [r7, #32]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	6a3a      	ldr	r2, [r7, #32]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b42:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	785b      	ldrb	r3, [r3, #1]
 8007b56:	4619      	mov	r1, r3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 fa0f 	bl	8007f7c <USB_DoPing>
      return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e0f8      	b.n	8007d54 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d018      	beq.n	8007b9c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	8912      	ldrh	r2, [r2, #8]
 8007b72:	4413      	add	r3, r2
 8007b74:	3b01      	subs	r3, #1
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	8912      	ldrh	r2, [r2, #8]
 8007b7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b7e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b82:	8b7b      	ldrh	r3, [r7, #26]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d90b      	bls.n	8007ba0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b88:	8b7b      	ldrh	r3, [r7, #26]
 8007b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	8912      	ldrh	r2, [r2, #8]
 8007b92:	fb03 f202 	mul.w	r2, r3, r2
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	611a      	str	r2, [r3, #16]
 8007b9a:	e001      	b.n	8007ba0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	78db      	ldrb	r3, [r3, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d007      	beq.n	8007bb8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ba8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	8912      	ldrh	r2, [r2, #8]
 8007bae:	fb03 f202 	mul.w	r2, r3, r2
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	611a      	str	r2, [r3, #16]
 8007bb6:	e003      	b.n	8007bc0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007bca:	04d9      	lsls	r1, r3, #19
 8007bcc:	4b63      	ldr	r3, [pc, #396]	; (8007d5c <USB_HC_StartXfer+0x280>)
 8007bce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	7a9b      	ldrb	r3, [r3, #10]
 8007bd6:	075b      	lsls	r3, r3, #29
 8007bd8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bdc:	69f9      	ldr	r1, [r7, #28]
 8007bde:	0148      	lsls	r0, r1, #5
 8007be0:	6a39      	ldr	r1, [r7, #32]
 8007be2:	4401      	add	r1, r0
 8007be4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007be8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	68d9      	ldr	r1, [r3, #12]
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c02:	460a      	mov	r2, r1
 8007c04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	bf0c      	ite	eq
 8007c16:	2301      	moveq	r3, #1
 8007c18:	2300      	movne	r3, #0
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	69fa      	ldr	r2, [r7, #28]
 8007c2e:	0151      	lsls	r1, r2, #5
 8007c30:	6a3a      	ldr	r2, [r7, #32]
 8007c32:	440a      	add	r2, r1
 8007c34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007c38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007c3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	7e7b      	ldrb	r3, [r7, #25]
 8007c4e:	075b      	lsls	r3, r3, #29
 8007c50:	69f9      	ldr	r1, [r7, #28]
 8007c52:	0148      	lsls	r0, r1, #5
 8007c54:	6a39      	ldr	r1, [r7, #32]
 8007c56:	4401      	add	r1, r0
 8007c58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c76:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	78db      	ldrb	r3, [r3, #3]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d004      	beq.n	8007c8a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	613b      	str	r3, [r7, #16]
 8007c88:	e003      	b.n	8007c92 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c90:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c98:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	015a      	lsls	r2, r3, #5
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007cac:	79fb      	ldrb	r3, [r7, #7]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e04e      	b.n	8007d54 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d149      	bne.n	8007d52 <USB_HC_StartXfer+0x276>
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d045      	beq.n	8007d52 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	79db      	ldrb	r3, [r3, #7]
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	d830      	bhi.n	8007d30 <USB_HC_StartXfer+0x254>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <USB_HC_StartXfer+0x1f8>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007ce5 	.word	0x08007ce5
 8007cd8:	08007d09 	.word	0x08007d09
 8007cdc:	08007ce5 	.word	0x08007ce5
 8007ce0:	08007d09 	.word	0x08007d09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	3303      	adds	r3, #3
 8007cea:	089b      	lsrs	r3, r3, #2
 8007cec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007cee:	8afa      	ldrh	r2, [r7, #22]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d91c      	bls.n	8007d34 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f043 0220 	orr.w	r2, r3, #32
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d06:	e015      	b.n	8007d34 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	695b      	ldr	r3, [r3, #20]
 8007d0c:	3303      	adds	r3, #3
 8007d0e:	089b      	lsrs	r3, r3, #2
 8007d10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d12:	8afa      	ldrh	r2, [r7, #22]
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d90a      	bls.n	8007d38 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d2e:	e003      	b.n	8007d38 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007d30:	bf00      	nop
 8007d32:	e002      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d34:	bf00      	nop
 8007d36:	e000      	b.n	8007d3a <USB_HC_StartXfer+0x25e>
        break;
 8007d38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68d9      	ldr	r1, [r3, #12]
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	785a      	ldrb	r2, [r3, #1]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	2000      	movs	r0, #0
 8007d4a:	9000      	str	r0, [sp, #0]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff f901 	bl	8006f54 <USB_WritePacket>
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3728      	adds	r7, #40	; 0x28
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	1ff80000 	.word	0x1ff80000

08007d60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	b29b      	uxth	r3, r3
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr

08007d82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b089      	sub	sp, #36	; 0x24
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	0c9b      	lsrs	r3, r3, #18
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007db0:	69bb      	ldr	r3, [r7, #24]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	0fdb      	lsrs	r3, r3, #31
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d104      	bne.n	8007ddc <USB_HC_Halt+0x5a>
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	e0c8      	b.n	8007f6e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <USB_HC_Halt+0x66>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d163      	bne.n	8007eb0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e06:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f040 80ab 	bne.w	8007f6c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d133      	bne.n	8007e8a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e40:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	0151      	lsls	r1, r2, #5
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	440a      	add	r2, r1
 8007e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e60:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3301      	adds	r3, #1
 8007e66:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e6e:	d81d      	bhi.n	8007eac <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e86:	d0ec      	beq.n	8007e62 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e88:	e070      	b.n	8007f6c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	015a      	lsls	r2, r3, #5
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	0151      	lsls	r1, r2, #5
 8007e9c:	69fa      	ldr	r2, [r7, #28]
 8007e9e:	440a      	add	r2, r1
 8007ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eaa:	e05f      	b.n	8007f6c <USB_HC_Halt+0x1ea>
            break;
 8007eac:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eae:	e05d      	b.n	8007f6c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	0151      	lsls	r1, r2, #5
 8007ec2:	69fa      	ldr	r2, [r7, #28]
 8007ec4:	440a      	add	r2, r1
 8007ec6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ece:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d133      	bne.n	8007f48 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	0151      	lsls	r1, r2, #5
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	440a      	add	r2, r1
 8007ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007efe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	69fa      	ldr	r2, [r7, #28]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f1e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f2c:	d81d      	bhi.n	8007f6a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f44:	d0ec      	beq.n	8007f20 <USB_HC_Halt+0x19e>
 8007f46:	e011      	b.n	8007f6c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69ba      	ldr	r2, [r7, #24]
 8007f58:	0151      	lsls	r1, r2, #5
 8007f5a:	69fa      	ldr	r2, [r7, #28]
 8007f5c:	440a      	add	r2, r1
 8007f5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	e000      	b.n	8007f6c <USB_HC_Halt+0x1ea>
          break;
 8007f6a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3724      	adds	r7, #36	; 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	460b      	mov	r3, r1
 8007f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f8c:	78fb      	ldrb	r3, [r7, #3]
 8007f8e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f90:	2301      	movs	r3, #1
 8007f92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	04da      	lsls	r2, r3, #19
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <USB_DoPing+0x74>)
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fac:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	015a      	lsls	r2, r3, #5
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	4413      	add	r3, r2
 8007fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fc4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fcc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fda:	461a      	mov	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	1ff80000 	.word	0x1ff80000

08007ff4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7fd ff98 	bl	8005f3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800800e:	2110      	movs	r1, #16
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fe f94f 	bl	80062b4 <USB_FlushTxFifo>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7fe f97b 	bl	800631c <USB_FlushRxFifo>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008030:	2300      	movs	r3, #0
 8008032:	61bb      	str	r3, [r7, #24]
 8008034:	e01f      	b.n	8008076 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800804c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008054:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800805c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	461a      	mov	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	3301      	adds	r3, #1
 8008074:	61bb      	str	r3, [r7, #24]
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	2b0f      	cmp	r3, #15
 800807a:	d9dc      	bls.n	8008036 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800807c:	2300      	movs	r3, #0
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	e034      	b.n	80080ec <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008098:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080a8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	015a      	lsls	r2, r3, #5
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	4413      	add	r3, r2
 80080b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b6:	461a      	mov	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	3301      	adds	r3, #1
 80080c0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080c8:	d80c      	bhi.n	80080e4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	015a      	lsls	r2, r3, #5
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	4413      	add	r3, r2
 80080d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080e0:	d0ec      	beq.n	80080bc <USB_StopHost+0xc8>
 80080e2:	e000      	b.n	80080e6 <USB_StopHost+0xf2>
        break;
 80080e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	3301      	adds	r3, #1
 80080ea:	61bb      	str	r3, [r7, #24]
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	2b0f      	cmp	r3, #15
 80080f0:	d9c7      	bls.n	8008082 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f8:	461a      	mov	r2, r3
 80080fa:	f04f 33ff 	mov.w	r3, #4294967295
 80080fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f04f 32ff 	mov.w	r2, #4294967295
 8008106:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fd ff07 	bl	8005f1c <USB_EnableGlobalInt>

  return ret;
 800810e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008124:	2010      	movs	r0, #16
 8008126:	f004 fc99 	bl	800ca5c <USBD_static_malloc>
 800812a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d109      	bne.n	8008146 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	32b0      	adds	r2, #176	; 0xb0
 800813c:	2100      	movs	r1, #0
 800813e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008142:	2302      	movs	r3, #2
 8008144:	e048      	b.n	80081d8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	32b0      	adds	r2, #176	; 0xb0
 8008150:	68f9      	ldr	r1, [r7, #12]
 8008152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	32b0      	adds	r2, #176	; 0xb0
 8008160:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	7c1b      	ldrb	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d10d      	bne.n	800818e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008172:	4b1b      	ldr	r3, [pc, #108]	; (80081e0 <USBD_HID_Init+0xc8>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	f003 020f 	and.w	r2, r3, #15
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	3326      	adds	r3, #38	; 0x26
 8008188:	2207      	movs	r2, #7
 800818a:	801a      	strh	r2, [r3, #0]
 800818c:	e00c      	b.n	80081a8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <USBD_HID_Init+0xc8>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f003 020f 	and.w	r2, r3, #15
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	3326      	adds	r3, #38	; 0x26
 80081a4:	220a      	movs	r2, #10
 80081a6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80081a8:	4b0d      	ldr	r3, [pc, #52]	; (80081e0 <USBD_HID_Init+0xc8>)
 80081aa:	7819      	ldrb	r1, [r3, #0]
 80081ac:	2304      	movs	r3, #4
 80081ae:	2203      	movs	r2, #3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f004 faf4 	bl	800c79e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80081b6:	4b0a      	ldr	r3, [pc, #40]	; (80081e0 <USBD_HID_Init+0xc8>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f003 020f 	and.w	r2, r3, #15
 80081be:	6879      	ldr	r1, [r7, #4]
 80081c0:	4613      	mov	r3, r2
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	440b      	add	r3, r1
 80081ca:	3324      	adds	r3, #36	; 0x24
 80081cc:	2201      	movs	r2, #1
 80081ce:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	200000bf 	.word	0x200000bf

080081e4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80081f0:	4b1f      	ldr	r3, [pc, #124]	; (8008270 <USBD_HID_DeInit+0x8c>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	4619      	mov	r1, r3
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f004 faf7 	bl	800c7ea <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80081fc:	4b1c      	ldr	r3, [pc, #112]	; (8008270 <USBD_HID_DeInit+0x8c>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	f003 020f 	and.w	r2, r3, #15
 8008204:	6879      	ldr	r1, [r7, #4]
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	440b      	add	r3, r1
 8008210:	3324      	adds	r3, #36	; 0x24
 8008212:	2200      	movs	r2, #0
 8008214:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008216:	4b16      	ldr	r3, [pc, #88]	; (8008270 <USBD_HID_DeInit+0x8c>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	f003 020f 	and.w	r2, r3, #15
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	3326      	adds	r3, #38	; 0x26
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32b0      	adds	r2, #176	; 0xb0
 800823a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	32b0      	adds	r2, #176	; 0xb0
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	4618      	mov	r0, r3
 8008252:	f004 fc11 	bl	800ca78 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	32b0      	adds	r2, #176	; 0xb0
 8008260:	2100      	movs	r1, #0
 8008262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	200000bf 	.word	0x200000bf

08008274 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	32b0      	adds	r2, #176	; 0xb0
 8008288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d101      	bne.n	80082a0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800829c:	2303      	movs	r3, #3
 800829e:	e0e8      	b.n	8008472 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d046      	beq.n	800833a <USBD_HID_Setup+0xc6>
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	f040 80d8 	bne.w	8008462 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	3b02      	subs	r3, #2
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d836      	bhi.n	800832a <USBD_HID_Setup+0xb6>
 80082bc:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <USBD_HID_Setup+0x50>)
 80082be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c2:	bf00      	nop
 80082c4:	0800831b 	.word	0x0800831b
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	0800832b 	.word	0x0800832b
 80082d0:	0800832b 	.word	0x0800832b
 80082d4:	0800832b 	.word	0x0800832b
 80082d8:	0800832b 	.word	0x0800832b
 80082dc:	0800832b 	.word	0x0800832b
 80082e0:	0800832b 	.word	0x0800832b
 80082e4:	08008309 	.word	0x08008309
 80082e8:	080082ed 	.word	0x080082ed
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	885b      	ldrh	r3, [r3, #2]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	601a      	str	r2, [r3, #0]
          break;
 80082f8:	e01e      	b.n	8008338 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f001 fbff 	bl	8009b04 <USBD_CtlSendData>
          break;
 8008306:	e017      	b.n	8008338 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	885b      	ldrh	r3, [r3, #2]
 800830c:	0a1b      	lsrs	r3, r3, #8
 800830e:	b29b      	uxth	r3, r3
 8008310:	b2db      	uxtb	r3, r3
 8008312:	461a      	mov	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	605a      	str	r2, [r3, #4]
          break;
 8008318:	e00e      	b.n	8008338 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3304      	adds	r3, #4
 800831e:	2201      	movs	r2, #1
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fbee 	bl	8009b04 <USBD_CtlSendData>
          break;
 8008328:	e006      	b.n	8008338 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fb78 	bl	8009a22 <USBD_CtlError>
          ret = USBD_FAIL;
 8008332:	2303      	movs	r3, #3
 8008334:	75fb      	strb	r3, [r7, #23]
          break;
 8008336:	bf00      	nop
      }
      break;
 8008338:	e09a      	b.n	8008470 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	785b      	ldrb	r3, [r3, #1]
 800833e:	2b0b      	cmp	r3, #11
 8008340:	f200 8086 	bhi.w	8008450 <USBD_HID_Setup+0x1dc>
 8008344:	a201      	add	r2, pc, #4	; (adr r2, 800834c <USBD_HID_Setup+0xd8>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	0800837d 	.word	0x0800837d
 8008350:	0800845f 	.word	0x0800845f
 8008354:	08008451 	.word	0x08008451
 8008358:	08008451 	.word	0x08008451
 800835c:	08008451 	.word	0x08008451
 8008360:	08008451 	.word	0x08008451
 8008364:	080083a7 	.word	0x080083a7
 8008368:	08008451 	.word	0x08008451
 800836c:	08008451 	.word	0x08008451
 8008370:	08008451 	.word	0x08008451
 8008374:	080083ff 	.word	0x080083ff
 8008378:	08008429 	.word	0x08008429
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b03      	cmp	r3, #3
 8008386:	d107      	bne.n	8008398 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008388:	f107 030a 	add.w	r3, r7, #10
 800838c:	2202      	movs	r2, #2
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fbb7 	bl	8009b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008396:	e063      	b.n	8008460 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fb41 	bl	8009a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80083a0:	2303      	movs	r3, #3
 80083a2:	75fb      	strb	r3, [r7, #23]
          break;
 80083a4:	e05c      	b.n	8008460 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	885b      	ldrh	r3, [r3, #2]
 80083aa:	0a1b      	lsrs	r3, r3, #8
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b22      	cmp	r3, #34	; 0x22
 80083b0:	d108      	bne.n	80083c4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	88db      	ldrh	r3, [r3, #6]
 80083b6:	2b3f      	cmp	r3, #63	; 0x3f
 80083b8:	bf28      	it	cs
 80083ba:	233f      	movcs	r3, #63	; 0x3f
 80083bc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80083be:	4b2f      	ldr	r3, [pc, #188]	; (800847c <USBD_HID_Setup+0x208>)
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	e015      	b.n	80083f0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	885b      	ldrh	r3, [r3, #2]
 80083c8:	0a1b      	lsrs	r3, r3, #8
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b21      	cmp	r3, #33	; 0x21
 80083ce:	d108      	bne.n	80083e2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80083d0:	4b2b      	ldr	r3, [pc, #172]	; (8008480 <USBD_HID_Setup+0x20c>)
 80083d2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	88db      	ldrh	r3, [r3, #6]
 80083d8:	2b09      	cmp	r3, #9
 80083da:	bf28      	it	cs
 80083dc:	2309      	movcs	r3, #9
 80083de:	82bb      	strh	r3, [r7, #20]
 80083e0:	e006      	b.n	80083f0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 fb1c 	bl	8009a22 <USBD_CtlError>
            ret = USBD_FAIL;
 80083ea:	2303      	movs	r3, #3
 80083ec:	75fb      	strb	r3, [r7, #23]
            break;
 80083ee:	e037      	b.n	8008460 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80083f0:	8abb      	ldrh	r3, [r7, #20]
 80083f2:	461a      	mov	r2, r3
 80083f4:	6939      	ldr	r1, [r7, #16]
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fb84 	bl	8009b04 <USBD_CtlSendData>
          break;
 80083fc:	e030      	b.n	8008460 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008404:	b2db      	uxtb	r3, r3
 8008406:	2b03      	cmp	r3, #3
 8008408:	d107      	bne.n	800841a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3308      	adds	r3, #8
 800840e:	2201      	movs	r2, #1
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fb76 	bl	8009b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008418:	e022      	b.n	8008460 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fb00 	bl	8009a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8008422:	2303      	movs	r3, #3
 8008424:	75fb      	strb	r3, [r7, #23]
          break;
 8008426:	e01b      	b.n	8008460 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b03      	cmp	r3, #3
 8008432:	d106      	bne.n	8008442 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	885b      	ldrh	r3, [r3, #2]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	461a      	mov	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008440:	e00e      	b.n	8008460 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f001 faec 	bl	8009a22 <USBD_CtlError>
            ret = USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	75fb      	strb	r3, [r7, #23]
          break;
 800844e:	e007      	b.n	8008460 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008450:	6839      	ldr	r1, [r7, #0]
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 fae5 	bl	8009a22 <USBD_CtlError>
          ret = USBD_FAIL;
 8008458:	2303      	movs	r3, #3
 800845a:	75fb      	strb	r3, [r7, #23]
          break;
 800845c:	e000      	b.n	8008460 <USBD_HID_Setup+0x1ec>
          break;
 800845e:	bf00      	nop
      }
      break;
 8008460:	e006      	b.n	8008470 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f001 fadc 	bl	8009a22 <USBD_CtlError>
      ret = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	75fb      	strb	r3, [r7, #23]
      break;
 800846e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	20000080 	.word	0x20000080
 8008480:	20000068 	.word	0x20000068

08008484 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	32b0      	adds	r2, #176	; 0xb0
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e014      	b.n	80084d6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	d10d      	bne.n	80084d4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	7b1b      	ldrb	r3, [r3, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d109      	bne.n	80084d4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2201      	movs	r2, #1
 80084c4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80084c6:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <USBD_HID_SendReport+0x5c>)
 80084c8:	7819      	ldrb	r1, [r3, #0]
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f004 fa33 	bl	800c93a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200000bf 	.word	0x200000bf

080084e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80084ec:	2181      	movs	r1, #129	; 0x81
 80084ee:	4809      	ldr	r0, [pc, #36]	; (8008514 <USBD_HID_GetFSCfgDesc+0x30>)
 80084f0:	f000 fc35 	bl	8008d5e <USBD_GetEpDesc>
 80084f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	220a      	movs	r2, #10
 8008500:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2222      	movs	r2, #34	; 0x22
 8008506:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000044 	.word	0x20000044

08008518 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008520:	2181      	movs	r1, #129	; 0x81
 8008522:	4809      	ldr	r0, [pc, #36]	; (8008548 <USBD_HID_GetHSCfgDesc+0x30>)
 8008524:	f000 fc1b 	bl	8008d5e <USBD_GetEpDesc>
 8008528:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2207      	movs	r2, #7
 8008534:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2222      	movs	r2, #34	; 0x22
 800853a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800853c:	4b02      	ldr	r3, [pc, #8]	; (8008548 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000044 	.word	0x20000044

0800854c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008554:	2181      	movs	r1, #129	; 0x81
 8008556:	4809      	ldr	r0, [pc, #36]	; (800857c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008558:	f000 fc01 	bl	8008d5e <USBD_GetEpDesc>
 800855c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	220a      	movs	r2, #10
 8008568:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2222      	movs	r2, #34	; 0x22
 800856e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008570:	4b02      	ldr	r3, [pc, #8]	; (800857c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000044 	.word	0x20000044

08008580 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	460b      	mov	r3, r1
 800858a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	32b0      	adds	r2, #176	; 0xb0
 8008596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859a:	2200      	movs	r2, #0
 800859c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	220a      	movs	r2, #10
 80085b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80085ba:	4b03      	ldr	r3, [pc, #12]	; (80085c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	20000074 	.word	0x20000074

080085cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e01f      	b.n	8008624 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	79fa      	ldrb	r2, [r7, #7]
 8008616:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f004 f859 	bl	800c6d0 <USBD_LL_Init>
 800861e:	4603      	mov	r3, r0
 8008620:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008622:	7dfb      	ldrb	r3, [r7, #23]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d101      	bne.n	8008644 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	e025      	b.n	8008690 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	32ae      	adds	r2, #174	; 0xae
 8008656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00f      	beq.n	8008680 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	32ae      	adds	r2, #174	; 0xae
 800866a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	f107 020e 	add.w	r2, r7, #14
 8008674:	4610      	mov	r0, r2
 8008676:	4798      	blx	r3
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f004 f861 	bl	800c768 <USBD_LL_Start>
 80086a6:	4603      	mov	r3, r0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	78fa      	ldrb	r2, [r7, #3]
 80086ea:	4611      	mov	r1, r2
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008728:	7bfb      	ldrb	r3, [r7, #15]
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b084      	sub	sp, #16
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	4618      	mov	r0, r3
 8008746:	f001 f932 	bl	80099ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008758:	461a      	mov	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	2b02      	cmp	r3, #2
 800876c:	d01a      	beq.n	80087a4 <USBD_LL_SetupStage+0x72>
 800876e:	2b02      	cmp	r3, #2
 8008770:	d822      	bhi.n	80087b8 <USBD_LL_SetupStage+0x86>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <USBD_LL_SetupStage+0x4a>
 8008776:	2b01      	cmp	r3, #1
 8008778:	d00a      	beq.n	8008790 <USBD_LL_SetupStage+0x5e>
 800877a:	e01d      	b.n	80087b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb5f 	bl	8008e48 <USBD_StdDevReq>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]
      break;
 800878e:	e020      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fbc7 	bl	8008f2c <USBD_StdItfReq>
 800879e:	4603      	mov	r3, r0
 80087a0:	73fb      	strb	r3, [r7, #15]
      break;
 80087a2:	e016      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087aa:	4619      	mov	r1, r3
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fc29 	bl	8009004 <USBD_StdEPReq>
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e00c      	b.n	80087d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	4619      	mov	r1, r3
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f004 f82e 	bl	800c828 <USBD_LL_StallEP>
 80087cc:	4603      	mov	r3, r0
 80087ce:	73fb      	strb	r3, [r7, #15]
      break;
 80087d0:	bf00      	nop
  }

  return ret;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3710      	adds	r7, #16
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	460b      	mov	r3, r1
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80087ee:	7afb      	ldrb	r3, [r7, #11]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d16e      	bne.n	80088d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80087fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008802:	2b03      	cmp	r3, #3
 8008804:	f040 8098 	bne.w	8008938 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	429a      	cmp	r2, r3
 8008812:	d913      	bls.n	800883c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	1ad2      	subs	r2, r2, r3
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	4293      	cmp	r3, r2
 800882c:	bf28      	it	cs
 800882e:	4613      	movcs	r3, r2
 8008830:	461a      	mov	r2, r3
 8008832:	6879      	ldr	r1, [r7, #4]
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 f991 	bl	8009b5c <USBD_CtlContinueRx>
 800883a:	e07d      	b.n	8008938 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008842:	f003 031f 	and.w	r3, r3, #31
 8008846:	2b02      	cmp	r3, #2
 8008848:	d014      	beq.n	8008874 <USBD_LL_DataOutStage+0x98>
 800884a:	2b02      	cmp	r3, #2
 800884c:	d81d      	bhi.n	800888a <USBD_LL_DataOutStage+0xae>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <USBD_LL_DataOutStage+0x7c>
 8008852:	2b01      	cmp	r3, #1
 8008854:	d003      	beq.n	800885e <USBD_LL_DataOutStage+0x82>
 8008856:	e018      	b.n	800888a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	75bb      	strb	r3, [r7, #22]
            break;
 800885c:	e018      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008864:	b2db      	uxtb	r3, r3
 8008866:	4619      	mov	r1, r3
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fa5e 	bl	8008d2a <USBD_CoreFindIF>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]
            break;
 8008872:	e00d      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800887a:	b2db      	uxtb	r3, r3
 800887c:	4619      	mov	r1, r3
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 fa60 	bl	8008d44 <USBD_CoreFindEP>
 8008884:	4603      	mov	r3, r0
 8008886:	75bb      	strb	r3, [r7, #22]
            break;
 8008888:	e002      	b.n	8008890 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800888a:	2300      	movs	r3, #0
 800888c:	75bb      	strb	r3, [r7, #22]
            break;
 800888e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008890:	7dbb      	ldrb	r3, [r7, #22]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d119      	bne.n	80088ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d113      	bne.n	80088ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80088a2:	7dba      	ldrb	r2, [r7, #22]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	32ae      	adds	r2, #174	; 0xae
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00b      	beq.n	80088ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80088b2:	7dba      	ldrb	r2, [r7, #22]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80088ba:	7dba      	ldrb	r2, [r7, #22]
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	32ae      	adds	r2, #174	; 0xae
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f001 f957 	bl	8009b7e <USBD_CtlSendStatus>
 80088d0:	e032      	b.n	8008938 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80088d2:	7afb      	ldrb	r3, [r7, #11]
 80088d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4619      	mov	r1, r3
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 fa31 	bl	8008d44 <USBD_CoreFindEP>
 80088e2:	4603      	mov	r3, r0
 80088e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088e6:	7dbb      	ldrb	r3, [r7, #22]
 80088e8:	2bff      	cmp	r3, #255	; 0xff
 80088ea:	d025      	beq.n	8008938 <USBD_LL_DataOutStage+0x15c>
 80088ec:	7dbb      	ldrb	r3, [r7, #22]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d122      	bne.n	8008938 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d117      	bne.n	800892e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80088fe:	7dba      	ldrb	r2, [r7, #22]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	32ae      	adds	r2, #174	; 0xae
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800890e:	7dba      	ldrb	r2, [r7, #22]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008916:	7dba      	ldrb	r2, [r7, #22]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	32ae      	adds	r2, #174	; 0xae
 800891c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	7afa      	ldrb	r2, [r7, #11]
 8008924:	4611      	mov	r1, r2
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	4798      	blx	r3
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800892e:	7dfb      	ldrb	r3, [r7, #23]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	e000      	b.n	800893a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b086      	sub	sp, #24
 8008946:	af00      	add	r7, sp, #0
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	460b      	mov	r3, r1
 800894c:	607a      	str	r2, [r7, #4]
 800894e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d16f      	bne.n	8008a36 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3314      	adds	r3, #20
 800895a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008962:	2b02      	cmp	r3, #2
 8008964:	d15a      	bne.n	8008a1c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	429a      	cmp	r2, r3
 8008970:	d914      	bls.n	800899c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	689a      	ldr	r2, [r3, #8]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	1ad2      	subs	r2, r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	461a      	mov	r2, r3
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f001 f8d6 	bl	8009b3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800898e:	2300      	movs	r3, #0
 8008990:	2200      	movs	r2, #0
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f003 fff1 	bl	800c97c <USBD_LL_PrepareReceive>
 800899a:	e03f      	b.n	8008a1c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d11c      	bne.n	80089e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d316      	bcc.n	80089e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089be:	429a      	cmp	r2, r3
 80089c0:	d20f      	bcs.n	80089e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f001 f8b7 	bl	8009b3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089d4:	2300      	movs	r3, #0
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f003 ffce 	bl	800c97c <USBD_LL_PrepareReceive>
 80089e0:	e01c      	b.n	8008a1c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b03      	cmp	r3, #3
 80089ec:	d10f      	bne.n	8008a0e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d009      	beq.n	8008a0e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a0e:	2180      	movs	r1, #128	; 0x80
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f003 ff09 	bl	800c828 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f001 f8c4 	bl	8009ba4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d03a      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f7ff fe42 	bl	80086b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a34:	e032      	b.n	8008a9c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008a36:	7afb      	ldrb	r3, [r7, #11]
 8008a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	4619      	mov	r1, r3
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 f97f 	bl	8008d44 <USBD_CoreFindEP>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2bff      	cmp	r3, #255	; 0xff
 8008a4e:	d025      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
 8008a50:	7dfb      	ldrb	r3, [r7, #23]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d122      	bne.n	8008a9c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d11c      	bne.n	8008a9c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008a62:	7dfa      	ldrb	r2, [r7, #23]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	32ae      	adds	r2, #174	; 0xae
 8008a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6c:	695b      	ldr	r3, [r3, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d014      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a72:	7dfa      	ldrb	r2, [r7, #23]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a7a:	7dfa      	ldrb	r2, [r7, #23]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	32ae      	adds	r2, #174	; 0xae
 8008a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	7afa      	ldrb	r2, [r7, #11]
 8008a88:	4611      	mov	r1, r2
 8008a8a:	68f8      	ldr	r0, [r7, #12]
 8008a8c:	4798      	blx	r3
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a92:	7dbb      	ldrb	r3, [r7, #22]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a98:	7dbb      	ldrb	r3, [r7, #22]
 8008a9a:	e000      	b.n	8008a9e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b084      	sub	sp, #16
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d014      	beq.n	8008b0c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00e      	beq.n	8008b0c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	6852      	ldr	r2, [r2, #4]
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	4611      	mov	r1, r2
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d001      	beq.n	8008b0c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2100      	movs	r1, #0
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f003 fe43 	bl	800c79e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2240      	movs	r2, #64	; 0x40
 8008b24:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2180      	movs	r1, #128	; 0x80
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f003 fe35 	bl	800c79e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2240      	movs	r2, #64	; 0x40
 8008b3e:	621a      	str	r2, [r3, #32]

  return ret;
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	78fa      	ldrb	r2, [r7, #3]
 8008b5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	b083      	sub	sp, #12
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b78:	b2da      	uxtb	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2204      	movs	r2, #4
 8008b84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d106      	bne.n	8008bb8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d110      	bne.n	8008bfc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bea:	69db      	ldr	r3, [r3, #28]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	32ae      	adds	r2, #174	; 0xae
 8008c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e01c      	b.n	8008c62 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d115      	bne.n	8008c60 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	32ae      	adds	r2, #174	; 0xae
 8008c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00b      	beq.n	8008c60 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	32ae      	adds	r2, #174	; 0xae
 8008c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	32ae      	adds	r2, #174	; 0xae
 8008c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e01c      	b.n	8008cc6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b03      	cmp	r3, #3
 8008c96:	d115      	bne.n	8008cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	32ae      	adds	r2, #174	; 0xae
 8008ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	; 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b083      	sub	sp, #12
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	370c      	adds	r7, #12
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00e      	beq.n	8008d20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6852      	ldr	r2, [r2, #4]
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	4611      	mov	r1, r2
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b083      	sub	sp, #12
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	460b      	mov	r3, r1
 8008d34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008d50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr

08008d5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b086      	sub	sp, #24
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	885b      	ldrh	r3, [r3, #2]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d920      	bls.n	8008dc8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d8e:	e013      	b.n	8008db8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d90:	f107 030a 	add.w	r3, r7, #10
 8008d94:	4619      	mov	r1, r3
 8008d96:	6978      	ldr	r0, [r7, #20]
 8008d98:	f000 f81b 	bl	8008dd2 <USBD_GetNextDesc>
 8008d9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b05      	cmp	r3, #5
 8008da4:	d108      	bne.n	8008db8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	789b      	ldrb	r3, [r3, #2]
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d008      	beq.n	8008dc6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	885b      	ldrh	r3, [r3, #2]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	897b      	ldrh	r3, [r7, #10]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d8e5      	bhi.n	8008d90 <USBD_GetEpDesc+0x32>
 8008dc4:	e000      	b.n	8008dc8 <USBD_GetEpDesc+0x6a>
          break;
 8008dc6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008dc8:	693b      	ldr	r3, [r7, #16]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	881a      	ldrh	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	781b      	ldrb	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b087      	sub	sp, #28
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	3301      	adds	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008e2a:	8a3b      	ldrh	r3, [r7, #16]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b21a      	sxth	r2, r3
 8008e30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b21b      	sxth	r3, r3
 8008e38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008e3a:	89fb      	ldrh	r3, [r7, #14]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	371c      	adds	r7, #28
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e5e:	2b40      	cmp	r3, #64	; 0x40
 8008e60:	d005      	beq.n	8008e6e <USBD_StdDevReq+0x26>
 8008e62:	2b40      	cmp	r3, #64	; 0x40
 8008e64:	d857      	bhi.n	8008f16 <USBD_StdDevReq+0xce>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00f      	beq.n	8008e8a <USBD_StdDevReq+0x42>
 8008e6a:	2b20      	cmp	r3, #32
 8008e6c:	d153      	bne.n	8008f16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	32ae      	adds	r2, #174	; 0xae
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	4798      	blx	r3
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]
      break;
 8008e88:	e04a      	b.n	8008f20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b09      	cmp	r3, #9
 8008e90:	d83b      	bhi.n	8008f0a <USBD_StdDevReq+0xc2>
 8008e92:	a201      	add	r2, pc, #4	; (adr r2, 8008e98 <USBD_StdDevReq+0x50>)
 8008e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e98:	08008eed 	.word	0x08008eed
 8008e9c:	08008f01 	.word	0x08008f01
 8008ea0:	08008f0b 	.word	0x08008f0b
 8008ea4:	08008ef7 	.word	0x08008ef7
 8008ea8:	08008f0b 	.word	0x08008f0b
 8008eac:	08008ecb 	.word	0x08008ecb
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008f0b 	.word	0x08008f0b
 8008eb8:	08008ee3 	.word	0x08008ee3
 8008ebc:	08008ed5 	.word	0x08008ed5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ec0:	6839      	ldr	r1, [r7, #0]
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa3c 	bl	8009340 <USBD_GetDescriptor>
          break;
 8008ec8:	e024      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 fbcb 	bl	8009668 <USBD_SetAddress>
          break;
 8008ed2:	e01f      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fc0a 	bl	80096f0 <USBD_SetConfig>
 8008edc:	4603      	mov	r3, r0
 8008ede:	73fb      	strb	r3, [r7, #15]
          break;
 8008ee0:	e018      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ee2:	6839      	ldr	r1, [r7, #0]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fcad 	bl	8009844 <USBD_GetConfig>
          break;
 8008eea:	e013      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fcde 	bl	80098b0 <USBD_GetStatus>
          break;
 8008ef4:	e00e      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 fd0d 	bl	8009918 <USBD_SetFeature>
          break;
 8008efe:	e009      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fd31 	bl	800996a <USBD_ClrFeature>
          break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fd88 	bl	8009a22 <USBD_CtlError>
          break;
 8008f12:	bf00      	nop
      }
      break;
 8008f14:	e004      	b.n	8008f20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f16:	6839      	ldr	r1, [r7, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 fd82 	bl	8009a22 <USBD_CtlError>
      break;
 8008f1e:	bf00      	nop
  }

  return ret;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop

08008f2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f42:	2b40      	cmp	r3, #64	; 0x40
 8008f44:	d005      	beq.n	8008f52 <USBD_StdItfReq+0x26>
 8008f46:	2b40      	cmp	r3, #64	; 0x40
 8008f48:	d852      	bhi.n	8008ff0 <USBD_StdItfReq+0xc4>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <USBD_StdItfReq+0x26>
 8008f4e:	2b20      	cmp	r3, #32
 8008f50:	d14e      	bne.n	8008ff0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d840      	bhi.n	8008fe2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	889b      	ldrh	r3, [r3, #4]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d836      	bhi.n	8008fd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	889b      	ldrh	r3, [r3, #4]
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	4619      	mov	r1, r3
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff fed9 	bl	8008d2a <USBD_CoreFindIF>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2bff      	cmp	r3, #255	; 0xff
 8008f80:	d01d      	beq.n	8008fbe <USBD_StdItfReq+0x92>
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11a      	bne.n	8008fbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f88:	7bba      	ldrb	r2, [r7, #14]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	32ae      	adds	r2, #174	; 0xae
 8008f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00f      	beq.n	8008fb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f98:	7bba      	ldrb	r2, [r7, #14]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008fa0:	7bba      	ldrb	r2, [r7, #14]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	32ae      	adds	r2, #174	; 0xae
 8008fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fb6:	e004      	b.n	8008fc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008fbc:	e001      	b.n	8008fc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	88db      	ldrh	r3, [r3, #6]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d110      	bne.n	8008fec <USBD_StdItfReq+0xc0>
 8008fca:	7bfb      	ldrb	r3, [r7, #15]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10d      	bne.n	8008fec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fdd4 	bl	8009b7e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008fd6:	e009      	b.n	8008fec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fd21 	bl	8009a22 <USBD_CtlError>
          break;
 8008fe0:	e004      	b.n	8008fec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fd1c 	bl	8009a22 <USBD_CtlError>
          break;
 8008fea:	e000      	b.n	8008fee <USBD_StdItfReq+0xc2>
          break;
 8008fec:	bf00      	nop
      }
      break;
 8008fee:	e004      	b.n	8008ffa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fd15 	bl	8009a22 <USBD_CtlError>
      break;
 8008ff8:	bf00      	nop
  }

  return ret;
 8008ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	889b      	ldrh	r3, [r3, #4]
 8009016:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	d007      	beq.n	8009034 <USBD_StdEPReq+0x30>
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	f200 817f 	bhi.w	8009328 <USBD_StdEPReq+0x324>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d02a      	beq.n	8009084 <USBD_StdEPReq+0x80>
 800902e:	2b20      	cmp	r3, #32
 8009030:	f040 817a 	bne.w	8009328 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff fe83 	bl	8008d44 <USBD_CoreFindEP>
 800903e:	4603      	mov	r3, r0
 8009040:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009042:	7b7b      	ldrb	r3, [r7, #13]
 8009044:	2bff      	cmp	r3, #255	; 0xff
 8009046:	f000 8174 	beq.w	8009332 <USBD_StdEPReq+0x32e>
 800904a:	7b7b      	ldrb	r3, [r7, #13]
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8170 	bne.w	8009332 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009052:	7b7a      	ldrb	r2, [r7, #13]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800905a:	7b7a      	ldrb	r2, [r7, #13]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	32ae      	adds	r2, #174	; 0xae
 8009060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8163 	beq.w	8009332 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800906c:	7b7a      	ldrb	r2, [r7, #13]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	32ae      	adds	r2, #174	; 0xae
 8009072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
 800907e:	4603      	mov	r3, r0
 8009080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009082:	e156      	b.n	8009332 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	785b      	ldrb	r3, [r3, #1]
 8009088:	2b03      	cmp	r3, #3
 800908a:	d008      	beq.n	800909e <USBD_StdEPReq+0x9a>
 800908c:	2b03      	cmp	r3, #3
 800908e:	f300 8145 	bgt.w	800931c <USBD_StdEPReq+0x318>
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 809b 	beq.w	80091ce <USBD_StdEPReq+0x1ca>
 8009098:	2b01      	cmp	r3, #1
 800909a:	d03c      	beq.n	8009116 <USBD_StdEPReq+0x112>
 800909c:	e13e      	b.n	800931c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d002      	beq.n	80090b0 <USBD_StdEPReq+0xac>
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d016      	beq.n	80090dc <USBD_StdEPReq+0xd8>
 80090ae:	e02c      	b.n	800910a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <USBD_StdEPReq+0xce>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b80      	cmp	r3, #128	; 0x80
 80090ba:	d00a      	beq.n	80090d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f003 fbb1 	bl	800c828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090c6:	2180      	movs	r1, #128	; 0x80
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f003 fbad 	bl	800c828 <USBD_LL_StallEP>
 80090ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d0:	e020      	b.n	8009114 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fca4 	bl	8009a22 <USBD_CtlError>
              break;
 80090da:	e01b      	b.n	8009114 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10e      	bne.n	8009102 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <USBD_StdEPReq+0xfe>
 80090ea:	7bbb      	ldrb	r3, [r7, #14]
 80090ec:	2b80      	cmp	r3, #128	; 0x80
 80090ee:	d008      	beq.n	8009102 <USBD_StdEPReq+0xfe>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	88db      	ldrh	r3, [r3, #6]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f003 fb93 	bl	800c828 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fd3b 	bl	8009b7e <USBD_CtlSendStatus>

              break;
 8009108:	e004      	b.n	8009114 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fc88 	bl	8009a22 <USBD_CtlError>
              break;
 8009112:	bf00      	nop
          }
          break;
 8009114:	e107      	b.n	8009326 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d002      	beq.n	8009128 <USBD_StdEPReq+0x124>
 8009122:	2b03      	cmp	r3, #3
 8009124:	d016      	beq.n	8009154 <USBD_StdEPReq+0x150>
 8009126:	e04b      	b.n	80091c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00d      	beq.n	800914a <USBD_StdEPReq+0x146>
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b80      	cmp	r3, #128	; 0x80
 8009132:	d00a      	beq.n	800914a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f003 fb75 	bl	800c828 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f003 fb71 	bl	800c828 <USBD_LL_StallEP>
 8009146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009148:	e040      	b.n	80091cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc68 	bl	8009a22 <USBD_CtlError>
              break;
 8009152:	e03b      	b.n	80091cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	885b      	ldrh	r3, [r3, #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d136      	bne.n	80091ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009162:	2b00      	cmp	r3, #0
 8009164:	d004      	beq.n	8009170 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f003 fb7b 	bl	800c866 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 fd04 	bl	8009b7e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fde2 	bl	8008d44 <USBD_CoreFindEP>
 8009180:	4603      	mov	r3, r0
 8009182:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009184:	7b7b      	ldrb	r3, [r7, #13]
 8009186:	2bff      	cmp	r3, #255	; 0xff
 8009188:	d01f      	beq.n	80091ca <USBD_StdEPReq+0x1c6>
 800918a:	7b7b      	ldrb	r3, [r7, #13]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d11c      	bne.n	80091ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009190:	7b7a      	ldrb	r2, [r7, #13]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009198:	7b7a      	ldrb	r2, [r7, #13]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	32ae      	adds	r2, #174	; 0xae
 800919e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d010      	beq.n	80091ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091a8:	7b7a      	ldrb	r2, [r7, #13]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	32ae      	adds	r2, #174	; 0xae
 80091ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	4798      	blx	r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80091be:	e004      	b.n	80091ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fc2d 	bl	8009a22 <USBD_CtlError>
              break;
 80091c8:	e000      	b.n	80091cc <USBD_StdEPReq+0x1c8>
              break;
 80091ca:	bf00      	nop
          }
          break;
 80091cc:	e0ab      	b.n	8009326 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d002      	beq.n	80091e0 <USBD_StdEPReq+0x1dc>
 80091da:	2b03      	cmp	r3, #3
 80091dc:	d032      	beq.n	8009244 <USBD_StdEPReq+0x240>
 80091de:	e097      	b.n	8009310 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d007      	beq.n	80091f6 <USBD_StdEPReq+0x1f2>
 80091e6:	7bbb      	ldrb	r3, [r7, #14]
 80091e8:	2b80      	cmp	r3, #128	; 0x80
 80091ea:	d004      	beq.n	80091f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fc17 	bl	8009a22 <USBD_CtlError>
                break;
 80091f4:	e091      	b.n	800931a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	da0b      	bge.n	8009216 <USBD_StdEPReq+0x212>
 80091fe:	7bbb      	ldrb	r3, [r7, #14]
 8009200:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	3310      	adds	r3, #16
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	4413      	add	r3, r2
 8009212:	3304      	adds	r3, #4
 8009214:	e00b      	b.n	800922e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	4413      	add	r3, r2
 800922c:	3304      	adds	r3, #4
 800922e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2202      	movs	r2, #2
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fc61 	bl	8009b04 <USBD_CtlSendData>
              break;
 8009242:	e06a      	b.n	800931a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	da11      	bge.n	8009270 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800924c:	7bbb      	ldrb	r3, [r7, #14]
 800924e:	f003 020f 	and.w	r2, r3, #15
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	440b      	add	r3, r1
 800925e:	3324      	adds	r3, #36	; 0x24
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d117      	bne.n	8009296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fbda 	bl	8009a22 <USBD_CtlError>
                  break;
 800926e:	e054      	b.n	800931a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009270:	7bbb      	ldrb	r3, [r7, #14]
 8009272:	f003 020f 	and.w	r2, r3, #15
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d104      	bne.n	8009296 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fbc7 	bl	8009a22 <USBD_CtlError>
                  break;
 8009294:	e041      	b.n	800931a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800929a:	2b00      	cmp	r3, #0
 800929c:	da0b      	bge.n	80092b6 <USBD_StdEPReq+0x2b2>
 800929e:	7bbb      	ldrb	r3, [r7, #14]
 80092a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80092a4:	4613      	mov	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	4413      	add	r3, r2
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	3310      	adds	r3, #16
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	3304      	adds	r3, #4
 80092b4:	e00b      	b.n	80092ce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	4413      	add	r3, r2
 80092cc:	3304      	adds	r3, #4
 80092ce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <USBD_StdEPReq+0x2d8>
 80092d6:	7bbb      	ldrb	r3, [r7, #14]
 80092d8:	2b80      	cmp	r3, #128	; 0x80
 80092da:	d103      	bne.n	80092e4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2200      	movs	r2, #0
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e00e      	b.n	8009302 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f003 fadb 	bl	800c8a4 <USBD_LL_IsStallEP>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e002      	b.n	8009302 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2202      	movs	r2, #2
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fbfb 	bl	8009b04 <USBD_CtlSendData>
              break;
 800930e:	e004      	b.n	800931a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009310:	6839      	ldr	r1, [r7, #0]
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fb85 	bl	8009a22 <USBD_CtlError>
              break;
 8009318:	bf00      	nop
          }
          break;
 800931a:	e004      	b.n	8009326 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fb7f 	bl	8009a22 <USBD_CtlError>
          break;
 8009324:	bf00      	nop
      }
      break;
 8009326:	e005      	b.n	8009334 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fb79 	bl	8009a22 <USBD_CtlError>
      break;
 8009330:	e000      	b.n	8009334 <USBD_StdEPReq+0x330>
      break;
 8009332:	bf00      	nop
  }

  return ret;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	0a1b      	lsrs	r3, r3, #8
 800935c:	b29b      	uxth	r3, r3
 800935e:	3b01      	subs	r3, #1
 8009360:	2b0e      	cmp	r3, #14
 8009362:	f200 8152 	bhi.w	800960a <USBD_GetDescriptor+0x2ca>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <USBD_GetDescriptor+0x2c>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	080093dd 	.word	0x080093dd
 8009370:	080093f5 	.word	0x080093f5
 8009374:	08009435 	.word	0x08009435
 8009378:	0800960b 	.word	0x0800960b
 800937c:	0800960b 	.word	0x0800960b
 8009380:	080095ab 	.word	0x080095ab
 8009384:	080095d7 	.word	0x080095d7
 8009388:	0800960b 	.word	0x0800960b
 800938c:	0800960b 	.word	0x0800960b
 8009390:	0800960b 	.word	0x0800960b
 8009394:	0800960b 	.word	0x0800960b
 8009398:	0800960b 	.word	0x0800960b
 800939c:	0800960b 	.word	0x0800960b
 80093a0:	0800960b 	.word	0x0800960b
 80093a4:	080093a9 	.word	0x080093a9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00b      	beq.n	80093cc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ba:	69db      	ldr	r3, [r3, #28]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	7c12      	ldrb	r2, [r2, #16]
 80093c0:	f107 0108 	add.w	r1, r7, #8
 80093c4:	4610      	mov	r0, r2
 80093c6:	4798      	blx	r3
 80093c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093ca:	e126      	b.n	800961a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fb27 	bl	8009a22 <USBD_CtlError>
        err++;
 80093d4:	7afb      	ldrb	r3, [r7, #11]
 80093d6:	3301      	adds	r3, #1
 80093d8:	72fb      	strb	r3, [r7, #11]
      break;
 80093da:	e11e      	b.n	800961a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	7c12      	ldrb	r2, [r2, #16]
 80093e8:	f107 0108 	add.w	r1, r7, #8
 80093ec:	4610      	mov	r0, r2
 80093ee:	4798      	blx	r3
 80093f0:	60f8      	str	r0, [r7, #12]
      break;
 80093f2:	e112      	b.n	800961a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7c1b      	ldrb	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10d      	bne.n	8009418 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	f107 0208 	add.w	r2, r7, #8
 8009408:	4610      	mov	r0, r2
 800940a:	4798      	blx	r3
 800940c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	2202      	movs	r2, #2
 8009414:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009416:	e100      	b.n	800961a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	f107 0208 	add.w	r2, r7, #8
 8009424:	4610      	mov	r0, r2
 8009426:	4798      	blx	r3
 8009428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	2202      	movs	r2, #2
 8009430:	701a      	strb	r2, [r3, #0]
      break;
 8009432:	e0f2      	b.n	800961a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	885b      	ldrh	r3, [r3, #2]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b05      	cmp	r3, #5
 800943c:	f200 80ac 	bhi.w	8009598 <USBD_GetDescriptor+0x258>
 8009440:	a201      	add	r2, pc, #4	; (adr r2, 8009448 <USBD_GetDescriptor+0x108>)
 8009442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009446:	bf00      	nop
 8009448:	08009461 	.word	0x08009461
 800944c:	08009495 	.word	0x08009495
 8009450:	080094c9 	.word	0x080094c9
 8009454:	080094fd 	.word	0x080094fd
 8009458:	08009531 	.word	0x08009531
 800945c:	08009565 	.word	0x08009565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00b      	beq.n	8009484 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	7c12      	ldrb	r2, [r2, #16]
 8009478:	f107 0108 	add.w	r1, r7, #8
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009482:	e091      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 facb 	bl	8009a22 <USBD_CtlError>
            err++;
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	3301      	adds	r3, #1
 8009490:	72fb      	strb	r3, [r7, #11]
          break;
 8009492:	e089      	b.n	80095a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	7c12      	ldrb	r2, [r2, #16]
 80094ac:	f107 0108 	add.w	r1, r7, #8
 80094b0:	4610      	mov	r0, r2
 80094b2:	4798      	blx	r3
 80094b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b6:	e077      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fab1 	bl	8009a22 <USBD_CtlError>
            err++;
 80094c0:	7afb      	ldrb	r3, [r7, #11]
 80094c2:	3301      	adds	r3, #1
 80094c4:	72fb      	strb	r3, [r7, #11]
          break;
 80094c6:	e06f      	b.n	80095a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00b      	beq.n	80094ec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	7c12      	ldrb	r2, [r2, #16]
 80094e0:	f107 0108 	add.w	r1, r7, #8
 80094e4:	4610      	mov	r0, r2
 80094e6:	4798      	blx	r3
 80094e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094ea:	e05d      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094ec:	6839      	ldr	r1, [r7, #0]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa97 	bl	8009a22 <USBD_CtlError>
            err++;
 80094f4:	7afb      	ldrb	r3, [r7, #11]
 80094f6:	3301      	adds	r3, #1
 80094f8:	72fb      	strb	r3, [r7, #11]
          break;
 80094fa:	e055      	b.n	80095a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009502:	691b      	ldr	r3, [r3, #16]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00b      	beq.n	8009520 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	7c12      	ldrb	r2, [r2, #16]
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	4610      	mov	r0, r2
 800951a:	4798      	blx	r3
 800951c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951e:	e043      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa7d 	bl	8009a22 <USBD_CtlError>
            err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
          break;
 800952e:	e03b      	b.n	80095a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009536:	695b      	ldr	r3, [r3, #20]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7c12      	ldrb	r2, [r2, #16]
 8009548:	f107 0108 	add.w	r1, r7, #8
 800954c:	4610      	mov	r0, r2
 800954e:	4798      	blx	r3
 8009550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009552:	e029      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa63 	bl	8009a22 <USBD_CtlError>
            err++;
 800955c:	7afb      	ldrb	r3, [r7, #11]
 800955e:	3301      	adds	r3, #1
 8009560:	72fb      	strb	r3, [r7, #11]
          break;
 8009562:	e021      	b.n	80095a8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800956a:	699b      	ldr	r3, [r3, #24]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	7c12      	ldrb	r2, [r2, #16]
 800957c:	f107 0108 	add.w	r1, r7, #8
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009586:	e00f      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 fa49 	bl	8009a22 <USBD_CtlError>
            err++;
 8009590:	7afb      	ldrb	r3, [r7, #11]
 8009592:	3301      	adds	r3, #1
 8009594:	72fb      	strb	r3, [r7, #11]
          break;
 8009596:	e007      	b.n	80095a8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fa41 	bl	8009a22 <USBD_CtlError>
          err++;
 80095a0:	7afb      	ldrb	r3, [r7, #11]
 80095a2:	3301      	adds	r3, #1
 80095a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095a6:	bf00      	nop
      }
      break;
 80095a8:	e037      	b.n	800961a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7c1b      	ldrb	r3, [r3, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ba:	f107 0208 	add.w	r2, r7, #8
 80095be:	4610      	mov	r0, r2
 80095c0:	4798      	blx	r3
 80095c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095c4:	e029      	b.n	800961a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 fa2a 	bl	8009a22 <USBD_CtlError>
        err++;
 80095ce:	7afb      	ldrb	r3, [r7, #11]
 80095d0:	3301      	adds	r3, #1
 80095d2:	72fb      	strb	r3, [r7, #11]
      break;
 80095d4:	e021      	b.n	800961a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7c1b      	ldrb	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10d      	bne.n	80095fa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f107 0208 	add.w	r2, r7, #8
 80095ea:	4610      	mov	r0, r2
 80095ec:	4798      	blx	r3
 80095ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	2207      	movs	r2, #7
 80095f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095f8:	e00f      	b.n	800961a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80095fa:	6839      	ldr	r1, [r7, #0]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fa10 	bl	8009a22 <USBD_CtlError>
        err++;
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	3301      	adds	r3, #1
 8009606:	72fb      	strb	r3, [r7, #11]
      break;
 8009608:	e007      	b.n	800961a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fa08 	bl	8009a22 <USBD_CtlError>
      err++;
 8009612:	7afb      	ldrb	r3, [r7, #11]
 8009614:	3301      	adds	r3, #1
 8009616:	72fb      	strb	r3, [r7, #11]
      break;
 8009618:	bf00      	nop
  }

  if (err != 0U)
 800961a:	7afb      	ldrb	r3, [r7, #11]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d11e      	bne.n	800965e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	88db      	ldrh	r3, [r3, #6]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d016      	beq.n	8009656 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009628:	893b      	ldrh	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00e      	beq.n	800964c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	88da      	ldrh	r2, [r3, #6]
 8009632:	893b      	ldrh	r3, [r7, #8]
 8009634:	4293      	cmp	r3, r2
 8009636:	bf28      	it	cs
 8009638:	4613      	movcs	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800963e:	893b      	ldrh	r3, [r7, #8]
 8009640:	461a      	mov	r2, r3
 8009642:	68f9      	ldr	r1, [r7, #12]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fa5d 	bl	8009b04 <USBD_CtlSendData>
 800964a:	e009      	b.n	8009660 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f9e7 	bl	8009a22 <USBD_CtlError>
 8009654:	e004      	b.n	8009660 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fa91 	bl	8009b7e <USBD_CtlSendStatus>
 800965c:	e000      	b.n	8009660 <USBD_GetDescriptor+0x320>
    return;
 800965e:	bf00      	nop
  }
}
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop

08009668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	889b      	ldrh	r3, [r3, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d131      	bne.n	80096de <USBD_SetAddress+0x76>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	88db      	ldrh	r3, [r3, #6]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d12d      	bne.n	80096de <USBD_SetAddress+0x76>
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	885b      	ldrh	r3, [r3, #2]
 8009686:	2b7f      	cmp	r3, #127	; 0x7f
 8009688:	d829      	bhi.n	80096de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	885b      	ldrh	r3, [r3, #2]
 800968e:	b2db      	uxtb	r3, r3
 8009690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d104      	bne.n	80096ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f9bc 	bl	8009a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096aa:	e01d      	b.n	80096e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	7bfa      	ldrb	r2, [r7, #15]
 80096b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f003 f91f 	bl	800c8fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fa5d 	bl	8009b7e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2202      	movs	r2, #2
 80096ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096d2:	e009      	b.n	80096e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096dc:	e004      	b.n	80096e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f99e 	bl	8009a22 <USBD_CtlError>
  }
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096fa:	2300      	movs	r3, #0
 80096fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	885b      	ldrh	r3, [r3, #2]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	4b4e      	ldr	r3, [pc, #312]	; (8009840 <USBD_SetConfig+0x150>)
 8009706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009708:	4b4d      	ldr	r3, [pc, #308]	; (8009840 <USBD_SetConfig+0x150>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d905      	bls.n	800971c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f985 	bl	8009a22 <USBD_CtlError>
    return USBD_FAIL;
 8009718:	2303      	movs	r3, #3
 800971a:	e08c      	b.n	8009836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d002      	beq.n	800972e <USBD_SetConfig+0x3e>
 8009728:	2b03      	cmp	r3, #3
 800972a:	d029      	beq.n	8009780 <USBD_SetConfig+0x90>
 800972c:	e075      	b.n	800981a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800972e:	4b44      	ldr	r3, [pc, #272]	; (8009840 <USBD_SetConfig+0x150>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d020      	beq.n	8009778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009736:	4b42      	ldr	r3, [pc, #264]	; (8009840 <USBD_SetConfig+0x150>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009740:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <USBD_SetConfig+0x150>)
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fe ffbd 	bl	80086c6 <USBD_SetClassConfig>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d008      	beq.n	8009768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f962 	bl	8009a22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2202      	movs	r2, #2
 8009762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009766:	e065      	b.n	8009834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fa08 	bl	8009b7e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2203      	movs	r2, #3
 8009772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009776:	e05d      	b.n	8009834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fa00 	bl	8009b7e <USBD_CtlSendStatus>
      break;
 800977e:	e059      	b.n	8009834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009780:	4b2f      	ldr	r3, [pc, #188]	; (8009840 <USBD_SetConfig+0x150>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d112      	bne.n	80097ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009790:	4b2b      	ldr	r3, [pc, #172]	; (8009840 <USBD_SetConfig+0x150>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800979a:	4b29      	ldr	r3, [pc, #164]	; (8009840 <USBD_SetConfig+0x150>)
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fe ffac 	bl	80086fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f9e9 	bl	8009b7e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097ac:	e042      	b.n	8009834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097ae:	4b24      	ldr	r3, [pc, #144]	; (8009840 <USBD_SetConfig+0x150>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d02a      	beq.n	8009812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fe ff9a 	bl	80086fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80097ca:	4b1d      	ldr	r3, [pc, #116]	; (8009840 <USBD_SetConfig+0x150>)
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097d4:	4b1a      	ldr	r3, [pc, #104]	; (8009840 <USBD_SetConfig+0x150>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fe ff73 	bl	80086c6 <USBD_SetClassConfig>
 80097e0:	4603      	mov	r3, r0
 80097e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00f      	beq.n	800980a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f918 	bl	8009a22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	4619      	mov	r1, r3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7fe ff7f 	bl	80086fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009808:	e014      	b.n	8009834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 f9b7 	bl	8009b7e <USBD_CtlSendStatus>
      break;
 8009810:	e010      	b.n	8009834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f9b3 	bl	8009b7e <USBD_CtlSendStatus>
      break;
 8009818:	e00c      	b.n	8009834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f900 	bl	8009a22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009822:	4b07      	ldr	r3, [pc, #28]	; (8009840 <USBD_SetConfig+0x150>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7fe ff68 	bl	80086fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
      break;
 8009832:	bf00      	nop
  }

  return ret;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000278 	.word	0x20000278

08009844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	88db      	ldrh	r3, [r3, #6]
 8009852:	2b01      	cmp	r3, #1
 8009854:	d004      	beq.n	8009860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f8e2 	bl	8009a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800985e:	e023      	b.n	80098a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	dc02      	bgt.n	8009872 <USBD_GetConfig+0x2e>
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc03      	bgt.n	8009878 <USBD_GetConfig+0x34>
 8009870:	e015      	b.n	800989e <USBD_GetConfig+0x5a>
 8009872:	2b03      	cmp	r3, #3
 8009874:	d00b      	beq.n	800988e <USBD_GetConfig+0x4a>
 8009876:	e012      	b.n	800989e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3308      	adds	r3, #8
 8009882:	2201      	movs	r2, #1
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f93c 	bl	8009b04 <USBD_CtlSendData>
        break;
 800988c:	e00c      	b.n	80098a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3304      	adds	r3, #4
 8009892:	2201      	movs	r2, #1
 8009894:	4619      	mov	r1, r3
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f934 	bl	8009b04 <USBD_CtlSendData>
        break;
 800989c:	e004      	b.n	80098a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f8be 	bl	8009a22 <USBD_CtlError>
        break;
 80098a6:	bf00      	nop
}
 80098a8:	bf00      	nop
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d81e      	bhi.n	8009906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	88db      	ldrh	r3, [r3, #6]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d004      	beq.n	80098da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8a5 	bl	8009a22 <USBD_CtlError>
        break;
 80098d8:	e01a      	b.n	8009910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	f043 0202 	orr.w	r2, r3, #2
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	330c      	adds	r3, #12
 80098fa:	2202      	movs	r2, #2
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f900 	bl	8009b04 <USBD_CtlSendData>
      break;
 8009904:	e004      	b.n	8009910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f88a 	bl	8009a22 <USBD_CtlError>
      break;
 800990e:	bf00      	nop
  }
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	885b      	ldrh	r3, [r3, #2]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d107      	bne.n	800993a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2201      	movs	r2, #1
 800992e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f923 	bl	8009b7e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009938:	e013      	b.n	8009962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	885b      	ldrh	r3, [r3, #2]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d10b      	bne.n	800995a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	889b      	ldrh	r3, [r3, #4]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	b29b      	uxth	r3, r3
 800994a:	b2da      	uxtb	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f913 	bl	8009b7e <USBD_CtlSendStatus>
}
 8009958:	e003      	b.n	8009962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800995a:	6839      	ldr	r1, [r7, #0]
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f860 	bl	8009a22 <USBD_CtlError>
}
 8009962:	bf00      	nop
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997a:	b2db      	uxtb	r3, r3
 800997c:	3b01      	subs	r3, #1
 800997e:	2b02      	cmp	r3, #2
 8009980:	d80b      	bhi.n	800999a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	885b      	ldrh	r3, [r3, #2]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d10c      	bne.n	80099a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8f3 	bl	8009b7e <USBD_CtlSendStatus>
      }
      break;
 8009998:	e004      	b.n	80099a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800999a:	6839      	ldr	r1, [r7, #0]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f840 	bl	8009a22 <USBD_CtlError>
      break;
 80099a2:	e000      	b.n	80099a6 <USBD_ClrFeature+0x3c>
      break;
 80099a4:	bf00      	nop
  }
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
 80099b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	781a      	ldrb	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	3301      	adds	r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7ff fa17 	bl	8008e0c <SWAPBYTE>
 80099de:	4603      	mov	r3, r0
 80099e0:	461a      	mov	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3301      	adds	r3, #1
 80099f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fa0a 	bl	8008e0c <SWAPBYTE>
 80099f8:	4603      	mov	r3, r0
 80099fa:	461a      	mov	r2, r3
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3301      	adds	r3, #1
 8009a04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff f9fd 	bl	8008e0c <SWAPBYTE>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	80da      	strh	r2, [r3, #6]
}
 8009a1a:	bf00      	nop
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a2c:	2180      	movs	r1, #128	; 0x80
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f002 fefa 	bl	800c828 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a34:	2100      	movs	r1, #0
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f002 fef6 	bl	800c828 <USBD_LL_StallEP>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a50:	2300      	movs	r3, #0
 8009a52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d036      	beq.n	8009ac8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a5e:	6938      	ldr	r0, [r7, #16]
 8009a60:	f000 f836 	bl	8009ad0 <USBD_GetLen>
 8009a64:	4603      	mov	r3, r0
 8009a66:	3301      	adds	r3, #1
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	005b      	lsls	r3, r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	4413      	add	r3, r2
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	7812      	ldrb	r2, [r2, #0]
 8009a7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a7e:	7dfb      	ldrb	r3, [r7, #23]
 8009a80:	3301      	adds	r3, #1
 8009a82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	4413      	add	r3, r2
 8009a8a:	2203      	movs	r2, #3
 8009a8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	3301      	adds	r3, #1
 8009a92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a94:	e013      	b.n	8009abe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	7812      	ldrb	r2, [r2, #0]
 8009aa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	613b      	str	r3, [r7, #16]
    idx++;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009aae:	7dfb      	ldrb	r3, [r7, #23]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	4413      	add	r3, r2
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	3301      	adds	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e7      	bne.n	8009a96 <USBD_GetString+0x52>
 8009ac6:	e000      	b.n	8009aca <USBD_GetString+0x86>
    return;
 8009ac8:	bf00      	nop
  }
}
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ae0:	e005      	b.n	8009aee <USBD_GetLen+0x1e>
  {
    len++;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3301      	adds	r3, #1
 8009aec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1f5      	bne.n	8009ae2 <USBD_GetLen+0x12>
  }

  return len;
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	68f8      	ldr	r0, [r7, #12]
 8009b2c:	f002 ff05 	bl	800c93a <USBD_LL_Transmit>

  return USBD_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	60f8      	str	r0, [r7, #12]
 8009b42:	60b9      	str	r1, [r7, #8]
 8009b44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f002 fef4 	bl	800c93a <USBD_LL_Transmit>

  return USBD_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f002 ff04 	bl	800c97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b082      	sub	sp, #8
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2204      	movs	r2, #4
 8009b8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b8e:	2300      	movs	r3, #0
 8009b90:	2200      	movs	r2, #0
 8009b92:	2100      	movs	r1, #0
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f002 fed0 	bl	800c93a <USBD_LL_Transmit>

  return USBD_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2205      	movs	r2, #5
 8009bb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	2100      	movs	r1, #0
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f002 fede 	bl	800c97c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009bcc:	b590      	push	{r4, r7, lr}
 8009bce:	b08b      	sub	sp, #44	; 0x2c
 8009bd0:	af04      	add	r7, sp, #16
 8009bd2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bde:	7919      	ldrb	r1, [r3, #4]
 8009be0:	23ff      	movs	r3, #255	; 0xff
 8009be2:	2201      	movs	r2, #1
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 ff75 	bl	800aad4 <USBH_FindInterface>
 8009bea:	4603      	mov	r3, r0
 8009bec:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009bee:	7dbb      	ldrb	r3, [r7, #22]
 8009bf0:	2bff      	cmp	r3, #255	; 0xff
 8009bf2:	d002      	beq.n	8009bfa <USBH_HID_InterfaceInit+0x2e>
 8009bf4:	7dbb      	ldrb	r3, [r7, #22]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d901      	bls.n	8009bfe <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009bfa:	2302      	movs	r3, #2
 8009bfc:	e108      	b.n	8009e10 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8009bfe:	7dbb      	ldrb	r3, [r7, #22]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 ff4a 	bl	800aa9c <USBH_SelectInterface>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8009c0c:	7d7b      	ldrb	r3, [r7, #21]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d001      	beq.n	8009c16 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8009c12:	2302      	movs	r3, #2
 8009c14:	e0fc      	b.n	8009e10 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009c1c:	2034      	movs	r0, #52	; 0x34
 8009c1e:	f003 faa1 	bl	800d164 <malloc>
 8009c22:	4603      	mov	r3, r0
 8009c24:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8009c36:	2302      	movs	r3, #2
 8009c38:	e0ea      	b.n	8009e10 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8009c3a:	2234      	movs	r2, #52	; 0x34
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	6938      	ldr	r0, [r7, #16]
 8009c40:	f003 faa0 	bl	800d184 <memset>

  HID_Handle->state = HID_ERROR;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	2207      	movs	r2, #7
 8009c48:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8009c4a:	7dbb      	ldrb	r3, [r7, #22]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	211a      	movs	r1, #26
 8009c50:	fb01 f303 	mul.w	r3, r1, r3
 8009c54:	4413      	add	r3, r2
 8009c56:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d103      	bne.n	8009c68 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	4a6d      	ldr	r2, [pc, #436]	; (8009e18 <USBH_HID_InterfaceInit+0x24c>)
 8009c64:	631a      	str	r2, [r3, #48]	; 0x30
 8009c66:	e010      	b.n	8009c8a <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8009c68:	7dbb      	ldrb	r3, [r7, #22]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	211a      	movs	r1, #26
 8009c6e:	fb01 f303 	mul.w	r3, r1, r3
 8009c72:	4413      	add	r3, r2
 8009c74:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d103      	bne.n	8009c86 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	4a66      	ldr	r2, [pc, #408]	; (8009e1c <USBH_HID_InterfaceInit+0x250>)
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30
 8009c84:	e001      	b.n	8009c8a <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8009c86:	2302      	movs	r3, #2
 8009c88:	e0c2      	b.n	8009e10 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2200      	movs	r2, #0
 8009c94:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c96:	7dbb      	ldrb	r3, [r7, #22]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	211a      	movs	r1, #26
 8009c9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ca6:	781a      	ldrb	r2, [r3, #0]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009cac:	7dbb      	ldrb	r3, [r7, #22]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	211a      	movs	r1, #26
 8009cb2:	fb01 f303 	mul.w	r3, r1, r3
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009cbc:	881a      	ldrh	r2, [r3, #0]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009cc2:	7dbb      	ldrb	r3, [r7, #22]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	211a      	movs	r1, #26
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
 8009ccc:	4413      	add	r3, r2
 8009cce:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	8b9b      	ldrh	r3, [r3, #28]
 8009cde:	2b09      	cmp	r3, #9
 8009ce0:	d802      	bhi.n	8009ce8 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8009ce8:	7dbb      	ldrb	r3, [r7, #22]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	211a      	movs	r1, #26
 8009cee:	fb01 f303 	mul.w	r3, r1, r3
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	bf28      	it	cs
 8009cfe:	2302      	movcs	r3, #2
 8009d00:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8009d02:	2300      	movs	r3, #0
 8009d04:	75fb      	strb	r3, [r7, #23]
 8009d06:	e07d      	b.n	8009e04 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8009d08:	7dbb      	ldrb	r3, [r7, #22]
 8009d0a:	7df9      	ldrb	r1, [r7, #23]
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	3101      	adds	r1, #1
 8009d10:	00c9      	lsls	r1, r1, #3
 8009d12:	201a      	movs	r0, #26
 8009d14:	fb00 f303 	mul.w	r3, r0, r3
 8009d18:	440b      	add	r3, r1
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b25b      	sxtb	r3, r3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da35      	bge.n	8009d94 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009d28:	7dbb      	ldrb	r3, [r7, #22]
 8009d2a:	7df9      	ldrb	r1, [r7, #23]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	3101      	adds	r1, #1
 8009d30:	00c9      	lsls	r1, r1, #3
 8009d32:	201a      	movs	r0, #26
 8009d34:	fb00 f303 	mul.w	r3, r0, r3
 8009d38:	440b      	add	r3, r1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	791b      	ldrb	r3, [r3, #4]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f002 f9b8 	bl	800c0c2 <USBH_AllocPipe>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	7859      	ldrb	r1, [r3, #1]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	7918      	ldrb	r0, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	8b12      	ldrh	r2, [r2, #24]
 8009d72:	9202      	str	r2, [sp, #8]
 8009d74:	2203      	movs	r2, #3
 8009d76:	9201      	str	r2, [sp, #4]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f002 f970 	bl	800c064 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f003 f93b 	bl	800d008 <USBH_LL_SetToggle>
 8009d92:	e034      	b.n	8009dfe <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009d94:	7dbb      	ldrb	r3, [r7, #22]
 8009d96:	7df9      	ldrb	r1, [r7, #23]
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	3101      	adds	r1, #1
 8009d9c:	00c9      	lsls	r1, r1, #3
 8009d9e:	201a      	movs	r0, #26
 8009da0:	fb00 f303 	mul.w	r3, r0, r3
 8009da4:	440b      	add	r3, r1
 8009da6:	4413      	add	r3, r2
 8009da8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009dac:	781a      	ldrb	r2, [r3, #0]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	78db      	ldrb	r3, [r3, #3]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f002 f982 	bl	800c0c2 <USBH_AllocPipe>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	7819      	ldrb	r1, [r3, #0]
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	78d8      	ldrb	r0, [r3, #3]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dda:	693a      	ldr	r2, [r7, #16]
 8009ddc:	8b12      	ldrh	r2, [r2, #24]
 8009dde:	9202      	str	r2, [sp, #8]
 8009de0:	2203      	movs	r2, #3
 8009de2:	9201      	str	r2, [sp, #4]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	4623      	mov	r3, r4
 8009de8:	4602      	mov	r2, r0
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f002 f93a 	bl	800c064 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2200      	movs	r2, #0
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f003 f905 	bl	800d008 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
 8009e00:	3301      	adds	r3, #1
 8009e02:	75fb      	strb	r3, [r7, #23]
 8009e04:	7dfa      	ldrb	r2, [r7, #23]
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f4ff af7d 	bcc.w	8009d08 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}
 8009e18:	0800a51d 	.word	0x0800a51d
 8009e1c:	0800a765 	.word	0x0800a765

08009e20 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	785b      	ldrb	r3, [r3, #1]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00e      	beq.n	8009e58 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	785b      	ldrb	r3, [r3, #1]
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f002 f92e 	bl	800c0a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f002 f959 	bl	800c104 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00e      	beq.n	8009e7e <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f002 f91b 	bl	800c0a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f002 f946 	bl	800c104 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e90:	69db      	ldr	r3, [r3, #28]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f003 f96e 	bl	800d174 <free>
    phost->pActiveClass->pData = 0U;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ec2:	69db      	ldr	r3, [r3, #28]
 8009ec4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	d860      	bhi.n	8009f90 <USBH_HID_ClassRequest+0xe4>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <USBH_HID_ClassRequest+0x28>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009eed 	.word	0x08009eed
 8009ed8:	08009f91 	.word	0x08009f91
 8009edc:	08009f07 	.word	0x08009f07
 8009ee0:	08009eed 	.word	0x08009eed
 8009ee4:	08009f31 	.word	0x08009f31
 8009ee8:	08009f5b 	.word	0x08009f5b
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	331c      	adds	r3, #28
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4610      	mov	r0, r2
 8009efa:	f000 f9cd 	bl	800a298 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	2202      	movs	r2, #2
 8009f02:	715a      	strb	r2, [r3, #5]

      break;
 8009f04:	e04b      	b.n	8009f9e <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f930 	bl	800a172 <USBH_HID_GetHIDReportDescriptor>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d103      	bne.n	8009f24 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2204      	movs	r2, #4
 8009f20:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8009f22:	e037      	b.n	8009f94 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d134      	bne.n	8009f94 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2e:	e031      	b.n	8009f94 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8009f30:	2200      	movs	r2, #0
 8009f32:	2100      	movs	r1, #0
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f935 	bl	800a1a4 <USBH_HID_SetIdle>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d103      	bne.n	8009f4c <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2205      	movs	r2, #5
 8009f48:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8009f4a:	e025      	b.n	8009f98 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d122      	bne.n	8009f98 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	2205      	movs	r2, #5
 8009f56:	715a      	strb	r2, [r3, #5]
      break;
 8009f58:	e01e      	b.n	8009f98 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f975 	bl	800a24c <USBH_HID_SetProtocol>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10b      	bne.n	8009f84 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f78:	2102      	movs	r1, #2
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
        status = USBH_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8009f82:	e00b      	b.n	8009f9c <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d108      	bne.n	8009f9c <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8009f8a:	2302      	movs	r3, #2
 8009f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f8e:	e005      	b.n	8009f9c <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8009f90:	bf00      	nop
 8009f92:	e004      	b.n	8009f9e <USBH_HID_ClassRequest+0xf2>
      break;
 8009f94:	bf00      	nop
 8009f96:	e002      	b.n	8009f9e <USBH_HID_ClassRequest+0xf2>
      break;
 8009f98:	bf00      	nop
 8009f9a:	e000      	b.n	8009f9e <USBH_HID_ClassRequest+0xf2>
      break;
 8009f9c:	bf00      	nop
  }

  return status;
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af02      	add	r7, sp, #8
 8009fae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fba:	69db      	ldr	r3, [r3, #28]
 8009fbc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	789b      	ldrb	r3, [r3, #2]
 8009fc2:	2b06      	cmp	r3, #6
 8009fc4:	f200 80a9 	bhi.w	800a11a <USBH_HID_Process+0x172>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <USBH_HID_Process+0x28>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009fed 	.word	0x08009fed
 8009fd4:	08009ffd 	.word	0x08009ffd
 8009fd8:	0800a11b 	.word	0x0800a11b
 8009fdc:	0800a11b 	.word	0x0800a11b
 8009fe0:	0800a06d 	.word	0x0800a06d
 8009fe4:	0800a057 	.word	0x0800a057
 8009fe8:	0800a09b 	.word	0x0800a09b
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ffa:	e093      	b.n	800a124 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	695a      	ldr	r2, [r3, #20]
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	8b1b      	ldrh	r3, [r3, #24]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	4613      	mov	r3, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	2101      	movs	r1, #1
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8f0 	bl	800a1f4 <USBH_HID_GetReport>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d103      	bne.n	800a026 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	2205      	movs	r2, #5
 800a022:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a024:	e07e      	b.n	800a124 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d105      	bne.n	800a038 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	2201      	movs	r2, #1
 800a030:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]
      break;
 800a036:	e075      	b.n	800a124 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d105      	bne.n	800a04a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	2205      	movs	r2, #5
 800a042:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
      break;
 800a048:	e06c      	b.n	800a124 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2207      	movs	r2, #7
 800a04e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800a050:	2302      	movs	r3, #2
 800a052:	75fb      	strb	r3, [r7, #23]
      break;
 800a054:	e066      	b.n	800a124 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a05c:	f003 0301 	and.w	r3, r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	d05c      	beq.n	800a11e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	2204      	movs	r2, #4
 800a068:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a06a:	e058      	b.n	800a11e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a074:	b2da      	uxtb	r2, r3
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f001 ffd3 	bl	800c026 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	2206      	movs	r2, #6
 800a084:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800a098:	e044      	b.n	800a124 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f002 ff87 	bl	800cfb4 <USBH_LL_GetURBState>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d120      	bne.n	800a0ee <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	785b      	ldrb	r3, [r3, #1]
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f002 feec 	bl	800ce90 <USBH_LL_GetLastXferSize>
 800a0b8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d12e      	bne.n	800a122 <USBH_HID_Process+0x17a>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d02b      	beq.n	800a122 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f103 0008 	add.w	r0, r3, #8
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	6959      	ldr	r1, [r3, #20]
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	8b1b      	ldrh	r3, [r3, #24]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	f000 f9ca 	bl	800a472 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7f6 fa86 	bl	80005f8 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800a0ec:	e019      	b.n	800a122 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f002 ff5d 	bl	800cfb4 <USBH_LL_GetURBState>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b05      	cmp	r3, #5
 800a0fe:	d110      	bne.n	800a122 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	7e9b      	ldrb	r3, [r3, #26]
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f001 fab1 	bl	800b66e <USBH_ClrFeature>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d107      	bne.n	800a122 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	2204      	movs	r2, #4
 800a116:	709a      	strb	r2, [r3, #2]
      break;
 800a118:	e003      	b.n	800a122 <USBH_HID_Process+0x17a>

    default:
      break;
 800a11a:	bf00      	nop
 800a11c:	e002      	b.n	800a124 <USBH_HID_Process+0x17c>
      break;
 800a11e:	bf00      	nop
 800a120:	e000      	b.n	800a124 <USBH_HID_Process+0x17c>
      break;
 800a122:	bf00      	nop
  }

  return status;
 800a124:	7dfb      	ldrb	r3, [r7, #23]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop

0800a130 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a13e:	69db      	ldr	r3, [r3, #28]
 800a140:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	789b      	ldrb	r3, [r3, #2]
 800a146:	2b06      	cmp	r3, #6
 800a148:	d10c      	bne.n	800a164 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6a1b      	ldr	r3, [r3, #32]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	8b92      	ldrh	r2, [r2, #28]
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d302      	bcc.n	800a164 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2204      	movs	r2, #4
 800a162:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b086      	sub	sp, #24
 800a176:	af02      	add	r7, sp, #8
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a184:	887b      	ldrh	r3, [r7, #2]
 800a186:	9300      	str	r3, [sp, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800a18e:	2101      	movs	r1, #1
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f001 f9cc 	bl	800b52e <USBH_GetDescriptor>
 800a196:	4603      	mov	r3, r0
 800a198:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800a19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2221      	movs	r2, #33	; 0x21
 800a1b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	220a      	movs	r2, #10
 800a1be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800a1c0:	78fb      	ldrb	r3, [r7, #3]
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	021b      	lsls	r3, r3, #8
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	78bb      	ldrb	r3, [r7, #2]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f001 fd0f 	bl	800bc08 <USBH_CtlReq>
 800a1ea:	4603      	mov	r3, r0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3708      	adds	r7, #8
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	607b      	str	r3, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	72fb      	strb	r3, [r7, #11]
 800a202:	4613      	mov	r3, r2
 800a204:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	22a1      	movs	r2, #161	; 0xa1
 800a20a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2201      	movs	r2, #1
 800a210:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	b29b      	uxth	r3, r3
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b29a      	uxth	r2, r3
 800a21a:	7abb      	ldrb	r3, [r7, #10]
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	4313      	orrs	r3, r2
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800a22c:	7e3b      	ldrb	r3, [r7, #24]
 800a22e:	b29a      	uxth	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800a234:	7e3b      	ldrb	r3, [r7, #24]
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f001 fce3 	bl	800bc08 <USBH_CtlReq>
 800a242:	4603      	mov	r3, r0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2221      	movs	r2, #33	; 0x21
 800a25c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	220b      	movs	r2, #11
 800a262:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	825a      	strh	r2, [r3, #18]
 800a270:	e002      	b.n	800a278 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a284:	2200      	movs	r2, #0
 800a286:	2100      	movs	r1, #0
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 fcbd 	bl	800bc08 <USBH_CtlReq>
 800a28e:	4603      	mov	r3, r0

}
 800a290:	4618      	mov	r0, r3
 800a292:	3708      	adds	r7, #8
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	3302      	adds	r3, #2
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	3303      	adds	r3, #3
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	021b      	lsls	r3, r3, #8
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800a2be:	897b      	ldrh	r3, [r7, #10]
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d943      	bls.n	800a34c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a2c4:	2309      	movs	r3, #9
 800a2c6:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800a2c8:	e03c      	b.n	800a344 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a2ca:	f107 0308 	add.w	r3, r7, #8
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f001 fc7e 	bl	800bbd2 <USBH_GetNextDesc>
 800a2d6:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	785b      	ldrb	r3, [r3, #1]
 800a2dc:	2b21      	cmp	r3, #33	; 0x21
 800a2de:	d131      	bne.n	800a344 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	785a      	ldrb	r2, [r3, #1]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3302      	adds	r3, #2
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3303      	adds	r3, #3
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	b29b      	uxth	r3, r3
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	b29b      	uxth	r3, r3
 800a304:	4313      	orrs	r3, r2
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	791a      	ldrb	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	795a      	ldrb	r2, [r3, #5]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	799a      	ldrb	r2, [r3, #6]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3307      	adds	r3, #7
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	3308      	adds	r3, #8
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b29b      	uxth	r3, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	811a      	strh	r2, [r3, #8]
        break;
 800a340:	bf00      	nop
      }
    }
  }
}
 800a342:	e003      	b.n	800a34c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800a344:	893b      	ldrh	r3, [r7, #8]
 800a346:	897a      	ldrh	r2, [r7, #10]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d8be      	bhi.n	800a2ca <USBH_HID_ParseHIDDesc+0x32>
}
 800a34c:	bf00      	nop
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800a35c:	23ff      	movs	r3, #255	; 0xff
 800a35e:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b0b      	cmp	r3, #11
 800a368:	d117      	bne.n	800a39a <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800a370:	4619      	mov	r1, r3
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	231a      	movs	r3, #26
 800a376:	fb01 f303 	mul.w	r3, r1, r3
 800a37a:	4413      	add	r3, r2
 800a37c:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800a384:	7bbb      	ldrb	r3, [r7, #14]
 800a386:	2b01      	cmp	r3, #1
 800a388:	d102      	bne.n	800a390 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800a38a:	2302      	movs	r3, #2
 800a38c:	73fb      	strb	r3, [r7, #15]
 800a38e:	e004      	b.n	800a39a <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	2b02      	cmp	r3, #2
 800a394:	d101      	bne.n	800a39a <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800a396:	2301      	movs	r3, #1
 800a398:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3714      	adds	r7, #20
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	88fa      	ldrh	r2, [r7, #6]
 800a3cc:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	601a      	str	r2, [r3, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	7a9b      	ldrb	r3, [r3, #10]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d131      	bne.n	800a45e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a400:	2300      	movs	r3, #0
 800a402:	82fb      	strh	r3, [r7, #22]
 800a404:	e027      	b.n	800a456 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	88da      	ldrh	r2, [r3, #6]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	889b      	ldrh	r3, [r3, #4]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d019      	beq.n	800a446 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	88d2      	ldrh	r2, [r2, #6]
 800a41a:	441a      	add	r2, r3
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	1c59      	adds	r1, r3, #1
 800a420:	6139      	str	r1, [r7, #16]
 800a422:	7812      	ldrb	r2, [r2, #0]
 800a424:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	88db      	ldrh	r3, [r3, #6]
 800a42a:	3301      	adds	r3, #1
 800a42c:	b29a      	uxth	r2, r3
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	88da      	ldrh	r2, [r3, #6]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	891b      	ldrh	r3, [r3, #8]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d108      	bne.n	800a450 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2200      	movs	r2, #0
 800a442:	80da      	strh	r2, [r3, #6]
 800a444:	e004      	b.n	800a450 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	729a      	strb	r2, [r3, #10]
        return i;
 800a44c:	8afb      	ldrh	r3, [r7, #22]
 800a44e:	e00a      	b.n	800a466 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800a450:	8afb      	ldrh	r3, [r7, #22]
 800a452:	3301      	adds	r3, #1
 800a454:	82fb      	strh	r3, [r7, #22]
 800a456:	8afa      	ldrh	r2, [r7, #22]
 800a458:	88fb      	ldrh	r3, [r7, #6]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d3d3      	bcc.n	800a406 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2200      	movs	r2, #0
 800a462:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a464:	88fb      	ldrh	r3, [r7, #6]
}
 800a466:	4618      	mov	r0, r3
 800a468:	371c      	adds	r7, #28
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800a472:	b480      	push	{r7}
 800a474:	b087      	sub	sp, #28
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	4613      	mov	r3, r2
 800a47e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	7a9b      	ldrb	r3, [r3, #10]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d13c      	bne.n	800a506 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a492:	2300      	movs	r3, #0
 800a494:	82fb      	strh	r3, [r7, #22]
 800a496:	e032      	b.n	800a4fe <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	889b      	ldrh	r3, [r3, #4]
 800a49c:	3301      	adds	r3, #1
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	88d2      	ldrh	r2, [r2, #6]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00a      	beq.n	800a4bc <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	889b      	ldrh	r3, [r3, #4]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	68fa      	ldr	r2, [r7, #12]
 800a4ae:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d108      	bne.n	800a4c6 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	88db      	ldrh	r3, [r3, #6]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	729a      	strb	r2, [r3, #10]
        return i;
 800a4c2:	8afb      	ldrh	r3, [r7, #22]
 800a4c4:	e023      	b.n	800a50e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	613a      	str	r2, [r7, #16]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	6812      	ldr	r2, [r2, #0]
 800a4d0:	68f9      	ldr	r1, [r7, #12]
 800a4d2:	8889      	ldrh	r1, [r1, #4]
 800a4d4:	440a      	add	r2, r1
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	7013      	strb	r3, [r2, #0]
        f->head++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	889b      	ldrh	r3, [r3, #4]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	889a      	ldrh	r2, [r3, #4]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	891b      	ldrh	r3, [r3, #8]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d102      	bne.n	800a4f8 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800a4f8:	8afb      	ldrh	r3, [r7, #22]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	82fb      	strh	r3, [r7, #22]
 800a4fe:	8afa      	ldrh	r2, [r7, #22]
 800a500:	88fb      	ldrh	r3, [r7, #6]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3c8      	bcc.n	800a498 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2200      	movs	r2, #0
 800a50a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a50c:	88fb      	ldrh	r3, [r7, #6]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800a52e:	4b22      	ldr	r3, [pc, #136]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a530:	2200      	movs	r2, #0
 800a532:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800a534:	4b20      	ldr	r3, [pc, #128]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a536:	2200      	movs	r2, #0
 800a538:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800a53a:	4b1f      	ldr	r3, [pc, #124]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800a540:	4b1d      	ldr	r3, [pc, #116]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a542:	2200      	movs	r2, #0
 800a544:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800a546:	4b1c      	ldr	r3, [pc, #112]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a548:	2200      	movs	r2, #0
 800a54a:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800a54c:	4b1a      	ldr	r3, [pc, #104]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a54e:	2200      	movs	r2, #0
 800a550:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800a552:	4b19      	ldr	r3, [pc, #100]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a554:	2200      	movs	r2, #0
 800a556:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800a558:	4b17      	ldr	r3, [pc, #92]	; (800a5b8 <USBH_HID_KeybdInit+0x9c>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a55e:	2300      	movs	r3, #0
 800a560:	60fb      	str	r3, [r7, #12]
 800a562:	e00c      	b.n	800a57e <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800a564:	4a15      	ldr	r2, [pc, #84]	; (800a5bc <USBH_HID_KeybdInit+0xa0>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2100      	movs	r1, #0
 800a56a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800a56e:	4a14      	ldr	r2, [pc, #80]	; (800a5c0 <USBH_HID_KeybdInit+0xa4>)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2100      	movs	r1, #0
 800a574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	3301      	adds	r3, #1
 800a57c:	60fb      	str	r3, [r7, #12]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d9ef      	bls.n	800a564 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	8b1b      	ldrh	r3, [r3, #24]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d902      	bls.n	800a592 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2208      	movs	r2, #8
 800a590:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4a0a      	ldr	r2, [pc, #40]	; (800a5c0 <USBH_HID_KeybdInit+0xa4>)
 800a596:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	f103 0008 	add.w	r0, r3, #8
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a5a4:	2250      	movs	r2, #80	; 0x50
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	f7ff fefe 	bl	800a3a8 <USBH_HID_FifoInit>

  return USBH_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	2000027c 	.word	0x2000027c
 800a5bc:	20000294 	.word	0x20000294
 800a5c0:	2000028c 	.word	0x2000028c

0800a5c4 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f80d 	bl	800a5ec <USBH_HID_KeybdDecode>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800a5d8:	4b03      	ldr	r3, [pc, #12]	; (800a5e8 <USBH_HID_GetKeybdInfo+0x24>)
 800a5da:	e000      	b.n	800a5de <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800a5dc:	2300      	movs	r3, #0
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000027c 	.word	0x2000027c

0800a5ec <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a5fa:	69db      	ldr	r3, [r3, #28]
 800a5fc:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	8b1b      	ldrh	r3, [r3, #24]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800a606:	2302      	movs	r3, #2
 800a608:	e066      	b.n	800a6d8 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f103 0008 	add.w	r0, r3, #8
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	8b1b      	ldrh	r3, [r3, #24]
 800a614:	461a      	mov	r2, r3
 800a616:	4932      	ldr	r1, [pc, #200]	; (800a6e0 <USBH_HID_KeybdDecode+0xf4>)
 800a618:	f7ff fee2 	bl	800a3e0 <USBH_HID_FifoRead>
 800a61c:	4603      	mov	r3, r0
 800a61e:	461a      	mov	r2, r3
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	8b1b      	ldrh	r3, [r3, #24]
 800a624:	429a      	cmp	r2, r3
 800a626:	d156      	bne.n	800a6d6 <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800a628:	2100      	movs	r1, #0
 800a62a:	482e      	ldr	r0, [pc, #184]	; (800a6e4 <USBH_HID_KeybdDecode+0xf8>)
 800a62c:	f000 f8e4 	bl	800a7f8 <HID_ReadItem>
 800a630:	4603      	mov	r3, r0
 800a632:	b2da      	uxtb	r2, r3
 800a634:	4b2c      	ldr	r3, [pc, #176]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a636:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800a638:	2100      	movs	r1, #0
 800a63a:	482c      	ldr	r0, [pc, #176]	; (800a6ec <USBH_HID_KeybdDecode+0x100>)
 800a63c:	f000 f8dc 	bl	800a7f8 <HID_ReadItem>
 800a640:	4603      	mov	r3, r0
 800a642:	b2da      	uxtb	r2, r3
 800a644:	4b28      	ldr	r3, [pc, #160]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a646:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800a648:	2100      	movs	r1, #0
 800a64a:	4829      	ldr	r0, [pc, #164]	; (800a6f0 <USBH_HID_KeybdDecode+0x104>)
 800a64c:	f000 f8d4 	bl	800a7f8 <HID_ReadItem>
 800a650:	4603      	mov	r3, r0
 800a652:	b2da      	uxtb	r2, r3
 800a654:	4b24      	ldr	r3, [pc, #144]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a656:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800a658:	2100      	movs	r1, #0
 800a65a:	4826      	ldr	r0, [pc, #152]	; (800a6f4 <USBH_HID_KeybdDecode+0x108>)
 800a65c:	f000 f8cc 	bl	800a7f8 <HID_ReadItem>
 800a660:	4603      	mov	r3, r0
 800a662:	b2da      	uxtb	r2, r3
 800a664:	4b20      	ldr	r3, [pc, #128]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a666:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800a668:	2100      	movs	r1, #0
 800a66a:	4823      	ldr	r0, [pc, #140]	; (800a6f8 <USBH_HID_KeybdDecode+0x10c>)
 800a66c:	f000 f8c4 	bl	800a7f8 <HID_ReadItem>
 800a670:	4603      	mov	r3, r0
 800a672:	b2da      	uxtb	r2, r3
 800a674:	4b1c      	ldr	r3, [pc, #112]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a676:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800a678:	2100      	movs	r1, #0
 800a67a:	4820      	ldr	r0, [pc, #128]	; (800a6fc <USBH_HID_KeybdDecode+0x110>)
 800a67c:	f000 f8bc 	bl	800a7f8 <HID_ReadItem>
 800a680:	4603      	mov	r3, r0
 800a682:	b2da      	uxtb	r2, r3
 800a684:	4b18      	ldr	r3, [pc, #96]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a686:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800a688:	2100      	movs	r1, #0
 800a68a:	481d      	ldr	r0, [pc, #116]	; (800a700 <USBH_HID_KeybdDecode+0x114>)
 800a68c:	f000 f8b4 	bl	800a7f8 <HID_ReadItem>
 800a690:	4603      	mov	r3, r0
 800a692:	b2da      	uxtb	r2, r3
 800a694:	4b14      	ldr	r3, [pc, #80]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a696:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800a698:	2100      	movs	r1, #0
 800a69a:	481a      	ldr	r0, [pc, #104]	; (800a704 <USBH_HID_KeybdDecode+0x118>)
 800a69c:	f000 f8ac 	bl	800a7f8 <HID_ReadItem>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	4b10      	ldr	r3, [pc, #64]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a6a6:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
 800a6ac:	e00e      	b.n	800a6cc <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4815      	ldr	r0, [pc, #84]	; (800a708 <USBH_HID_KeybdDecode+0x11c>)
 800a6b4:	f000 f8a0 	bl	800a7f8 <HID_ReadItem>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
 800a6bc:	b2d1      	uxtb	r1, r2
 800a6be:	4a0a      	ldr	r2, [pc, #40]	; (800a6e8 <USBH_HID_KeybdDecode+0xfc>)
 800a6c0:	4413      	add	r3, r2
 800a6c2:	460a      	mov	r2, r1
 800a6c4:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a6c6:	7bfb      	ldrb	r3, [r7, #15]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	73fb      	strb	r3, [r7, #15]
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	2b05      	cmp	r3, #5
 800a6d0:	d9ed      	bls.n	800a6ae <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	e000      	b.n	800a6d8 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800a6d6:	2302      	movs	r3, #2
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20000294 	.word	0x20000294
 800a6e4:	0800db10 	.word	0x0800db10
 800a6e8:	2000027c 	.word	0x2000027c
 800a6ec:	0800db30 	.word	0x0800db30
 800a6f0:	0800db50 	.word	0x0800db50
 800a6f4:	0800db70 	.word	0x0800db70
 800a6f8:	0800db90 	.word	0x0800db90
 800a6fc:	0800dbb0 	.word	0x0800dbb0
 800a700:	0800dbd0 	.word	0x0800dbd0
 800a704:	0800dbf0 	.word	0x0800dbf0
 800a708:	0800dc10 	.word	0x0800dc10

0800a70c <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	789b      	ldrb	r3, [r3, #2]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d103      	bne.n	800a724 <USBH_HID_GetASCIICode+0x18>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	799b      	ldrb	r3, [r3, #6]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7a5b      	ldrb	r3, [r3, #9]
 800a728:	461a      	mov	r2, r3
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <USBH_HID_GetASCIICode+0x4c>)
 800a72c:	5c9b      	ldrb	r3, [r3, r2]
 800a72e:	461a      	mov	r2, r3
 800a730:	4b0a      	ldr	r3, [pc, #40]	; (800a75c <USBH_HID_GetASCIICode+0x50>)
 800a732:	5c9b      	ldrb	r3, [r3, r2]
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	e008      	b.n	800a74a <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	7a5b      	ldrb	r3, [r3, #9]
 800a73c:	461a      	mov	r2, r3
 800a73e:	4b06      	ldr	r3, [pc, #24]	; (800a758 <USBH_HID_GetASCIICode+0x4c>)
 800a740:	5c9b      	ldrb	r3, [r3, r2]
 800a742:	461a      	mov	r2, r3
 800a744:	4b06      	ldr	r3, [pc, #24]	; (800a760 <USBH_HID_GetASCIICode+0x54>)
 800a746:	5c9b      	ldrb	r3, [r3, r2]
 800a748:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800a74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	0800dd38 	.word	0x0800dd38
 800a75c:	0800dcb4 	.word	0x0800dcb4
 800a760:	0800dc30 	.word	0x0800dc30

0800a764 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a772:	69db      	ldr	r3, [r3, #28]
 800a774:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800a776:	4b1d      	ldr	r3, [pc, #116]	; (800a7ec <USBH_HID_MouseInit+0x88>)
 800a778:	2200      	movs	r2, #0
 800a77a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800a77c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <USBH_HID_MouseInit+0x88>)
 800a77e:	2200      	movs	r2, #0
 800a780:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800a782:	4b1a      	ldr	r3, [pc, #104]	; (800a7ec <USBH_HID_MouseInit+0x88>)
 800a784:	2200      	movs	r2, #0
 800a786:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800a788:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <USBH_HID_MouseInit+0x88>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800a78e:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <USBH_HID_MouseInit+0x88>)
 800a790:	2200      	movs	r2, #0
 800a792:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	e00c      	b.n	800a7b4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800a79a:	4a15      	ldr	r2, [pc, #84]	; (800a7f0 <USBH_HID_MouseInit+0x8c>)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800a7a4:	4a13      	ldr	r2, [pc, #76]	; (800a7f4 <USBH_HID_MouseInit+0x90>)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d9ef      	bls.n	800a79a <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	8b1b      	ldrh	r3, [r3, #24]
 800a7be:	2b08      	cmp	r3, #8
 800a7c0:	d902      	bls.n	800a7c8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2208      	movs	r2, #8
 800a7c6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4a0a      	ldr	r2, [pc, #40]	; (800a7f4 <USBH_HID_MouseInit+0x90>)
 800a7cc:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	f103 0008 	add.w	r0, r3, #8
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a7da:	2250      	movs	r2, #80	; 0x50
 800a7dc:	4619      	mov	r1, r3
 800a7de:	f7ff fde3 	bl	800a3a8 <USBH_HID_FifoInit>

  return USBH_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	2000029c 	.word	0x2000029c
 800a7f0:	200002a4 	.word	0x200002a4
 800a7f4:	200002ac 	.word	0x200002ac

0800a7f8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b089      	sub	sp, #36	; 0x24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	7a1b      	ldrb	r3, [r3, #8]
 800a816:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	7a5b      	ldrb	r3, [r3, #9]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01a      	beq.n	800a856 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	7a5b      	ldrb	r3, [r3, #9]
 800a824:	78fa      	ldrb	r2, [r7, #3]
 800a826:	429a      	cmp	r2, r3
 800a828:	d301      	bcc.n	800a82e <HID_ReadItem+0x36>
    {
      return (0U);
 800a82a:	2300      	movs	r3, #0
 800a82c:	e078      	b.n	800a920 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	6852      	ldr	r2, [r2, #4]
 800a834:	fb02 f303 	mul.w	r3, r2, r3
 800a838:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800a83a:	7cfb      	ldrb	r3, [r7, #19]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4413      	add	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	08db      	lsrs	r3, r3, #3
 800a846:	697a      	ldr	r2, [r7, #20]
 800a848:	4413      	add	r3, r2
 800a84a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	e00a      	b.n	800a872 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	461a      	mov	r2, r3
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	fa02 f303 	lsl.w	r3, r2, r3
 800a86a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a86c:	69bb      	ldr	r3, [r7, #24]
 800a86e:	3301      	adds	r3, #1
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	f003 0307 	and.w	r3, r3, #7
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d004      	beq.n	800a888 <HID_ReadItem+0x90>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	08db      	lsrs	r3, r3, #3
 800a884:	3301      	adds	r3, #1
 800a886:	e002      	b.n	800a88e <HID_ReadItem+0x96>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	08db      	lsrs	r3, r3, #3
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	4293      	cmp	r3, r2
 800a892:	d8e3      	bhi.n	800a85c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800a894:	7cfb      	ldrb	r3, [r7, #19]
 800a896:	69fa      	ldr	r2, [r7, #28]
 800a898:	40da      	lsrs	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f04f 31ff 	mov.w	r1, #4294967295
 800a8a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a8a6:	43db      	mvns	r3, r3
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d304      	bcc.n	800a8c0 <HID_ReadItem+0xc8>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d901      	bls.n	800a8c4 <HID_ReadItem+0xcc>
  {
    return (0U);
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	e02d      	b.n	800a920 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7a9b      	ldrb	r3, [r3, #10]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01e      	beq.n	800a90a <HID_ReadItem+0x112>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	69fa      	ldr	r2, [r7, #28]
 800a8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d014      	beq.n	800a90a <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	425b      	negs	r3, r3
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	d101      	bne.n	800a8fe <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	e010      	b.n	800a920 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	fb02 f303 	mul.w	r3, r2, r3
 800a908:	e00a      	b.n	800a920 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HID_ReadItem+0x11e>
    {
      return (val);
 800a912:	69fb      	ldr	r3, [r7, #28]
 800a914:	e004      	b.n	800a920 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800a920:	4618      	mov	r0, r3
 800a922:	3724      	adds	r7, #36	; 0x24
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a940:	2302      	movs	r3, #2
 800a942:	e029      	b.n	800a998 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	79fa      	ldrb	r2, [r7, #7]
 800a948:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f000 f81f 	bl	800a9a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f002 f9bf 	bl	800cd14 <USBH_LL_Init>

  return USBH_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	e009      	b.n	800a9c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	33e0      	adds	r3, #224	; 0xe0
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	4413      	add	r3, r2
 800a9bc:	2200      	movs	r2, #0
 800a9be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b0f      	cmp	r3, #15
 800a9ca:	d9f2      	bls.n	800a9b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	e009      	b.n	800a9e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	4413      	add	r3, r2
 800a9d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a9dc:	2200      	movs	r2, #0
 800a9de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9ec:	d3f1      	bcc.n	800a9d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2240      	movs	r2, #64	; 0x40
 800aa12:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3714      	adds	r7, #20
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b085      	sub	sp, #20
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d016      	beq.n	800aa8a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d10e      	bne.n	800aa84 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa6c:	1c59      	adds	r1, r3, #1
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	33de      	adds	r3, #222	; 0xde
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e004      	b.n	800aa8e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aa84:	2302      	movs	r3, #2
 800aa86:	73fb      	strb	r3, [r7, #15]
 800aa88:	e001      	b.n	800aa8e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aab2:	78fa      	ldrb	r2, [r7, #3]
 800aab4:	429a      	cmp	r2, r3
 800aab6:	d204      	bcs.n	800aac2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	78fa      	ldrb	r2, [r7, #3]
 800aabc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aac0:	e001      	b.n	800aac6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aac2:	2302      	movs	r3, #2
 800aac4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	4608      	mov	r0, r1
 800aade:	4611      	mov	r1, r2
 800aae0:	461a      	mov	r2, r3
 800aae2:	4603      	mov	r3, r0
 800aae4:	70fb      	strb	r3, [r7, #3]
 800aae6:	460b      	mov	r3, r1
 800aae8:	70bb      	strb	r3, [r7, #2]
 800aaea:	4613      	mov	r3, r2
 800aaec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aafc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aafe:	e025      	b.n	800ab4c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ab00:	7dfb      	ldrb	r3, [r7, #23]
 800ab02:	221a      	movs	r2, #26
 800ab04:	fb02 f303 	mul.w	r3, r2, r3
 800ab08:	3308      	adds	r3, #8
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	3302      	adds	r3, #2
 800ab10:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	795b      	ldrb	r3, [r3, #5]
 800ab16:	78fa      	ldrb	r2, [r7, #3]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d002      	beq.n	800ab22 <USBH_FindInterface+0x4e>
 800ab1c:	78fb      	ldrb	r3, [r7, #3]
 800ab1e:	2bff      	cmp	r3, #255	; 0xff
 800ab20:	d111      	bne.n	800ab46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ab26:	78ba      	ldrb	r2, [r7, #2]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d002      	beq.n	800ab32 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab2c:	78bb      	ldrb	r3, [r7, #2]
 800ab2e:	2bff      	cmp	r3, #255	; 0xff
 800ab30:	d109      	bne.n	800ab46 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ab36:	787a      	ldrb	r2, [r7, #1]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d002      	beq.n	800ab42 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ab3c:	787b      	ldrb	r3, [r7, #1]
 800ab3e:	2bff      	cmp	r3, #255	; 0xff
 800ab40:	d101      	bne.n	800ab46 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	e006      	b.n	800ab54 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ab46:	7dfb      	ldrb	r3, [r7, #23]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ab4c:	7dfb      	ldrb	r3, [r7, #23]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d9d6      	bls.n	800ab00 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ab52:	23ff      	movs	r3, #255	; 0xff
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	371c      	adds	r7, #28
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr

0800ab60 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f002 f919 	bl	800cda0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ab6e:	2101      	movs	r1, #1
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f002 fa32 	bl	800cfda <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af04      	add	r7, sp, #16
 800ab86:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d102      	bne.n	800aba2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2203      	movs	r2, #3
 800aba0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	2b0b      	cmp	r3, #11
 800abaa:	f200 81be 	bhi.w	800af2a <USBH_Process+0x3aa>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBH_Process+0x34>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800abe5 	.word	0x0800abe5
 800abb8:	0800ac17 	.word	0x0800ac17
 800abbc:	0800ac7f 	.word	0x0800ac7f
 800abc0:	0800aec5 	.word	0x0800aec5
 800abc4:	0800af2b 	.word	0x0800af2b
 800abc8:	0800ad23 	.word	0x0800ad23
 800abcc:	0800ae6b 	.word	0x0800ae6b
 800abd0:	0800ad59 	.word	0x0800ad59
 800abd4:	0800ad79 	.word	0x0800ad79
 800abd8:	0800ad99 	.word	0x0800ad99
 800abdc:	0800addd 	.word	0x0800addd
 800abe0:	0800aead 	.word	0x0800aead
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 819e 	beq.w	800af2e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2201      	movs	r2, #1
 800abf6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800abf8:	20c8      	movs	r0, #200	; 0xc8
 800abfa:	f002 fa35 	bl	800d068 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f002 f92b 	bl	800ce5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac14:	e18b      	b.n	800af2e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d107      	bne.n	800ac30 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ac2e:	e18d      	b.n	800af4c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac3a:	d914      	bls.n	800ac66 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac42:	3301      	adds	r3, #1
 800ac44:	b2da      	uxtb	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ac52:	2b03      	cmp	r3, #3
 800ac54:	d903      	bls.n	800ac5e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	220d      	movs	r2, #13
 800ac5a:	701a      	strb	r2, [r3, #0]
      break;
 800ac5c:	e176      	b.n	800af4c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	701a      	strb	r2, [r3, #0]
      break;
 800ac64:	e172      	b.n	800af4c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac6c:	f103 020a 	add.w	r2, r3, #10
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ac76:	200a      	movs	r0, #10
 800ac78:	f002 f9f6 	bl	800d068 <USBH_Delay>
      break;
 800ac7c:	e166      	b.n	800af4c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d005      	beq.n	800ac94 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac8e:	2104      	movs	r1, #4
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac94:	2064      	movs	r0, #100	; 0x64
 800ac96:	f002 f9e7 	bl	800d068 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 f8b6 	bl	800ce0c <USBH_LL_GetSpeed>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2205      	movs	r2, #5
 800acae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800acb0:	2100      	movs	r1, #0
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fa05 	bl	800c0c2 <USBH_AllocPipe>
 800acb8:	4603      	mov	r3, r0
 800acba:	461a      	mov	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800acc0:	2180      	movs	r1, #128	; 0x80
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f001 f9fd 	bl	800c0c2 <USBH_AllocPipe>
 800acc8:	4603      	mov	r3, r0
 800acca:	461a      	mov	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	7919      	ldrb	r1, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ace4:	b292      	uxth	r2, r2
 800ace6:	9202      	str	r2, [sp, #8]
 800ace8:	2200      	movs	r2, #0
 800acea:	9201      	str	r2, [sp, #4]
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	4603      	mov	r3, r0
 800acf0:	2280      	movs	r2, #128	; 0x80
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 f9b6 	bl	800c064 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7959      	ldrb	r1, [r3, #5]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ad0c:	b292      	uxth	r2, r2
 800ad0e:	9202      	str	r2, [sp, #8]
 800ad10:	2200      	movs	r2, #0
 800ad12:	9201      	str	r2, [sp, #4]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	4603      	mov	r3, r0
 800ad18:	2200      	movs	r2, #0
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 f9a2 	bl	800c064 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad20:	e114      	b.n	800af4c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f918 	bl	800af58 <USBH_HandleEnum>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800ad2c:	7bbb      	ldrb	r3, [r7, #14]
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 80fe 	bne.w	800af32 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d103      	bne.n	800ad50 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ad4e:	e0f0      	b.n	800af32 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2207      	movs	r2, #7
 800ad54:	701a      	strb	r2, [r3, #0]
      break;
 800ad56:	e0ec      	b.n	800af32 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 80e9 	beq.w	800af36 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2208      	movs	r2, #8
 800ad74:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ad76:	e0de      	b.n	800af36 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	4619      	mov	r1, r3
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fc2c 	bl	800b5e0 <USBH_SetCfg>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f040 80d5 	bne.w	800af3a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2209      	movs	r2, #9
 800ad94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad96:	e0d0      	b.n	800af3a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ad9e:	f003 0320 	and.w	r3, r3, #32
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d016      	beq.n	800add4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ada6:	2101      	movs	r1, #1
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fc3c 	bl	800b626 <USBH_SetFeature>
 800adae:	4603      	mov	r3, r0
 800adb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d103      	bne.n	800adc2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	220a      	movs	r2, #10
 800adbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adc0:	e0bd      	b.n	800af3e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	f040 80b9 	bne.w	800af3e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	220a      	movs	r2, #10
 800add0:	701a      	strb	r2, [r3, #0]
      break;
 800add2:	e0b4      	b.n	800af3e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	220a      	movs	r2, #10
 800add8:	701a      	strb	r2, [r3, #0]
      break;
 800adda:	e0b0      	b.n	800af3e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80ad 	beq.w	800af42 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]
 800adf4:	e016      	b.n	800ae24 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800adf6:	7bfa      	ldrb	r2, [r7, #15]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	32de      	adds	r2, #222	; 0xde
 800adfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae00:	791a      	ldrb	r2, [r3, #4]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d108      	bne.n	800ae1e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	32de      	adds	r2, #222	; 0xde
 800ae12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ae1c:	e005      	b.n	800ae2a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ae1e:	7bfb      	ldrb	r3, [r7, #15]
 800ae20:	3301      	adds	r3, #1
 800ae22:	73fb      	strb	r3, [r7, #15]
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d0e5      	beq.n	800adf6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d016      	beq.n	800ae62 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	4798      	blx	r3
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2206      	movs	r2, #6
 800ae4a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae52:	2103      	movs	r1, #3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae58:	e073      	b.n	800af42 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	220d      	movs	r2, #13
 800ae5e:	701a      	strb	r2, [r3, #0]
      break;
 800ae60:	e06f      	b.n	800af42 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	220d      	movs	r2, #13
 800ae66:	701a      	strb	r2, [r3, #0]
      break;
 800ae68:	e06b      	b.n	800af42 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d017      	beq.n	800aea4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	4798      	blx	r3
 800ae80:	4603      	mov	r3, r0
 800ae82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae84:	7bbb      	ldrb	r3, [r7, #14]
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d103      	bne.n	800ae94 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	220b      	movs	r2, #11
 800ae90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae92:	e058      	b.n	800af46 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d154      	bne.n	800af46 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	220d      	movs	r2, #13
 800aea0:	701a      	strb	r2, [r3, #0]
      break;
 800aea2:	e050      	b.n	800af46 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	220d      	movs	r2, #13
 800aea8:	701a      	strb	r2, [r3, #0]
      break;
 800aeaa:	e04c      	b.n	800af46 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d049      	beq.n	800af4a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aebc:	695b      	ldr	r3, [r3, #20]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	4798      	blx	r3
      }
      break;
 800aec2:	e042      	b.n	800af4a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fd67 	bl	800a9a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d009      	beq.n	800aef0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d005      	beq.n	800af06 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af00:	2105      	movs	r1, #5
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b01      	cmp	r3, #1
 800af10:	d107      	bne.n	800af22 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fe20 	bl	800ab60 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800af20:	e014      	b.n	800af4c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f001 ff3c 	bl	800cda0 <USBH_LL_Start>
      break;
 800af28:	e010      	b.n	800af4c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800af2a:	bf00      	nop
 800af2c:	e00e      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af2e:	bf00      	nop
 800af30:	e00c      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af32:	bf00      	nop
 800af34:	e00a      	b.n	800af4c <USBH_Process+0x3cc>
    break;
 800af36:	bf00      	nop
 800af38:	e008      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af3a:	bf00      	nop
 800af3c:	e006      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af3e:	bf00      	nop
 800af40:	e004      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af42:	bf00      	nop
 800af44:	e002      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af46:	bf00      	nop
 800af48:	e000      	b.n	800af4c <USBH_Process+0x3cc>
      break;
 800af4a:	bf00      	nop
  }
  return USBH_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop

0800af58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af04      	add	r7, sp, #16
 800af5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800af60:	2301      	movs	r3, #1
 800af62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800af64:	2301      	movs	r3, #1
 800af66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	2b07      	cmp	r3, #7
 800af6e:	f200 81c1 	bhi.w	800b2f4 <USBH_HandleEnum+0x39c>
 800af72:	a201      	add	r2, pc, #4	; (adr r2, 800af78 <USBH_HandleEnum+0x20>)
 800af74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af78:	0800af99 	.word	0x0800af99
 800af7c:	0800b057 	.word	0x0800b057
 800af80:	0800b0c1 	.word	0x0800b0c1
 800af84:	0800b14f 	.word	0x0800b14f
 800af88:	0800b1b9 	.word	0x0800b1b9
 800af8c:	0800b229 	.word	0x0800b229
 800af90:	0800b26f 	.word	0x0800b26f
 800af94:	0800b2b5 	.word	0x0800b2b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af98:	2108      	movs	r1, #8
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fa50 	bl	800b440 <USBH_Get_DevDesc>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d130      	bne.n	800b00c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	7919      	ldrb	r1, [r3, #4]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800afce:	b292      	uxth	r2, r2
 800afd0:	9202      	str	r2, [sp, #8]
 800afd2:	2200      	movs	r2, #0
 800afd4:	9201      	str	r2, [sp, #4]
 800afd6:	9300      	str	r3, [sp, #0]
 800afd8:	4603      	mov	r3, r0
 800afda:	2280      	movs	r2, #128	; 0x80
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f841 	bl	800c064 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	7959      	ldrb	r1, [r3, #5]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aff6:	b292      	uxth	r2, r2
 800aff8:	9202      	str	r2, [sp, #8]
 800affa:	2200      	movs	r2, #0
 800affc:	9201      	str	r2, [sp, #4]
 800affe:	9300      	str	r3, [sp, #0]
 800b000:	4603      	mov	r3, r0
 800b002:	2200      	movs	r2, #0
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 f82d 	bl	800c064 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b00a:	e175      	b.n	800b2f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
 800b00e:	2b03      	cmp	r3, #3
 800b010:	f040 8172 	bne.w	800b2f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b01a:	3301      	adds	r3, #1
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d903      	bls.n	800b036 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	220d      	movs	r2, #13
 800b032:	701a      	strb	r2, [r3, #0]
      break;
 800b034:	e160      	b.n	800b2f8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	795b      	ldrb	r3, [r3, #5]
 800b03a:	4619      	mov	r1, r3
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 f861 	bl	800c104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	791b      	ldrb	r3, [r3, #4]
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f001 f85b 	bl	800c104 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
      break;
 800b054:	e150      	b.n	800b2f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b056:	2112      	movs	r1, #18
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f9f1 	bl	800b440 <USBH_Get_DevDesc>
 800b05e:	4603      	mov	r3, r0
 800b060:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2202      	movs	r2, #2
 800b06c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b06e:	e145      	b.n	800b2fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b070:	7bbb      	ldrb	r3, [r7, #14]
 800b072:	2b03      	cmp	r3, #3
 800b074:	f040 8142 	bne.w	800b2fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b07e:	3301      	adds	r3, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d903      	bls.n	800b09a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220d      	movs	r2, #13
 800b096:	701a      	strb	r2, [r3, #0]
      break;
 800b098:	e130      	b.n	800b2fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	795b      	ldrb	r3, [r3, #5]
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 f82f 	bl	800c104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	791b      	ldrb	r3, [r3, #4]
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 f829 	bl	800c104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
      break;
 800b0be:	e11d      	b.n	800b2fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fa68 	bl	800b598 <USBH_SetAddress>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d132      	bne.n	800b138 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b0d2:	2002      	movs	r0, #2
 800b0d4:	f001 ffc8 	bl	800d068 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2203      	movs	r2, #3
 800b0e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	7919      	ldrb	r1, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b0fa:	b292      	uxth	r2, r2
 800b0fc:	9202      	str	r2, [sp, #8]
 800b0fe:	2200      	movs	r2, #0
 800b100:	9201      	str	r2, [sp, #4]
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4603      	mov	r3, r0
 800b106:	2280      	movs	r2, #128	; 0x80
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 ffab 	bl	800c064 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	7959      	ldrb	r1, [r3, #5]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b122:	b292      	uxth	r2, r2
 800b124:	9202      	str	r2, [sp, #8]
 800b126:	2200      	movs	r2, #0
 800b128:	9201      	str	r2, [sp, #4]
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	4603      	mov	r3, r0
 800b12e:	2200      	movs	r2, #0
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 ff97 	bl	800c064 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b136:	e0e3      	b.n	800b300 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	f040 80e0 	bne.w	800b300 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	220d      	movs	r2, #13
 800b144:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	705a      	strb	r2, [r3, #1]
      break;
 800b14c:	e0d8      	b.n	800b300 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b14e:	2109      	movs	r1, #9
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f99d 	bl	800b490 <USBH_Get_CfgDesc>
 800b156:	4603      	mov	r3, r0
 800b158:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d103      	bne.n	800b168 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2204      	movs	r2, #4
 800b164:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b166:	e0cd      	b.n	800b304 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	f040 80ca 	bne.w	800b304 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b176:	3301      	adds	r3, #1
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b186:	2b03      	cmp	r3, #3
 800b188:	d903      	bls.n	800b192 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	220d      	movs	r2, #13
 800b18e:	701a      	strb	r2, [r3, #0]
      break;
 800b190:	e0b8      	b.n	800b304 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	795b      	ldrb	r3, [r3, #5]
 800b196:	4619      	mov	r1, r3
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 ffb3 	bl	800c104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	791b      	ldrb	r3, [r3, #4]
 800b1a2:	4619      	mov	r1, r3
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 ffad 	bl	800c104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	701a      	strb	r2, [r3, #0]
      break;
 800b1b6:	e0a5      	b.n	800b304 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 f965 	bl	800b490 <USBH_Get_CfgDesc>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d103      	bne.n	800b1d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2205      	movs	r2, #5
 800b1d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b1d6:	e097      	b.n	800b308 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	f040 8094 	bne.w	800b308 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	b2da      	uxtb	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b1f6:	2b03      	cmp	r3, #3
 800b1f8:	d903      	bls.n	800b202 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	220d      	movs	r2, #13
 800b1fe:	701a      	strb	r2, [r3, #0]
      break;
 800b200:	e082      	b.n	800b308 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	795b      	ldrb	r3, [r3, #5]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 ff7b 	bl	800c104 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	791b      	ldrb	r3, [r3, #4]
 800b212:	4619      	mov	r1, r3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 ff75 	bl	800c104 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	701a      	strb	r2, [r3, #0]
      break;
 800b226:	e06f      	b.n	800b308 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d019      	beq.n	800b266 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b23e:	23ff      	movs	r3, #255	; 0xff
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 f949 	bl	800b4d8 <USBH_Get_StringDesc>
 800b246:	4603      	mov	r3, r0
 800b248:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b24a:	7bbb      	ldrb	r3, [r7, #14]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d103      	bne.n	800b258 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2206      	movs	r2, #6
 800b254:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b256:	e059      	b.n	800b30c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b258:	7bbb      	ldrb	r3, [r7, #14]
 800b25a:	2b03      	cmp	r3, #3
 800b25c:	d156      	bne.n	800b30c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2206      	movs	r2, #6
 800b262:	705a      	strb	r2, [r3, #1]
      break;
 800b264:	e052      	b.n	800b30c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2206      	movs	r2, #6
 800b26a:	705a      	strb	r2, [r3, #1]
      break;
 800b26c:	e04e      	b.n	800b30c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b274:	2b00      	cmp	r3, #0
 800b276:	d019      	beq.n	800b2ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b284:	23ff      	movs	r3, #255	; 0xff
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f000 f926 	bl	800b4d8 <USBH_Get_StringDesc>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d103      	bne.n	800b29e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2207      	movs	r2, #7
 800b29a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b29c:	e038      	b.n	800b310 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b29e:	7bbb      	ldrb	r3, [r7, #14]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d135      	bne.n	800b310 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2207      	movs	r2, #7
 800b2a8:	705a      	strb	r2, [r3, #1]
      break;
 800b2aa:	e031      	b.n	800b310 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2207      	movs	r2, #7
 800b2b0:	705a      	strb	r2, [r3, #1]
      break;
 800b2b2:	e02d      	b.n	800b310 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d017      	beq.n	800b2ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b2ca:	23ff      	movs	r3, #255	; 0xff
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f903 	bl	800b4d8 <USBH_Get_StringDesc>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b2d6:	7bbb      	ldrb	r3, [r7, #14]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b2e0:	e018      	b.n	800b314 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b2e2:	7bbb      	ldrb	r3, [r7, #14]
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d115      	bne.n	800b314 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ec:	e012      	b.n	800b314 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	73fb      	strb	r3, [r7, #15]
      break;
 800b2f2:	e00f      	b.n	800b314 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b2f4:	bf00      	nop
 800b2f6:	e00e      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b2f8:	bf00      	nop
 800b2fa:	e00c      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b2fc:	bf00      	nop
 800b2fe:	e00a      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b300:	bf00      	nop
 800b302:	e008      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b304:	bf00      	nop
 800b306:	e006      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b308:	bf00      	nop
 800b30a:	e004      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b30c:	bf00      	nop
 800b30e:	e002      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b310:	bf00      	nop
 800b312:	e000      	b.n	800b316 <USBH_HandleEnum+0x3be>
      break;
 800b314:	bf00      	nop
  }
  return Status;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	683a      	ldr	r2, [r7, #0]
 800b32e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b082      	sub	sp, #8
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f804 	bl	800b362 <USBH_HandleSof>
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b082      	sub	sp, #8
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	2b0b      	cmp	r3, #11
 800b372:	d10a      	bne.n	800b38a <USBH_HandleSof+0x28>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	4798      	blx	r3
  }
}
 800b38a:	bf00      	nop
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b392:	b480      	push	{r7}
 800b394:	b083      	sub	sp, #12
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b3a2:	bf00      	nop
}
 800b3a4:	370c      	adds	r7, #12
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr

0800b3ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b3be:	bf00      	nop
}
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f001 fcdc 	bl	800cdd6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	791b      	ldrb	r3, [r3, #4]
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fe6d 	bl	800c104 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	795b      	ldrb	r3, [r3, #5]
 800b42e:	4619      	mov	r1, r3
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fe67 	bl	800c104 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af02      	add	r7, sp, #8
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	460b      	mov	r3, r1
 800b44a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	b29b      	uxth	r3, r3
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	4613      	mov	r3, r2
 800b45a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 f864 	bl	800b52e <USBH_GetDescriptor>
 800b466:	4603      	mov	r3, r0
 800b468:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b46a:	7bfb      	ldrb	r3, [r7, #15]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10a      	bne.n	800b486 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b47c:	78fa      	ldrb	r2, [r7, #3]
 800b47e:	b292      	uxth	r2, r2
 800b480:	4619      	mov	r1, r3
 800b482:	f000 f918 	bl	800b6b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b486:	7bfb      	ldrb	r3, [r7, #15]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3710      	adds	r7, #16
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af02      	add	r7, sp, #8
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	331c      	adds	r3, #28
 800b4a0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b4a2:	887b      	ldrh	r3, [r7, #2]
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4ac:	2100      	movs	r1, #0
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 f83d 	bl	800b52e <USBH_GetDescriptor>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d107      	bne.n	800b4ce <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b4be:	887b      	ldrh	r3, [r7, #2]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68b9      	ldr	r1, [r7, #8]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f987 	bl	800b7d8 <USBH_ParseCfgDesc>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3710      	adds	r7, #16
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b088      	sub	sp, #32
 800b4dc:	af02      	add	r7, sp, #8
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	607a      	str	r2, [r7, #4]
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	72fb      	strb	r3, [r7, #11]
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b4ec:	7afb      	ldrb	r3, [r7, #11]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b4f4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b4fc:	893b      	ldrh	r3, [r7, #8]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	460b      	mov	r3, r1
 800b502:	2100      	movs	r1, #0
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f000 f812 	bl	800b52e <USBH_GetDescriptor>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d107      	bne.n	800b524 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b51a:	893a      	ldrh	r2, [r7, #8]
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 fb24 	bl	800bb6c <USBH_ParseStringDesc>
  }

  return status;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	60f8      	str	r0, [r7, #12]
 800b536:	607b      	str	r3, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	72fb      	strb	r3, [r7, #11]
 800b53c:	4613      	mov	r3, r2
 800b53e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	789b      	ldrb	r3, [r3, #2]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d11c      	bne.n	800b582 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2206      	movs	r2, #6
 800b558:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	893a      	ldrh	r2, [r7, #8]
 800b55e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b560:	893b      	ldrh	r3, [r7, #8]
 800b562:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b56a:	d104      	bne.n	800b576 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f240 4209 	movw	r2, #1033	; 0x409
 800b572:	829a      	strh	r2, [r3, #20]
 800b574:	e002      	b.n	800b57c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	8b3a      	ldrh	r2, [r7, #24]
 800b580:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b582:	8b3b      	ldrh	r3, [r7, #24]
 800b584:	461a      	mov	r2, r3
 800b586:	6879      	ldr	r1, [r7, #4]
 800b588:	68f8      	ldr	r0, [r7, #12]
 800b58a:	f000 fb3d 	bl	800bc08 <USBH_CtlReq>
 800b58e:	4603      	mov	r3, r0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	789b      	ldrb	r3, [r3, #2]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d10f      	bne.n	800b5cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2205      	movs	r2, #5
 800b5b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 fb19 	bl	800bc08 <USBH_CtlReq>
 800b5d6:	4603      	mov	r3, r0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	789b      	ldrb	r3, [r3, #2]
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d10e      	bne.n	800b612 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2209      	movs	r2, #9
 800b5fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	887a      	ldrh	r2, [r7, #2]
 800b604:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2200      	movs	r2, #0
 800b60a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b612:	2200      	movs	r2, #0
 800b614:	2100      	movs	r1, #0
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f000 faf6 	bl	800bc08 <USBH_CtlReq>
 800b61c:	4603      	mov	r3, r0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3708      	adds	r7, #8
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b082      	sub	sp, #8
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	6078      	str	r0, [r7, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	789b      	ldrb	r3, [r3, #2]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d10f      	bne.n	800b65a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2203      	movs	r2, #3
 800b644:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b646:	78fb      	ldrb	r3, [r7, #3]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b65a:	2200      	movs	r2, #0
 800b65c:	2100      	movs	r1, #0
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fad2 	bl	800bc08 <USBH_CtlReq>
 800b664:	4603      	mov	r3, r0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	789b      	ldrb	r3, [r3, #2]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d10f      	bne.n	800b6a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2202      	movs	r2, #2
 800b686:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	b29a      	uxth	r2, r3
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 faae 	bl	800bc08 <USBH_CtlReq>
 800b6ac:	4603      	mov	r3, r0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b6b6:	b480      	push	{r7}
 800b6b8:	b085      	sub	sp, #20
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	60f8      	str	r0, [r7, #12]
 800b6be:	60b9      	str	r1, [r7, #8]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	785a      	ldrb	r2, [r3, #1]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	3302      	adds	r3, #2
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	3303      	adds	r3, #3
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	b29a      	uxth	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	791a      	ldrb	r2, [r3, #4]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	795a      	ldrb	r2, [r3, #5]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	799a      	ldrb	r2, [r3, #6]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	79da      	ldrb	r2, [r3, #7]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	79db      	ldrb	r3, [r3, #7]
 800b714:	2b20      	cmp	r3, #32
 800b716:	dc11      	bgt.n	800b73c <USBH_ParseDevDesc+0x86>
 800b718:	2b08      	cmp	r3, #8
 800b71a:	db16      	blt.n	800b74a <USBH_ParseDevDesc+0x94>
 800b71c:	3b08      	subs	r3, #8
 800b71e:	2201      	movs	r2, #1
 800b720:	fa02 f303 	lsl.w	r3, r2, r3
 800b724:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	bf14      	ite	ne
 800b730:	2301      	movne	r3, #1
 800b732:	2300      	moveq	r3, #0
 800b734:	b2db      	uxtb	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <USBH_ParseDevDesc+0x8a>
 800b73a:	e006      	b.n	800b74a <USBH_ParseDevDesc+0x94>
 800b73c:	2b40      	cmp	r3, #64	; 0x40
 800b73e:	d104      	bne.n	800b74a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	79da      	ldrb	r2, [r3, #7]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	71da      	strb	r2, [r3, #7]
      break;
 800b748:	e003      	b.n	800b752 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2240      	movs	r2, #64	; 0x40
 800b74e:	71da      	strb	r2, [r3, #7]
      break;
 800b750:	bf00      	nop
  }

  if (length > 8U)
 800b752:	88fb      	ldrh	r3, [r7, #6]
 800b754:	2b08      	cmp	r3, #8
 800b756:	d939      	bls.n	800b7cc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	3308      	adds	r3, #8
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	b29a      	uxth	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3309      	adds	r3, #9
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4313      	orrs	r3, r2
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	330a      	adds	r3, #10
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	330b      	adds	r3, #11
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	b29b      	uxth	r3, r3
 800b784:	021b      	lsls	r3, r3, #8
 800b786:	b29b      	uxth	r3, r3
 800b788:	4313      	orrs	r3, r2
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	330c      	adds	r3, #12
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	b29a      	uxth	r2, r3
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	330d      	adds	r3, #13
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	7b9a      	ldrb	r2, [r3, #14]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	7bda      	ldrb	r2, [r3, #15]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	7c1a      	ldrb	r2, [r3, #16]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	7c5a      	ldrb	r2, [r3, #17]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	745a      	strb	r2, [r3, #17]
  }
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08c      	sub	sp, #48	; 0x30
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b7ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	781a      	ldrb	r2, [r3, #0]
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	785a      	ldrb	r2, [r3, #1]
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	3302      	adds	r3, #2
 800b81c:	781b      	ldrb	r3, [r3, #0]
 800b81e:	b29a      	uxth	r2, r3
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	3303      	adds	r3, #3
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	b29b      	uxth	r3, r3
 800b828:	021b      	lsls	r3, r3, #8
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	4313      	orrs	r3, r2
 800b82e:	b29b      	uxth	r3, r3
 800b830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b834:	bf28      	it	cs
 800b836:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	6a3b      	ldr	r3, [r7, #32]
 800b83e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	791a      	ldrb	r2, [r3, #4]
 800b844:	6a3b      	ldr	r3, [r7, #32]
 800b846:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	795a      	ldrb	r2, [r3, #5]
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	799a      	ldrb	r2, [r3, #6]
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	79da      	ldrb	r2, [r3, #7]
 800b85c:	6a3b      	ldr	r3, [r7, #32]
 800b85e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	7a1a      	ldrb	r2, [r3, #8]
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b868:	6a3b      	ldr	r3, [r7, #32]
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	2b09      	cmp	r3, #9
 800b86e:	d002      	beq.n	800b876 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	2209      	movs	r2, #9
 800b874:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	2b09      	cmp	r3, #9
 800b87a:	f240 809d 	bls.w	800b9b8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b87e:	2309      	movs	r3, #9
 800b880:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b882:	2300      	movs	r3, #0
 800b884:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b886:	e081      	b.n	800b98c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b888:	f107 0316 	add.w	r3, r7, #22
 800b88c:	4619      	mov	r1, r3
 800b88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b890:	f000 f99f 	bl	800bbd2 <USBH_GetNextDesc>
 800b894:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	2b04      	cmp	r3, #4
 800b89c:	d176      	bne.n	800b98c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b09      	cmp	r3, #9
 800b8a4:	d002      	beq.n	800b8ac <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	2209      	movs	r2, #9
 800b8aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b0:	221a      	movs	r2, #26
 800b8b2:	fb02 f303 	mul.w	r3, r2, r3
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	6a3a      	ldr	r2, [r7, #32]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	3302      	adds	r3, #2
 800b8be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b8c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8c2:	69f8      	ldr	r0, [r7, #28]
 800b8c4:	f000 f87e 	bl	800b9c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8d2:	e043      	b.n	800b95c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b8d4:	f107 0316 	add.w	r3, r7, #22
 800b8d8:	4619      	mov	r1, r3
 800b8da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8dc:	f000 f979 	bl	800bbd2 <USBH_GetNextDesc>
 800b8e0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e4:	785b      	ldrb	r3, [r3, #1]
 800b8e6:	2b05      	cmp	r3, #5
 800b8e8:	d138      	bne.n	800b95c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b8ea:	69fb      	ldr	r3, [r7, #28]
 800b8ec:	795b      	ldrb	r3, [r3, #5]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d10f      	bne.n	800b912 <USBH_ParseCfgDesc+0x13a>
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	799b      	ldrb	r3, [r3, #6]
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d10b      	bne.n	800b912 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	79db      	ldrb	r3, [r3, #7]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10f      	bne.n	800b922 <USBH_ParseCfgDesc+0x14a>
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	2b09      	cmp	r3, #9
 800b908:	d00b      	beq.n	800b922 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	2209      	movs	r2, #9
 800b90e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b910:	e007      	b.n	800b922 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	2b07      	cmp	r3, #7
 800b918:	d004      	beq.n	800b924 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	2207      	movs	r2, #7
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	e000      	b.n	800b924 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b922:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b928:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b92c:	3201      	adds	r2, #1
 800b92e:	00d2      	lsls	r2, r2, #3
 800b930:	211a      	movs	r1, #26
 800b932:	fb01 f303 	mul.w	r3, r1, r3
 800b936:	4413      	add	r3, r2
 800b938:	3308      	adds	r3, #8
 800b93a:	6a3a      	ldr	r2, [r7, #32]
 800b93c:	4413      	add	r3, r2
 800b93e:	3304      	adds	r3, #4
 800b940:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b944:	69b9      	ldr	r1, [r7, #24]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 f86b 	bl	800ba22 <USBH_ParseEPDesc>
 800b94c:	4603      	mov	r3, r0
 800b94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b956:	3301      	adds	r3, #1
 800b958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b95c:	69fb      	ldr	r3, [r7, #28]
 800b95e:	791b      	ldrb	r3, [r3, #4]
 800b960:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b964:	429a      	cmp	r2, r3
 800b966:	d204      	bcs.n	800b972 <USBH_ParseCfgDesc+0x19a>
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	885a      	ldrh	r2, [r3, #2]
 800b96c:	8afb      	ldrh	r3, [r7, #22]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d8b0      	bhi.n	800b8d4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	791b      	ldrb	r3, [r3, #4]
 800b976:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d201      	bcs.n	800b982 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b97e:	2303      	movs	r3, #3
 800b980:	e01c      	b.n	800b9bc <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b986:	3301      	adds	r3, #1
 800b988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b98c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b990:	2b01      	cmp	r3, #1
 800b992:	d805      	bhi.n	800b9a0 <USBH_ParseCfgDesc+0x1c8>
 800b994:	6a3b      	ldr	r3, [r7, #32]
 800b996:	885a      	ldrh	r2, [r3, #2]
 800b998:	8afb      	ldrh	r3, [r7, #22]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	f63f af74 	bhi.w	800b888 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b9a0:	6a3b      	ldr	r3, [r7, #32]
 800b9a2:	791b      	ldrb	r3, [r3, #4]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	bf28      	it	cs
 800b9a8:	2302      	movcs	r3, #2
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d201      	bcs.n	800b9b8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e001      	b.n	800b9bc <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3730      	adds	r7, #48	; 0x30
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781a      	ldrb	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	785a      	ldrb	r2, [r3, #1]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	789a      	ldrb	r2, [r3, #2]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	78da      	ldrb	r2, [r3, #3]
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	791a      	ldrb	r2, [r3, #4]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	795a      	ldrb	r2, [r3, #5]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	799a      	ldrb	r2, [r3, #6]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	79da      	ldrb	r2, [r3, #7]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	7a1a      	ldrb	r2, [r3, #8]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	721a      	strb	r2, [r3, #8]
}
 800ba16:	bf00      	nop
 800ba18:	370c      	adds	r7, #12
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800ba22:	b480      	push	{r7}
 800ba24:	b087      	sub	sp, #28
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	781a      	ldrb	r2, [r3, #0]
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	785a      	ldrb	r2, [r3, #1]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	789a      	ldrb	r2, [r3, #2]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	78da      	ldrb	r2, [r3, #3]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	3304      	adds	r3, #4
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	b29a      	uxth	r2, r3
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3305      	adds	r3, #5
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	b29b      	uxth	r3, r3
 800ba62:	021b      	lsls	r3, r3, #8
 800ba64:	b29b      	uxth	r3, r3
 800ba66:	4313      	orrs	r3, r2
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	799a      	ldrb	r2, [r3, #6]
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	889b      	ldrh	r3, [r3, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d102      	bne.n	800ba84 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	75fb      	strb	r3, [r7, #23]
 800ba82:	e033      	b.n	800baec <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	889b      	ldrh	r3, [r3, #4]
 800ba88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	889b      	ldrh	r3, [r3, #4]
 800ba9a:	b21a      	sxth	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b299      	uxth	r1, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	3305      	adds	r3, #5
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	b29b      	uxth	r3, r3
 800bab0:	430b      	orrs	r3, r1
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d110      	bne.n	800bade <USBH_ParseEPDesc+0xbc>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3304      	adds	r3, #4
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	b299      	uxth	r1, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3305      	adds	r3, #5
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	b29b      	uxth	r3, r3
 800bad0:	430b      	orrs	r3, r1
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	b21b      	sxth	r3, r3
 800bad6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bada:	b21b      	sxth	r3, r3
 800badc:	e001      	b.n	800bae2 <USBH_ParseEPDesc+0xc0>
 800bade:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bae2:	4313      	orrs	r3, r2
 800bae4:	b21b      	sxth	r3, r3
 800bae6:	b29a      	uxth	r2, r3
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d116      	bne.n	800bb24 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	78db      	ldrb	r3, [r3, #3]
 800bafa:	f003 0303 	and.w	r3, r3, #3
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d005      	beq.n	800bb0e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	78db      	ldrb	r3, [r3, #3]
 800bb06:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d127      	bne.n	800bb5e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	799b      	ldrb	r3, [r3, #6]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d003      	beq.n	800bb1e <USBH_ParseEPDesc+0xfc>
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	799b      	ldrb	r3, [r3, #6]
 800bb1a:	2b10      	cmp	r3, #16
 800bb1c:	d91f      	bls.n	800bb5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb1e:	2303      	movs	r3, #3
 800bb20:	75fb      	strb	r3, [r7, #23]
 800bb22:	e01c      	b.n	800bb5e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	78db      	ldrb	r3, [r3, #3]
 800bb28:	f003 0303 	and.w	r3, r3, #3
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d10a      	bne.n	800bb46 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	799b      	ldrb	r3, [r3, #6]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <USBH_ParseEPDesc+0x11e>
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	799b      	ldrb	r3, [r3, #6]
 800bb3c:	2b10      	cmp	r3, #16
 800bb3e:	d90e      	bls.n	800bb5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb40:	2303      	movs	r3, #3
 800bb42:	75fb      	strb	r3, [r7, #23]
 800bb44:	e00b      	b.n	800bb5e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	78db      	ldrb	r3, [r3, #3]
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	d105      	bne.n	800bb5e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	799b      	ldrb	r3, [r3, #6]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	371c      	adds	r7, #28
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b087      	sub	sp, #28
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	60f8      	str	r0, [r7, #12]
 800bb74:	60b9      	str	r1, [r7, #8]
 800bb76:	4613      	mov	r3, r2
 800bb78:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d120      	bne.n	800bbc6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	1e9a      	subs	r2, r3, #2
 800bb8a:	88fb      	ldrh	r3, [r7, #6]
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	bf28      	it	cs
 800bb90:	4613      	movcs	r3, r2
 800bb92:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3302      	adds	r3, #2
 800bb98:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	82fb      	strh	r3, [r7, #22]
 800bb9e:	e00b      	b.n	800bbb8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bba0:	8afb      	ldrh	r3, [r7, #22]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	781a      	ldrb	r2, [r3, #0]
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bbb2:	8afb      	ldrh	r3, [r7, #22]
 800bbb4:	3302      	adds	r3, #2
 800bbb6:	82fb      	strh	r3, [r7, #22]
 800bbb8:	8afa      	ldrh	r2, [r7, #22]
 800bbba:	8abb      	ldrh	r3, [r7, #20]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d3ef      	bcc.n	800bba0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	701a      	strb	r2, [r3, #0]
  }
}
 800bbc6:	bf00      	nop
 800bbc8:	371c      	adds	r7, #28
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b085      	sub	sp, #20
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	881a      	ldrh	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	4413      	add	r3, r2
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b086      	sub	sp, #24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4613      	mov	r3, r2
 800bc14:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bc16:	2301      	movs	r3, #1
 800bc18:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	789b      	ldrb	r3, [r3, #2]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d002      	beq.n	800bc28 <USBH_CtlReq+0x20>
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	d00f      	beq.n	800bc46 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bc26:	e027      	b.n	800bc78 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	88fa      	ldrh	r2, [r7, #6]
 800bc32:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2201      	movs	r2, #1
 800bc38:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bc40:	2301      	movs	r3, #1
 800bc42:	75fb      	strb	r3, [r7, #23]
      break;
 800bc44:	e018      	b.n	800bc78 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 f81c 	bl	800bc84 <USBH_HandleControl>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d002      	beq.n	800bc5c <USBH_CtlReq+0x54>
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	2b03      	cmp	r3, #3
 800bc5a:	d106      	bne.n	800bc6a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	761a      	strb	r2, [r3, #24]
      break;
 800bc68:	e005      	b.n	800bc76 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bc6a:	7dfb      	ldrb	r3, [r7, #23]
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d102      	bne.n	800bc76 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2201      	movs	r2, #1
 800bc74:	709a      	strb	r2, [r3, #2]
      break;
 800bc76:	bf00      	nop
  }
  return status;
 800bc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3718      	adds	r7, #24
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b086      	sub	sp, #24
 800bc88:	af02      	add	r7, sp, #8
 800bc8a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc90:	2300      	movs	r3, #0
 800bc92:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	7e1b      	ldrb	r3, [r3, #24]
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	2b0a      	cmp	r3, #10
 800bc9c:	f200 8156 	bhi.w	800bf4c <USBH_HandleControl+0x2c8>
 800bca0:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <USBH_HandleControl+0x24>)
 800bca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca6:	bf00      	nop
 800bca8:	0800bcd5 	.word	0x0800bcd5
 800bcac:	0800bcef 	.word	0x0800bcef
 800bcb0:	0800bd59 	.word	0x0800bd59
 800bcb4:	0800bd7f 	.word	0x0800bd7f
 800bcb8:	0800bdb7 	.word	0x0800bdb7
 800bcbc:	0800bde1 	.word	0x0800bde1
 800bcc0:	0800be33 	.word	0x0800be33
 800bcc4:	0800be55 	.word	0x0800be55
 800bcc8:	0800be91 	.word	0x0800be91
 800bccc:	0800beb7 	.word	0x0800beb7
 800bcd0:	0800bef5 	.word	0x0800bef5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f103 0110 	add.w	r1, r3, #16
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	795b      	ldrb	r3, [r3, #5]
 800bcde:	461a      	mov	r2, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 f943 	bl	800bf6c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2202      	movs	r2, #2
 800bcea:	761a      	strb	r2, [r3, #24]
      break;
 800bcec:	e139      	b.n	800bf62 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	795b      	ldrb	r3, [r3, #5]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f001 f95d 	bl	800cfb4 <USBH_LL_GetURBState>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bcfe:	7bbb      	ldrb	r3, [r7, #14]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d11e      	bne.n	800bd42 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	7c1b      	ldrb	r3, [r3, #16]
 800bd08:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd0c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	8adb      	ldrh	r3, [r3, #22]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00a      	beq.n	800bd2c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bd16:	7b7b      	ldrb	r3, [r7, #13]
 800bd18:	2b80      	cmp	r3, #128	; 0x80
 800bd1a:	d103      	bne.n	800bd24 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2203      	movs	r2, #3
 800bd20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd22:	e115      	b.n	800bf50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2205      	movs	r2, #5
 800bd28:	761a      	strb	r2, [r3, #24]
      break;
 800bd2a:	e111      	b.n	800bf50 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bd2c:	7b7b      	ldrb	r3, [r7, #13]
 800bd2e:	2b80      	cmp	r3, #128	; 0x80
 800bd30:	d103      	bne.n	800bd3a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2209      	movs	r2, #9
 800bd36:	761a      	strb	r2, [r3, #24]
      break;
 800bd38:	e10a      	b.n	800bf50 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2207      	movs	r2, #7
 800bd3e:	761a      	strb	r2, [r3, #24]
      break;
 800bd40:	e106      	b.n	800bf50 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bd42:	7bbb      	ldrb	r3, [r7, #14]
 800bd44:	2b04      	cmp	r3, #4
 800bd46:	d003      	beq.n	800bd50 <USBH_HandleControl+0xcc>
 800bd48:	7bbb      	ldrb	r3, [r7, #14]
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	f040 8100 	bne.w	800bf50 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	220b      	movs	r2, #11
 800bd54:	761a      	strb	r2, [r3, #24]
      break;
 800bd56:	e0fb      	b.n	800bf50 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6899      	ldr	r1, [r3, #8]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	899a      	ldrh	r2, [r3, #12]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	791b      	ldrb	r3, [r3, #4]
 800bd70:	6878      	ldr	r0, [r7, #4]
 800bd72:	f000 f93a 	bl	800bfea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	761a      	strb	r2, [r3, #24]
      break;
 800bd7c:	e0f1      	b.n	800bf62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	791b      	ldrb	r3, [r3, #4]
 800bd82:	4619      	mov	r1, r3
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f001 f915 	bl	800cfb4 <USBH_LL_GetURBState>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d102      	bne.n	800bd9a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2209      	movs	r2, #9
 800bd98:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bd9a:	7bbb      	ldrb	r3, [r7, #14]
 800bd9c:	2b05      	cmp	r3, #5
 800bd9e:	d102      	bne.n	800bda6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bda0:	2303      	movs	r3, #3
 800bda2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bda4:	e0d6      	b.n	800bf54 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	f040 80d3 	bne.w	800bf54 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	220b      	movs	r2, #11
 800bdb2:	761a      	strb	r2, [r3, #24]
      break;
 800bdb4:	e0ce      	b.n	800bf54 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6899      	ldr	r1, [r3, #8]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	899a      	ldrh	r2, [r3, #12]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	795b      	ldrb	r3, [r3, #5]
 800bdc2:	2001      	movs	r0, #1
 800bdc4:	9000      	str	r0, [sp, #0]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f8ea 	bl	800bfa0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2206      	movs	r2, #6
 800bddc:	761a      	strb	r2, [r3, #24]
      break;
 800bdde:	e0c0      	b.n	800bf62 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	795b      	ldrb	r3, [r3, #5]
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f001 f8e4 	bl	800cfb4 <USBH_LL_GetURBState>
 800bdec:	4603      	mov	r3, r0
 800bdee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bdf0:	7bbb      	ldrb	r3, [r7, #14]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d103      	bne.n	800bdfe <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2207      	movs	r2, #7
 800bdfa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdfc:	e0ac      	b.n	800bf58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	2b05      	cmp	r3, #5
 800be02:	d105      	bne.n	800be10 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	220c      	movs	r2, #12
 800be08:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800be0a:	2303      	movs	r3, #3
 800be0c:	73fb      	strb	r3, [r7, #15]
      break;
 800be0e:	e0a3      	b.n	800bf58 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be10:	7bbb      	ldrb	r3, [r7, #14]
 800be12:	2b02      	cmp	r3, #2
 800be14:	d103      	bne.n	800be1e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2205      	movs	r2, #5
 800be1a:	761a      	strb	r2, [r3, #24]
      break;
 800be1c:	e09c      	b.n	800bf58 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800be1e:	7bbb      	ldrb	r3, [r7, #14]
 800be20:	2b04      	cmp	r3, #4
 800be22:	f040 8099 	bne.w	800bf58 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	220b      	movs	r2, #11
 800be2a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800be2c:	2302      	movs	r3, #2
 800be2e:	73fb      	strb	r3, [r7, #15]
      break;
 800be30:	e092      	b.n	800bf58 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	791b      	ldrb	r3, [r3, #4]
 800be36:	2200      	movs	r2, #0
 800be38:	2100      	movs	r1, #0
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 f8d5 	bl	800bfea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2208      	movs	r2, #8
 800be50:	761a      	strb	r2, [r3, #24]

      break;
 800be52:	e086      	b.n	800bf62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	791b      	ldrb	r3, [r3, #4]
 800be58:	4619      	mov	r1, r3
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f001 f8aa 	bl	800cfb4 <USBH_LL_GetURBState>
 800be60:	4603      	mov	r3, r0
 800be62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d105      	bne.n	800be76 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	220d      	movs	r2, #13
 800be6e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be74:	e072      	b.n	800bf5c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800be76:	7bbb      	ldrb	r3, [r7, #14]
 800be78:	2b04      	cmp	r3, #4
 800be7a:	d103      	bne.n	800be84 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	220b      	movs	r2, #11
 800be80:	761a      	strb	r2, [r3, #24]
      break;
 800be82:	e06b      	b.n	800bf5c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	2b05      	cmp	r3, #5
 800be88:	d168      	bne.n	800bf5c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800be8a:	2303      	movs	r3, #3
 800be8c:	73fb      	strb	r3, [r7, #15]
      break;
 800be8e:	e065      	b.n	800bf5c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	795b      	ldrb	r3, [r3, #5]
 800be94:	2201      	movs	r2, #1
 800be96:	9200      	str	r2, [sp, #0]
 800be98:	2200      	movs	r2, #0
 800be9a:	2100      	movs	r1, #0
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 f87f 	bl	800bfa0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	220a      	movs	r2, #10
 800beb2:	761a      	strb	r2, [r3, #24]
      break;
 800beb4:	e055      	b.n	800bf62 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	795b      	ldrb	r3, [r3, #5]
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f001 f879 	bl	800cfb4 <USBH_LL_GetURBState>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bec6:	7bbb      	ldrb	r3, [r7, #14]
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d105      	bne.n	800bed8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800becc:	2300      	movs	r3, #0
 800bece:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	220d      	movs	r2, #13
 800bed4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bed6:	e043      	b.n	800bf60 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bed8:	7bbb      	ldrb	r3, [r7, #14]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	d103      	bne.n	800bee6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2209      	movs	r2, #9
 800bee2:	761a      	strb	r2, [r3, #24]
      break;
 800bee4:	e03c      	b.n	800bf60 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d139      	bne.n	800bf60 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	220b      	movs	r2, #11
 800bef0:	761a      	strb	r2, [r3, #24]
      break;
 800bef2:	e035      	b.n	800bf60 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7e5b      	ldrb	r3, [r3, #25]
 800bef8:	3301      	adds	r3, #1
 800befa:	b2da      	uxtb	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	765a      	strb	r2, [r3, #25]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	7e5b      	ldrb	r3, [r3, #25]
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d806      	bhi.n	800bf16 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2201      	movs	r2, #1
 800bf12:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bf14:	e025      	b.n	800bf62 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bf1c:	2106      	movs	r1, #6
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	795b      	ldrb	r3, [r3, #5]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f8e8 	bl	800c104 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	791b      	ldrb	r3, [r3, #4]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 f8e2 	bl	800c104 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bf46:	2302      	movs	r3, #2
 800bf48:	73fb      	strb	r3, [r7, #15]
      break;
 800bf4a:	e00a      	b.n	800bf62 <USBH_HandleControl+0x2de>

    default:
      break;
 800bf4c:	bf00      	nop
 800bf4e:	e008      	b.n	800bf62 <USBH_HandleControl+0x2de>
      break;
 800bf50:	bf00      	nop
 800bf52:	e006      	b.n	800bf62 <USBH_HandleControl+0x2de>
      break;
 800bf54:	bf00      	nop
 800bf56:	e004      	b.n	800bf62 <USBH_HandleControl+0x2de>
      break;
 800bf58:	bf00      	nop
 800bf5a:	e002      	b.n	800bf62 <USBH_HandleControl+0x2de>
      break;
 800bf5c:	bf00      	nop
 800bf5e:	e000      	b.n	800bf62 <USBH_HandleControl+0x2de>
      break;
 800bf60:	bf00      	nop
  }

  return status;
 800bf62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}

0800bf6c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b088      	sub	sp, #32
 800bf70:	af04      	add	r7, sp, #16
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf7a:	79f9      	ldrb	r1, [r7, #7]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9303      	str	r3, [sp, #12]
 800bf80:	2308      	movs	r3, #8
 800bf82:	9302      	str	r3, [sp, #8]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	9301      	str	r3, [sp, #4]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2200      	movs	r2, #0
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 ffde 	bl	800cf52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b088      	sub	sp, #32
 800bfa4:	af04      	add	r7, sp, #16
 800bfa6:	60f8      	str	r0, [r7, #12]
 800bfa8:	60b9      	str	r1, [r7, #8]
 800bfaa:	4611      	mov	r1, r2
 800bfac:	461a      	mov	r2, r3
 800bfae:	460b      	mov	r3, r1
 800bfb0:	80fb      	strh	r3, [r7, #6]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfc4:	7979      	ldrb	r1, [r7, #5]
 800bfc6:	7e3b      	ldrb	r3, [r7, #24]
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	9302      	str	r3, [sp, #8]
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2200      	movs	r2, #0
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f000 ffb9 	bl	800cf52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b088      	sub	sp, #32
 800bfee:	af04      	add	r7, sp, #16
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	4611      	mov	r1, r2
 800bff6:	461a      	mov	r2, r3
 800bff8:	460b      	mov	r3, r1
 800bffa:	80fb      	strh	r3, [r7, #6]
 800bffc:	4613      	mov	r3, r2
 800bffe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c000:	7979      	ldrb	r1, [r7, #5]
 800c002:	2300      	movs	r3, #0
 800c004:	9303      	str	r3, [sp, #12]
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	9302      	str	r3, [sp, #8]
 800c00a:	68bb      	ldr	r3, [r7, #8]
 800c00c:	9301      	str	r3, [sp, #4]
 800c00e:	2301      	movs	r3, #1
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	2300      	movs	r3, #0
 800c014:	2201      	movs	r2, #1
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f000 ff9b 	bl	800cf52 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c01c:	2300      	movs	r3, #0

}
 800c01e:	4618      	mov	r0, r3
 800c020:	3710      	adds	r7, #16
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}

0800c026 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800c026:	b580      	push	{r7, lr}
 800c028:	b088      	sub	sp, #32
 800c02a:	af04      	add	r7, sp, #16
 800c02c:	60f8      	str	r0, [r7, #12]
 800c02e:	60b9      	str	r1, [r7, #8]
 800c030:	4611      	mov	r1, r2
 800c032:	461a      	mov	r2, r3
 800c034:	460b      	mov	r3, r1
 800c036:	71fb      	strb	r3, [r7, #7]
 800c038:	4613      	mov	r3, r2
 800c03a:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c03c:	79fb      	ldrb	r3, [r7, #7]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	79b9      	ldrb	r1, [r7, #6]
 800c042:	2200      	movs	r2, #0
 800c044:	9203      	str	r2, [sp, #12]
 800c046:	9302      	str	r3, [sp, #8]
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	9301      	str	r3, [sp, #4]
 800c04c:	2301      	movs	r3, #1
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	2303      	movs	r3, #3
 800c052:	2201      	movs	r2, #1
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 ff7c 	bl	800cf52 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af04      	add	r7, sp, #16
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	4608      	mov	r0, r1
 800c06e:	4611      	mov	r1, r2
 800c070:	461a      	mov	r2, r3
 800c072:	4603      	mov	r3, r0
 800c074:	70fb      	strb	r3, [r7, #3]
 800c076:	460b      	mov	r3, r1
 800c078:	70bb      	strb	r3, [r7, #2]
 800c07a:	4613      	mov	r3, r2
 800c07c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c07e:	7878      	ldrb	r0, [r7, #1]
 800c080:	78ba      	ldrb	r2, [r7, #2]
 800c082:	78f9      	ldrb	r1, [r7, #3]
 800c084:	8b3b      	ldrh	r3, [r7, #24]
 800c086:	9302      	str	r3, [sp, #8]
 800c088:	7d3b      	ldrb	r3, [r7, #20]
 800c08a:	9301      	str	r3, [sp, #4]
 800c08c:	7c3b      	ldrb	r3, [r7, #16]
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	4603      	mov	r3, r0
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 ff0f 	bl	800ceb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	460b      	mov	r3, r1
 800c0ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 ff2e 	bl	800cf14 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3708      	adds	r7, #8
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 f836 	bl	800c140 <USBH_GetFreePipe>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c0d8:	89fb      	ldrh	r3, [r7, #14]
 800c0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d00a      	beq.n	800c0f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c0e2:	78fa      	ldrb	r2, [r7, #3]
 800c0e4:	89fb      	ldrh	r3, [r7, #14]
 800c0e6:	f003 030f 	and.w	r3, r3, #15
 800c0ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	33e0      	adds	r3, #224	; 0xe0
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c0f8:	89fb      	ldrh	r3, [r7, #14]
 800c0fa:	b2db      	uxtb	r3, r3
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3710      	adds	r7, #16
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	460b      	mov	r3, r1
 800c10e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	2b0f      	cmp	r3, #15
 800c114:	d80d      	bhi.n	800c132 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c116:	78fb      	ldrb	r3, [r7, #3]
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	33e0      	adds	r3, #224	; 0xe0
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	78fb      	ldrb	r3, [r7, #3]
 800c124:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	33e0      	adds	r3, #224	; 0xe0
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	440b      	add	r3, r1
 800c130:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	370c      	adds	r7, #12
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c14c:	2300      	movs	r3, #0
 800c14e:	73fb      	strb	r3, [r7, #15]
 800c150:	e00f      	b.n	800c172 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c152:	7bfb      	ldrb	r3, [r7, #15]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	33e0      	adds	r3, #224	; 0xe0
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	4413      	add	r3, r2
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c166:	7bfb      	ldrb	r3, [r7, #15]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	e007      	b.n	800c17c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	3301      	adds	r3, #1
 800c170:	73fb      	strb	r3, [r7, #15]
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	2b0f      	cmp	r3, #15
 800c176:	d9ec      	bls.n	800c152 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c178:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c18c:	2200      	movs	r2, #0
 800c18e:	490e      	ldr	r1, [pc, #56]	; (800c1c8 <MX_USB_DEVICE_Init+0x40>)
 800c190:	480e      	ldr	r0, [pc, #56]	; (800c1cc <MX_USB_DEVICE_Init+0x44>)
 800c192:	f7fc fa1b 	bl	80085cc <USBD_Init>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d001      	beq.n	800c1a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c19c:	f7f4 fd5c 	bl	8000c58 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c1a0:	490b      	ldr	r1, [pc, #44]	; (800c1d0 <MX_USB_DEVICE_Init+0x48>)
 800c1a2:	480a      	ldr	r0, [pc, #40]	; (800c1cc <MX_USB_DEVICE_Init+0x44>)
 800c1a4:	f7fc fa42 	bl	800862c <USBD_RegisterClass>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c1ae:	f7f4 fd53 	bl	8000c58 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c1b2:	4806      	ldr	r0, [pc, #24]	; (800c1cc <MX_USB_DEVICE_Init+0x44>)
 800c1b4:	f7fc fa70 	bl	8008698 <USBD_Start>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d001      	beq.n	800c1c2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c1be:	f7f4 fd4b 	bl	8000c58 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c1c2:	bf00      	nop
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200000e0 	.word	0x200000e0
 800c1cc:	200002b4 	.word	0x200002b4
 800c1d0:	2000000c 	.word	0x2000000c

0800c1d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	6039      	str	r1, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	2212      	movs	r2, #18
 800c1e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c1e6:	4b03      	ldr	r3, [pc, #12]	; (800c1f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	20000100 	.word	0x20000100

0800c1f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b083      	sub	sp, #12
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	4603      	mov	r3, r0
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	2204      	movs	r2, #4
 800c208:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c20a:	4b03      	ldr	r3, [pc, #12]	; (800c218 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr
 800c218:	20000120 	.word	0x20000120

0800c21c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	4603      	mov	r3, r0
 800c224:	6039      	str	r1, [r7, #0]
 800c226:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c228:	79fb      	ldrb	r3, [r7, #7]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d105      	bne.n	800c23a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	4907      	ldr	r1, [pc, #28]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
 800c232:	4808      	ldr	r0, [pc, #32]	; (800c254 <USBD_FS_ProductStrDescriptor+0x38>)
 800c234:	f7fd fc06 	bl	8009a44 <USBD_GetString>
 800c238:	e004      	b.n	800c244 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	4904      	ldr	r1, [pc, #16]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
 800c23e:	4805      	ldr	r0, [pc, #20]	; (800c254 <USBD_FS_ProductStrDescriptor+0x38>)
 800c240:	f7fd fc00 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000590 	.word	0x20000590
 800c254:	0800dab0 	.word	0x0800dab0

0800c258 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	4603      	mov	r3, r0
 800c260:	6039      	str	r1, [r7, #0]
 800c262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	4904      	ldr	r1, [pc, #16]	; (800c278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c268:	4804      	ldr	r0, [pc, #16]	; (800c27c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c26a:	f7fd fbeb 	bl	8009a44 <USBD_GetString>
  return USBD_StrDesc;
 800c26e:	4b02      	ldr	r3, [pc, #8]	; (800c278 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c270:	4618      	mov	r0, r3
 800c272:	3708      	adds	r7, #8
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	20000590 	.word	0x20000590
 800c27c:	0800dac8 	.word	0x0800dac8

0800c280 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	6039      	str	r1, [r7, #0]
 800c28a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	221a      	movs	r2, #26
 800c290:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c292:	f000 f855 	bl	800c340 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c296:	4b02      	ldr	r3, [pc, #8]	; (800c2a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3708      	adds	r7, #8
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	20000124 	.word	0x20000124

0800c2a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	6039      	str	r1, [r7, #0]
 800c2ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c2b0:	79fb      	ldrb	r3, [r7, #7]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d105      	bne.n	800c2c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	4907      	ldr	r1, [pc, #28]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2ba:	4808      	ldr	r0, [pc, #32]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2bc:	f7fd fbc2 	bl	8009a44 <USBD_GetString>
 800c2c0:	e004      	b.n	800c2cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c2c2:	683a      	ldr	r2, [r7, #0]
 800c2c4:	4904      	ldr	r1, [pc, #16]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c2c6:	4805      	ldr	r0, [pc, #20]	; (800c2dc <USBD_FS_ConfigStrDescriptor+0x38>)
 800c2c8:	f7fd fbbc 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20000590 	.word	0x20000590
 800c2dc:	0800dadc 	.word	0x0800dadc

0800c2e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b082      	sub	sp, #8
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	6039      	str	r1, [r7, #0]
 800c2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2ec:	79fb      	ldrb	r3, [r7, #7]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2f2:	683a      	ldr	r2, [r7, #0]
 800c2f4:	4907      	ldr	r1, [pc, #28]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c2f6:	4808      	ldr	r0, [pc, #32]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c2f8:	f7fd fba4 	bl	8009a44 <USBD_GetString>
 800c2fc:	e004      	b.n	800c308 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c2fe:	683a      	ldr	r2, [r7, #0]
 800c300:	4904      	ldr	r1, [pc, #16]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c302:	4805      	ldr	r0, [pc, #20]	; (800c318 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c304:	f7fd fb9e 	bl	8009a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c308:	4b02      	ldr	r3, [pc, #8]	; (800c314 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	20000590 	.word	0x20000590
 800c318:	0800dae8 	.word	0x0800dae8

0800c31c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	6039      	str	r1, [r7, #0]
 800c326:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	220c      	movs	r2, #12
 800c32c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c32e:	4b03      	ldr	r3, [pc, #12]	; (800c33c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	20000114 	.word	0x20000114

0800c340 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c346:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <Get_SerialNum+0x44>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c34c:	4b0e      	ldr	r3, [pc, #56]	; (800c388 <Get_SerialNum+0x48>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c352:	4b0e      	ldr	r3, [pc, #56]	; (800c38c <Get_SerialNum+0x4c>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d009      	beq.n	800c37a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c366:	2208      	movs	r2, #8
 800c368:	4909      	ldr	r1, [pc, #36]	; (800c390 <Get_SerialNum+0x50>)
 800c36a:	68f8      	ldr	r0, [r7, #12]
 800c36c:	f000 f814 	bl	800c398 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c370:	2204      	movs	r2, #4
 800c372:	4908      	ldr	r1, [pc, #32]	; (800c394 <Get_SerialNum+0x54>)
 800c374:	68b8      	ldr	r0, [r7, #8]
 800c376:	f000 f80f 	bl	800c398 <IntToUnicode>
  }
}
 800c37a:	bf00      	nop
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	1fff7a10 	.word	0x1fff7a10
 800c388:	1fff7a14 	.word	0x1fff7a14
 800c38c:	1fff7a18 	.word	0x1fff7a18
 800c390:	20000126 	.word	0x20000126
 800c394:	20000136 	.word	0x20000136

0800c398 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c398:	b480      	push	{r7}
 800c39a:	b087      	sub	sp, #28
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	75fb      	strb	r3, [r7, #23]
 800c3ae:	e027      	b.n	800c400 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	0f1b      	lsrs	r3, r3, #28
 800c3b4:	2b09      	cmp	r3, #9
 800c3b6:	d80b      	bhi.n	800c3d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	0f1b      	lsrs	r3, r3, #28
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	7dfb      	ldrb	r3, [r7, #23]
 800c3c0:	005b      	lsls	r3, r3, #1
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3230      	adds	r2, #48	; 0x30
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
 800c3ce:	e00a      	b.n	800c3e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	0f1b      	lsrs	r3, r3, #28
 800c3d4:	b2da      	uxtb	r2, r3
 800c3d6:	7dfb      	ldrb	r3, [r7, #23]
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4619      	mov	r1, r3
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	440b      	add	r3, r1
 800c3e0:	3237      	adds	r2, #55	; 0x37
 800c3e2:	b2d2      	uxtb	r2, r2
 800c3e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	011b      	lsls	r3, r3, #4
 800c3ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	005b      	lsls	r3, r3, #1
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]
 800c400:	7dfa      	ldrb	r2, [r7, #23]
 800c402:	79fb      	ldrb	r3, [r7, #7]
 800c404:	429a      	cmp	r2, r3
 800c406:	d3d3      	bcc.n	800c3b0 <IntToUnicode+0x18>
  }
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
	...

0800c418 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b0a0      	sub	sp, #128	; 0x80
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c420:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c424:	2200      	movs	r2, #0
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	609a      	str	r2, [r3, #8]
 800c42c:	60da      	str	r2, [r3, #12]
 800c42e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c430:	f107 0310 	add.w	r3, r7, #16
 800c434:	225c      	movs	r2, #92	; 0x5c
 800c436:	2100      	movs	r1, #0
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fea3 	bl	800d184 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c446:	d149      	bne.n	800c4dc <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c44c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c44e:	2300      	movs	r3, #0
 800c450:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c452:	f107 0310 	add.w	r3, r7, #16
 800c456:	4618      	mov	r0, r3
 800c458:	f7f8 f8a2 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d001      	beq.n	800c466 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c462:	f7f4 fbf9 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c466:	2300      	movs	r3, #0
 800c468:	60fb      	str	r3, [r7, #12]
 800c46a:	4b1e      	ldr	r3, [pc, #120]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46e:	4a1d      	ldr	r2, [pc, #116]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c470:	f043 0301 	orr.w	r3, r3, #1
 800c474:	6313      	str	r3, [r2, #48]	; 0x30
 800c476:	4b1b      	ldr	r3, [pc, #108]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c47a:	f003 0301 	and.w	r3, r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c482:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c486:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c488:	2302      	movs	r3, #2
 800c48a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c48c:	2300      	movs	r3, #0
 800c48e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c490:	2303      	movs	r3, #3
 800c492:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c494:	230a      	movs	r3, #10
 800c496:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c498:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c49c:	4619      	mov	r1, r3
 800c49e:	4812      	ldr	r0, [pc, #72]	; (800c4e8 <HAL_PCD_MspInit+0xd0>)
 800c4a0:	f7f4 feb0 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4a4:	4b0f      	ldr	r3, [pc, #60]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4a8:	4a0e      	ldr	r2, [pc, #56]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c4aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ae:	6353      	str	r3, [r2, #52]	; 0x34
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	60bb      	str	r3, [r7, #8]
 800c4b4:	4b0b      	ldr	r3, [pc, #44]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c4b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4b8:	4a0a      	ldr	r2, [pc, #40]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c4ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c4be:	6453      	str	r3, [r2, #68]	; 0x44
 800c4c0:	4b08      	ldr	r3, [pc, #32]	; (800c4e4 <HAL_PCD_MspInit+0xcc>)
 800c4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4c8:	60bb      	str	r3, [r7, #8]
 800c4ca:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	2043      	movs	r0, #67	; 0x43
 800c4d2:	f7f4 fe60 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c4d6:	2043      	movs	r0, #67	; 0x43
 800c4d8:	f7f4 fe79 	bl	80011ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c4dc:	bf00      	nop
 800c4de:	3780      	adds	r7, #128	; 0x80
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	40023800 	.word	0x40023800
 800c4e8:	40020000 	.word	0x40020000

0800c4ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c500:	4619      	mov	r1, r3
 800c502:	4610      	mov	r0, r2
 800c504:	f7fc f915 	bl	8008732 <USBD_LL_SetupStage>
}
 800c508:	bf00      	nop
 800c50a:	3708      	adds	r7, #8
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	6879      	ldr	r1, [r7, #4]
 800c526:	4613      	mov	r3, r2
 800c528:	00db      	lsls	r3, r3, #3
 800c52a:	4413      	add	r3, r2
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	440b      	add	r3, r1
 800c530:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	78fb      	ldrb	r3, [r7, #3]
 800c538:	4619      	mov	r1, r3
 800c53a:	f7fc f94f 	bl	80087dc <USBD_LL_DataOutStage>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c558:	78fa      	ldrb	r2, [r7, #3]
 800c55a:	6879      	ldr	r1, [r7, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	00db      	lsls	r3, r3, #3
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	334c      	adds	r3, #76	; 0x4c
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	78fb      	ldrb	r3, [r7, #3]
 800c56c:	4619      	mov	r1, r3
 800c56e:	f7fc f9e8 	bl	8008942 <USBD_LL_DataInStage>
}
 800c572:	bf00      	nop
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b082      	sub	sp, #8
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fc fb1c 	bl	8008bc6 <USBD_LL_SOF>
}
 800c58e:	bf00      	nop
 800c590:	3708      	adds	r7, #8
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c59e:	2301      	movs	r3, #1
 800c5a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d102      	bne.n	800c5b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	73fb      	strb	r3, [r7, #15]
 800c5ae:	e008      	b.n	800c5c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d102      	bne.n	800c5be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	73fb      	strb	r3, [r7, #15]
 800c5bc:	e001      	b.n	800c5c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c5be:	f7f4 fb4b 	bl	8000c58 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5c8:	7bfa      	ldrb	r2, [r7, #15]
 800c5ca:	4611      	mov	r1, r2
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fc fabc 	bl	8008b4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fc fa64 	bl	8008aa6 <USBD_LL_Reset>
}
 800c5de:	bf00      	nop
 800c5e0:	3710      	adds	r7, #16
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
	...

0800c5e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f7fc fab7 	bl	8008b6a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	6812      	ldr	r2, [r2, #0]
 800c60a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c60e:	f043 0301 	orr.w	r3, r3, #1
 800c612:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c61c:	4b04      	ldr	r3, [pc, #16]	; (800c630 <HAL_PCD_SuspendCallback+0x48>)
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	4a03      	ldr	r2, [pc, #12]	; (800c630 <HAL_PCD_SuspendCallback+0x48>)
 800c622:	f043 0306 	orr.w	r3, r3, #6
 800c626:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	e000ed00 	.word	0xe000ed00

0800c634 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c642:	4618      	mov	r0, r3
 800c644:	f7fc faa7 	bl	8008b96 <USBD_LL_Resume>
}
 800c648:	bf00      	nop
 800c64a:	3708      	adds	r7, #8
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	460b      	mov	r3, r1
 800c65a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c662:	78fa      	ldrb	r2, [r7, #3]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7fc faff 	bl	8008c6a <USBD_LL_IsoOUTIncomplete>
}
 800c66c:	bf00      	nop
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	4611      	mov	r1, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fc fabb 	bl	8008c06 <USBD_LL_IsoINIncomplete>
}
 800c690:	bf00      	nop
 800c692:	3708      	adds	r7, #8
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fc fb11 	bl	8008cce <USBD_LL_DevConnected>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7fc fb0e 	bl	8008ce4 <USBD_LL_DevDisconnected>
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	781b      	ldrb	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d13c      	bne.n	800c75a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c6e0:	4a20      	ldr	r2, [pc, #128]	; (800c764 <USBD_LL_Init+0x94>)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	4a1e      	ldr	r2, [pc, #120]	; (800c764 <USBD_LL_Init+0x94>)
 800c6ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c6f0:	4b1c      	ldr	r3, [pc, #112]	; (800c764 <USBD_LL_Init+0x94>)
 800c6f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c6f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c6f8:	4b1a      	ldr	r3, [pc, #104]	; (800c764 <USBD_LL_Init+0x94>)
 800c6fa:	2206      	movs	r2, #6
 800c6fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c6fe:	4b19      	ldr	r3, [pc, #100]	; (800c764 <USBD_LL_Init+0x94>)
 800c700:	2202      	movs	r2, #2
 800c702:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c704:	4b17      	ldr	r3, [pc, #92]	; (800c764 <USBD_LL_Init+0x94>)
 800c706:	2200      	movs	r2, #0
 800c708:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c70a:	4b16      	ldr	r3, [pc, #88]	; (800c764 <USBD_LL_Init+0x94>)
 800c70c:	2202      	movs	r2, #2
 800c70e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <USBD_LL_Init+0x94>)
 800c712:	2200      	movs	r2, #0
 800c714:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c716:	4b13      	ldr	r3, [pc, #76]	; (800c764 <USBD_LL_Init+0x94>)
 800c718:	2200      	movs	r2, #0
 800c71a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c71c:	4b11      	ldr	r3, [pc, #68]	; (800c764 <USBD_LL_Init+0x94>)
 800c71e:	2200      	movs	r2, #0
 800c720:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c722:	4b10      	ldr	r3, [pc, #64]	; (800c764 <USBD_LL_Init+0x94>)
 800c724:	2200      	movs	r2, #0
 800c726:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c728:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <USBD_LL_Init+0x94>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c72e:	480d      	ldr	r0, [pc, #52]	; (800c764 <USBD_LL_Init+0x94>)
 800c730:	f7f6 fb6a 	bl	8002e08 <HAL_PCD_Init>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c73a:	f7f4 fa8d 	bl	8000c58 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c73e:	2180      	movs	r1, #128	; 0x80
 800c740:	4808      	ldr	r0, [pc, #32]	; (800c764 <USBD_LL_Init+0x94>)
 800c742:	f7f7 fdde 	bl	8004302 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c746:	2240      	movs	r2, #64	; 0x40
 800c748:	2100      	movs	r1, #0
 800c74a:	4806      	ldr	r0, [pc, #24]	; (800c764 <USBD_LL_Init+0x94>)
 800c74c:	f7f7 fd92 	bl	8004274 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c750:	2280      	movs	r2, #128	; 0x80
 800c752:	2101      	movs	r1, #1
 800c754:	4803      	ldr	r0, [pc, #12]	; (800c764 <USBD_LL_Init+0x94>)
 800c756:	f7f7 fd8d 	bl	8004274 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20000790 	.word	0x20000790

0800c768 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c77e:	4618      	mov	r0, r3
 800c780:	f7f6 fc66 	bl	8003050 <HAL_PCD_Start>
 800c784:	4603      	mov	r3, r0
 800c786:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c788:	7bfb      	ldrb	r3, [r7, #15]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f97e 	bl	800ca8c <USBD_Get_USB_Status>
 800c790:	4603      	mov	r3, r0
 800c792:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c794:	7bbb      	ldrb	r3, [r7, #14]
}
 800c796:	4618      	mov	r0, r3
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}

0800c79e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b084      	sub	sp, #16
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
 800c7a6:	4608      	mov	r0, r1
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	70fb      	strb	r3, [r7, #3]
 800c7b0:	460b      	mov	r3, r1
 800c7b2:	70bb      	strb	r3, [r7, #2]
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c7c6:	78bb      	ldrb	r3, [r7, #2]
 800c7c8:	883a      	ldrh	r2, [r7, #0]
 800c7ca:	78f9      	ldrb	r1, [r7, #3]
 800c7cc:	f7f7 f964 	bl	8003a98 <HAL_PCD_EP_Open>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 f958 	bl	800ca8c <USBD_Get_USB_Status>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}

0800c7ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ea:	b580      	push	{r7, lr}
 800c7ec:	b084      	sub	sp, #16
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c804:	78fa      	ldrb	r2, [r7, #3]
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7f7 f9ad 	bl	8003b68 <HAL_PCD_EP_Close>
 800c80e:	4603      	mov	r3, r0
 800c810:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c812:	7bfb      	ldrb	r3, [r7, #15]
 800c814:	4618      	mov	r0, r3
 800c816:	f000 f939 	bl	800ca8c <USBD_Get_USB_Status>
 800c81a:	4603      	mov	r3, r0
 800c81c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c81e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3710      	adds	r7, #16
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	460b      	mov	r3, r1
 800c832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c838:	2300      	movs	r3, #0
 800c83a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c842:	78fa      	ldrb	r2, [r7, #3]
 800c844:	4611      	mov	r1, r2
 800c846:	4618      	mov	r0, r3
 800c848:	f7f7 fa6d 	bl	8003d26 <HAL_PCD_EP_SetStall>
 800c84c:	4603      	mov	r3, r0
 800c84e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f91a 	bl	800ca8c <USBD_Get_USB_Status>
 800c858:	4603      	mov	r3, r0
 800c85a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c85c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	460b      	mov	r3, r1
 800c870:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c876:	2300      	movs	r3, #0
 800c878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c880:	78fa      	ldrb	r2, [r7, #3]
 800c882:	4611      	mov	r1, r2
 800c884:	4618      	mov	r0, r3
 800c886:	f7f7 fab2 	bl	8003dee <HAL_PCD_EP_ClrStall>
 800c88a:	4603      	mov	r3, r0
 800c88c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c88e:	7bfb      	ldrb	r3, [r7, #15]
 800c890:	4618      	mov	r0, r3
 800c892:	f000 f8fb 	bl	800ca8c <USBD_Get_USB_Status>
 800c896:	4603      	mov	r3, r0
 800c898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c89a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	da0b      	bge.n	800c8d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c8c0:	78fb      	ldrb	r3, [r7, #3]
 800c8c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8c6:	68f9      	ldr	r1, [r7, #12]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	00db      	lsls	r3, r3, #3
 800c8cc:	4413      	add	r3, r2
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	440b      	add	r3, r1
 800c8d2:	333e      	adds	r3, #62	; 0x3e
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	e00b      	b.n	800c8f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c8d8:	78fb      	ldrb	r3, [r7, #3]
 800c8da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c8de:	68f9      	ldr	r1, [r7, #12]
 800c8e0:	4613      	mov	r3, r2
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	4413      	add	r3, r2
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	440b      	add	r3, r1
 800c8ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c8ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3714      	adds	r7, #20
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b084      	sub	sp, #16
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	460b      	mov	r3, r1
 800c906:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c908:	2300      	movs	r3, #0
 800c90a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c916:	78fa      	ldrb	r2, [r7, #3]
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7f7 f897 	bl	8003a4e <HAL_PCD_SetAddress>
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	4618      	mov	r0, r3
 800c928:	f000 f8b0 	bl	800ca8c <USBD_Get_USB_Status>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c930:	7bbb      	ldrb	r3, [r7, #14]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b086      	sub	sp, #24
 800c93e:	af00      	add	r7, sp, #0
 800c940:	60f8      	str	r0, [r7, #12]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	603b      	str	r3, [r7, #0]
 800c946:	460b      	mov	r3, r1
 800c948:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94e:	2300      	movs	r3, #0
 800c950:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c958:	7af9      	ldrb	r1, [r7, #11]
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	f7f7 f998 	bl	8003c92 <HAL_PCD_EP_Transmit>
 800c962:	4603      	mov	r3, r0
 800c964:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	4618      	mov	r0, r3
 800c96a:	f000 f88f 	bl	800ca8c <USBD_Get_USB_Status>
 800c96e:	4603      	mov	r3, r0
 800c970:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c972:	7dbb      	ldrb	r3, [r7, #22]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3718      	adds	r7, #24
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	607a      	str	r2, [r7, #4]
 800c986:	603b      	str	r3, [r7, #0]
 800c988:	460b      	mov	r3, r1
 800c98a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c99a:	7af9      	ldrb	r1, [r7, #11]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	f7f7 f92c 	bl	8003bfc <HAL_PCD_EP_Receive>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a8:	7dfb      	ldrb	r3, [r7, #23]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f86e 	bl	800ca8c <USBD_Get_USB_Status>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d002      	beq.n	800c9d8 <HAL_PCDEx_LPM_Callback+0x18>
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	d01f      	beq.n	800ca16 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c9d6:	e03b      	b.n	800ca50 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a1b      	ldr	r3, [r3, #32]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d007      	beq.n	800c9f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c9e0:	f7f4 f82e 	bl	8000a40 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9e4:	4b1c      	ldr	r3, [pc, #112]	; (800ca58 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ca58 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9ea:	f023 0306 	bic.w	r3, r3, #6
 800c9ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	6812      	ldr	r2, [r2, #0]
 800c9fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca02:	f023 0301 	bic.w	r3, r3, #1
 800ca06:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fc f8c1 	bl	8008b96 <USBD_LL_Resume>
    break;
 800ca14:	e01c      	b.n	800ca50 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	687a      	ldr	r2, [r7, #4]
 800ca22:	6812      	ldr	r2, [r2, #0]
 800ca24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ca28:	f043 0301 	orr.w	r3, r3, #1
 800ca2c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7fc f898 	bl	8008b6a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d005      	beq.n	800ca4e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	4a04      	ldr	r2, [pc, #16]	; (800ca58 <HAL_PCDEx_LPM_Callback+0x98>)
 800ca48:	f043 0306 	orr.w	r3, r3, #6
 800ca4c:	6113      	str	r3, [r2, #16]
    break;
 800ca4e:	bf00      	nop
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	e000ed00 	.word	0xe000ed00

0800ca5c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca64:	4b03      	ldr	r3, [pc, #12]	; (800ca74 <USBD_static_malloc+0x18>)
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20000c9c 	.word	0x20000c9c

0800ca78 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]

}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b085      	sub	sp, #20
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d817      	bhi.n	800cad0 <USBD_Get_USB_Status+0x44>
 800caa0:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <USBD_Get_USB_Status+0x1c>)
 800caa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa6:	bf00      	nop
 800caa8:	0800cab9 	.word	0x0800cab9
 800caac:	0800cabf 	.word	0x0800cabf
 800cab0:	0800cac5 	.word	0x0800cac5
 800cab4:	0800cacb 	.word	0x0800cacb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
    break;
 800cabc:	e00b      	b.n	800cad6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cabe:	2303      	movs	r3, #3
 800cac0:	73fb      	strb	r3, [r7, #15]
    break;
 800cac2:	e008      	b.n	800cad6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cac4:	2301      	movs	r3, #1
 800cac6:	73fb      	strb	r3, [r7, #15]
    break;
 800cac8:	e005      	b.n	800cad6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800caca:	2303      	movs	r3, #3
 800cacc:	73fb      	strb	r3, [r7, #15]
    break;
 800cace:	e002      	b.n	800cad6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cad0:	2303      	movs	r3, #3
 800cad2:	73fb      	strb	r3, [r7, #15]
    break;
 800cad4:	bf00      	nop
  }
  return usb_status;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3714      	adds	r7, #20
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800cae8:	2200      	movs	r2, #0
 800caea:	490e      	ldr	r1, [pc, #56]	; (800cb24 <MX_USB_HOST_Init+0x40>)
 800caec:	480e      	ldr	r0, [pc, #56]	; (800cb28 <MX_USB_HOST_Init+0x44>)
 800caee:	f7fd ff1d 	bl	800a92c <USBH_Init>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800caf8:	f7f4 f8ae 	bl	8000c58 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 800cafc:	490b      	ldr	r1, [pc, #44]	; (800cb2c <MX_USB_HOST_Init+0x48>)
 800cafe:	480a      	ldr	r0, [pc, #40]	; (800cb28 <MX_USB_HOST_Init+0x44>)
 800cb00:	f7fd ffa2 	bl	800aa48 <USBH_RegisterClass>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cb0a:	f7f4 f8a5 	bl	8000c58 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800cb0e:	4806      	ldr	r0, [pc, #24]	; (800cb28 <MX_USB_HOST_Init+0x44>)
 800cb10:	f7fe f826 	bl	800ab60 <USBH_Start>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d001      	beq.n	800cb1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cb1a:	f7f4 f89d 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cb1e:	bf00      	nop
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	0800cb45 	.word	0x0800cb45
 800cb28:	20000cb0 	.word	0x20000cb0
 800cb2c:	200000c0 	.word	0x200000c0

0800cb30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800cb34:	4802      	ldr	r0, [pc, #8]	; (800cb40 <MX_USB_HOST_Process+0x10>)
 800cb36:	f7fe f823 	bl	800ab80 <USBH_Process>
}
 800cb3a:	bf00      	nop
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000cb0 	.word	0x20000cb0

0800cb44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cb50:	78fb      	ldrb	r3, [r7, #3]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	d819      	bhi.n	800cb8c <USBH_UserProcess+0x48>
 800cb58:	a201      	add	r2, pc, #4	; (adr r2, 800cb60 <USBH_UserProcess+0x1c>)
 800cb5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb5e:	bf00      	nop
 800cb60:	0800cb8d 	.word	0x0800cb8d
 800cb64:	0800cb7d 	.word	0x0800cb7d
 800cb68:	0800cb8d 	.word	0x0800cb8d
 800cb6c:	0800cb85 	.word	0x0800cb85
 800cb70:	0800cb75 	.word	0x0800cb75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cb74:	4b09      	ldr	r3, [pc, #36]	; (800cb9c <USBH_UserProcess+0x58>)
 800cb76:	2203      	movs	r2, #3
 800cb78:	701a      	strb	r2, [r3, #0]
  break;
 800cb7a:	e008      	b.n	800cb8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cb7c:	4b07      	ldr	r3, [pc, #28]	; (800cb9c <USBH_UserProcess+0x58>)
 800cb7e:	2202      	movs	r2, #2
 800cb80:	701a      	strb	r2, [r3, #0]
  break;
 800cb82:	e004      	b.n	800cb8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb84:	4b05      	ldr	r3, [pc, #20]	; (800cb9c <USBH_UserProcess+0x58>)
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]
  break;
 800cb8a:	e000      	b.n	800cb8e <USBH_UserProcess+0x4a>

  default:
  break;
 800cb8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb8e:	bf00      	nop
 800cb90:	370c      	adds	r7, #12
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	20001088 	.word	0x20001088

0800cba0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b0a0      	sub	sp, #128	; 0x80
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]
 800cbb0:	605a      	str	r2, [r3, #4]
 800cbb2:	609a      	str	r2, [r3, #8]
 800cbb4:	60da      	str	r2, [r3, #12]
 800cbb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cbb8:	f107 0310 	add.w	r3, r7, #16
 800cbbc:	225c      	movs	r2, #92	; 0x5c
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fadf 	bl	800d184 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4a25      	ldr	r2, [pc, #148]	; (800cc60 <HAL_HCD_MspInit+0xc0>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d143      	bne.n	800cc58 <HAL_HCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cbd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbd4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cbda:	f107 0310 	add.w	r3, r7, #16
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f7f7 fcde 	bl	80045a0 <HAL_RCCEx_PeriphCLKConfig>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800cbea:	f7f4 f835 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbee:	2300      	movs	r3, #0
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	4b1c      	ldr	r3, [pc, #112]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf6:	4a1b      	ldr	r2, [pc, #108]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cbf8:	f043 0302 	orr.w	r3, r3, #2
 800cbfc:	6313      	str	r3, [r2, #48]	; 0x30
 800cbfe:	4b19      	ldr	r3, [pc, #100]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc02:	f003 0302 	and.w	r3, r3, #2
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800cc0a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800cc0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc10:	2302      	movs	r3, #2
 800cc12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc14:	2300      	movs	r3, #0
 800cc16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc18:	2303      	movs	r3, #3
 800cc1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cc1c:	230c      	movs	r3, #12
 800cc1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cc24:	4619      	mov	r1, r3
 800cc26:	4810      	ldr	r0, [pc, #64]	; (800cc68 <HAL_HCD_MspInit+0xc8>)
 800cc28:	f7f4 faec 	bl	8001204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	60bb      	str	r3, [r7, #8]
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cc32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc34:	4a0b      	ldr	r2, [pc, #44]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cc36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cc3a:	6313      	str	r3, [r2, #48]	; 0x30
 800cc3c:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <HAL_HCD_MspInit+0xc4>)
 800cc3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc44:	60bb      	str	r3, [r7, #8]
 800cc46:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	204d      	movs	r0, #77	; 0x4d
 800cc4e:	f7f4 faa2 	bl	8001196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cc52:	204d      	movs	r0, #77	; 0x4d
 800cc54:	f7f4 fabb 	bl	80011ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cc58:	bf00      	nop
 800cc5a:	3780      	adds	r7, #128	; 0x80
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	40040000 	.word	0x40040000
 800cc64:	40023800 	.word	0x40023800
 800cc68:	40020400 	.word	0x40020400

0800cc6c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fe fb5f 	bl	800b33e <USBH_LL_IncTimer>
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fb97 	bl	800b3ca <USBH_LL_Connect>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fba0 	bl	800b3f8 <USBH_LL_Disconnect>
}
 800ccb8:	bf00      	nop
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b083      	sub	sp, #12
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	460b      	mov	r3, r1
 800ccca:	70fb      	strb	r3, [r7, #3]
 800cccc:	4613      	mov	r3, r2
 800ccce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ccea:	4618      	mov	r0, r3
 800ccec:	f7fe fb51 	bl	800b392 <USBH_LL_PortEnabled>
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b082      	sub	sp, #8
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe fb51 	bl	800b3ae <USBH_LL_PortDisabled>
}
 800cd0c:	bf00      	nop
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b082      	sub	sp, #8
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d132      	bne.n	800cd8c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cd26:	4a1c      	ldr	r2, [pc, #112]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a19      	ldr	r2, [pc, #100]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd32:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800cd36:	4b18      	ldr	r3, [pc, #96]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd38:	4a18      	ldr	r2, [pc, #96]	; (800cd9c <USBH_LL_Init+0x88>)
 800cd3a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800cd3c:	4b16      	ldr	r3, [pc, #88]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd3e:	2210      	movs	r2, #16
 800cd40:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800cd42:	4b15      	ldr	r3, [pc, #84]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd44:	2201      	movs	r2, #1
 800cd46:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800cd48:	4b13      	ldr	r3, [pc, #76]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cd4e:	4b12      	ldr	r3, [pc, #72]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd50:	2202      	movs	r2, #2
 800cd52:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cd54:	4b10      	ldr	r3, [pc, #64]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cd5a:	4b0f      	ldr	r3, [pc, #60]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cd60:	4b0d      	ldr	r3, [pc, #52]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd62:	2200      	movs	r2, #0
 800cd64:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cd6c:	480a      	ldr	r0, [pc, #40]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd6e:	f7f4 fc41 	bl	80015f4 <HAL_HCD_Init>
 800cd72:	4603      	mov	r3, r0
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d001      	beq.n	800cd7c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cd78:	f7f3 ff6e 	bl	8000c58 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cd7c:	4806      	ldr	r0, [pc, #24]	; (800cd98 <USBH_LL_Init+0x84>)
 800cd7e:	f7f5 f824 	bl	8001dca <HAL_HCD_GetCurrentFrame>
 800cd82:	4603      	mov	r3, r0
 800cd84:	4619      	mov	r1, r3
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fe faca 	bl	800b320 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd8c:	2300      	movs	r3, #0
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3708      	adds	r7, #8
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	2000108c 	.word	0x2000108c
 800cd9c:	40040000 	.word	0x40040000

0800cda0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7f4 ff91 	bl	8001cde <HAL_HCD_Start>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdc0:	7bfb      	ldrb	r3, [r7, #15]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 f95c 	bl	800d080 <USBH_Get_USB_Status>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b084      	sub	sp, #16
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7f4 ff99 	bl	8001d24 <HAL_HCD_Stop>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 f941 	bl	800d080 <USBH_Get_USB_Status>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ce14:	2301      	movs	r3, #1
 800ce16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f4 ffe1 	bl	8001de6 <HAL_HCD_GetCurrentSpeed>
 800ce24:	4603      	mov	r3, r0
 800ce26:	2b02      	cmp	r3, #2
 800ce28:	d00c      	beq.n	800ce44 <USBH_LL_GetSpeed+0x38>
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d80d      	bhi.n	800ce4a <USBH_LL_GetSpeed+0x3e>
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <USBH_LL_GetSpeed+0x2c>
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d003      	beq.n	800ce3e <USBH_LL_GetSpeed+0x32>
 800ce36:	e008      	b.n	800ce4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ce3c:	e008      	b.n	800ce50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	73fb      	strb	r3, [r7, #15]
    break;
 800ce42:	e005      	b.n	800ce50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ce44:	2302      	movs	r3, #2
 800ce46:	73fb      	strb	r3, [r7, #15]
    break;
 800ce48:	e002      	b.n	800ce50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce4e:	bf00      	nop
  }
  return  speed;
 800ce50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce62:	2300      	movs	r3, #0
 800ce64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce66:	2300      	movs	r3, #0
 800ce68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce70:	4618      	mov	r0, r3
 800ce72:	f7f4 ff74 	bl	8001d5e <HAL_HCD_ResetPort>
 800ce76:	4603      	mov	r3, r0
 800ce78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce7a:	7bfb      	ldrb	r3, [r7, #15]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 f8ff 	bl	800d080 <USBH_Get_USB_Status>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	460b      	mov	r3, r1
 800ce9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cea2:	78fa      	ldrb	r2, [r7, #3]
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f4 ff7b 	bl	8001da2 <HAL_HCD_HC_GetXferCount>
 800ceac:	4603      	mov	r3, r0
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}

0800ceb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ceb6:	b590      	push	{r4, r7, lr}
 800ceb8:	b089      	sub	sp, #36	; 0x24
 800ceba:	af04      	add	r7, sp, #16
 800cebc:	6078      	str	r0, [r7, #4]
 800cebe:	4608      	mov	r0, r1
 800cec0:	4611      	mov	r1, r2
 800cec2:	461a      	mov	r2, r3
 800cec4:	4603      	mov	r3, r0
 800cec6:	70fb      	strb	r3, [r7, #3]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70bb      	strb	r3, [r7, #2]
 800cecc:	4613      	mov	r3, r2
 800cece:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ced4:	2300      	movs	r3, #0
 800ced6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cede:	787c      	ldrb	r4, [r7, #1]
 800cee0:	78ba      	ldrb	r2, [r7, #2]
 800cee2:	78f9      	ldrb	r1, [r7, #3]
 800cee4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	4623      	mov	r3, r4
 800cef6:	f7f4 fbdf 	bl	80016b8 <HAL_HCD_HC_Init>
 800cefa:	4603      	mov	r3, r0
 800cefc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f000 f8bd 	bl	800d080 <USBH_Get_USB_Status>
 800cf06:	4603      	mov	r3, r0
 800cf08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd90      	pop	{r4, r7, pc}

0800cf14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	4611      	mov	r1, r2
 800cf32:	4618      	mov	r0, r3
 800cf34:	f7f4 fc4f 	bl	80017d6 <HAL_HCD_HC_Halt>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f000 f89e 	bl	800d080 <USBH_Get_USB_Status>
 800cf44:	4603      	mov	r3, r0
 800cf46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf48:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cf52:	b590      	push	{r4, r7, lr}
 800cf54:	b089      	sub	sp, #36	; 0x24
 800cf56:	af04      	add	r7, sp, #16
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	4608      	mov	r0, r1
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	461a      	mov	r2, r3
 800cf60:	4603      	mov	r3, r0
 800cf62:	70fb      	strb	r3, [r7, #3]
 800cf64:	460b      	mov	r3, r1
 800cf66:	70bb      	strb	r3, [r7, #2]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf70:	2300      	movs	r3, #0
 800cf72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cf7a:	787c      	ldrb	r4, [r7, #1]
 800cf7c:	78ba      	ldrb	r2, [r7, #2]
 800cf7e:	78f9      	ldrb	r1, [r7, #3]
 800cf80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf84:	9303      	str	r3, [sp, #12]
 800cf86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	4623      	mov	r3, r4
 800cf96:	f7f4 fc41 	bl	800181c <HAL_HCD_HC_SubmitRequest>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f000 f86d 	bl	800d080 <USBH_Get_USB_Status>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd90      	pop	{r4, r7, pc}

0800cfb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfc6:	78fa      	ldrb	r2, [r7, #3]
 800cfc8:	4611      	mov	r1, r2
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7f4 fed5 	bl	8001d7a <HAL_HCD_HC_GetURBState>
 800cfd0:	4603      	mov	r3, r0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d103      	bne.n	800cff8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f000 f870 	bl	800d0d8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cff8:	20c8      	movs	r0, #200	; 0xc8
 800cffa:	f7f3 ffcd 	bl	8000f98 <HAL_Delay>
  return USBH_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	70fb      	strb	r3, [r7, #3]
 800d014:	4613      	mov	r3, r2
 800d016:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d01e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	68fa      	ldr	r2, [r7, #12]
 800d024:	212c      	movs	r1, #44	; 0x2c
 800d026:	fb01 f303 	mul.w	r3, r1, r3
 800d02a:	4413      	add	r3, r2
 800d02c:	333b      	adds	r3, #59	; 0x3b
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d009      	beq.n	800d048 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d034:	78fb      	ldrb	r3, [r7, #3]
 800d036:	68fa      	ldr	r2, [r7, #12]
 800d038:	212c      	movs	r1, #44	; 0x2c
 800d03a:	fb01 f303 	mul.w	r3, r1, r3
 800d03e:	4413      	add	r3, r2
 800d040:	3354      	adds	r3, #84	; 0x54
 800d042:	78ba      	ldrb	r2, [r7, #2]
 800d044:	701a      	strb	r2, [r3, #0]
 800d046:	e008      	b.n	800d05a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	212c      	movs	r1, #44	; 0x2c
 800d04e:	fb01 f303 	mul.w	r3, r1, r3
 800d052:	4413      	add	r3, r2
 800d054:	3355      	adds	r3, #85	; 0x55
 800d056:	78ba      	ldrb	r2, [r7, #2]
 800d058:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3714      	adds	r7, #20
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f7f3 ff91 	bl	8000f98 <HAL_Delay>
}
 800d076:	bf00      	nop
 800d078:	3708      	adds	r7, #8
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	2b03      	cmp	r3, #3
 800d092:	d817      	bhi.n	800d0c4 <USBH_Get_USB_Status+0x44>
 800d094:	a201      	add	r2, pc, #4	; (adr r2, 800d09c <USBH_Get_USB_Status+0x1c>)
 800d096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d09a:	bf00      	nop
 800d09c:	0800d0ad 	.word	0x0800d0ad
 800d0a0:	0800d0b3 	.word	0x0800d0b3
 800d0a4:	0800d0b9 	.word	0x0800d0b9
 800d0a8:	0800d0bf 	.word	0x0800d0bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b0:	e00b      	b.n	800d0ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d0b2:	2302      	movs	r3, #2
 800d0b4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0b6:	e008      	b.n	800d0ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	73fb      	strb	r3, [r7, #15]
    break;
 800d0bc:	e005      	b.n	800d0ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d0be:	2302      	movs	r3, #2
 800d0c0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0c2:	e002      	b.n	800d0ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0c8:	bf00      	nop
  }
  return usb_status;
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4603      	mov	r3, r0
 800d0e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d0e2:	79fb      	ldrb	r3, [r7, #7]
 800d0e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d102      	bne.n	800d0f2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	73fb      	strb	r3, [r7, #15]
 800d0f0:	e001      	b.n	800d0f6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,(GPIO_PinState)data);
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	2120      	movs	r1, #32
 800d0fc:	4803      	ldr	r0, [pc, #12]	; (800d10c <MX_DriverVbusHS+0x34>)
 800d0fe:	f7f4 fa2d 	bl	800155c <HAL_GPIO_WritePin>
}
 800d102:	bf00      	nop
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	40020000 	.word	0x40020000

0800d110 <__errno>:
 800d110:	4b01      	ldr	r3, [pc, #4]	; (800d118 <__errno+0x8>)
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	4770      	bx	lr
 800d116:	bf00      	nop
 800d118:	20000140 	.word	0x20000140

0800d11c <__libc_init_array>:
 800d11c:	b570      	push	{r4, r5, r6, lr}
 800d11e:	4d0d      	ldr	r5, [pc, #52]	; (800d154 <__libc_init_array+0x38>)
 800d120:	4c0d      	ldr	r4, [pc, #52]	; (800d158 <__libc_init_array+0x3c>)
 800d122:	1b64      	subs	r4, r4, r5
 800d124:	10a4      	asrs	r4, r4, #2
 800d126:	2600      	movs	r6, #0
 800d128:	42a6      	cmp	r6, r4
 800d12a:	d109      	bne.n	800d140 <__libc_init_array+0x24>
 800d12c:	4d0b      	ldr	r5, [pc, #44]	; (800d15c <__libc_init_array+0x40>)
 800d12e:	4c0c      	ldr	r4, [pc, #48]	; (800d160 <__libc_init_array+0x44>)
 800d130:	f000 fc9e 	bl	800da70 <_init>
 800d134:	1b64      	subs	r4, r4, r5
 800d136:	10a4      	asrs	r4, r4, #2
 800d138:	2600      	movs	r6, #0
 800d13a:	42a6      	cmp	r6, r4
 800d13c:	d105      	bne.n	800d14a <__libc_init_array+0x2e>
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	f855 3b04 	ldr.w	r3, [r5], #4
 800d144:	4798      	blx	r3
 800d146:	3601      	adds	r6, #1
 800d148:	e7ee      	b.n	800d128 <__libc_init_array+0xc>
 800d14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d14e:	4798      	blx	r3
 800d150:	3601      	adds	r6, #1
 800d152:	e7f2      	b.n	800d13a <__libc_init_array+0x1e>
 800d154:	0800de5c 	.word	0x0800de5c
 800d158:	0800de5c 	.word	0x0800de5c
 800d15c:	0800de5c 	.word	0x0800de5c
 800d160:	0800de60 	.word	0x0800de60

0800d164 <malloc>:
 800d164:	4b02      	ldr	r3, [pc, #8]	; (800d170 <malloc+0xc>)
 800d166:	4601      	mov	r1, r0
 800d168:	6818      	ldr	r0, [r3, #0]
 800d16a:	f000 b87f 	b.w	800d26c <_malloc_r>
 800d16e:	bf00      	nop
 800d170:	20000140 	.word	0x20000140

0800d174 <free>:
 800d174:	4b02      	ldr	r3, [pc, #8]	; (800d180 <free+0xc>)
 800d176:	4601      	mov	r1, r0
 800d178:	6818      	ldr	r0, [r3, #0]
 800d17a:	f000 b80b 	b.w	800d194 <_free_r>
 800d17e:	bf00      	nop
 800d180:	20000140 	.word	0x20000140

0800d184 <memset>:
 800d184:	4402      	add	r2, r0
 800d186:	4603      	mov	r3, r0
 800d188:	4293      	cmp	r3, r2
 800d18a:	d100      	bne.n	800d18e <memset+0xa>
 800d18c:	4770      	bx	lr
 800d18e:	f803 1b01 	strb.w	r1, [r3], #1
 800d192:	e7f9      	b.n	800d188 <memset+0x4>

0800d194 <_free_r>:
 800d194:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d196:	2900      	cmp	r1, #0
 800d198:	d044      	beq.n	800d224 <_free_r+0x90>
 800d19a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d19e:	9001      	str	r0, [sp, #4]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f1a1 0404 	sub.w	r4, r1, #4
 800d1a6:	bfb8      	it	lt
 800d1a8:	18e4      	addlt	r4, r4, r3
 800d1aa:	f000 f903 	bl	800d3b4 <__malloc_lock>
 800d1ae:	4a1e      	ldr	r2, [pc, #120]	; (800d228 <_free_r+0x94>)
 800d1b0:	9801      	ldr	r0, [sp, #4]
 800d1b2:	6813      	ldr	r3, [r2, #0]
 800d1b4:	b933      	cbnz	r3, 800d1c4 <_free_r+0x30>
 800d1b6:	6063      	str	r3, [r4, #4]
 800d1b8:	6014      	str	r4, [r2, #0]
 800d1ba:	b003      	add	sp, #12
 800d1bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1c0:	f000 b8fe 	b.w	800d3c0 <__malloc_unlock>
 800d1c4:	42a3      	cmp	r3, r4
 800d1c6:	d908      	bls.n	800d1da <_free_r+0x46>
 800d1c8:	6825      	ldr	r5, [r4, #0]
 800d1ca:	1961      	adds	r1, r4, r5
 800d1cc:	428b      	cmp	r3, r1
 800d1ce:	bf01      	itttt	eq
 800d1d0:	6819      	ldreq	r1, [r3, #0]
 800d1d2:	685b      	ldreq	r3, [r3, #4]
 800d1d4:	1949      	addeq	r1, r1, r5
 800d1d6:	6021      	streq	r1, [r4, #0]
 800d1d8:	e7ed      	b.n	800d1b6 <_free_r+0x22>
 800d1da:	461a      	mov	r2, r3
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	b10b      	cbz	r3, 800d1e4 <_free_r+0x50>
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	d9fa      	bls.n	800d1da <_free_r+0x46>
 800d1e4:	6811      	ldr	r1, [r2, #0]
 800d1e6:	1855      	adds	r5, r2, r1
 800d1e8:	42a5      	cmp	r5, r4
 800d1ea:	d10b      	bne.n	800d204 <_free_r+0x70>
 800d1ec:	6824      	ldr	r4, [r4, #0]
 800d1ee:	4421      	add	r1, r4
 800d1f0:	1854      	adds	r4, r2, r1
 800d1f2:	42a3      	cmp	r3, r4
 800d1f4:	6011      	str	r1, [r2, #0]
 800d1f6:	d1e0      	bne.n	800d1ba <_free_r+0x26>
 800d1f8:	681c      	ldr	r4, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	6053      	str	r3, [r2, #4]
 800d1fe:	4421      	add	r1, r4
 800d200:	6011      	str	r1, [r2, #0]
 800d202:	e7da      	b.n	800d1ba <_free_r+0x26>
 800d204:	d902      	bls.n	800d20c <_free_r+0x78>
 800d206:	230c      	movs	r3, #12
 800d208:	6003      	str	r3, [r0, #0]
 800d20a:	e7d6      	b.n	800d1ba <_free_r+0x26>
 800d20c:	6825      	ldr	r5, [r4, #0]
 800d20e:	1961      	adds	r1, r4, r5
 800d210:	428b      	cmp	r3, r1
 800d212:	bf04      	itt	eq
 800d214:	6819      	ldreq	r1, [r3, #0]
 800d216:	685b      	ldreq	r3, [r3, #4]
 800d218:	6063      	str	r3, [r4, #4]
 800d21a:	bf04      	itt	eq
 800d21c:	1949      	addeq	r1, r1, r5
 800d21e:	6021      	streq	r1, [r4, #0]
 800d220:	6054      	str	r4, [r2, #4]
 800d222:	e7ca      	b.n	800d1ba <_free_r+0x26>
 800d224:	b003      	add	sp, #12
 800d226:	bd30      	pop	{r4, r5, pc}
 800d228:	20001390 	.word	0x20001390

0800d22c <sbrk_aligned>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4e0e      	ldr	r6, [pc, #56]	; (800d268 <sbrk_aligned+0x3c>)
 800d230:	460c      	mov	r4, r1
 800d232:	6831      	ldr	r1, [r6, #0]
 800d234:	4605      	mov	r5, r0
 800d236:	b911      	cbnz	r1, 800d23e <sbrk_aligned+0x12>
 800d238:	f000 f88c 	bl	800d354 <_sbrk_r>
 800d23c:	6030      	str	r0, [r6, #0]
 800d23e:	4621      	mov	r1, r4
 800d240:	4628      	mov	r0, r5
 800d242:	f000 f887 	bl	800d354 <_sbrk_r>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d00a      	beq.n	800d260 <sbrk_aligned+0x34>
 800d24a:	1cc4      	adds	r4, r0, #3
 800d24c:	f024 0403 	bic.w	r4, r4, #3
 800d250:	42a0      	cmp	r0, r4
 800d252:	d007      	beq.n	800d264 <sbrk_aligned+0x38>
 800d254:	1a21      	subs	r1, r4, r0
 800d256:	4628      	mov	r0, r5
 800d258:	f000 f87c 	bl	800d354 <_sbrk_r>
 800d25c:	3001      	adds	r0, #1
 800d25e:	d101      	bne.n	800d264 <sbrk_aligned+0x38>
 800d260:	f04f 34ff 	mov.w	r4, #4294967295
 800d264:	4620      	mov	r0, r4
 800d266:	bd70      	pop	{r4, r5, r6, pc}
 800d268:	20001394 	.word	0x20001394

0800d26c <_malloc_r>:
 800d26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d270:	1ccd      	adds	r5, r1, #3
 800d272:	f025 0503 	bic.w	r5, r5, #3
 800d276:	3508      	adds	r5, #8
 800d278:	2d0c      	cmp	r5, #12
 800d27a:	bf38      	it	cc
 800d27c:	250c      	movcc	r5, #12
 800d27e:	2d00      	cmp	r5, #0
 800d280:	4607      	mov	r7, r0
 800d282:	db01      	blt.n	800d288 <_malloc_r+0x1c>
 800d284:	42a9      	cmp	r1, r5
 800d286:	d905      	bls.n	800d294 <_malloc_r+0x28>
 800d288:	230c      	movs	r3, #12
 800d28a:	603b      	str	r3, [r7, #0]
 800d28c:	2600      	movs	r6, #0
 800d28e:	4630      	mov	r0, r6
 800d290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d294:	4e2e      	ldr	r6, [pc, #184]	; (800d350 <_malloc_r+0xe4>)
 800d296:	f000 f88d 	bl	800d3b4 <__malloc_lock>
 800d29a:	6833      	ldr	r3, [r6, #0]
 800d29c:	461c      	mov	r4, r3
 800d29e:	bb34      	cbnz	r4, 800d2ee <_malloc_r+0x82>
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	f7ff ffc2 	bl	800d22c <sbrk_aligned>
 800d2a8:	1c43      	adds	r3, r0, #1
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	d14d      	bne.n	800d34a <_malloc_r+0xde>
 800d2ae:	6834      	ldr	r4, [r6, #0]
 800d2b0:	4626      	mov	r6, r4
 800d2b2:	2e00      	cmp	r6, #0
 800d2b4:	d140      	bne.n	800d338 <_malloc_r+0xcc>
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	4631      	mov	r1, r6
 800d2ba:	4638      	mov	r0, r7
 800d2bc:	eb04 0803 	add.w	r8, r4, r3
 800d2c0:	f000 f848 	bl	800d354 <_sbrk_r>
 800d2c4:	4580      	cmp	r8, r0
 800d2c6:	d13a      	bne.n	800d33e <_malloc_r+0xd2>
 800d2c8:	6821      	ldr	r1, [r4, #0]
 800d2ca:	3503      	adds	r5, #3
 800d2cc:	1a6d      	subs	r5, r5, r1
 800d2ce:	f025 0503 	bic.w	r5, r5, #3
 800d2d2:	3508      	adds	r5, #8
 800d2d4:	2d0c      	cmp	r5, #12
 800d2d6:	bf38      	it	cc
 800d2d8:	250c      	movcc	r5, #12
 800d2da:	4629      	mov	r1, r5
 800d2dc:	4638      	mov	r0, r7
 800d2de:	f7ff ffa5 	bl	800d22c <sbrk_aligned>
 800d2e2:	3001      	adds	r0, #1
 800d2e4:	d02b      	beq.n	800d33e <_malloc_r+0xd2>
 800d2e6:	6823      	ldr	r3, [r4, #0]
 800d2e8:	442b      	add	r3, r5
 800d2ea:	6023      	str	r3, [r4, #0]
 800d2ec:	e00e      	b.n	800d30c <_malloc_r+0xa0>
 800d2ee:	6822      	ldr	r2, [r4, #0]
 800d2f0:	1b52      	subs	r2, r2, r5
 800d2f2:	d41e      	bmi.n	800d332 <_malloc_r+0xc6>
 800d2f4:	2a0b      	cmp	r2, #11
 800d2f6:	d916      	bls.n	800d326 <_malloc_r+0xba>
 800d2f8:	1961      	adds	r1, r4, r5
 800d2fa:	42a3      	cmp	r3, r4
 800d2fc:	6025      	str	r5, [r4, #0]
 800d2fe:	bf18      	it	ne
 800d300:	6059      	strne	r1, [r3, #4]
 800d302:	6863      	ldr	r3, [r4, #4]
 800d304:	bf08      	it	eq
 800d306:	6031      	streq	r1, [r6, #0]
 800d308:	5162      	str	r2, [r4, r5]
 800d30a:	604b      	str	r3, [r1, #4]
 800d30c:	4638      	mov	r0, r7
 800d30e:	f104 060b 	add.w	r6, r4, #11
 800d312:	f000 f855 	bl	800d3c0 <__malloc_unlock>
 800d316:	f026 0607 	bic.w	r6, r6, #7
 800d31a:	1d23      	adds	r3, r4, #4
 800d31c:	1af2      	subs	r2, r6, r3
 800d31e:	d0b6      	beq.n	800d28e <_malloc_r+0x22>
 800d320:	1b9b      	subs	r3, r3, r6
 800d322:	50a3      	str	r3, [r4, r2]
 800d324:	e7b3      	b.n	800d28e <_malloc_r+0x22>
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	42a3      	cmp	r3, r4
 800d32a:	bf0c      	ite	eq
 800d32c:	6032      	streq	r2, [r6, #0]
 800d32e:	605a      	strne	r2, [r3, #4]
 800d330:	e7ec      	b.n	800d30c <_malloc_r+0xa0>
 800d332:	4623      	mov	r3, r4
 800d334:	6864      	ldr	r4, [r4, #4]
 800d336:	e7b2      	b.n	800d29e <_malloc_r+0x32>
 800d338:	4634      	mov	r4, r6
 800d33a:	6876      	ldr	r6, [r6, #4]
 800d33c:	e7b9      	b.n	800d2b2 <_malloc_r+0x46>
 800d33e:	230c      	movs	r3, #12
 800d340:	603b      	str	r3, [r7, #0]
 800d342:	4638      	mov	r0, r7
 800d344:	f000 f83c 	bl	800d3c0 <__malloc_unlock>
 800d348:	e7a1      	b.n	800d28e <_malloc_r+0x22>
 800d34a:	6025      	str	r5, [r4, #0]
 800d34c:	e7de      	b.n	800d30c <_malloc_r+0xa0>
 800d34e:	bf00      	nop
 800d350:	20001390 	.word	0x20001390

0800d354 <_sbrk_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d06      	ldr	r5, [pc, #24]	; (800d370 <_sbrk_r+0x1c>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	602b      	str	r3, [r5, #0]
 800d360:	f7f3 fd36 	bl	8000dd0 <_sbrk>
 800d364:	1c43      	adds	r3, r0, #1
 800d366:	d102      	bne.n	800d36e <_sbrk_r+0x1a>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b103      	cbz	r3, 800d36e <_sbrk_r+0x1a>
 800d36c:	6023      	str	r3, [r4, #0]
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	20001398 	.word	0x20001398

0800d374 <siprintf>:
 800d374:	b40e      	push	{r1, r2, r3}
 800d376:	b500      	push	{lr}
 800d378:	b09c      	sub	sp, #112	; 0x70
 800d37a:	ab1d      	add	r3, sp, #116	; 0x74
 800d37c:	9002      	str	r0, [sp, #8]
 800d37e:	9006      	str	r0, [sp, #24]
 800d380:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d384:	4809      	ldr	r0, [pc, #36]	; (800d3ac <siprintf+0x38>)
 800d386:	9107      	str	r1, [sp, #28]
 800d388:	9104      	str	r1, [sp, #16]
 800d38a:	4909      	ldr	r1, [pc, #36]	; (800d3b0 <siprintf+0x3c>)
 800d38c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d390:	9105      	str	r1, [sp, #20]
 800d392:	6800      	ldr	r0, [r0, #0]
 800d394:	9301      	str	r3, [sp, #4]
 800d396:	a902      	add	r1, sp, #8
 800d398:	f000 f874 	bl	800d484 <_svfiprintf_r>
 800d39c:	9b02      	ldr	r3, [sp, #8]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	701a      	strb	r2, [r3, #0]
 800d3a2:	b01c      	add	sp, #112	; 0x70
 800d3a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3a8:	b003      	add	sp, #12
 800d3aa:	4770      	bx	lr
 800d3ac:	20000140 	.word	0x20000140
 800d3b0:	ffff0208 	.word	0xffff0208

0800d3b4 <__malloc_lock>:
 800d3b4:	4801      	ldr	r0, [pc, #4]	; (800d3bc <__malloc_lock+0x8>)
 800d3b6:	f000 baf9 	b.w	800d9ac <__retarget_lock_acquire_recursive>
 800d3ba:	bf00      	nop
 800d3bc:	2000139c 	.word	0x2000139c

0800d3c0 <__malloc_unlock>:
 800d3c0:	4801      	ldr	r0, [pc, #4]	; (800d3c8 <__malloc_unlock+0x8>)
 800d3c2:	f000 baf4 	b.w	800d9ae <__retarget_lock_release_recursive>
 800d3c6:	bf00      	nop
 800d3c8:	2000139c 	.word	0x2000139c

0800d3cc <__ssputs_r>:
 800d3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d0:	688e      	ldr	r6, [r1, #8]
 800d3d2:	429e      	cmp	r6, r3
 800d3d4:	4682      	mov	sl, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	4690      	mov	r8, r2
 800d3da:	461f      	mov	r7, r3
 800d3dc:	d838      	bhi.n	800d450 <__ssputs_r+0x84>
 800d3de:	898a      	ldrh	r2, [r1, #12]
 800d3e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3e4:	d032      	beq.n	800d44c <__ssputs_r+0x80>
 800d3e6:	6825      	ldr	r5, [r4, #0]
 800d3e8:	6909      	ldr	r1, [r1, #16]
 800d3ea:	eba5 0901 	sub.w	r9, r5, r1
 800d3ee:	6965      	ldr	r5, [r4, #20]
 800d3f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	444b      	add	r3, r9
 800d3fc:	106d      	asrs	r5, r5, #1
 800d3fe:	429d      	cmp	r5, r3
 800d400:	bf38      	it	cc
 800d402:	461d      	movcc	r5, r3
 800d404:	0553      	lsls	r3, r2, #21
 800d406:	d531      	bpl.n	800d46c <__ssputs_r+0xa0>
 800d408:	4629      	mov	r1, r5
 800d40a:	f7ff ff2f 	bl	800d26c <_malloc_r>
 800d40e:	4606      	mov	r6, r0
 800d410:	b950      	cbnz	r0, 800d428 <__ssputs_r+0x5c>
 800d412:	230c      	movs	r3, #12
 800d414:	f8ca 3000 	str.w	r3, [sl]
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d41e:	81a3      	strh	r3, [r4, #12]
 800d420:	f04f 30ff 	mov.w	r0, #4294967295
 800d424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d428:	6921      	ldr	r1, [r4, #16]
 800d42a:	464a      	mov	r2, r9
 800d42c:	f000 fac0 	bl	800d9b0 <memcpy>
 800d430:	89a3      	ldrh	r3, [r4, #12]
 800d432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	6126      	str	r6, [r4, #16]
 800d43e:	6165      	str	r5, [r4, #20]
 800d440:	444e      	add	r6, r9
 800d442:	eba5 0509 	sub.w	r5, r5, r9
 800d446:	6026      	str	r6, [r4, #0]
 800d448:	60a5      	str	r5, [r4, #8]
 800d44a:	463e      	mov	r6, r7
 800d44c:	42be      	cmp	r6, r7
 800d44e:	d900      	bls.n	800d452 <__ssputs_r+0x86>
 800d450:	463e      	mov	r6, r7
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	4632      	mov	r2, r6
 800d456:	4641      	mov	r1, r8
 800d458:	f000 fab8 	bl	800d9cc <memmove>
 800d45c:	68a3      	ldr	r3, [r4, #8]
 800d45e:	1b9b      	subs	r3, r3, r6
 800d460:	60a3      	str	r3, [r4, #8]
 800d462:	6823      	ldr	r3, [r4, #0]
 800d464:	4433      	add	r3, r6
 800d466:	6023      	str	r3, [r4, #0]
 800d468:	2000      	movs	r0, #0
 800d46a:	e7db      	b.n	800d424 <__ssputs_r+0x58>
 800d46c:	462a      	mov	r2, r5
 800d46e:	f000 fac7 	bl	800da00 <_realloc_r>
 800d472:	4606      	mov	r6, r0
 800d474:	2800      	cmp	r0, #0
 800d476:	d1e1      	bne.n	800d43c <__ssputs_r+0x70>
 800d478:	6921      	ldr	r1, [r4, #16]
 800d47a:	4650      	mov	r0, sl
 800d47c:	f7ff fe8a 	bl	800d194 <_free_r>
 800d480:	e7c7      	b.n	800d412 <__ssputs_r+0x46>
	...

0800d484 <_svfiprintf_r>:
 800d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d488:	4698      	mov	r8, r3
 800d48a:	898b      	ldrh	r3, [r1, #12]
 800d48c:	061b      	lsls	r3, r3, #24
 800d48e:	b09d      	sub	sp, #116	; 0x74
 800d490:	4607      	mov	r7, r0
 800d492:	460d      	mov	r5, r1
 800d494:	4614      	mov	r4, r2
 800d496:	d50e      	bpl.n	800d4b6 <_svfiprintf_r+0x32>
 800d498:	690b      	ldr	r3, [r1, #16]
 800d49a:	b963      	cbnz	r3, 800d4b6 <_svfiprintf_r+0x32>
 800d49c:	2140      	movs	r1, #64	; 0x40
 800d49e:	f7ff fee5 	bl	800d26c <_malloc_r>
 800d4a2:	6028      	str	r0, [r5, #0]
 800d4a4:	6128      	str	r0, [r5, #16]
 800d4a6:	b920      	cbnz	r0, 800d4b2 <_svfiprintf_r+0x2e>
 800d4a8:	230c      	movs	r3, #12
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	e0d1      	b.n	800d656 <_svfiprintf_r+0x1d2>
 800d4b2:	2340      	movs	r3, #64	; 0x40
 800d4b4:	616b      	str	r3, [r5, #20]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ba:	2320      	movs	r3, #32
 800d4bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4c4:	2330      	movs	r3, #48	; 0x30
 800d4c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d670 <_svfiprintf_r+0x1ec>
 800d4ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4ce:	f04f 0901 	mov.w	r9, #1
 800d4d2:	4623      	mov	r3, r4
 800d4d4:	469a      	mov	sl, r3
 800d4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4da:	b10a      	cbz	r2, 800d4e0 <_svfiprintf_r+0x5c>
 800d4dc:	2a25      	cmp	r2, #37	; 0x25
 800d4de:	d1f9      	bne.n	800d4d4 <_svfiprintf_r+0x50>
 800d4e0:	ebba 0b04 	subs.w	fp, sl, r4
 800d4e4:	d00b      	beq.n	800d4fe <_svfiprintf_r+0x7a>
 800d4e6:	465b      	mov	r3, fp
 800d4e8:	4622      	mov	r2, r4
 800d4ea:	4629      	mov	r1, r5
 800d4ec:	4638      	mov	r0, r7
 800d4ee:	f7ff ff6d 	bl	800d3cc <__ssputs_r>
 800d4f2:	3001      	adds	r0, #1
 800d4f4:	f000 80aa 	beq.w	800d64c <_svfiprintf_r+0x1c8>
 800d4f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4fa:	445a      	add	r2, fp
 800d4fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 80a2 	beq.w	800d64c <_svfiprintf_r+0x1c8>
 800d508:	2300      	movs	r3, #0
 800d50a:	f04f 32ff 	mov.w	r2, #4294967295
 800d50e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d512:	f10a 0a01 	add.w	sl, sl, #1
 800d516:	9304      	str	r3, [sp, #16]
 800d518:	9307      	str	r3, [sp, #28]
 800d51a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d51e:	931a      	str	r3, [sp, #104]	; 0x68
 800d520:	4654      	mov	r4, sl
 800d522:	2205      	movs	r2, #5
 800d524:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d528:	4851      	ldr	r0, [pc, #324]	; (800d670 <_svfiprintf_r+0x1ec>)
 800d52a:	f7f2 fe71 	bl	8000210 <memchr>
 800d52e:	9a04      	ldr	r2, [sp, #16]
 800d530:	b9d8      	cbnz	r0, 800d56a <_svfiprintf_r+0xe6>
 800d532:	06d0      	lsls	r0, r2, #27
 800d534:	bf44      	itt	mi
 800d536:	2320      	movmi	r3, #32
 800d538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d53c:	0711      	lsls	r1, r2, #28
 800d53e:	bf44      	itt	mi
 800d540:	232b      	movmi	r3, #43	; 0x2b
 800d542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d546:	f89a 3000 	ldrb.w	r3, [sl]
 800d54a:	2b2a      	cmp	r3, #42	; 0x2a
 800d54c:	d015      	beq.n	800d57a <_svfiprintf_r+0xf6>
 800d54e:	9a07      	ldr	r2, [sp, #28]
 800d550:	4654      	mov	r4, sl
 800d552:	2000      	movs	r0, #0
 800d554:	f04f 0c0a 	mov.w	ip, #10
 800d558:	4621      	mov	r1, r4
 800d55a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d55e:	3b30      	subs	r3, #48	; 0x30
 800d560:	2b09      	cmp	r3, #9
 800d562:	d94e      	bls.n	800d602 <_svfiprintf_r+0x17e>
 800d564:	b1b0      	cbz	r0, 800d594 <_svfiprintf_r+0x110>
 800d566:	9207      	str	r2, [sp, #28]
 800d568:	e014      	b.n	800d594 <_svfiprintf_r+0x110>
 800d56a:	eba0 0308 	sub.w	r3, r0, r8
 800d56e:	fa09 f303 	lsl.w	r3, r9, r3
 800d572:	4313      	orrs	r3, r2
 800d574:	9304      	str	r3, [sp, #16]
 800d576:	46a2      	mov	sl, r4
 800d578:	e7d2      	b.n	800d520 <_svfiprintf_r+0x9c>
 800d57a:	9b03      	ldr	r3, [sp, #12]
 800d57c:	1d19      	adds	r1, r3, #4
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	9103      	str	r1, [sp, #12]
 800d582:	2b00      	cmp	r3, #0
 800d584:	bfbb      	ittet	lt
 800d586:	425b      	neglt	r3, r3
 800d588:	f042 0202 	orrlt.w	r2, r2, #2
 800d58c:	9307      	strge	r3, [sp, #28]
 800d58e:	9307      	strlt	r3, [sp, #28]
 800d590:	bfb8      	it	lt
 800d592:	9204      	strlt	r2, [sp, #16]
 800d594:	7823      	ldrb	r3, [r4, #0]
 800d596:	2b2e      	cmp	r3, #46	; 0x2e
 800d598:	d10c      	bne.n	800d5b4 <_svfiprintf_r+0x130>
 800d59a:	7863      	ldrb	r3, [r4, #1]
 800d59c:	2b2a      	cmp	r3, #42	; 0x2a
 800d59e:	d135      	bne.n	800d60c <_svfiprintf_r+0x188>
 800d5a0:	9b03      	ldr	r3, [sp, #12]
 800d5a2:	1d1a      	adds	r2, r3, #4
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	9203      	str	r2, [sp, #12]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	bfb8      	it	lt
 800d5ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5b0:	3402      	adds	r4, #2
 800d5b2:	9305      	str	r3, [sp, #20]
 800d5b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d680 <_svfiprintf_r+0x1fc>
 800d5b8:	7821      	ldrb	r1, [r4, #0]
 800d5ba:	2203      	movs	r2, #3
 800d5bc:	4650      	mov	r0, sl
 800d5be:	f7f2 fe27 	bl	8000210 <memchr>
 800d5c2:	b140      	cbz	r0, 800d5d6 <_svfiprintf_r+0x152>
 800d5c4:	2340      	movs	r3, #64	; 0x40
 800d5c6:	eba0 000a 	sub.w	r0, r0, sl
 800d5ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d5ce:	9b04      	ldr	r3, [sp, #16]
 800d5d0:	4303      	orrs	r3, r0
 800d5d2:	3401      	adds	r4, #1
 800d5d4:	9304      	str	r3, [sp, #16]
 800d5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5da:	4826      	ldr	r0, [pc, #152]	; (800d674 <_svfiprintf_r+0x1f0>)
 800d5dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5e0:	2206      	movs	r2, #6
 800d5e2:	f7f2 fe15 	bl	8000210 <memchr>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d038      	beq.n	800d65c <_svfiprintf_r+0x1d8>
 800d5ea:	4b23      	ldr	r3, [pc, #140]	; (800d678 <_svfiprintf_r+0x1f4>)
 800d5ec:	bb1b      	cbnz	r3, 800d636 <_svfiprintf_r+0x1b2>
 800d5ee:	9b03      	ldr	r3, [sp, #12]
 800d5f0:	3307      	adds	r3, #7
 800d5f2:	f023 0307 	bic.w	r3, r3, #7
 800d5f6:	3308      	adds	r3, #8
 800d5f8:	9303      	str	r3, [sp, #12]
 800d5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5fc:	4433      	add	r3, r6
 800d5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d600:	e767      	b.n	800d4d2 <_svfiprintf_r+0x4e>
 800d602:	fb0c 3202 	mla	r2, ip, r2, r3
 800d606:	460c      	mov	r4, r1
 800d608:	2001      	movs	r0, #1
 800d60a:	e7a5      	b.n	800d558 <_svfiprintf_r+0xd4>
 800d60c:	2300      	movs	r3, #0
 800d60e:	3401      	adds	r4, #1
 800d610:	9305      	str	r3, [sp, #20]
 800d612:	4619      	mov	r1, r3
 800d614:	f04f 0c0a 	mov.w	ip, #10
 800d618:	4620      	mov	r0, r4
 800d61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d61e:	3a30      	subs	r2, #48	; 0x30
 800d620:	2a09      	cmp	r2, #9
 800d622:	d903      	bls.n	800d62c <_svfiprintf_r+0x1a8>
 800d624:	2b00      	cmp	r3, #0
 800d626:	d0c5      	beq.n	800d5b4 <_svfiprintf_r+0x130>
 800d628:	9105      	str	r1, [sp, #20]
 800d62a:	e7c3      	b.n	800d5b4 <_svfiprintf_r+0x130>
 800d62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d630:	4604      	mov	r4, r0
 800d632:	2301      	movs	r3, #1
 800d634:	e7f0      	b.n	800d618 <_svfiprintf_r+0x194>
 800d636:	ab03      	add	r3, sp, #12
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	462a      	mov	r2, r5
 800d63c:	4b0f      	ldr	r3, [pc, #60]	; (800d67c <_svfiprintf_r+0x1f8>)
 800d63e:	a904      	add	r1, sp, #16
 800d640:	4638      	mov	r0, r7
 800d642:	f3af 8000 	nop.w
 800d646:	1c42      	adds	r2, r0, #1
 800d648:	4606      	mov	r6, r0
 800d64a:	d1d6      	bne.n	800d5fa <_svfiprintf_r+0x176>
 800d64c:	89ab      	ldrh	r3, [r5, #12]
 800d64e:	065b      	lsls	r3, r3, #25
 800d650:	f53f af2c 	bmi.w	800d4ac <_svfiprintf_r+0x28>
 800d654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d656:	b01d      	add	sp, #116	; 0x74
 800d658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65c:	ab03      	add	r3, sp, #12
 800d65e:	9300      	str	r3, [sp, #0]
 800d660:	462a      	mov	r2, r5
 800d662:	4b06      	ldr	r3, [pc, #24]	; (800d67c <_svfiprintf_r+0x1f8>)
 800d664:	a904      	add	r1, sp, #16
 800d666:	4638      	mov	r0, r7
 800d668:	f000 f87a 	bl	800d760 <_printf_i>
 800d66c:	e7eb      	b.n	800d646 <_svfiprintf_r+0x1c2>
 800d66e:	bf00      	nop
 800d670:	0800de20 	.word	0x0800de20
 800d674:	0800de2a 	.word	0x0800de2a
 800d678:	00000000 	.word	0x00000000
 800d67c:	0800d3cd 	.word	0x0800d3cd
 800d680:	0800de26 	.word	0x0800de26

0800d684 <_printf_common>:
 800d684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d688:	4616      	mov	r6, r2
 800d68a:	4699      	mov	r9, r3
 800d68c:	688a      	ldr	r2, [r1, #8]
 800d68e:	690b      	ldr	r3, [r1, #16]
 800d690:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d694:	4293      	cmp	r3, r2
 800d696:	bfb8      	it	lt
 800d698:	4613      	movlt	r3, r2
 800d69a:	6033      	str	r3, [r6, #0]
 800d69c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6a0:	4607      	mov	r7, r0
 800d6a2:	460c      	mov	r4, r1
 800d6a4:	b10a      	cbz	r2, 800d6aa <_printf_common+0x26>
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	6033      	str	r3, [r6, #0]
 800d6aa:	6823      	ldr	r3, [r4, #0]
 800d6ac:	0699      	lsls	r1, r3, #26
 800d6ae:	bf42      	ittt	mi
 800d6b0:	6833      	ldrmi	r3, [r6, #0]
 800d6b2:	3302      	addmi	r3, #2
 800d6b4:	6033      	strmi	r3, [r6, #0]
 800d6b6:	6825      	ldr	r5, [r4, #0]
 800d6b8:	f015 0506 	ands.w	r5, r5, #6
 800d6bc:	d106      	bne.n	800d6cc <_printf_common+0x48>
 800d6be:	f104 0a19 	add.w	sl, r4, #25
 800d6c2:	68e3      	ldr	r3, [r4, #12]
 800d6c4:	6832      	ldr	r2, [r6, #0]
 800d6c6:	1a9b      	subs	r3, r3, r2
 800d6c8:	42ab      	cmp	r3, r5
 800d6ca:	dc26      	bgt.n	800d71a <_printf_common+0x96>
 800d6cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6d0:	1e13      	subs	r3, r2, #0
 800d6d2:	6822      	ldr	r2, [r4, #0]
 800d6d4:	bf18      	it	ne
 800d6d6:	2301      	movne	r3, #1
 800d6d8:	0692      	lsls	r2, r2, #26
 800d6da:	d42b      	bmi.n	800d734 <_printf_common+0xb0>
 800d6dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d6e0:	4649      	mov	r1, r9
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	47c0      	blx	r8
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	d01e      	beq.n	800d728 <_printf_common+0xa4>
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	68e5      	ldr	r5, [r4, #12]
 800d6ee:	6832      	ldr	r2, [r6, #0]
 800d6f0:	f003 0306 	and.w	r3, r3, #6
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	bf08      	it	eq
 800d6f8:	1aad      	subeq	r5, r5, r2
 800d6fa:	68a3      	ldr	r3, [r4, #8]
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	bf0c      	ite	eq
 800d700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d704:	2500      	movne	r5, #0
 800d706:	4293      	cmp	r3, r2
 800d708:	bfc4      	itt	gt
 800d70a:	1a9b      	subgt	r3, r3, r2
 800d70c:	18ed      	addgt	r5, r5, r3
 800d70e:	2600      	movs	r6, #0
 800d710:	341a      	adds	r4, #26
 800d712:	42b5      	cmp	r5, r6
 800d714:	d11a      	bne.n	800d74c <_printf_common+0xc8>
 800d716:	2000      	movs	r0, #0
 800d718:	e008      	b.n	800d72c <_printf_common+0xa8>
 800d71a:	2301      	movs	r3, #1
 800d71c:	4652      	mov	r2, sl
 800d71e:	4649      	mov	r1, r9
 800d720:	4638      	mov	r0, r7
 800d722:	47c0      	blx	r8
 800d724:	3001      	adds	r0, #1
 800d726:	d103      	bne.n	800d730 <_printf_common+0xac>
 800d728:	f04f 30ff 	mov.w	r0, #4294967295
 800d72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d730:	3501      	adds	r5, #1
 800d732:	e7c6      	b.n	800d6c2 <_printf_common+0x3e>
 800d734:	18e1      	adds	r1, r4, r3
 800d736:	1c5a      	adds	r2, r3, #1
 800d738:	2030      	movs	r0, #48	; 0x30
 800d73a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d73e:	4422      	add	r2, r4
 800d740:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d744:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d748:	3302      	adds	r3, #2
 800d74a:	e7c7      	b.n	800d6dc <_printf_common+0x58>
 800d74c:	2301      	movs	r3, #1
 800d74e:	4622      	mov	r2, r4
 800d750:	4649      	mov	r1, r9
 800d752:	4638      	mov	r0, r7
 800d754:	47c0      	blx	r8
 800d756:	3001      	adds	r0, #1
 800d758:	d0e6      	beq.n	800d728 <_printf_common+0xa4>
 800d75a:	3601      	adds	r6, #1
 800d75c:	e7d9      	b.n	800d712 <_printf_common+0x8e>
	...

0800d760 <_printf_i>:
 800d760:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d764:	7e0f      	ldrb	r7, [r1, #24]
 800d766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d768:	2f78      	cmp	r7, #120	; 0x78
 800d76a:	4691      	mov	r9, r2
 800d76c:	4680      	mov	r8, r0
 800d76e:	460c      	mov	r4, r1
 800d770:	469a      	mov	sl, r3
 800d772:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d776:	d807      	bhi.n	800d788 <_printf_i+0x28>
 800d778:	2f62      	cmp	r7, #98	; 0x62
 800d77a:	d80a      	bhi.n	800d792 <_printf_i+0x32>
 800d77c:	2f00      	cmp	r7, #0
 800d77e:	f000 80d8 	beq.w	800d932 <_printf_i+0x1d2>
 800d782:	2f58      	cmp	r7, #88	; 0x58
 800d784:	f000 80a3 	beq.w	800d8ce <_printf_i+0x16e>
 800d788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d78c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d790:	e03a      	b.n	800d808 <_printf_i+0xa8>
 800d792:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d796:	2b15      	cmp	r3, #21
 800d798:	d8f6      	bhi.n	800d788 <_printf_i+0x28>
 800d79a:	a101      	add	r1, pc, #4	; (adr r1, 800d7a0 <_printf_i+0x40>)
 800d79c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7a0:	0800d7f9 	.word	0x0800d7f9
 800d7a4:	0800d80d 	.word	0x0800d80d
 800d7a8:	0800d789 	.word	0x0800d789
 800d7ac:	0800d789 	.word	0x0800d789
 800d7b0:	0800d789 	.word	0x0800d789
 800d7b4:	0800d789 	.word	0x0800d789
 800d7b8:	0800d80d 	.word	0x0800d80d
 800d7bc:	0800d789 	.word	0x0800d789
 800d7c0:	0800d789 	.word	0x0800d789
 800d7c4:	0800d789 	.word	0x0800d789
 800d7c8:	0800d789 	.word	0x0800d789
 800d7cc:	0800d919 	.word	0x0800d919
 800d7d0:	0800d83d 	.word	0x0800d83d
 800d7d4:	0800d8fb 	.word	0x0800d8fb
 800d7d8:	0800d789 	.word	0x0800d789
 800d7dc:	0800d789 	.word	0x0800d789
 800d7e0:	0800d93b 	.word	0x0800d93b
 800d7e4:	0800d789 	.word	0x0800d789
 800d7e8:	0800d83d 	.word	0x0800d83d
 800d7ec:	0800d789 	.word	0x0800d789
 800d7f0:	0800d789 	.word	0x0800d789
 800d7f4:	0800d903 	.word	0x0800d903
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	1d1a      	adds	r2, r3, #4
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	602a      	str	r2, [r5, #0]
 800d800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d808:	2301      	movs	r3, #1
 800d80a:	e0a3      	b.n	800d954 <_printf_i+0x1f4>
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	6829      	ldr	r1, [r5, #0]
 800d810:	0606      	lsls	r6, r0, #24
 800d812:	f101 0304 	add.w	r3, r1, #4
 800d816:	d50a      	bpl.n	800d82e <_printf_i+0xce>
 800d818:	680e      	ldr	r6, [r1, #0]
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	2e00      	cmp	r6, #0
 800d81e:	da03      	bge.n	800d828 <_printf_i+0xc8>
 800d820:	232d      	movs	r3, #45	; 0x2d
 800d822:	4276      	negs	r6, r6
 800d824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d828:	485e      	ldr	r0, [pc, #376]	; (800d9a4 <_printf_i+0x244>)
 800d82a:	230a      	movs	r3, #10
 800d82c:	e019      	b.n	800d862 <_printf_i+0x102>
 800d82e:	680e      	ldr	r6, [r1, #0]
 800d830:	602b      	str	r3, [r5, #0]
 800d832:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d836:	bf18      	it	ne
 800d838:	b236      	sxthne	r6, r6
 800d83a:	e7ef      	b.n	800d81c <_printf_i+0xbc>
 800d83c:	682b      	ldr	r3, [r5, #0]
 800d83e:	6820      	ldr	r0, [r4, #0]
 800d840:	1d19      	adds	r1, r3, #4
 800d842:	6029      	str	r1, [r5, #0]
 800d844:	0601      	lsls	r1, r0, #24
 800d846:	d501      	bpl.n	800d84c <_printf_i+0xec>
 800d848:	681e      	ldr	r6, [r3, #0]
 800d84a:	e002      	b.n	800d852 <_printf_i+0xf2>
 800d84c:	0646      	lsls	r6, r0, #25
 800d84e:	d5fb      	bpl.n	800d848 <_printf_i+0xe8>
 800d850:	881e      	ldrh	r6, [r3, #0]
 800d852:	4854      	ldr	r0, [pc, #336]	; (800d9a4 <_printf_i+0x244>)
 800d854:	2f6f      	cmp	r7, #111	; 0x6f
 800d856:	bf0c      	ite	eq
 800d858:	2308      	moveq	r3, #8
 800d85a:	230a      	movne	r3, #10
 800d85c:	2100      	movs	r1, #0
 800d85e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d862:	6865      	ldr	r5, [r4, #4]
 800d864:	60a5      	str	r5, [r4, #8]
 800d866:	2d00      	cmp	r5, #0
 800d868:	bfa2      	ittt	ge
 800d86a:	6821      	ldrge	r1, [r4, #0]
 800d86c:	f021 0104 	bicge.w	r1, r1, #4
 800d870:	6021      	strge	r1, [r4, #0]
 800d872:	b90e      	cbnz	r6, 800d878 <_printf_i+0x118>
 800d874:	2d00      	cmp	r5, #0
 800d876:	d04d      	beq.n	800d914 <_printf_i+0x1b4>
 800d878:	4615      	mov	r5, r2
 800d87a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d87e:	fb03 6711 	mls	r7, r3, r1, r6
 800d882:	5dc7      	ldrb	r7, [r0, r7]
 800d884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d888:	4637      	mov	r7, r6
 800d88a:	42bb      	cmp	r3, r7
 800d88c:	460e      	mov	r6, r1
 800d88e:	d9f4      	bls.n	800d87a <_printf_i+0x11a>
 800d890:	2b08      	cmp	r3, #8
 800d892:	d10b      	bne.n	800d8ac <_printf_i+0x14c>
 800d894:	6823      	ldr	r3, [r4, #0]
 800d896:	07de      	lsls	r6, r3, #31
 800d898:	d508      	bpl.n	800d8ac <_printf_i+0x14c>
 800d89a:	6923      	ldr	r3, [r4, #16]
 800d89c:	6861      	ldr	r1, [r4, #4]
 800d89e:	4299      	cmp	r1, r3
 800d8a0:	bfde      	ittt	le
 800d8a2:	2330      	movle	r3, #48	; 0x30
 800d8a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8ac:	1b52      	subs	r2, r2, r5
 800d8ae:	6122      	str	r2, [r4, #16]
 800d8b0:	f8cd a000 	str.w	sl, [sp]
 800d8b4:	464b      	mov	r3, r9
 800d8b6:	aa03      	add	r2, sp, #12
 800d8b8:	4621      	mov	r1, r4
 800d8ba:	4640      	mov	r0, r8
 800d8bc:	f7ff fee2 	bl	800d684 <_printf_common>
 800d8c0:	3001      	adds	r0, #1
 800d8c2:	d14c      	bne.n	800d95e <_printf_i+0x1fe>
 800d8c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8c8:	b004      	add	sp, #16
 800d8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ce:	4835      	ldr	r0, [pc, #212]	; (800d9a4 <_printf_i+0x244>)
 800d8d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d8d4:	6829      	ldr	r1, [r5, #0]
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d8dc:	6029      	str	r1, [r5, #0]
 800d8de:	061d      	lsls	r5, r3, #24
 800d8e0:	d514      	bpl.n	800d90c <_printf_i+0x1ac>
 800d8e2:	07df      	lsls	r7, r3, #31
 800d8e4:	bf44      	itt	mi
 800d8e6:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ea:	6023      	strmi	r3, [r4, #0]
 800d8ec:	b91e      	cbnz	r6, 800d8f6 <_printf_i+0x196>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	f023 0320 	bic.w	r3, r3, #32
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	2310      	movs	r3, #16
 800d8f8:	e7b0      	b.n	800d85c <_printf_i+0xfc>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	f043 0320 	orr.w	r3, r3, #32
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	2378      	movs	r3, #120	; 0x78
 800d904:	4828      	ldr	r0, [pc, #160]	; (800d9a8 <_printf_i+0x248>)
 800d906:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d90a:	e7e3      	b.n	800d8d4 <_printf_i+0x174>
 800d90c:	0659      	lsls	r1, r3, #25
 800d90e:	bf48      	it	mi
 800d910:	b2b6      	uxthmi	r6, r6
 800d912:	e7e6      	b.n	800d8e2 <_printf_i+0x182>
 800d914:	4615      	mov	r5, r2
 800d916:	e7bb      	b.n	800d890 <_printf_i+0x130>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	6826      	ldr	r6, [r4, #0]
 800d91c:	6961      	ldr	r1, [r4, #20]
 800d91e:	1d18      	adds	r0, r3, #4
 800d920:	6028      	str	r0, [r5, #0]
 800d922:	0635      	lsls	r5, r6, #24
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	d501      	bpl.n	800d92c <_printf_i+0x1cc>
 800d928:	6019      	str	r1, [r3, #0]
 800d92a:	e002      	b.n	800d932 <_printf_i+0x1d2>
 800d92c:	0670      	lsls	r0, r6, #25
 800d92e:	d5fb      	bpl.n	800d928 <_printf_i+0x1c8>
 800d930:	8019      	strh	r1, [r3, #0]
 800d932:	2300      	movs	r3, #0
 800d934:	6123      	str	r3, [r4, #16]
 800d936:	4615      	mov	r5, r2
 800d938:	e7ba      	b.n	800d8b0 <_printf_i+0x150>
 800d93a:	682b      	ldr	r3, [r5, #0]
 800d93c:	1d1a      	adds	r2, r3, #4
 800d93e:	602a      	str	r2, [r5, #0]
 800d940:	681d      	ldr	r5, [r3, #0]
 800d942:	6862      	ldr	r2, [r4, #4]
 800d944:	2100      	movs	r1, #0
 800d946:	4628      	mov	r0, r5
 800d948:	f7f2 fc62 	bl	8000210 <memchr>
 800d94c:	b108      	cbz	r0, 800d952 <_printf_i+0x1f2>
 800d94e:	1b40      	subs	r0, r0, r5
 800d950:	6060      	str	r0, [r4, #4]
 800d952:	6863      	ldr	r3, [r4, #4]
 800d954:	6123      	str	r3, [r4, #16]
 800d956:	2300      	movs	r3, #0
 800d958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d95c:	e7a8      	b.n	800d8b0 <_printf_i+0x150>
 800d95e:	6923      	ldr	r3, [r4, #16]
 800d960:	462a      	mov	r2, r5
 800d962:	4649      	mov	r1, r9
 800d964:	4640      	mov	r0, r8
 800d966:	47d0      	blx	sl
 800d968:	3001      	adds	r0, #1
 800d96a:	d0ab      	beq.n	800d8c4 <_printf_i+0x164>
 800d96c:	6823      	ldr	r3, [r4, #0]
 800d96e:	079b      	lsls	r3, r3, #30
 800d970:	d413      	bmi.n	800d99a <_printf_i+0x23a>
 800d972:	68e0      	ldr	r0, [r4, #12]
 800d974:	9b03      	ldr	r3, [sp, #12]
 800d976:	4298      	cmp	r0, r3
 800d978:	bfb8      	it	lt
 800d97a:	4618      	movlt	r0, r3
 800d97c:	e7a4      	b.n	800d8c8 <_printf_i+0x168>
 800d97e:	2301      	movs	r3, #1
 800d980:	4632      	mov	r2, r6
 800d982:	4649      	mov	r1, r9
 800d984:	4640      	mov	r0, r8
 800d986:	47d0      	blx	sl
 800d988:	3001      	adds	r0, #1
 800d98a:	d09b      	beq.n	800d8c4 <_printf_i+0x164>
 800d98c:	3501      	adds	r5, #1
 800d98e:	68e3      	ldr	r3, [r4, #12]
 800d990:	9903      	ldr	r1, [sp, #12]
 800d992:	1a5b      	subs	r3, r3, r1
 800d994:	42ab      	cmp	r3, r5
 800d996:	dcf2      	bgt.n	800d97e <_printf_i+0x21e>
 800d998:	e7eb      	b.n	800d972 <_printf_i+0x212>
 800d99a:	2500      	movs	r5, #0
 800d99c:	f104 0619 	add.w	r6, r4, #25
 800d9a0:	e7f5      	b.n	800d98e <_printf_i+0x22e>
 800d9a2:	bf00      	nop
 800d9a4:	0800de31 	.word	0x0800de31
 800d9a8:	0800de42 	.word	0x0800de42

0800d9ac <__retarget_lock_acquire_recursive>:
 800d9ac:	4770      	bx	lr

0800d9ae <__retarget_lock_release_recursive>:
 800d9ae:	4770      	bx	lr

0800d9b0 <memcpy>:
 800d9b0:	440a      	add	r2, r1
 800d9b2:	4291      	cmp	r1, r2
 800d9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9b8:	d100      	bne.n	800d9bc <memcpy+0xc>
 800d9ba:	4770      	bx	lr
 800d9bc:	b510      	push	{r4, lr}
 800d9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9c6:	4291      	cmp	r1, r2
 800d9c8:	d1f9      	bne.n	800d9be <memcpy+0xe>
 800d9ca:	bd10      	pop	{r4, pc}

0800d9cc <memmove>:
 800d9cc:	4288      	cmp	r0, r1
 800d9ce:	b510      	push	{r4, lr}
 800d9d0:	eb01 0402 	add.w	r4, r1, r2
 800d9d4:	d902      	bls.n	800d9dc <memmove+0x10>
 800d9d6:	4284      	cmp	r4, r0
 800d9d8:	4623      	mov	r3, r4
 800d9da:	d807      	bhi.n	800d9ec <memmove+0x20>
 800d9dc:	1e43      	subs	r3, r0, #1
 800d9de:	42a1      	cmp	r1, r4
 800d9e0:	d008      	beq.n	800d9f4 <memmove+0x28>
 800d9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9ea:	e7f8      	b.n	800d9de <memmove+0x12>
 800d9ec:	4402      	add	r2, r0
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	428a      	cmp	r2, r1
 800d9f2:	d100      	bne.n	800d9f6 <memmove+0x2a>
 800d9f4:	bd10      	pop	{r4, pc}
 800d9f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9fe:	e7f7      	b.n	800d9f0 <memmove+0x24>

0800da00 <_realloc_r>:
 800da00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da04:	4680      	mov	r8, r0
 800da06:	4614      	mov	r4, r2
 800da08:	460e      	mov	r6, r1
 800da0a:	b921      	cbnz	r1, 800da16 <_realloc_r+0x16>
 800da0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da10:	4611      	mov	r1, r2
 800da12:	f7ff bc2b 	b.w	800d26c <_malloc_r>
 800da16:	b92a      	cbnz	r2, 800da24 <_realloc_r+0x24>
 800da18:	f7ff fbbc 	bl	800d194 <_free_r>
 800da1c:	4625      	mov	r5, r4
 800da1e:	4628      	mov	r0, r5
 800da20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da24:	f000 f81b 	bl	800da5e <_malloc_usable_size_r>
 800da28:	4284      	cmp	r4, r0
 800da2a:	4607      	mov	r7, r0
 800da2c:	d802      	bhi.n	800da34 <_realloc_r+0x34>
 800da2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da32:	d812      	bhi.n	800da5a <_realloc_r+0x5a>
 800da34:	4621      	mov	r1, r4
 800da36:	4640      	mov	r0, r8
 800da38:	f7ff fc18 	bl	800d26c <_malloc_r>
 800da3c:	4605      	mov	r5, r0
 800da3e:	2800      	cmp	r0, #0
 800da40:	d0ed      	beq.n	800da1e <_realloc_r+0x1e>
 800da42:	42bc      	cmp	r4, r7
 800da44:	4622      	mov	r2, r4
 800da46:	4631      	mov	r1, r6
 800da48:	bf28      	it	cs
 800da4a:	463a      	movcs	r2, r7
 800da4c:	f7ff ffb0 	bl	800d9b0 <memcpy>
 800da50:	4631      	mov	r1, r6
 800da52:	4640      	mov	r0, r8
 800da54:	f7ff fb9e 	bl	800d194 <_free_r>
 800da58:	e7e1      	b.n	800da1e <_realloc_r+0x1e>
 800da5a:	4635      	mov	r5, r6
 800da5c:	e7df      	b.n	800da1e <_realloc_r+0x1e>

0800da5e <_malloc_usable_size_r>:
 800da5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da62:	1f18      	subs	r0, r3, #4
 800da64:	2b00      	cmp	r3, #0
 800da66:	bfbc      	itt	lt
 800da68:	580b      	ldrlt	r3, [r1, r0]
 800da6a:	18c0      	addlt	r0, r0, r3
 800da6c:	4770      	bx	lr
	...

0800da70 <_init>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr

0800da7c <_fini>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr
