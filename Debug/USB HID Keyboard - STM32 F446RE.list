
USB HID Keyboard - STM32 F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d840  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800da10  0800da10  0001da10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dddc  0800dddc  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dddc  0800dddc  0001dddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dde4  0800dde4  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dde4  0800dde4  0001dde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dde8  0800dde8  0001dde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800ddec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  200001a4  0800df90  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800df90  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dda3  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c26  00000000  00000000  0003df77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00042ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00043eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dea  00000000  00000000  00045000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c14a  00000000  00000000  0006cdea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1583  00000000  00000000  00088f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a4b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000508c  00000000  00000000  0015a508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d9f8 	.word	0x0800d9f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	0800d9f8 	.word	0x0800d9f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005be:	2120      	movs	r1, #32
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80005c2:	f000 ffa8 	bl	8001516 <HAL_GPIO_TogglePin>
	int len = sprintf(uart_buff, "ISR callback.\r\n");
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <HAL_GPIO_EXTI_Callback+0x38>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005ca:	f00c fe97 	bl	800d2fc <siprintf>
 80005ce:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	4906      	ldr	r1, [pc, #24]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80005da:	f004 ffea 	bl	80055b2 <HAL_UART_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000
 80005ec:	0800da10 	.word	0x0800da10
 80005f0:	20000204 	.word	0x20000204
 80005f4:	200001c0 	.word	0x200001c0

080005f8 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (USBH_HID_GetDeviceType(phost) == HID_KEYBOARD) // if the HID is Mouse
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f009 fe6b 	bl	800a2dc <USBH_HID_GetDeviceType>
 8000606:	4603      	mov	r3, r0
 8000608:	2b02      	cmp	r3, #2
 800060a:	f040 80d2 	bne.w	80007b2 <USBH_HID_EventCallback+0x1ba>
	{
		HID_KEYBD_Info_TypeDef *Keyboard_Info = USBH_HID_GetKeybdInfo(phost); // get the info
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f009 ff9c 	bl	800a54c <USBH_HID_GetKeybdInfo>
 8000614:	6238      	str	r0, [r7, #32]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);					  // get the key pressed
 8000616:	6a38      	ldr	r0, [r7, #32]
 8000618:	f00a f83c 	bl	800a694 <USBH_HID_GetASCIICode>
 800061c:	4603      	mov	r3, r0
 800061e:	77fb      	strb	r3, [r7, #31]
		int len = sprintf(uart_buff, "Key Pressed = %c\r\n", key);
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	461a      	mov	r2, r3
 8000624:	4965      	ldr	r1, [pc, #404]	; (80007bc <USBH_HID_EventCallback+0x1c4>)
 8000626:	4866      	ldr	r0, [pc, #408]	; (80007c0 <USBH_HID_EventCallback+0x1c8>)
 8000628:	f00c fe68 	bl	800d2fc <siprintf>
 800062c:	61b8      	str	r0, [r7, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	b29a      	uxth	r2, r3
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	4962      	ldr	r1, [pc, #392]	; (80007c0 <USBH_HID_EventCallback+0x1c8>)
 8000636:	4863      	ldr	r0, [pc, #396]	; (80007c4 <USBH_HID_EventCallback+0x1cc>)
 8000638:	f004 ffbb 	bl	80055b2 <HAL_UART_Transmit>

		uint8_t modifier_keys = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		int lshift, rshift, lctrl, rctrl, lalt, ralt, lgui, rgui;
		if (Keyboard_Info->lshift == 1U)
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <USBH_HID_EventCallback+0x64>
		{
			modifier_keys |= KBD_LEFT_SHIFT;
 800064a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lshift = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e001      	b.n	8000660 <USBH_HID_EventCallback+0x68>
		}
		else
			lshift = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
		if (Keyboard_Info->rshift == 1U)
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d108      	bne.n	800067a <USBH_HID_EventCallback+0x82>
		{
			modifier_keys |= KBD_RIGHT_SHIFT;
 8000668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rshift = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e001      	b.n	800067e <USBH_HID_EventCallback+0x86>
		}
		else
			rshift = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
		if (Keyboard_Info->lctrl == 1U)
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d108      	bne.n	8000698 <USBH_HID_EventCallback+0xa0>
		{
			modifier_keys |= KBD_LEFT_CTRL;
 8000686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lctrl = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
 8000696:	e001      	b.n	800069c <USBH_HID_EventCallback+0xa4>
		}
		else
			lctrl = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
		if (Keyboard_Info->rctrl == 1U)
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d108      	bne.n	80006b6 <USBH_HID_EventCallback+0xbe>
		{
			modifier_keys |= KBD_RIGHT_CTRL;
 80006a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rctrl = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b4:	e001      	b.n	80006ba <USBH_HID_EventCallback+0xc2>
		}
		else
			rctrl = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (Keyboard_Info->lalt == 1U)
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	78db      	ldrb	r3, [r3, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d108      	bne.n	80006d4 <USBH_HID_EventCallback+0xdc>
		{
			modifier_keys |= KBD_LEFT_ALT;
 80006c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lalt = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	e001      	b.n	80006d8 <USBH_HID_EventCallback+0xe0>
		}
		else
			lalt = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (Keyboard_Info->ralt == 1U)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d108      	bne.n	80006f2 <USBH_HID_EventCallback+0xfa>
		{
			modifier_keys |= KBD_RIGHT_ALT;
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			ralt = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
 80006f0:	e001      	b.n	80006f6 <USBH_HID_EventCallback+0xfe>
		}
		else
			ralt = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (Keyboard_Info->lgui == 1U)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <USBH_HID_EventCallback+0x118>
		{
			modifier_keys |= KBD_LEFT_GUI;
 80006fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lgui = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e001      	b.n	8000714 <USBH_HID_EventCallback+0x11c>
		}
		else
			lgui = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
		if (Keyboard_Info->rgui == 1U)
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <USBH_HID_EventCallback+0x136>
		{
			modifier_keys |= KBD_RIGHT_GUI;
 800071c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rgui = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	e001      	b.n	8000732 <USBH_HID_EventCallback+0x13a>
		}
		else
			rgui = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]

		if ((lctrl == 1 || rctrl == 1) && (lalt == 1 || ralt == 1) && ((key == 'h' || key == 'H') || (key == 'c' || key == 'C')))
 8000732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <USBH_HID_EventCallback+0x146>
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	2b01      	cmp	r3, #1
 800073c:	d11a      	bne.n	8000774 <USBH_HID_EventCallback+0x17c>
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	2b01      	cmp	r3, #1
 8000742:	d002      	beq.n	800074a <USBH_HID_EventCallback+0x152>
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	2b01      	cmp	r3, #1
 8000748:	d114      	bne.n	8000774 <USBH_HID_EventCallback+0x17c>
 800074a:	7ffb      	ldrb	r3, [r7, #31]
 800074c:	2b68      	cmp	r3, #104	; 0x68
 800074e:	d008      	beq.n	8000762 <USBH_HID_EventCallback+0x16a>
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	2b48      	cmp	r3, #72	; 0x48
 8000754:	d005      	beq.n	8000762 <USBH_HID_EventCallback+0x16a>
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	2b63      	cmp	r3, #99	; 0x63
 800075a:	d002      	beq.n	8000762 <USBH_HID_EventCallback+0x16a>
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b43      	cmp	r3, #67	; 0x43
 8000760:	d108      	bne.n	8000774 <USBH_HID_EventCallback+0x17c>
		{
			if (key == 'h' || key == 'H')
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	2b68      	cmp	r3, #104	; 0x68
 8000766:	d002      	beq.n	800076e <USBH_HID_EventCallback+0x176>
 8000768:	7ffb      	ldrb	r3, [r7, #31]
 800076a:	2b48      	cmp	r3, #72	; 0x48
 800076c:	d120      	bne.n	80007b0 <USBH_HID_EventCallback+0x1b8>
				type_hello_world();
 800076e:	f000 f82f 	bl	80007d0 <type_hello_world>
			if (key == 'h' || key == 'H')
 8000772:	e01d      	b.n	80007b0 <USBH_HID_EventCallback+0x1b8>
				// type_command(&command, 36);
			}
		}
		else
		{
			HID_Buffer[0] = modifier_keys;
 8000774:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 8000776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800077a:	7013      	strb	r3, [r2, #0]
			HID_Buffer[1] = Keyboard_Info->keys[2];
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	7ada      	ldrb	r2, [r3, #11]
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 8000782:	705a      	strb	r2, [r3, #1]
			HID_Buffer[2] = Keyboard_Info->keys[0];
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	7a5a      	ldrb	r2, [r3, #9]
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 800078a:	709a      	strb	r2, [r3, #2]
			HID_Buffer[3] = Keyboard_Info->keys[3];
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	7b1a      	ldrb	r2, [r3, #12]
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 8000792:	70da      	strb	r2, [r3, #3]
			HID_Buffer[4] = Keyboard_Info->keys[4];
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	7b5a      	ldrb	r2, [r3, #13]
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 800079a:	711a      	strb	r2, [r3, #4]
			HID_Buffer[5] = Keyboard_Info->keys[5];
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	7b9a      	ldrb	r2, [r3, #14]
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 80007a2:	715a      	strb	r2, [r3, #5]
			USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80007a4:	2206      	movs	r2, #6
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <USBH_HID_EventCallback+0x1d0>)
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <USBH_HID_EventCallback+0x1d4>)
 80007aa:	f007 fe2f 	bl	800840c <USBD_HID_SendReport>
		}
	}
}
 80007ae:	e000      	b.n	80007b2 <USBH_HID_EventCallback+0x1ba>
			if (key == 'h' || key == 'H')
 80007b0:	bf00      	nop
}
 80007b2:	bf00      	nop
 80007b4:	3738      	adds	r7, #56	; 0x38
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	0800da20 	.word	0x0800da20
 80007c0:	20000204 	.word	0x20000204
 80007c4:	200001c0 	.word	0x200001c0
 80007c8:	20000268 	.word	0x20000268
 80007cc:	200002b4 	.word	0x200002b4

080007d0 <type_hello_world>:
// 	keys[2] = Keyboard_Info->keys[0];
// 	return keys;
// }

void type_hello_world(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HID_Buffer[0] = 0x02;
 80007d4:	4b6b      	ldr	r3, [pc, #428]	; (8000984 <type_hello_world+0x1b4>)
 80007d6:	2202      	movs	r2, #2
 80007d8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0B; // H
 80007da:	4b6a      	ldr	r3, [pc, #424]	; (8000984 <type_hello_world+0x1b4>)
 80007dc:	220b      	movs	r2, #11
 80007de:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80007e0:	2206      	movs	r2, #6
 80007e2:	4968      	ldr	r1, [pc, #416]	; (8000984 <type_hello_world+0x1b4>)
 80007e4:	4868      	ldr	r0, [pc, #416]	; (8000988 <type_hello_world+0x1b8>)
 80007e6:	f007 fe11 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 80007ea:	2032      	movs	r0, #50	; 0x32
 80007ec:	f000 fb98 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80007f0:	4b64      	ldr	r3, [pc, #400]	; (8000984 <type_hello_world+0x1b4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x08; // e
 80007f6:	4b63      	ldr	r3, [pc, #396]	; (8000984 <type_hello_world+0x1b4>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80007fc:	2206      	movs	r2, #6
 80007fe:	4961      	ldr	r1, [pc, #388]	; (8000984 <type_hello_world+0x1b4>)
 8000800:	4861      	ldr	r0, [pc, #388]	; (8000988 <type_hello_world+0x1b8>)
 8000802:	f007 fe03 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000806:	2032      	movs	r0, #50	; 0x32
 8000808:	f000 fb8a 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 800080c:	4b5d      	ldr	r3, [pc, #372]	; (8000984 <type_hello_world+0x1b4>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 8000812:	4b5c      	ldr	r3, [pc, #368]	; (8000984 <type_hello_world+0x1b4>)
 8000814:	220f      	movs	r2, #15
 8000816:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000818:	2206      	movs	r2, #6
 800081a:	495a      	ldr	r1, [pc, #360]	; (8000984 <type_hello_world+0x1b4>)
 800081c:	485a      	ldr	r0, [pc, #360]	; (8000988 <type_hello_world+0x1b8>)
 800081e:	f007 fdf5 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f000 fb7c 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000828:	4b56      	ldr	r3, [pc, #344]	; (8000984 <type_hello_world+0x1b4>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00; // Dummy data between ll in Hello
 800082e:	4b55      	ldr	r3, [pc, #340]	; (8000984 <type_hello_world+0x1b4>)
 8000830:	2200      	movs	r2, #0
 8000832:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000834:	2206      	movs	r2, #6
 8000836:	4953      	ldr	r1, [pc, #332]	; (8000984 <type_hello_world+0x1b4>)
 8000838:	4853      	ldr	r0, [pc, #332]	; (8000988 <type_hello_world+0x1b8>)
 800083a:	f007 fde7 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 800083e:	2032      	movs	r0, #50	; 0x32
 8000840:	f000 fb6e 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000844:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <type_hello_world+0x1b4>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <type_hello_world+0x1b4>)
 800084c:	220f      	movs	r2, #15
 800084e:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000850:	2206      	movs	r2, #6
 8000852:	494c      	ldr	r1, [pc, #304]	; (8000984 <type_hello_world+0x1b4>)
 8000854:	484c      	ldr	r0, [pc, #304]	; (8000988 <type_hello_world+0x1b8>)
 8000856:	f007 fdd9 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 800085a:	2032      	movs	r0, #50	; 0x32
 800085c:	f000 fb60 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000860:	4b48      	ldr	r3, [pc, #288]	; (8000984 <type_hello_world+0x1b4>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x12; // o
 8000866:	4b47      	ldr	r3, [pc, #284]	; (8000984 <type_hello_world+0x1b4>)
 8000868:	2212      	movs	r2, #18
 800086a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 800086c:	2206      	movs	r2, #6
 800086e:	4945      	ldr	r1, [pc, #276]	; (8000984 <type_hello_world+0x1b4>)
 8000870:	4845      	ldr	r0, [pc, #276]	; (8000988 <type_hello_world+0x1b8>)
 8000872:	f007 fdcb 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000876:	2032      	movs	r0, #50	; 0x32
 8000878:	f000 fb52 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 800087c:	4b41      	ldr	r3, [pc, #260]	; (8000984 <type_hello_world+0x1b4>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x2C; // space
 8000882:	4b40      	ldr	r3, [pc, #256]	; (8000984 <type_hello_world+0x1b4>)
 8000884:	222c      	movs	r2, #44	; 0x2c
 8000886:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000888:	2206      	movs	r2, #6
 800088a:	493e      	ldr	r1, [pc, #248]	; (8000984 <type_hello_world+0x1b4>)
 800088c:	483e      	ldr	r0, [pc, #248]	; (8000988 <type_hello_world+0x1b8>)
 800088e:	f007 fdbd 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000892:	2032      	movs	r0, #50	; 0x32
 8000894:	f000 fb44 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x02;
 8000898:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <type_hello_world+0x1b4>)
 800089a:	2202      	movs	r2, #2
 800089c:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x1A; // W
 800089e:	4b39      	ldr	r3, [pc, #228]	; (8000984 <type_hello_world+0x1b4>)
 80008a0:	221a      	movs	r2, #26
 80008a2:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80008a4:	2206      	movs	r2, #6
 80008a6:	4937      	ldr	r1, [pc, #220]	; (8000984 <type_hello_world+0x1b4>)
 80008a8:	4837      	ldr	r0, [pc, #220]	; (8000988 <type_hello_world+0x1b8>)
 80008aa:	f007 fdaf 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f000 fb36 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008b4:	4b33      	ldr	r3, [pc, #204]	; (8000984 <type_hello_world+0x1b4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x12; // o
 80008ba:	4b32      	ldr	r3, [pc, #200]	; (8000984 <type_hello_world+0x1b4>)
 80008bc:	2212      	movs	r2, #18
 80008be:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80008c0:	2206      	movs	r2, #6
 80008c2:	4930      	ldr	r1, [pc, #192]	; (8000984 <type_hello_world+0x1b4>)
 80008c4:	4830      	ldr	r0, [pc, #192]	; (8000988 <type_hello_world+0x1b8>)
 80008c6:	f007 fda1 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 80008ca:	2032      	movs	r0, #50	; 0x32
 80008cc:	f000 fb28 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <type_hello_world+0x1b4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x15; // r
 80008d6:	4b2b      	ldr	r3, [pc, #172]	; (8000984 <type_hello_world+0x1b4>)
 80008d8:	2215      	movs	r2, #21
 80008da:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80008dc:	2206      	movs	r2, #6
 80008de:	4929      	ldr	r1, [pc, #164]	; (8000984 <type_hello_world+0x1b4>)
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <type_hello_world+0x1b8>)
 80008e2:	f007 fd93 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 80008e6:	2032      	movs	r0, #50	; 0x32
 80008e8:	f000 fb1a 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <type_hello_world+0x1b4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x0F; // l
 80008f2:	4b24      	ldr	r3, [pc, #144]	; (8000984 <type_hello_world+0x1b4>)
 80008f4:	220f      	movs	r2, #15
 80008f6:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 80008f8:	2206      	movs	r2, #6
 80008fa:	4922      	ldr	r1, [pc, #136]	; (8000984 <type_hello_world+0x1b4>)
 80008fc:	4822      	ldr	r0, [pc, #136]	; (8000988 <type_hello_world+0x1b8>)
 80008fe:	f007 fd85 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000902:	2032      	movs	r0, #50	; 0x32
 8000904:	f000 fb0c 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <type_hello_world+0x1b4>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x07; // d
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <type_hello_world+0x1b4>)
 8000910:	2207      	movs	r2, #7
 8000912:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000914:	2206      	movs	r2, #6
 8000916:	491b      	ldr	r1, [pc, #108]	; (8000984 <type_hello_world+0x1b4>)
 8000918:	481b      	ldr	r0, [pc, #108]	; (8000988 <type_hello_world+0x1b8>)
 800091a:	f007 fd77 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 800091e:	2032      	movs	r0, #50	; 0x32
 8000920:	f000 fafe 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x02;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <type_hello_world+0x1b4>)
 8000926:	2202      	movs	r2, #2
 8000928:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x1E; // !
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <type_hello_world+0x1b4>)
 800092c:	221e      	movs	r2, #30
 800092e:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000930:	2206      	movs	r2, #6
 8000932:	4914      	ldr	r1, [pc, #80]	; (8000984 <type_hello_world+0x1b4>)
 8000934:	4814      	ldr	r0, [pc, #80]	; (8000988 <type_hello_world+0x1b8>)
 8000936:	f007 fd69 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 800093a:	2032      	movs	r0, #50	; 0x32
 800093c:	f000 faf0 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 8000940:	4b10      	ldr	r3, [pc, #64]	; (8000984 <type_hello_world+0x1b4>)
 8000942:	2200      	movs	r2, #0
 8000944:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x28; // /n
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <type_hello_world+0x1b4>)
 8000948:	2228      	movs	r2, #40	; 0x28
 800094a:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 800094c:	2206      	movs	r2, #6
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <type_hello_world+0x1b4>)
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <type_hello_world+0x1b8>)
 8000952:	f007 fd5b 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000956:	2032      	movs	r0, #50	; 0x32
 8000958:	f000 fae2 	bl	8000f20 <HAL_Delay>

	HID_Buffer[0] = 0x00;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <type_hello_world+0x1b4>)
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00; // release all the keys pressed
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <type_hello_world+0x1b4>)
 8000964:	2200      	movs	r2, #0
 8000966:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 6);
 8000968:	2206      	movs	r2, #6
 800096a:	4906      	ldr	r1, [pc, #24]	; (8000984 <type_hello_world+0x1b4>)
 800096c:	4806      	ldr	r0, [pc, #24]	; (8000988 <type_hello_world+0x1b8>)
 800096e:	f007 fd4d 	bl	800840c <USBD_HID_SendReport>
	HAL_Delay(50);
 8000972:	2032      	movs	r0, #50	; 0x32
 8000974:	f000 fad4 	bl	8000f20 <HAL_Delay>

	HAL_Delay(250);
 8000978:	20fa      	movs	r0, #250	; 0xfa
 800097a:	f000 fad1 	bl	8000f20 <HAL_Delay>
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000268 	.word	0x20000268
 8000988:	200002b4 	.word	0x200002b4

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 fa54 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f818 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f8ac 	bl	8000af4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800099c:	f00b fbb8 	bl	800c110 <MX_USB_DEVICE_Init>
  MX_USB_HOST_Init();
 80009a0:	f00c f864 	bl	800ca6c <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80009a4:	f000 f87c 	bl	8000aa0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009a8:	f00c f886 	bl	800cab8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <main+0x38>)
 80009b2:	f000 fd7f 	bl	80014b4 <HAL_GPIO_ReadPin>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d1f5      	bne.n	80009a8 <main+0x1c>
		{
			type_hello_world();
 80009bc:	f7ff ff08 	bl	80007d0 <type_hello_world>
    MX_USB_HOST_Process();
 80009c0:	e7f2      	b.n	80009a8 <main+0x1c>
 80009c2:	bf00      	nop
 80009c4:	40020800 	.word	0x40020800

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	; 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2234      	movs	r2, #52	; 0x34
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f00c fb98 	bl	800d10c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 0308 	add.w	r3, r7, #8
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <SystemClock_Config+0xd0>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a14:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a40:	2348      	movs	r3, #72	; 0x48
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 fac1 	bl	8004fdc <HAL_RCC_OscConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a60:	f000 f8be 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a64:	230f      	movs	r3, #15
 8000a66:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	2102      	movs	r1, #2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fc37 	bl	80042f4 <HAL_RCC_ClockConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a8c:	f000 f8a8 	bl	8000be0 <Error_Handler>
  }
}
 8000a90:	bf00      	nop
 8000a92:	3750      	adds	r7, #80	; 0x50
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40007000 	.word	0x40007000

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f004 fd1e 	bl	8005518 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f87d 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200001c0 	.word	0x200001c0
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	; 0x28
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b31      	ldr	r3, [pc, #196]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a30      	ldr	r2, [pc, #192]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b14:	f043 0304 	orr.w	r3, r3, #4
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b2e      	ldr	r3, [pc, #184]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a22      	ldr	r2, [pc, #136]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a1b      	ldr	r2, [pc, #108]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_GPIO_Init+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2120      	movs	r1, #32
 8000b7e:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0xe4>)
 8000b80:	f000 fcb0 	bl	80014e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_GPIO_Init+0xe8>)
 8000b9c:	f000 faf6 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4808      	ldr	r0, [pc, #32]	; (8000bd8 <MX_GPIO_Init+0xe4>)
 8000bb8:	f000 fae8 	bl	800118c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2028      	movs	r0, #40	; 0x28
 8000bc2:	f000 faac 	bl	800111e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f000 fac5 	bl	8001156 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020800 	.word	0x40020800

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000be8:	e7fe      	b.n	8000be8 <Error_Handler+0x8>
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c2a:	2007      	movs	r0, #7
 8000c2c:	f000 fa6c 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800

08000c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a19      	ldr	r2, [pc, #100]	; (8000cc0 <HAL_UART_MspInit+0x84>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12b      	bne.n	8000cb6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_UART_MspInit+0x8c>)
 8000cb2:	f000 fa6b 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	40020000 	.word	0x40020000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d18:	f000 f8e2 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d28:	f000 fc10 	bl	800154c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <OTG_FS_IRQHandler+0x10>)
 8000d36:	f002 f982 	bl	800303e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000790 	.word	0x20000790

08000d44 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <OTG_HS_IRQHandler+0x10>)
 8000d4a:	f000 fe81 	bl	8001a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000108c 	.word	0x2000108c

08000d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <_sbrk+0x5c>)
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <_sbrk+0x60>)
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d102      	bne.n	8000d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <_sbrk+0x64>)
 8000d76:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <_sbrk+0x68>)
 8000d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7a:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <_sbrk+0x64>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4413      	add	r3, r2
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d207      	bcs.n	8000d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d88:	f00c f986 	bl	800d098 <__errno>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	220c      	movs	r2, #12
 8000d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d96:	e009      	b.n	8000dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <_sbrk+0x64>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4413      	add	r3, r2
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <_sbrk+0x64>)
 8000da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000daa:	68fb      	ldr	r3, [r7, #12]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20020000 	.word	0x20020000
 8000db8:	00000400 	.word	0x00000400
 8000dbc:	20000270 	.word	0x20000270
 8000dc0:	200013a0 	.word	0x200013a0

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f00c f945 	bl	800d0a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fdb7 	bl	800098c <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000e2c:	0800ddec 	.word	0x0800ddec
  ldr r2, =_sbss
 8000e30:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000e34:	200013a0 	.word	0x200013a0

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff febc 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000274 	.word	0x20000274

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000274 	.word	0x20000274

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	; (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	; (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e165      	b.n	8001474 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8154 	bne.w	800146e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80ae 	beq.w	800146e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b5d      	ldr	r3, [pc, #372]	; (800148c <HAL_GPIO_Init+0x300>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a5c      	ldr	r2, [pc, #368]	; (800148c <HAL_GPIO_Init+0x300>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_GPIO_Init+0x300>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a58      	ldr	r2, [pc, #352]	; (8001490 <HAL_GPIO_Init+0x304>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4f      	ldr	r2, [pc, #316]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d025      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <HAL_GPIO_Init+0x30c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d01f      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4d      	ldr	r2, [pc, #308]	; (800149c <HAL_GPIO_Init+0x310>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d019      	beq.n	800139e <HAL_GPIO_Init+0x212>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4c      	ldr	r2, [pc, #304]	; (80014a0 <HAL_GPIO_Init+0x314>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <HAL_GPIO_Init+0x318>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x20a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4a      	ldr	r2, [pc, #296]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x206>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a49      	ldr	r2, [pc, #292]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x202>
 800138a:	2306      	movs	r3, #6
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800138e:	2307      	movs	r3, #7
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x21c>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013b8:	4935      	ldr	r1, [pc, #212]	; (8001490 <HAL_GPIO_Init+0x304>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4b3a      	ldr	r3, [pc, #232]	; (80014b0 <HAL_GPIO_Init+0x324>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ea:	4a31      	ldr	r2, [pc, #196]	; (80014b0 <HAL_GPIO_Init+0x324>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x324>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001414:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <HAL_GPIO_Init+0x324>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001468:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae96 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3724      	adds	r7, #36	; 0x24
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40013800 	.word	0x40013800
 8001494:	40020000 	.word	0x40020000
 8001498:	40020400 	.word	0x40020400
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40021400 	.word	0x40021400
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	887b      	ldrh	r3, [r7, #2]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d002      	beq.n	80014d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014cc:	2301      	movs	r3, #1
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	807b      	strh	r3, [r7, #2]
 80014f0:	4613      	mov	r3, r2
 80014f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014f4:	787b      	ldrb	r3, [r7, #1]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	041a      	lsls	r2, r3, #16
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	619a      	str	r2, [r3, #24]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	460b      	mov	r3, r1
 8001520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001528:	887a      	ldrh	r2, [r7, #2]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4013      	ands	r3, r2
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	43d9      	mvns	r1, r3
 8001534:	887b      	ldrh	r3, [r7, #2]
 8001536:	400b      	ands	r3, r1
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	619a      	str	r2, [r3, #24]
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001558:	695a      	ldr	r2, [r3, #20]
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001562:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f822 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013c00 	.word	0x40013c00

0800157c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b08f      	sub	sp, #60	; 0x3c
 8001580:	af0a      	add	r7, sp, #40	; 0x28
 8001582:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e054      	b.n	8001638 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d106      	bne.n	80015ae <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f00b fabd 	bl	800cb28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fc7a 	bl	8005ec6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	687e      	ldr	r6, [r7, #4]
 80015da:	466d      	mov	r5, sp
 80015dc:	f106 0410 	add.w	r4, r6, #16
 80015e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f0:	1d33      	adds	r3, r6, #4
 80015f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f004 fb51 	bl	8005c9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2101      	movs	r1, #1
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fc71 	bl	8005ee8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	687e      	ldr	r6, [r7, #4]
 800160e:	466d      	mov	r5, sp
 8001610:	f106 0410 	add.w	r4, r6, #16
 8001614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001620:	e885 0003 	stmia.w	r5, {r0, r1}
 8001624:	1d33      	adds	r3, r6, #4
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f005 ff7f 	bl	800752c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001640 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af04      	add	r7, sp, #16
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4608      	mov	r0, r1
 800164a:	4611      	mov	r1, r2
 800164c:	461a      	mov	r2, r3
 800164e:	4603      	mov	r3, r0
 8001650:	70fb      	strb	r3, [r7, #3]
 8001652:	460b      	mov	r3, r1
 8001654:	70bb      	strb	r3, [r7, #2]
 8001656:	4613      	mov	r3, r2
 8001658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_HCD_HC_Init+0x28>
 8001664:	2302      	movs	r3, #2
 8001666:	e076      	b.n	8001756 <HAL_HCD_HC_Init+0x116>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	333d      	adds	r3, #61	; 0x3d
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	3338      	adds	r3, #56	; 0x38
 8001690:	787a      	ldrb	r2, [r7, #1]
 8001692:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	212c      	movs	r1, #44	; 0x2c
 800169a:	fb01 f303 	mul.w	r3, r1, r3
 800169e:	4413      	add	r3, r2
 80016a0:	3340      	adds	r3, #64	; 0x40
 80016a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016a4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016a6:	78fb      	ldrb	r3, [r7, #3]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	212c      	movs	r1, #44	; 0x2c
 80016ac:	fb01 f303 	mul.w	r3, r1, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	3339      	adds	r3, #57	; 0x39
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016b8:	78fb      	ldrb	r3, [r7, #3]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	fb01 f303 	mul.w	r3, r1, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	333f      	adds	r3, #63	; 0x3f
 80016c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016cc:	78fb      	ldrb	r3, [r7, #3]
 80016ce:	78ba      	ldrb	r2, [r7, #2]
 80016d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016d4:	b2d0      	uxtb	r0, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	333a      	adds	r3, #58	; 0x3a
 80016e2:	4602      	mov	r2, r0
 80016e4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da09      	bge.n	8001702 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016ee:	78fb      	ldrb	r3, [r7, #3]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	212c      	movs	r1, #44	; 0x2c
 80016f4:	fb01 f303 	mul.w	r3, r1, r3
 80016f8:	4413      	add	r3, r2
 80016fa:	333b      	adds	r3, #59	; 0x3b
 80016fc:	2201      	movs	r2, #1
 80016fe:	701a      	strb	r2, [r3, #0]
 8001700:	e008      	b.n	8001714 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	212c      	movs	r1, #44	; 0x2c
 8001708:	fb01 f303 	mul.w	r3, r1, r3
 800170c:	4413      	add	r3, r2
 800170e:	333b      	adds	r3, #59	; 0x3b
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	212c      	movs	r1, #44	; 0x2c
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	4413      	add	r3, r2
 8001720:	333c      	adds	r3, #60	; 0x3c
 8001722:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001726:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	787c      	ldrb	r4, [r7, #1]
 800172e:	78ba      	ldrb	r2, [r7, #2]
 8001730:	78f9      	ldrb	r1, [r7, #3]
 8001732:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001734:	9302      	str	r3, [sp, #8]
 8001736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	4623      	mov	r3, r4
 8001744:	f006 f86c 	bl	8007820 <USB_HC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	bd90      	pop	{r4, r7, pc}

0800175e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <HAL_HCD_HC_Halt+0x1e>
 8001778:	2302      	movs	r3, #2
 800177a:	e00f      	b.n	800179c <HAL_HCD_HC_Halt+0x3e>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f006 fabc 	bl	8007d0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	70fb      	strb	r3, [r7, #3]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70bb      	strb	r3, [r7, #2]
 80017ba:	4613      	mov	r3, r2
 80017bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	333b      	adds	r3, #59	; 0x3b
 80017cc:	78ba      	ldrb	r2, [r7, #2]
 80017ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	212c      	movs	r1, #44	; 0x2c
 80017d6:	fb01 f303 	mul.w	r3, r1, r3
 80017da:	4413      	add	r3, r2
 80017dc:	333f      	adds	r3, #63	; 0x3f
 80017de:	787a      	ldrb	r2, [r7, #1]
 80017e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017e2:	7c3b      	ldrb	r3, [r7, #16]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d112      	bne.n	800180e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2203      	movs	r2, #3
 80017f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	333d      	adds	r3, #61	; 0x3d
 8001808:	7f3a      	ldrb	r2, [r7, #28]
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e008      	b.n	8001820 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001820:	787b      	ldrb	r3, [r7, #1]
 8001822:	2b03      	cmp	r3, #3
 8001824:	f200 80c6 	bhi.w	80019b4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001841 	.word	0x08001841
 8001834:	080019a1 	.word	0x080019a1
 8001838:	080018a5 	.word	0x080018a5
 800183c:	08001923 	.word	0x08001923
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001840:	7c3b      	ldrb	r3, [r7, #16]
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 80b8 	bne.w	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 80b4 	bne.w	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001850:	8b3b      	ldrh	r3, [r7, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d108      	bne.n	8001868 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001856:	78fb      	ldrb	r3, [r7, #3]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	212c      	movs	r1, #44	; 0x2c
 800185c:	fb01 f303 	mul.w	r3, r1, r3
 8001860:	4413      	add	r3, r2
 8001862:	3355      	adds	r3, #85	; 0x55
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	212c      	movs	r1, #44	; 0x2c
 800186e:	fb01 f303 	mul.w	r3, r1, r3
 8001872:	4413      	add	r3, r2
 8001874:	3355      	adds	r3, #85	; 0x55
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	212c      	movs	r1, #44	; 0x2c
 8001882:	fb01 f303 	mul.w	r3, r1, r3
 8001886:	4413      	add	r3, r2
 8001888:	3342      	adds	r3, #66	; 0x42
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800188e:	e093      	b.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3342      	adds	r3, #66	; 0x42
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
      break;
 80018a2:	e089      	b.n	80019b8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018a4:	78bb      	ldrb	r3, [r7, #2]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11d      	bne.n	80018e6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	212c      	movs	r1, #44	; 0x2c
 80018b0:	fb01 f303 	mul.w	r3, r1, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	3355      	adds	r3, #85	; 0x55
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	212c      	movs	r1, #44	; 0x2c
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	4413      	add	r3, r2
 80018ca:	3342      	adds	r3, #66	; 0x42
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018d0:	e073      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3342      	adds	r3, #66	; 0x42
 80018e0:	2202      	movs	r2, #2
 80018e2:	701a      	strb	r2, [r3, #0]
      break;
 80018e4:	e069      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3354      	adds	r3, #84	; 0x54
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	212c      	movs	r1, #44	; 0x2c
 8001900:	fb01 f303 	mul.w	r3, r1, r3
 8001904:	4413      	add	r3, r2
 8001906:	3342      	adds	r3, #66	; 0x42
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
      break;
 800190c:	e055      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	212c      	movs	r1, #44	; 0x2c
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	3342      	adds	r3, #66	; 0x42
 800191c:	2202      	movs	r2, #2
 800191e:	701a      	strb	r2, [r3, #0]
      break;
 8001920:	e04b      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001922:	78bb      	ldrb	r3, [r7, #2]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d11d      	bne.n	8001964 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3355      	adds	r3, #85	; 0x55
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	212c      	movs	r1, #44	; 0x2c
 8001942:	fb01 f303 	mul.w	r3, r1, r3
 8001946:	4413      	add	r3, r2
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800194e:	e034      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	212c      	movs	r1, #44	; 0x2c
 8001956:	fb01 f303 	mul.w	r3, r1, r3
 800195a:	4413      	add	r3, r2
 800195c:	3342      	adds	r3, #66	; 0x42
 800195e:	2202      	movs	r2, #2
 8001960:	701a      	strb	r2, [r3, #0]
      break;
 8001962:	e02a      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	212c      	movs	r1, #44	; 0x2c
 800196a:	fb01 f303 	mul.w	r3, r1, r3
 800196e:	4413      	add	r3, r2
 8001970:	3354      	adds	r3, #84	; 0x54
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d109      	bne.n	800198c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	212c      	movs	r1, #44	; 0x2c
 800197e:	fb01 f303 	mul.w	r3, r1, r3
 8001982:	4413      	add	r3, r2
 8001984:	3342      	adds	r3, #66	; 0x42
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
      break;
 800198a:	e016      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	212c      	movs	r1, #44	; 0x2c
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	4413      	add	r3, r2
 8001998:	3342      	adds	r3, #66	; 0x42
 800199a:	2202      	movs	r2, #2
 800199c:	701a      	strb	r2, [r3, #0]
      break;
 800199e:	e00c      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a0:	78fb      	ldrb	r3, [r7, #3]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	212c      	movs	r1, #44	; 0x2c
 80019a6:	fb01 f303 	mul.w	r3, r1, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	3342      	adds	r3, #66	; 0x42
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
      break;
 80019b2:	e002      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019b4:	bf00      	nop
 80019b6:	e000      	b.n	80019ba <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019b8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	212c      	movs	r1, #44	; 0x2c
 80019c0:	fb01 f303 	mul.w	r3, r1, r3
 80019c4:	4413      	add	r3, r2
 80019c6:	3344      	adds	r3, #68	; 0x44
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	8b3a      	ldrh	r2, [r7, #24]
 80019d0:	6879      	ldr	r1, [r7, #4]
 80019d2:	202c      	movs	r0, #44	; 0x2c
 80019d4:	fb00 f303 	mul.w	r3, r0, r3
 80019d8:	440b      	add	r3, r1
 80019da:	334c      	adds	r3, #76	; 0x4c
 80019dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	212c      	movs	r1, #44	; 0x2c
 80019e4:	fb01 f303 	mul.w	r3, r1, r3
 80019e8:	4413      	add	r3, r2
 80019ea:	3360      	adds	r3, #96	; 0x60
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	212c      	movs	r1, #44	; 0x2c
 80019f6:	fb01 f303 	mul.w	r3, r1, r3
 80019fa:	4413      	add	r3, r2
 80019fc:	3350      	adds	r3, #80	; 0x50
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	212c      	movs	r1, #44	; 0x2c
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3339      	adds	r3, #57	; 0x39
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3361      	adds	r3, #97	; 0x61
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6818      	ldr	r0, [r3, #0]
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	222c      	movs	r2, #44	; 0x2c
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	3338      	adds	r3, #56	; 0x38
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	18d1      	adds	r1, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f006 f810 	bl	8007a64 <USB_HC_StartXfer>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fc9d 	bl	80073a6 <USB_GetMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 80f6 	bne.w	8001c60 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f005 fc01 	bl	8007280 <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80ec 	beq.w	8001c5e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 fbf8 	bl	8007280 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a9a:	d104      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f005 fbe8 	bl	8007280 <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001aba:	d104      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f005 fbd8 	bl	8007280 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ada:	d104      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fbc8 	bl	8007280 <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f005 fbba 	bl	8007280 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b16:	d11c      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b32:	2110      	movs	r1, #16
 8001b34:	6938      	ldr	r0, [r7, #16]
 8001b36:	f004 fb81 	bl	800623c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b3a:	6938      	ldr	r0, [r7, #16]
 8001b3c:	f004 fbb2 	bl	80062a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fda4 	bl	8007694 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f00b f86d 	bl	800cc2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fb92 	bl	8007280 <USB_ReadInterrupts>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b66:	d102      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f001 f89e 	bl	8002caa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 fb84 	bl	8007280 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d106      	bne.n	8001b90 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f00b f836 	bl	800cbf4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fb73 	bl	8007280 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d101      	bne.n	8001ba8 <HAL_HCD_IRQHandler+0x158>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_HCD_IRQHandler+0x15a>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0210 	bic.w	r2, r2, #16
 8001bbc:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 ffa1 	bl	8002b06 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0210 	orr.w	r2, r2, #16
 8001bd2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f005 fb51 	bl	8007280 <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001be8:	d13a      	bne.n	8001c60 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f006 f87a 	bl	8007ce8 <USB_HC_ReadInterrupt>
 8001bf4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e025      	b.n	8001c48 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c26:	d106      	bne.n	8001c36 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8ab 	bl	8001d8a <HCD_HC_IN_IRQHandler>
 8001c34:	e005      	b.n	8001c42 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 fbf9 	bl	8002434 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3d4      	bcc.n	8001bfc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c5a:	615a      	str	r2, [r3, #20]
 8001c5c:	e000      	b.n	8001c60 <HAL_HCD_IRQHandler+0x210>
      return;
 8001c5e:	bf00      	nop
    }
  }
}
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_HCD_Start+0x16>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e013      	b.n	8001ca4 <HAL_HCD_Start+0x3e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 fd66 	bl	800775c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 f905 	bl	8005ea4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_HCD_Stop+0x16>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e00d      	b.n	8001cde <HAL_HCD_Stop+0x32>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f006 f954 	bl	8007f7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f005 fd08 	bl	8007708 <USB_ResetPort>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	212c      	movs	r1, #44	; 0x2c
 8001d14:	fb01 f303 	mul.w	r3, r1, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	781b      	ldrb	r3, [r3, #0]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3350      	adds	r3, #80	; 0x50
 8001d44:	681b      	ldr	r3, [r3, #0]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr

08001d52 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f005 fd4c 	bl	80077fc <USB_GetCurrentFrame>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f005 fd27 	bl	80077ce <USB_GetHostSpeed>
 8001d80:	4603      	mov	r3, r0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	d11a      	bne.n	8001df0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2304      	movs	r3, #4
 8001dca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	212c      	movs	r1, #44	; 0x2c
 8001dd2:	fb01 f303 	mul.w	r3, r1, r3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3361      	adds	r3, #97	; 0x61
 8001dda:	2206      	movs	r2, #6
 8001ddc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f005 ff8e 	bl	8007d0a <USB_HC_Halt>
 8001dee:	e0af      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e06:	d11b      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	212c      	movs	r1, #44	; 0x2c
 8001e22:	fb01 f303 	mul.w	r3, r1, r3
 8001e26:	4413      	add	r3, r2
 8001e28:	3361      	adds	r3, #97	; 0x61
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f005 ff66 	bl	8007d0a <USB_HC_Halt>
 8001e3e:	e087      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0320 	and.w	r3, r3, #32
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d109      	bne.n	8001e6a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	461a      	mov	r2, r3
 8001e64:	2320      	movs	r3, #32
 8001e66:	6093      	str	r3, [r2, #8]
 8001e68:	e072      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	015a      	lsls	r2, r3, #5
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4413      	add	r3, r2
 8001e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d11a      	bne.n	8001eb6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	2308      	movs	r3, #8
 8001e90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3361      	adds	r3, #97	; 0x61
 8001ea0:	2205      	movs	r2, #5
 8001ea2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f005 ff2b 	bl	8007d0a <USB_HC_Halt>
 8001eb4:	e04c      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ecc:	d11b      	bne.n	8001f06 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	461a      	mov	r2, r3
 8001edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	3361      	adds	r3, #97	; 0x61
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f005 ff03 	bl	8007d0a <USB_HC_Halt>
 8001f04:	e024      	b.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	2b80      	cmp	r3, #128	; 0x80
 8001f1a:	d119      	bne.n	8001f50 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	212c      	movs	r1, #44	; 0x2c
 8001f34:	fb01 f303 	mul.w	r3, r1, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	3361      	adds	r3, #97	; 0x61
 8001f3c:	2206      	movs	r2, #6
 8001f3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f005 fedd 	bl	8007d0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f66:	d112      	bne.n	8001f8e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f005 fec9 	bl	8007d0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f8c:	e24e      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	f040 80df 	bne.w	8002164 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d019      	beq.n	8001fe2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	212c      	movs	r1, #44	; 0x2c
 8001fb4:	fb01 f303 	mul.w	r3, r1, r3
 8001fb8:	4413      	add	r3, r2
 8001fba:	3348      	adds	r3, #72	; 0x48
 8001fbc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	202c      	movs	r0, #44	; 0x2c
 8001fd8:	fb00 f303 	mul.w	r3, r0, r3
 8001fdc:	440b      	add	r3, r1
 8001fde:	3350      	adds	r3, #80	; 0x50
 8001fe0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	3361      	adds	r3, #97	; 0x61
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	335c      	adds	r3, #92	; 0x5c
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002012:	461a      	mov	r2, r3
 8002014:	2301      	movs	r3, #1
 8002016:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	333f      	adds	r3, #63	; 0x3f
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	212c      	movs	r1, #44	; 0x2c
 8002032:	fb01 f303 	mul.w	r3, r1, r3
 8002036:	4413      	add	r3, r2
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800203c:	2b02      	cmp	r3, #2
 800203e:	d111      	bne.n	8002064 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	4611      	mov	r1, r2
 800204a:	4618      	mov	r0, r3
 800204c:	f005 fe5d 	bl	8007d0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	461a      	mov	r2, r3
 800205e:	2310      	movs	r3, #16
 8002060:	6093      	str	r3, [r2, #8]
 8002062:	e03a      	b.n	80020da <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333f      	adds	r3, #63	; 0x3f
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b03      	cmp	r3, #3
 8002076:	d009      	beq.n	800208c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	333f      	adds	r3, #63	; 0x3f
 8002086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002088:	2b01      	cmp	r3, #1
 800208a:	d126      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	0151      	lsls	r1, r2, #5
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	440a      	add	r2, r1
 80020a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	212c      	movs	r1, #44	; 0x2c
 80020b2:	fb01 f303 	mul.w	r3, r1, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	3360      	adds	r3, #96	; 0x60
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	b2d9      	uxtb	r1, r3
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	202c      	movs	r0, #44	; 0x2c
 80020c8:	fb00 f303 	mul.w	r3, r0, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3360      	adds	r3, #96	; 0x60
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f00a fdb7 	bl	800cc48 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d12b      	bne.n	800213a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3348      	adds	r3, #72	; 0x48
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	202c      	movs	r0, #44	; 0x2c
 80020f8:	fb00 f202 	mul.w	r2, r0, r2
 80020fc:	440a      	add	r2, r1
 80020fe:	3240      	adds	r2, #64	; 0x40
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	fbb3 f3f2 	udiv	r3, r3, r2
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 818e 	beq.w	800242c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3354      	adds	r3, #84	; 0x54
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3354      	adds	r3, #84	; 0x54
 8002134:	4602      	mov	r2, r0
 8002136:	701a      	strb	r2, [r3, #0]
}
 8002138:	e178      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	212c      	movs	r1, #44	; 0x2c
 8002140:	fb01 f303 	mul.w	r3, r1, r3
 8002144:	4413      	add	r3, r2
 8002146:	3354      	adds	r3, #84	; 0x54
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f083 0301 	eor.w	r3, r3, #1
 800214e:	b2d8      	uxtb	r0, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3354      	adds	r3, #84	; 0x54
 800215e:	4602      	mov	r2, r0
 8002160:	701a      	strb	r2, [r3, #0]
}
 8002162:	e163      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	015a      	lsls	r2, r3, #5
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4413      	add	r3, r2
 800216c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b02      	cmp	r3, #2
 8002178:	f040 80f6 	bne.w	8002368 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	212c      	movs	r1, #44	; 0x2c
 8002182:	fb01 f303 	mul.w	r3, r1, r3
 8002186:	4413      	add	r3, r2
 8002188:	3361      	adds	r3, #97	; 0x61
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d109      	bne.n	80021a4 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3360      	adds	r3, #96	; 0x60
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e0c9      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	212c      	movs	r1, #44	; 0x2c
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3361      	adds	r3, #97	; 0x61
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d109      	bne.n	80021cc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	212c      	movs	r1, #44	; 0x2c
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3360      	adds	r3, #96	; 0x60
 80021c6:	2205      	movs	r2, #5
 80021c8:	701a      	strb	r2, [r3, #0]
 80021ca:	e0b5      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d009      	beq.n	80021f4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3361      	adds	r3, #97	; 0x61
 80021ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d150      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	212c      	movs	r1, #44	; 0x2c
 80021fa:	fb01 f303 	mul.w	r3, r1, r3
 80021fe:	4413      	add	r3, r2
 8002200:	335c      	adds	r3, #92	; 0x5c
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	202c      	movs	r0, #44	; 0x2c
 800220c:	fb00 f303 	mul.w	r3, r0, r3
 8002210:	440b      	add	r3, r1
 8002212:	335c      	adds	r3, #92	; 0x5c
 8002214:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	212c      	movs	r1, #44	; 0x2c
 800221c:	fb01 f303 	mul.w	r3, r1, r3
 8002220:	4413      	add	r3, r2
 8002222:	335c      	adds	r3, #92	; 0x5c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d912      	bls.n	8002250 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	212c      	movs	r1, #44	; 0x2c
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	4413      	add	r3, r2
 8002236:	335c      	adds	r3, #92	; 0x5c
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	212c      	movs	r1, #44	; 0x2c
 8002242:	fb01 f303 	mul.w	r3, r1, r3
 8002246:	4413      	add	r3, r2
 8002248:	3360      	adds	r3, #96	; 0x60
 800224a:	2204      	movs	r2, #4
 800224c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800224e:	e073      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	2202      	movs	r2, #2
 8002260:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4413      	add	r3, r2
 800226a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002278:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002280:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4413      	add	r3, r2
 800228a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002294:	e050      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3361      	adds	r3, #97	; 0x61
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d122      	bne.n	80022f0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	212c      	movs	r1, #44	; 0x2c
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	3360      	adds	r3, #96	; 0x60
 80022b8:	2202      	movs	r2, #2
 80022ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	015a      	lsls	r2, r3, #5
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e023      	b.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	212c      	movs	r1, #44	; 0x2c
 80022f6:	fb01 f303 	mul.w	r3, r1, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	3361      	adds	r3, #97	; 0x61
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b07      	cmp	r3, #7
 8002302:	d119      	bne.n	8002338 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	212c      	movs	r1, #44	; 0x2c
 800230a:	fb01 f303 	mul.w	r3, r1, r3
 800230e:	4413      	add	r3, r2
 8002310:	335c      	adds	r3, #92	; 0x5c
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	202c      	movs	r0, #44	; 0x2c
 800231c:	fb00 f303 	mul.w	r3, r0, r3
 8002320:	440b      	add	r3, r1
 8002322:	335c      	adds	r3, #92	; 0x5c
 8002324:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3360      	adds	r3, #96	; 0x60
 8002334:	2204      	movs	r2, #4
 8002336:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	461a      	mov	r2, r3
 8002346:	2302      	movs	r3, #2
 8002348:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	202c      	movs	r0, #44	; 0x2c
 8002354:	fb00 f303 	mul.w	r3, r0, r3
 8002358:	4413      	add	r3, r2
 800235a:	3360      	adds	r3, #96	; 0x60
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f00a fc71 	bl	800cc48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002366:	e061      	b.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	2b10      	cmp	r3, #16
 800237c:	d156      	bne.n	800242c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	333f      	adds	r3, #63	; 0x3f
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d111      	bne.n	80023b6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f005 fcab 	bl	8007d0a <USB_HC_Halt>
 80023b4:	e031      	b.n	800241a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	212c      	movs	r1, #44	; 0x2c
 80023bc:	fb01 f303 	mul.w	r3, r1, r3
 80023c0:	4413      	add	r3, r2
 80023c2:	333f      	adds	r3, #63	; 0x3f
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d11d      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	335c      	adds	r3, #92	; 0x5c
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d110      	bne.n	800241a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	212c      	movs	r1, #44	; 0x2c
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	4413      	add	r3, r2
 8002404:	3361      	adds	r3, #97	; 0x61
 8002406:	2203      	movs	r2, #3
 8002408:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f005 fc78 	bl	8007d0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	015a      	lsls	r2, r3, #5
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4413      	add	r3, r2
 8002422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002426:	461a      	mov	r2, r3
 8002428:	2310      	movs	r3, #16
 800242a:	6093      	str	r3, [r2, #8]
}
 800242c:	bf00      	nop
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11a      	bne.n	800249a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	2304      	movs	r3, #4
 8002474:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	212c      	movs	r1, #44	; 0x2c
 800247c:	fb01 f303 	mul.w	r3, r1, r3
 8002480:	4413      	add	r3, r2
 8002482:	3361      	adds	r3, #97	; 0x61
 8002484:	2206      	movs	r2, #6
 8002486:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	4611      	mov	r1, r2
 8002492:	4618      	mov	r0, r3
 8002494:	f005 fc39 	bl	8007d0a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002498:	e331      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d12e      	bne.n	800250e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	461a      	mov	r2, r3
 80024be:	2320      	movs	r3, #32
 80024c0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	333d      	adds	r3, #61	; 0x3d
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f040 8313 	bne.w	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	212c      	movs	r1, #44	; 0x2c
 80024de:	fb01 f303 	mul.w	r3, r1, r3
 80024e2:	4413      	add	r3, r2
 80024e4:	333d      	adds	r3, #61	; 0x3d
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3360      	adds	r3, #96	; 0x60
 80024f8:	2202      	movs	r2, #2
 80024fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f005 fbff 	bl	8007d0a <USB_HC_Halt>
}
 800250c:	e2f7      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002524:	d112      	bne.n	800254c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	461a      	mov	r2, r3
 8002534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002538:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f005 fbe0 	bl	8007d0a <USB_HC_Halt>
}
 800254a:	e2d8      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b01      	cmp	r3, #1
 8002560:	d140      	bne.n	80025e4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	335c      	adds	r3, #92	; 0x5c
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	015a      	lsls	r2, r3, #5
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	4413      	add	r3, r2
 800257c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	2b40      	cmp	r3, #64	; 0x40
 8002588:	d111      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333d      	adds	r3, #61	; 0x3d
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2340      	movs	r3, #64	; 0x40
 80025ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	461a      	mov	r2, r3
 80025bc:	2301      	movs	r3, #1
 80025be:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3361      	adds	r3, #97	; 0x61
 80025ce:	2201      	movs	r2, #1
 80025d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fb94 	bl	8007d0a <USB_HC_Halt>
}
 80025e2:	e28c      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f6:	2b40      	cmp	r3, #64	; 0x40
 80025f8:	d12c      	bne.n	8002654 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	2204      	movs	r2, #4
 800260a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	333d      	adds	r3, #61	; 0x3d
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	212c      	movs	r1, #44	; 0x2c
 8002624:	fb01 f303 	mul.w	r3, r1, r3
 8002628:	4413      	add	r3, r2
 800262a:	335c      	adds	r3, #92	; 0x5c
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f005 fb65 	bl	8007d0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264c:	461a      	mov	r2, r3
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	6093      	str	r3, [r2, #8]
}
 8002652:	e254      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b08      	cmp	r3, #8
 8002668:	d11a      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	461a      	mov	r2, r3
 8002678:	2308      	movs	r3, #8
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	; 0x61
 800268a:	2205      	movs	r2, #5
 800268c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	4618      	mov	r0, r3
 800269a:	f005 fb36 	bl	8007d0a <USB_HC_Halt>
}
 800269e:	e22e      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d140      	bne.n	8002738 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	212c      	movs	r1, #44	; 0x2c
 80026bc:	fb01 f303 	mul.w	r3, r1, r3
 80026c0:	4413      	add	r3, r2
 80026c2:	335c      	adds	r3, #92	; 0x5c
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	2203      	movs	r2, #3
 80026d8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	333d      	adds	r3, #61	; 0x3d
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d112      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333c      	adds	r3, #60	; 0x3c
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333d      	adds	r3, #61	; 0x3d
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f005 faf3 	bl	8007d0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	461a      	mov	r2, r3
 8002732:	2310      	movs	r3, #16
 8002734:	6093      	str	r3, [r2, #8]
}
 8002736:	e1e2      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d164      	bne.n	8002818 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d111      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	3361      	adds	r3, #97	; 0x61
 8002764:	2206      	movs	r2, #6
 8002766:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fac9 	bl	8007d0a <USB_HC_Halt>
 8002778:	e044      	b.n	8002804 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	212c      	movs	r1, #44	; 0x2c
 8002780:	fb01 f303 	mul.w	r3, r1, r3
 8002784:	4413      	add	r3, r2
 8002786:	335c      	adds	r3, #92	; 0x5c
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	202c      	movs	r0, #44	; 0x2c
 8002792:	fb00 f303 	mul.w	r3, r0, r3
 8002796:	440b      	add	r3, r1
 8002798:	335c      	adds	r3, #92	; 0x5c
 800279a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	335c      	adds	r3, #92	; 0x5c
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d920      	bls.n	80027f2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	335c      	adds	r3, #92	; 0x5c
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3360      	adds	r3, #96	; 0x60
 80027d0:	2204      	movs	r2, #4
 80027d2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	b2d9      	uxtb	r1, r3
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	202c      	movs	r0, #44	; 0x2c
 80027de:	fb00 f303 	mul.w	r3, r0, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3360      	adds	r3, #96	; 0x60
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	461a      	mov	r2, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f00a fa2c 	bl	800cc48 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027f0:	e008      	b.n	8002804 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3360      	adds	r3, #96	; 0x60
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	461a      	mov	r2, r3
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	6093      	str	r3, [r2, #8]
}
 8002816:	e172      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800282e:	d11b      	bne.n	8002868 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3361      	adds	r3, #97	; 0x61
 800283e:	2208      	movs	r2, #8
 8002840:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f005 fa5c 	bl	8007d0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	461a      	mov	r2, r3
 8002860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002864:	6093      	str	r3, [r2, #8]
}
 8002866:	e14a      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	f040 813f 	bne.w	8002afe <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	212c      	movs	r1, #44	; 0x2c
 8002886:	fb01 f303 	mul.w	r3, r1, r3
 800288a:	4413      	add	r3, r2
 800288c:	3361      	adds	r3, #97	; 0x61
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d17d      	bne.n	8002990 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	333f      	adds	r3, #63	; 0x3f
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d00a      	beq.n	80028d0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	333f      	adds	r3, #63	; 0x3f
 80028c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	f040 8100 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d113      	bne.n	8002900 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3355      	adds	r3, #85	; 0x55
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	f083 0301 	eor.w	r3, r3, #1
 80028ec:	b2d8      	uxtb	r0, r3
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	3355      	adds	r3, #85	; 0x55
 80028fc:	4602      	mov	r2, r0
 80028fe:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b01      	cmp	r3, #1
 8002906:	f040 80e3 	bne.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	212c      	movs	r1, #44	; 0x2c
 8002910:	fb01 f303 	mul.w	r3, r1, r3
 8002914:	4413      	add	r3, r2
 8002916:	334c      	adds	r3, #76	; 0x4c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80d8 	beq.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	212c      	movs	r1, #44	; 0x2c
 8002926:	fb01 f303 	mul.w	r3, r1, r3
 800292a:	4413      	add	r3, r2
 800292c:	334c      	adds	r3, #76	; 0x4c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	202c      	movs	r0, #44	; 0x2c
 8002936:	fb00 f202 	mul.w	r2, r0, r2
 800293a:	440a      	add	r2, r1
 800293c:	3240      	adds	r2, #64	; 0x40
 800293e:	8812      	ldrh	r2, [r2, #0]
 8002940:	4413      	add	r3, r2
 8002942:	3b01      	subs	r3, #1
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	202c      	movs	r0, #44	; 0x2c
 800294a:	fb00 f202 	mul.w	r2, r0, r2
 800294e:	440a      	add	r2, r1
 8002950:	3240      	adds	r2, #64	; 0x40
 8002952:	8812      	ldrh	r2, [r2, #0]
 8002954:	fbb3 f3f2 	udiv	r3, r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80b5 	beq.w	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3355      	adds	r3, #85	; 0x55
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	f083 0301 	eor.w	r3, r3, #1
 800297a:	b2d8      	uxtb	r0, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3355      	adds	r3, #85	; 0x55
 800298a:	4602      	mov	r2, r0
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e09f      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	212c      	movs	r1, #44	; 0x2c
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	3361      	adds	r3, #97	; 0x61
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d109      	bne.n	80029b8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3360      	adds	r3, #96	; 0x60
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e08b      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	212c      	movs	r1, #44	; 0x2c
 80029be:	fb01 f303 	mul.w	r3, r1, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	3361      	adds	r3, #97	; 0x61
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d109      	bne.n	80029e0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3360      	adds	r3, #96	; 0x60
 80029da:	2202      	movs	r2, #2
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e077      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	212c      	movs	r1, #44	; 0x2c
 80029e6:	fb01 f303 	mul.w	r3, r1, r3
 80029ea:	4413      	add	r3, r2
 80029ec:	3361      	adds	r3, #97	; 0x61
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d109      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	212c      	movs	r1, #44	; 0x2c
 80029fa:	fb01 f303 	mul.w	r3, r1, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	3360      	adds	r3, #96	; 0x60
 8002a02:	2205      	movs	r2, #5
 8002a04:	701a      	strb	r2, [r3, #0]
 8002a06:	e063      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b06      	cmp	r3, #6
 8002a1a:	d009      	beq.n	8002a30 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	212c      	movs	r1, #44	; 0x2c
 8002a22:	fb01 f303 	mul.w	r3, r1, r3
 8002a26:	4413      	add	r3, r2
 8002a28:	3361      	adds	r3, #97	; 0x61
 8002a2a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2c:	2b08      	cmp	r3, #8
 8002a2e:	d14f      	bne.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	335c      	adds	r3, #92	; 0x5c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	fb00 f303 	mul.w	r3, r0, r3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	212c      	movs	r1, #44	; 0x2c
 8002a58:	fb01 f303 	mul.w	r3, r1, r3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	335c      	adds	r3, #92	; 0x5c
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d912      	bls.n	8002a8c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	335c      	adds	r3, #92	; 0x5c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	3360      	adds	r3, #96	; 0x60
 8002a86:	2204      	movs	r2, #4
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e021      	b.n	8002ad0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3360      	adds	r3, #96	; 0x60
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ab4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002abc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aca:	461a      	mov	r2, r3
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002adc:	461a      	mov	r2, r3
 8002ade:	2302      	movs	r3, #2
 8002ae0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	b2d9      	uxtb	r1, r3
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	fb00 f303 	mul.w	r3, r0, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3360      	adds	r3, #96	; 0x60
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00a f8a5 	bl	800cc48 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002afe:	bf00      	nop
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b08a      	sub	sp, #40	; 0x28
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	0c5b      	lsrs	r3, r3, #17
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	091b      	lsrs	r3, r3, #4
 8002b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b3a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d004      	beq.n	8002b4c <HCD_RXQLVL_IRQHandler+0x46>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	f000 80a9 	beq.w	8002c9c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b4a:	e0aa      	b.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80a6 	beq.w	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	212c      	movs	r1, #44	; 0x2c
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	4413      	add	r3, r2
 8002b60:	3344      	adds	r3, #68	; 0x44
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 809b 	beq.w	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3350      	adds	r3, #80	; 0x50
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	441a      	add	r2, r3
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	202c      	movs	r0, #44	; 0x2c
 8002b84:	fb00 f303 	mul.w	r3, r0, r3
 8002b88:	440b      	add	r3, r1
 8002b8a:	334c      	adds	r3, #76	; 0x4c
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d87a      	bhi.n	8002c88 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	212c      	movs	r1, #44	; 0x2c
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3344      	adds	r3, #68	; 0x44
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	b292      	uxth	r2, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	f004 f9d4 	bl	8006f58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3344      	adds	r3, #68	; 0x44
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	202c      	movs	r0, #44	; 0x2c
 8002bca:	fb00 f303 	mul.w	r3, r0, r3
 8002bce:	440b      	add	r3, r1
 8002bd0:	3344      	adds	r3, #68	; 0x44
 8002bd2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3350      	adds	r3, #80	; 0x50
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	441a      	add	r2, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	202c      	movs	r0, #44	; 0x2c
 8002bee:	fb00 f303 	mul.w	r3, r0, r3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3350      	adds	r3, #80	; 0x50
 8002bf6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	0cdb      	lsrs	r3, r3, #19
 8002c08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c0c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	212c      	movs	r1, #44	; 0x2c
 8002c14:	fb01 f303 	mul.w	r3, r1, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	3340      	adds	r3, #64	; 0x40
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d13c      	bne.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c42:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c4a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2d8      	uxtb	r0, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	3354      	adds	r3, #84	; 0x54
 8002c82:	4602      	mov	r2, r0
 8002c84:	701a      	strb	r2, [r3, #0]
      break;
 8002c86:	e00b      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	212c      	movs	r1, #44	; 0x2c
 8002c8e:	fb01 f303 	mul.w	r3, r1, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	3360      	adds	r3, #96	; 0x60
 8002c96:	2204      	movs	r2, #4
 8002c98:	701a      	strb	r2, [r3, #0]
      break;
 8002c9a:	e001      	b.n	8002ca0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002c9c:	bf00      	nop
 8002c9e:	e000      	b.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ca0:	bf00      	nop
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3728      	adds	r7, #40	; 0x28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cd6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d10b      	bne.n	8002cfa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d102      	bne.n	8002cf2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f009 ff8f 	bl	800cc10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f043 0302 	orr.w	r3, r3, #2
 8002cf8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0308 	and.w	r3, r3, #8
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d132      	bne.n	8002d6a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f043 0308 	orr.w	r3, r3, #8
 8002d0a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d126      	bne.n	8002d64 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d113      	bne.n	8002d46 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d28:	d106      	bne.n	8002d38 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fcaf 	bl	8007694 <USB_InitFSLSPClkSel>
 8002d36:	e011      	b.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fca8 	bl	8007694 <USB_InitFSLSPClkSel>
 8002d44:	e00a      	b.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d106      	bne.n	8002d5c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d54:	461a      	mov	r2, r3
 8002d56:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d5a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f009 ff81 	bl	800cc64 <HAL_HCD_PortEnabled_Callback>
 8002d62:	e002      	b.n	8002d6a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f009 ff8b 	bl	800cc80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d103      	bne.n	8002d7c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f043 0320 	orr.w	r3, r3, #32
 8002d7a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d92:	b08f      	sub	sp, #60	; 0x3c
 8002d94:	af0a      	add	r7, sp, #40	; 0x28
 8002d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e116      	b.n	8002fd0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f009 faef 	bl	800c3a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d102      	bne.n	8002ddc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 f870 	bl	8005ec6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	687e      	ldr	r6, [r7, #4]
 8002dee:	466d      	mov	r5, sp
 8002df0:	f106 0410 	add.w	r4, r6, #16
 8002df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dfc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e00:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e04:	1d33      	adds	r3, r6, #4
 8002e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e08:	6838      	ldr	r0, [r7, #0]
 8002e0a:	f002 ff47 	bl	8005c9c <USB_CoreInit>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0d7      	b.n	8002fd0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 f85e 	bl	8005ee8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	73fb      	strb	r3, [r7, #15]
 8002e30:	e04a      	b.n	8002ec8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	333d      	adds	r3, #61	; 0x3d
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e46:	7bfa      	ldrb	r2, [r7, #15]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	333c      	adds	r3, #60	; 0x3c
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3344      	adds	r3, #68	; 0x44
 8002e6e:	4602      	mov	r2, r0
 8002e70:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3340      	adds	r3, #64	; 0x40
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3348      	adds	r3, #72	; 0x48
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	334c      	adds	r3, #76	; 0x4c
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3354      	adds	r3, #84	; 0x54
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	7bfa      	ldrb	r2, [r7, #15]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d3af      	bcc.n	8002e32 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
 8002ed6:	e044      	b.n	8002f62 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d3b5      	bcc.n	8002ed8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	603b      	str	r3, [r7, #0]
 8002f72:	687e      	ldr	r6, [r7, #4]
 8002f74:	466d      	mov	r5, sp
 8002f76:	f106 0410 	add.w	r4, r6, #16
 8002f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f8a:	1d33      	adds	r3, r6, #4
 8002f8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f8e:	6838      	ldr	r0, [r7, #0]
 8002f90:	f002 fff6 	bl	8005f80 <USB_DevInit>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e014      	b.n	8002fd0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f001 f974 	bl	80042ac <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f004 f938 	bl	800723e <USB_DevDisconnect>

  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fd8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_PCD_Start+0x1c>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e020      	b.n	8003036 <HAL_PCD_Start+0x5e>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	2b01      	cmp	r3, #1
 8003002:	d109      	bne.n	8003018 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003008:	2b01      	cmp	r3, #1
 800300a:	d005      	beq.n	8003018 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003010:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 ff41 	bl	8005ea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f004 f8e8 	bl	80071fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3710      	adds	r7, #16
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800303e:	b590      	push	{r4, r7, lr}
 8003040:	b08d      	sub	sp, #52	; 0x34
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f004 f9a6 	bl	80073a6 <USB_GetMode>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 84b7 	bne.w	80039d0 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f004 f90a 	bl	8007280 <USB_ReadInterrupts>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 84ad 	beq.w	80039ce <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f004 f8f7 	bl	8007280 <USB_ReadInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b02      	cmp	r3, #2
 800309a:	d107      	bne.n	80030ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f002 0202 	and.w	r2, r2, #2
 80030aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 f8e5 	bl	8007280 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d161      	bne.n	8003184 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699a      	ldr	r2, [r3, #24]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0210 	bic.w	r2, r2, #16
 80030ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f003 020f 	and.w	r2, r3, #15
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	3304      	adds	r3, #4
 80030ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	0c5b      	lsrs	r3, r3, #17
 80030f4:	f003 030f 	and.w	r3, r3, #15
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d124      	bne.n	8003146 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d035      	beq.n	8003174 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003112:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6a38      	ldr	r0, [r7, #32]
 800311c:	f003 ff1c 	bl	8006f58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312c:	441a      	add	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800313e:	441a      	add	r2, r3
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	621a      	str	r2, [r3, #32]
 8003144:	e016      	b.n	8003174 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	0c5b      	lsrs	r3, r3, #17
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	2b06      	cmp	r3, #6
 8003150:	d110      	bne.n	8003174 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003158:	2208      	movs	r2, #8
 800315a:	4619      	mov	r1, r3
 800315c:	6a38      	ldr	r0, [r7, #32]
 800315e:	f003 fefb 	bl	8006f58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	6a1a      	ldr	r2, [r3, #32]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800316e:	441a      	add	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f042 0210 	orr.w	r2, r2, #16
 8003182:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f004 f879 	bl	8007280 <USB_ReadInterrupts>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003198:	f040 80a7 	bne.w	80032ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f004 f87e 	bl	80072a6 <USB_ReadDevAllOutEpInterrupt>
 80031aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031ac:	e099      	b.n	80032e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 808e 	beq.w	80032d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	4611      	mov	r1, r2
 80031c4:	4618      	mov	r0, r3
 80031c6:	f004 f8a2 	bl	800730e <USB_ReadDevOutEPInterrupt>
 80031ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e2:	461a      	mov	r2, r3
 80031e4:	2301      	movs	r3, #1
 80031e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fed8 	bl	8003fa0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	2308      	movs	r3, #8
 800320a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800320c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 ffae 	bl	8004170 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	d008      	beq.n	8003230 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	4413      	add	r3, r2
 8003226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322a:	461a      	mov	r2, r3
 800322c:	2310      	movs	r3, #16
 800322e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d030      	beq.n	800329c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	2b80      	cmp	r3, #128	; 0x80
 8003244:	d109      	bne.n	800325a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003254:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003258:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	78db      	ldrb	r3, [r3, #3]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2200      	movs	r2, #0
 800327c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f009 f9a7 	bl	800c5d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003296:	461a      	mov	r2, r3
 8003298:	2302      	movs	r3, #2
 800329a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	2320      	movs	r3, #32
 80032b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d009      	beq.n	80032d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ce:	461a      	mov	r2, r3
 80032d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	3301      	adds	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f af62 	bne.w	80031ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f003 ffc6 	bl	8007280 <USB_ReadInterrupts>
 80032f4:	4603      	mov	r3, r0
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032fe:	f040 80db 	bne.w	80034b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f003 ffe7 	bl	80072da <USB_ReadDevAllInEpInterrupt>
 800330c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003312:	e0cd      	b.n	80034b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 80c2 	beq.w	80034a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f004 f80d 	bl	800734a <USB_ReadDevInEPInterrupt>
 8003330:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d057      	beq.n	80033ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	43db      	mvns	r3, r3
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800335c:	4013      	ands	r3, r2
 800335e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	461a      	mov	r2, r3
 800336e:	2301      	movs	r3, #1
 8003370:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d132      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	334c      	adds	r3, #76	; 0x4c
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4403      	add	r3, r0
 800339a:	3348      	adds	r3, #72	; 0x48
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4419      	add	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4403      	add	r3, r0
 80033ae:	334c      	adds	r3, #76	; 0x4c
 80033b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d113      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x3a2>
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3354      	adds	r3, #84	; 0x54
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033d8:	461a      	mov	r2, r3
 80033da:	2101      	movs	r1, #1
 80033dc:	f004 f814 	bl	8007408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4619      	mov	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f009 f871 	bl	800c4ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	461a      	mov	r2, r3
 8003404:	2308      	movs	r3, #8
 8003406:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	461a      	mov	r2, r3
 8003420:	2310      	movs	r3, #16
 8003422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343a:	461a      	mov	r2, r3
 800343c:	2340      	movs	r3, #64	; 0x40
 800343e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d023      	beq.n	8003492 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800344a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344c:	6a38      	ldr	r0, [r7, #32]
 800344e:	f002 fef5 	bl	800623c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	3338      	adds	r3, #56	; 0x38
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	3304      	adds	r3, #4
 8003464:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	78db      	ldrb	r3, [r3, #3]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d108      	bne.n	8003480 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2200      	movs	r2, #0
 8003472:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	b2db      	uxtb	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f009 f8be 	bl	800c5fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	461a      	mov	r2, r3
 800348e:	2302      	movs	r3, #2
 8003490:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800349c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fcf0 	bl	8003e84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	3301      	adds	r3, #1
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	085b      	lsrs	r3, r3, #1
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f47f af2e 	bne.w	8003314 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f003 fedf 	bl	8007280 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034cc:	d122      	bne.n	8003514 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d108      	bne.n	80034fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f009 fa26 	bl	800c948 <HAL_PCDEx_LPM_Callback>
 80034fc:	e002      	b.n	8003504 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f009 f85c 	bl	800c5bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f003 feb1 	bl	8007280 <USB_ReadInterrupts>
 800351e:	4603      	mov	r3, r0
 8003520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	d112      	bne.n	8003550 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d102      	bne.n	8003540 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f009 f818 	bl	800c570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800354e:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f003 fe93 	bl	8007280 <USB_ReadInterrupts>
 800355a:	4603      	mov	r3, r0
 800355c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003560:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003564:	d121      	bne.n	80035aa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003574:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d111      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	f003 020f 	and.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800359a:	2101      	movs	r1, #1
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f009 f9d3 	bl	800c948 <HAL_PCDEx_LPM_Callback>
 80035a2:	e002      	b.n	80035aa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f008 ffe3 	bl	800c570 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f003 fe66 	bl	8007280 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	f040 80b7 	bne.w	8003730 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035d0:	f023 0301 	bic.w	r3, r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2110      	movs	r1, #16
 80035dc:	4618      	mov	r0, r3
 80035de:	f002 fe2d 	bl	800623c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035e6:	e046      	b.n	8003676 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	461a      	mov	r2, r3
 80035f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800361a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800362e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	0151      	lsls	r1, r2, #5
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	440a      	add	r2, r1
 8003646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800364a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800364e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	4413      	add	r3, r2
 8003658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	440a      	add	r2, r1
 8003666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800366a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800366e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	3301      	adds	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d3b3      	bcc.n	80035e8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800368e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003692:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	2b00      	cmp	r3, #0
 800369a:	d016      	beq.n	80036ca <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ac:	f043 030b 	orr.w	r3, r3, #11
 80036b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c2:	f043 030b 	orr.w	r3, r3, #11
 80036c6:	6453      	str	r3, [r2, #68]	; 0x44
 80036c8:	e015      	b.n	80036f6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	69fa      	ldr	r2, [r7, #28]
 80036d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f0:	f043 030b 	orr.w	r3, r3, #11
 80036f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003708:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800371a:	461a      	mov	r2, r3
 800371c:	f003 fe74 	bl	8007408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800372e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fda3 	bl	8007280 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003744:	d124      	bne.n	8003790 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f003 fe39 	bl	80073c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4618      	mov	r0, r3
 8003756:	f002 fdee 	bl	8006336 <USB_GetDevSpeed>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681c      	ldr	r4, [r3, #0]
 8003766:	f000 feab 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 800376a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	4620      	mov	r0, r4
 8003776:	f002 faf3 	bl	8005d60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f008 fecf 	bl	800c51e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695a      	ldr	r2, [r3, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800378e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f003 fd73 	bl	8007280 <USB_ReadInterrupts>
 800379a:	4603      	mov	r3, r0
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d10a      	bne.n	80037ba <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f008 feac 	bl	800c502 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 0208 	and.w	r2, r2, #8
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 fd5e 	bl	8007280 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d122      	bne.n	8003814 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e014      	b.n	800380a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fb0f 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	3301      	adds	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003810:	429a      	cmp	r2, r3
 8003812:	d3e5      	bcc.n	80037e0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f003 fd31 	bl	8007280 <USB_ReadInterrupts>
 800381e:	4603      	mov	r3, r0
 8003820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003828:	d13b      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800382a:	2301      	movs	r3, #1
 800382c:	627b      	str	r3, [r7, #36]	; 0x24
 800382e:	e02b      	b.n	8003888 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	3340      	adds	r3, #64	; 0x40
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d115      	bne.n	8003882 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003856:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003858:	2b00      	cmp	r3, #0
 800385a:	da12      	bge.n	8003882 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	4613      	mov	r3, r2
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	440b      	add	r3, r1
 800386a:	333f      	adds	r3, #63	; 0x3f
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003878:	b2db      	uxtb	r3, r3
 800387a:	4619      	mov	r1, r3
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fad0 	bl	8003e22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	3301      	adds	r3, #1
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388e:	429a      	cmp	r2, r3
 8003890:	d3ce      	bcc.n	8003830 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f003 fcea 	bl	8007280 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b6:	d155      	bne.n	8003964 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b8:	2301      	movs	r3, #1
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24
 80038bc:	e045      	b.n	800394a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d12e      	bne.n	8003944 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da2b      	bge.n	8003944 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d121      	bne.n	8003944 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	69fa      	ldr	r2, [r7, #28]
 8003938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800393c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003940:	6053      	str	r3, [r2, #4]
            break;
 8003942:	e007      	b.n	8003954 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	3301      	adds	r3, #1
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003950:	429a      	cmp	r2, r3
 8003952:	d3b4      	bcc.n	80038be <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f003 fc89 	bl	8007280 <USB_ReadInterrupts>
 800396e:	4603      	mov	r3, r0
 8003970:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003978:	d10a      	bne.n	8003990 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f008 fe50 	bl	800c620 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f003 fc73 	bl	8007280 <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0304 	and.w	r3, r3, #4
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d115      	bne.n	80039d0 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f008 fe40 	bl	800c63c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6859      	ldr	r1, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	e000      	b.n	80039d0 <HAL_PCD_IRQHandler+0x992>
      return;
 80039ce:	bf00      	nop
    }
  }
}
 80039d0:	3734      	adds	r7, #52	; 0x34
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd90      	pop	{r4, r7, pc}

080039d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d101      	bne.n	80039f0 <HAL_PCD_SetAddress+0x1a>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e013      	b.n	8003a18 <HAL_PCD_SetAddress+0x42>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	78fa      	ldrb	r2, [r7, #3]
 8003a06:	4611      	mov	r1, r2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f003 fbd1 	bl	80071b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	70fb      	strb	r3, [r7, #3]
 8003a32:	460b      	mov	r3, r1
 8003a34:	803b      	strh	r3, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	da0f      	bge.n	8003a66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	f003 020f 	and.w	r2, r3, #15
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	3338      	adds	r3, #56	; 0x38
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	4413      	add	r3, r2
 8003a5a:	3304      	adds	r3, #4
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2201      	movs	r2, #1
 8003a62:	705a      	strb	r2, [r3, #1]
 8003a64:	e00f      	b.n	8003a86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	f003 020f 	and.w	r2, r3, #15
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a92:	883a      	ldrh	r2, [r7, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	78ba      	ldrb	r2, [r7, #2]
 8003a9c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ab0:	78bb      	ldrb	r3, [r7, #2]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d102      	bne.n	8003abc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_PCD_EP_Open+0xaa>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e00e      	b.n	8003ae8 <HAL_PCD_EP_Open+0xc8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f002 fc51 	bl	8006380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ae6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da0f      	bge.n	8003b24 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	3338      	adds	r3, #56	; 0x38
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	4413      	add	r3, r2
 8003b18:	3304      	adds	r3, #4
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	705a      	strb	r2, [r3, #1]
 8003b22:	e00f      	b.n	8003b44 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_PCD_EP_Close+0x6e>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e00e      	b.n	8003b7c <HAL_PCD_EP_Close+0x8c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fc8f 	bl	8006490 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	460b      	mov	r3, r1
 8003b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	f003 020f 	and.w	r2, r3, #15
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3304      	adds	r3, #4
 8003bac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc6:	7afb      	ldrb	r3, [r7, #11]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d102      	bne.n	8003be0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6979      	ldr	r1, [r7, #20]
 8003bf8:	f002 ff6e 	bl	8006ad8 <USB_EP0StartXfer>
 8003bfc:	e008      	b.n	8003c10 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6979      	ldr	r1, [r7, #20]
 8003c0c:	f002 fd1c 	bl	8006648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	460b      	mov	r3, r1
 8003c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	f003 020f 	and.w	r2, r3, #15
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	3338      	adds	r3, #56	; 0x38
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	3304      	adds	r3, #4
 8003c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	2201      	movs	r2, #1
 8003c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5a:	7afb      	ldrb	r3, [r7, #11]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d102      	bne.n	8003c74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c74:	7afb      	ldrb	r3, [r7, #11]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6979      	ldr	r1, [r7, #20]
 8003c8c:	f002 ff24 	bl	8006ad8 <USB_EP0StartXfer>
 8003c90:	e008      	b.n	8003ca4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	f002 fcd2 	bl	8006648 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b084      	sub	sp, #16
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d901      	bls.n	8003ccc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e050      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da0f      	bge.n	8003cf4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3338      	adds	r3, #56	; 0x38
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	705a      	strb	r2, [r3, #1]
 8003cf2:	e00d      	b.n	8003d10 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	3304      	adds	r3, #4
 8003d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2201      	movs	r2, #1
 8003d14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_EP_SetStall+0x82>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e01e      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xc0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 f962 	bl	8007008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	b2d9      	uxtb	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d5e:	461a      	mov	r2, r3
 8003d60:	f003 fb52 	bl	8007408 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d901      	bls.n	8003d94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e042      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da0f      	bge.n	8003dbc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 020f 	and.w	r2, r3, #15
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3338      	adds	r3, #56	; 0x38
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	705a      	strb	r2, [r3, #1]
 8003dba:	e00f      	b.n	8003ddc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <HAL_PCD_EP_ClrStall+0x86>
 8003df8:	2302      	movs	r3, #2
 8003dfa:	e00e      	b.n	8003e1a <HAL_PCD_EP_ClrStall+0xa4>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68f9      	ldr	r1, [r7, #12]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f003 f96a 	bl	80070e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	da0c      	bge.n	8003e50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	3338      	adds	r3, #56	; 0x38
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e00c      	b.n	8003e6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	f003 020f 	and.w	r2, r3, #15
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68f9      	ldr	r1, [r7, #12]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 ff89 	bl	8006d88 <USB_EPStopXfer>
 8003e76:	4603      	mov	r3, r0
 8003e78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	3338      	adds	r3, #56	; 0x38
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1a      	ldr	r2, [r3, #32]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d901      	bls.n	8003ebc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e06c      	b.n	8003f96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	69fa      	ldr	r2, [r7, #28]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3303      	adds	r3, #3
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ee0:	e02b      	b.n	8003f3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	69fa      	ldr	r2, [r7, #28]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d902      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3303      	adds	r3, #3
 8003f02:	089b      	lsrs	r3, r3, #2
 8003f04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6919      	ldr	r1, [r3, #16]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6978      	ldr	r0, [r7, #20]
 8003f1e:	f002 ffdd 	bl	8006edc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	441a      	add	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	015a      	lsls	r2, r3, #5
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d809      	bhi.n	8003f64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d203      	bcs.n	8003f64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1be      	bne.n	8003ee2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d811      	bhi.n	8003f94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	2201      	movs	r2, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	6939      	ldr	r1, [r7, #16]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3720      	adds	r7, #32
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	333c      	adds	r3, #60	; 0x3c
 8003fb8:	3304      	adds	r3, #4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d17b      	bne.n	80040ce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4a61      	ldr	r2, [pc, #388]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f240 80b9 	bls.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 80b3 	beq.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004002:	461a      	mov	r2, r3
 8004004:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004008:	6093      	str	r3, [r2, #8]
 800400a:	e0a7      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f003 0320 	and.w	r3, r3, #32
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004022:	461a      	mov	r2, r3
 8004024:	2320      	movs	r3, #32
 8004026:	6093      	str	r3, [r2, #8]
 8004028:	e098      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004030:	2b00      	cmp	r3, #0
 8004032:	f040 8093 	bne.w	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	4a4b      	ldr	r2, [pc, #300]	; (8004168 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d90f      	bls.n	800405e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	461a      	mov	r2, r3
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	6093      	str	r3, [r2, #8]
 800405c:	e07e      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	69da      	ldr	r2, [r3, #28]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	0159      	lsls	r1, r3, #5
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	440b      	add	r3, r1
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408a:	1ad2      	subs	r2, r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d114      	bne.n	80040c0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040a8:	461a      	mov	r2, r3
 80040aa:	2101      	movs	r1, #1
 80040ac:	f003 f9ac 	bl	8007408 <USB_EP0_OutStart>
 80040b0:	e006      	b.n	80040c0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	441a      	add	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4619      	mov	r1, r3
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f008 f9e6 	bl	800c498 <HAL_PCD_DataOutStageCallback>
 80040cc:	e046      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d124      	bne.n	8004120 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00a      	beq.n	80040f6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	461a      	mov	r2, r3
 80040ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f2:	6093      	str	r3, [r2, #8]
 80040f4:	e032      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0320 	and.w	r3, r3, #32
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2320      	movs	r3, #32
 8004110:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f008 f9bd 	bl	800c498 <HAL_PCD_DataOutStageCallback>
 800411e:	e01d      	b.n	800415c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d108      	bne.n	8004150 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004148:	461a      	mov	r2, r3
 800414a:	2100      	movs	r1, #0
 800414c:	f003 f95c 	bl	8007408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	4619      	mov	r1, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f008 f99e 	bl	800c498 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	4f54300a 	.word	0x4f54300a
 800416c:	4f54310a 	.word	0x4f54310a

08004170 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	333c      	adds	r3, #60	; 0x3c
 8004188:	3304      	adds	r3, #4
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90e      	bls.n	80041c4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f008 f955 	bl	800c474 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4a0a      	ldr	r2, [pc, #40]	; (80041f8 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d90c      	bls.n	80041ec <PCD_EP_OutSetupPacket_int+0x7c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d108      	bne.n	80041ec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041e4:	461a      	mov	r2, r3
 80041e6:	2101      	movs	r1, #1
 80041e8:	f003 f90e 	bl	8007408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	4f54300a 	.word	0x4f54300a

080041fc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
 8004208:	4613      	mov	r3, r2
 800420a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d107      	bne.n	800422a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800421a:	883b      	ldrh	r3, [r7, #0]
 800421c:	0419      	lsls	r1, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	430a      	orrs	r2, r1
 8004226:	629a      	str	r2, [r3, #40]	; 0x28
 8004228:	e028      	b.n	800427c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004238:	2300      	movs	r3, #0
 800423a:	73fb      	strb	r3, [r7, #15]
 800423c:	e00d      	b.n	800425a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	3340      	adds	r3, #64	; 0x40
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	3301      	adds	r3, #1
 8004258:	73fb      	strb	r3, [r7, #15]
 800425a:	7bfa      	ldrb	r2, [r7, #15]
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	3b01      	subs	r3, #1
 8004260:	429a      	cmp	r2, r3
 8004262:	d3ec      	bcc.n	800423e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004264:	883b      	ldrh	r3, [r7, #0]
 8004266:	0418      	lsls	r0, r3, #16
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6819      	ldr	r1, [r3, #0]
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	3b01      	subs	r3, #1
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	4302      	orrs	r2, r0
 8004274:	3340      	adds	r3, #64	; 0x40
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	887a      	ldrh	r2, [r7, #2]
 800429c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042de:	f043 0303 	orr.w	r3, r3, #3
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3714      	adds	r7, #20
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0cc      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 030f 	and.w	r3, r3, #15
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	429a      	cmp	r2, r3
 8004314:	d90c      	bls.n	8004330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004316:	4b65      	ldr	r3, [pc, #404]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e0b8      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004348:	4b59      	ldr	r3, [pc, #356]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a58      	ldr	r2, [pc, #352]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d005      	beq.n	800436c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004360:	4b53      	ldr	r3, [pc, #332]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	4a52      	ldr	r2, [pc, #328]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800436a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436c:	4b50      	ldr	r3, [pc, #320]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	494d      	ldr	r1, [pc, #308]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d044      	beq.n	8004414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d107      	bne.n	80043a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b47      	ldr	r3, [pc, #284]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d119      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e07f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b2:	4b3f      	ldr	r3, [pc, #252]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d109      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e06f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c2:	4b3b      	ldr	r3, [pc, #236]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e067      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4934      	ldr	r1, [pc, #208]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e4:	f7fc fd90 	bl	8000f08 <HAL_GetTick>
 80043e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ec:	f7fc fd8c 	bl	8000f08 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e04f      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 020c 	and.w	r2, r3, #12
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	429a      	cmp	r2, r3
 8004412:	d1eb      	bne.n	80043ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004414:	4b25      	ldr	r3, [pc, #148]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	429a      	cmp	r2, r3
 8004420:	d20c      	bcs.n	800443c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	429a      	cmp	r2, r3
 8004436:	d001      	beq.n	800443c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e032      	b.n	80044a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d008      	beq.n	800445a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004448:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4916      	ldr	r1, [pc, #88]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	4313      	orrs	r3, r2
 8004458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d009      	beq.n	800447a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004466:	4b12      	ldr	r3, [pc, #72]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	490e      	ldr	r1, [pc, #56]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800447a:	f000 fb7f 	bl	8004b7c <HAL_RCC_GetSysClockFreq>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	490a      	ldr	r1, [pc, #40]	; (80044b4 <HAL_RCC_ClockConfig+0x1c0>)
 800448c:	5ccb      	ldrb	r3, [r1, r3]
 800448e:	fa22 f303 	lsr.w	r3, r2, r3
 8004492:	4a09      	ldr	r2, [pc, #36]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fcf0 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00
 80044b0:	40023800 	.word	0x40023800
 80044b4:	0800da80 	.word	0x0800da80
 80044b8:	20000000 	.word	0x20000000
 80044bc:	20000004 	.word	0x20000004

080044c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044c6:	681b      	ldr	r3, [r3, #0]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000000 	.word	0x20000000

080044d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044dc:	f7ff fff0 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	4903      	ldr	r1, [pc, #12]	; (80044fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	0800da90 	.word	0x0800da90

08004500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004504:	f7ff ffdc 	bl	80044c0 <HAL_RCC_GetHCLKFreq>
 8004508:	4602      	mov	r2, r0
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	0b5b      	lsrs	r3, r3, #13
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004516:	5ccb      	ldrb	r3, [r1, r3]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40023800 	.word	0x40023800
 8004524:	0800da90 	.word	0x0800da90

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	; 0x30
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004530:	2300      	movs	r3, #0
 8004532:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004560:	4b6f      	ldr	r3, [pc, #444]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004566:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	496c      	ldr	r1, [pc, #432]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800457e:	2301      	movs	r3, #1
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d010      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800458e:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004594:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	4960      	ldr	r1, [pc, #384]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80045ac:	2301      	movs	r3, #1
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045bc:	4b58      	ldr	r3, [pc, #352]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ca:	4955      	ldr	r1, [pc, #340]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d101      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80045dc:	2301      	movs	r3, #1
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80045e8:	2301      	movs	r3, #1
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d017      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f8:	4b49      	ldr	r3, [pc, #292]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	4946      	ldr	r1, [pc, #280]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004616:	d101      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004618:	2301      	movs	r3, #1
 800461a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 808a 	beq.w	800474a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a38      	ldr	r2, [pc, #224]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004652:	4b34      	ldr	r3, [pc, #208]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a33      	ldr	r2, [pc, #204]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800465e:	f7fc fc53 	bl	8000f08 <HAL_GetTick>
 8004662:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004666:	f7fc fc4f 	bl	8000f08 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e278      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004678:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004684:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800468c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d02f      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	6a3a      	ldr	r2, [r7, #32]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d028      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046aa:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046ae:	2201      	movs	r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046b2:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046be:	4b18      	ldr	r3, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d114      	bne.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fc fc1d 	bl	8000f08 <HAL_GetTick>
 80046ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fc fc19 	bl	8000f08 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e240      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004700:	d114      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004716:	4902      	ldr	r1, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
 800471c:	e00c      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800471e:	bf00      	nop
 8004720:	40023800 	.word	0x40023800
 8004724:	40007000 	.word	0x40007000
 8004728:	42470e40 	.word	0x42470e40
 800472c:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4a49      	ldr	r2, [pc, #292]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004732:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004736:	6093      	str	r3, [r2, #8]
 8004738:	4b47      	ldr	r3, [pc, #284]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800473a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	4944      	ldr	r1, [pc, #272]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004746:	4313      	orrs	r3, r2
 8004748:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d004      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800475c:	4b3f      	ldr	r3, [pc, #252]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800475e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800476e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	4937      	ldr	r1, [pc, #220]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800478e:	4b32      	ldr	r3, [pc, #200]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004794:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	492e      	ldr	r1, [pc, #184]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d011      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047b0:	4b29      	ldr	r3, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	4926      	ldr	r1, [pc, #152]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ce:	d101      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80047d0:	2301      	movs	r3, #1
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80047e0:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ee:	491a      	ldr	r1, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d011      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004802:	4b15      	ldr	r3, [pc, #84]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004808:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004810:	4911      	ldr	r1, [pc, #68]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004820:	d101      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	2b01      	cmp	r3, #1
 800482a:	d005      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004834:	f040 80ff 	bne.w	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004838:	4b09      	ldr	r3, [pc, #36]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800483e:	f7fc fb63 	bl	8000f08 <HAL_GetTick>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004844:	e00e      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004846:	f7fc fb5f 	bl	8000f08 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d907      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e188      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004858:	40023800 	.word	0x40023800
 800485c:	424711e0 	.word	0x424711e0
 8004860:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004864:	4b7e      	ldr	r3, [pc, #504]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ea      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	2b00      	cmp	r3, #0
 8004882:	d009      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800488c:	2b00      	cmp	r3, #0
 800488e:	d028      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d124      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004898:	4b71      	ldr	r3, [pc, #452]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489e:	0c1b      	lsrs	r3, r3, #16
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	3301      	adds	r3, #1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048aa:	4b6d      	ldr	r3, [pc, #436]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b0:	0e1b      	lsrs	r3, r3, #24
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	019b      	lsls	r3, r3, #6
 80048c2:	431a      	orrs	r2, r3
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	3b01      	subs	r3, #1
 80048ca:	041b      	lsls	r3, r3, #16
 80048cc:	431a      	orrs	r2, r3
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	061b      	lsls	r3, r3, #24
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	071b      	lsls	r3, r3, #28
 80048da:	4961      	ldr	r1, [pc, #388]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d004      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004900:	2b00      	cmp	r3, #0
 8004902:	d035      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800490c:	d130      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800490e:	4b54      	ldr	r3, [pc, #336]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004914:	0c1b      	lsrs	r3, r3, #16
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	3301      	adds	r3, #1
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004920:	4b4f      	ldr	r3, [pc, #316]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004926:	0f1b      	lsrs	r3, r3, #28
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	019b      	lsls	r3, r3, #6
 8004938:	431a      	orrs	r2, r3
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	085b      	lsrs	r3, r3, #1
 800493e:	3b01      	subs	r3, #1
 8004940:	041b      	lsls	r3, r3, #16
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	061b      	lsls	r3, r3, #24
 800494a:	431a      	orrs	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	071b      	lsls	r3, r3, #28
 8004950:	4943      	ldr	r1, [pc, #268]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004958:	4b41      	ldr	r3, [pc, #260]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800495a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495e:	f023 021f 	bic.w	r2, r3, #31
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	493d      	ldr	r1, [pc, #244]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d029      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004984:	d124      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004986:	4b36      	ldr	r3, [pc, #216]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	3301      	adds	r3, #1
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004998:	4b31      	ldr	r3, [pc, #196]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800499a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499e:	0f1b      	lsrs	r3, r3, #28
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	019b      	lsls	r3, r3, #6
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	3b01      	subs	r3, #1
 80049ba:	041b      	lsls	r3, r3, #16
 80049bc:	431a      	orrs	r2, r3
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	061b      	lsls	r3, r3, #24
 80049c2:	431a      	orrs	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	071b      	lsls	r3, r3, #28
 80049c8:	4925      	ldr	r1, [pc, #148]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d016      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	4917      	ldr	r1, [pc, #92]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a0a:	4b16      	ldr	r3, [pc, #88]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fc fa7a 	bl	8000f08 <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a18:	f7fc fa76 	bl	8000f08 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e09f      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 8095 	bne.w	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a3e:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a44:	f7fc fa60 	bl	8000f08 <HAL_GetTick>
 8004a48:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a4c:	f7fc fa5c 	bl	8000f08 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d908      	bls.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e085      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800
 8004a64:	42470068 	.word	0x42470068
 8004a68:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a6c:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a78:	d0e8      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02b      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d127      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004aa2:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699a      	ldr	r2, [r3, #24]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	019b      	lsls	r3, r3, #6
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	041b      	lsls	r3, r3, #16
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	4928      	ldr	r1, [pc, #160]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ade:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	021b      	lsls	r3, r3, #8
 8004aea:	4922      	ldr	r1, [pc, #136]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d01d      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b06:	d118      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b08:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	0e1b      	lsrs	r3, r3, #24
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	019b      	lsls	r3, r3, #6
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	085b      	lsrs	r3, r3, #1
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	041b      	lsls	r3, r3, #16
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	061b      	lsls	r3, r3, #24
 8004b32:	4910      	ldr	r1, [pc, #64]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b3a:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b40:	f7fc f9e2 	bl	8000f08 <HAL_GetTick>
 8004b44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b48:	f7fc f9de 	bl	8000f08 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e007      	b.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b66:	d1ef      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3730      	adds	r7, #48	; 0x30
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	40023800 	.word	0x40023800
 8004b78:	42470070 	.word	0x42470070

08004b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b80:	b0ae      	sub	sp, #184	; 0xb8
 8004b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ba2:	4bcb      	ldr	r3, [pc, #812]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 030c 	and.w	r3, r3, #12
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	f200 8206 	bhi.w	8004fbc <HAL_RCC_GetSysClockFreq+0x440>
 8004bb0:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004fbd 	.word	0x08004fbd
 8004bc0:	08004fbd 	.word	0x08004fbd
 8004bc4:	08004fbd 	.word	0x08004fbd
 8004bc8:	08004bf5 	.word	0x08004bf5
 8004bcc:	08004fbd 	.word	0x08004fbd
 8004bd0:	08004fbd 	.word	0x08004fbd
 8004bd4:	08004fbd 	.word	0x08004fbd
 8004bd8:	08004bfd 	.word	0x08004bfd
 8004bdc:	08004fbd 	.word	0x08004fbd
 8004be0:	08004fbd 	.word	0x08004fbd
 8004be4:	08004fbd 	.word	0x08004fbd
 8004be8:	08004ded 	.word	0x08004ded
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bec:	4bb9      	ldr	r3, [pc, #740]	; (8004ed4 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004bf2:	e1e7      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf4:	4bb8      	ldr	r3, [pc, #736]	; (8004ed8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004bfa:	e1e3      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4bb4      	ldr	r3, [pc, #720]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c08:	4bb1      	ldr	r3, [pc, #708]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d071      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c14:	4bae      	ldr	r3, [pc, #696]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	099b      	lsrs	r3, r3, #6
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c20:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c30:	2300      	movs	r3, #0
 8004c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c3a:	4622      	mov	r2, r4
 8004c3c:	462b      	mov	r3, r5
 8004c3e:	f04f 0000 	mov.w	r0, #0
 8004c42:	f04f 0100 	mov.w	r1, #0
 8004c46:	0159      	lsls	r1, r3, #5
 8004c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c4c:	0150      	lsls	r0, r2, #5
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4621      	mov	r1, r4
 8004c54:	1a51      	subs	r1, r2, r1
 8004c56:	6439      	str	r1, [r7, #64]	; 0x40
 8004c58:	4629      	mov	r1, r5
 8004c5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c6c:	4649      	mov	r1, r9
 8004c6e:	018b      	lsls	r3, r1, #6
 8004c70:	4641      	mov	r1, r8
 8004c72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c76:	4641      	mov	r1, r8
 8004c78:	018a      	lsls	r2, r1, #6
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	1a51      	subs	r1, r2, r1
 8004c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c80:	4649      	mov	r1, r9
 8004c82:	eb63 0301 	sbc.w	r3, r3, r1
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004c94:	4649      	mov	r1, r9
 8004c96:	00cb      	lsls	r3, r1, #3
 8004c98:	4641      	mov	r1, r8
 8004c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c9e:	4641      	mov	r1, r8
 8004ca0:	00ca      	lsls	r2, r1, #3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	4622      	mov	r2, r4
 8004caa:	189b      	adds	r3, r3, r2
 8004cac:	633b      	str	r3, [r7, #48]	; 0x30
 8004cae:	462b      	mov	r3, r5
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	eb42 0303 	adc.w	r3, r2, r3
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	024b      	lsls	r3, r1, #9
 8004cc8:	4621      	mov	r1, r4
 8004cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cce:	4621      	mov	r1, r4
 8004cd0:	024a      	lsls	r2, r1, #9
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ce4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004ce8:	f7fb fae2 	bl	80002b0 <__aeabi_uldivmod>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cf6:	e067      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf8:	4b75      	ldr	r3, [pc, #468]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d04:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d12:	2300      	movs	r3, #0
 8004d14:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d16:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d1a:	4622      	mov	r2, r4
 8004d1c:	462b      	mov	r3, r5
 8004d1e:	f04f 0000 	mov.w	r0, #0
 8004d22:	f04f 0100 	mov.w	r1, #0
 8004d26:	0159      	lsls	r1, r3, #5
 8004d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d2c:	0150      	lsls	r0, r2, #5
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4621      	mov	r1, r4
 8004d34:	1a51      	subs	r1, r2, r1
 8004d36:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d38:	4629      	mov	r1, r5
 8004d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	018b      	lsls	r3, r1, #6
 8004d50:	4641      	mov	r1, r8
 8004d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d56:	4641      	mov	r1, r8
 8004d58:	018a      	lsls	r2, r1, #6
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d60:	4649      	mov	r1, r9
 8004d62:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d72:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7a:	4692      	mov	sl, r2
 8004d7c:	469b      	mov	fp, r3
 8004d7e:	4623      	mov	r3, r4
 8004d80:	eb1a 0303 	adds.w	r3, sl, r3
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	462b      	mov	r3, r5
 8004d88:	eb4b 0303 	adc.w	r3, fp, r3
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	028b      	lsls	r3, r1, #10
 8004d9e:	4621      	mov	r1, r4
 8004da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004da4:	4621      	mov	r1, r4
 8004da6:	028a      	lsls	r2, r1, #10
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004db0:	2200      	movs	r2, #0
 8004db2:	673b      	str	r3, [r7, #112]	; 0x70
 8004db4:	677a      	str	r2, [r7, #116]	; 0x74
 8004db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dba:	f7fb fa79 	bl	80002b0 <__aeabi_uldivmod>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc8:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004dea:	e0eb      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dec:	4b38      	ldr	r3, [pc, #224]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df8:	4b35      	ldr	r3, [pc, #212]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d06b      	beq.n	8004edc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e04:	4b32      	ldr	r3, [pc, #200]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	099b      	lsrs	r3, r3, #6
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e16:	663b      	str	r3, [r7, #96]	; 0x60
 8004e18:	2300      	movs	r3, #0
 8004e1a:	667b      	str	r3, [r7, #100]	; 0x64
 8004e1c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	f04f 0000 	mov.w	r0, #0
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	0159      	lsls	r1, r3, #5
 8004e2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e32:	0150      	lsls	r0, r2, #5
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4621      	mov	r1, r4
 8004e3a:	1a51      	subs	r1, r2, r1
 8004e3c:	61b9      	str	r1, [r7, #24]
 8004e3e:	4629      	mov	r1, r5
 8004e40:	eb63 0301 	sbc.w	r3, r3, r1
 8004e44:	61fb      	str	r3, [r7, #28]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e52:	4659      	mov	r1, fp
 8004e54:	018b      	lsls	r3, r1, #6
 8004e56:	4651      	mov	r1, sl
 8004e58:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e5c:	4651      	mov	r1, sl
 8004e5e:	018a      	lsls	r2, r1, #6
 8004e60:	4651      	mov	r1, sl
 8004e62:	ebb2 0801 	subs.w	r8, r2, r1
 8004e66:	4659      	mov	r1, fp
 8004e68:	eb63 0901 	sbc.w	r9, r3, r1
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e80:	4690      	mov	r8, r2
 8004e82:	4699      	mov	r9, r3
 8004e84:	4623      	mov	r3, r4
 8004e86:	eb18 0303 	adds.w	r3, r8, r3
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	462b      	mov	r3, r5
 8004e8e:	eb49 0303 	adc.w	r3, r9, r3
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	f04f 0200 	mov.w	r2, #0
 8004e98:	f04f 0300 	mov.w	r3, #0
 8004e9c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	024b      	lsls	r3, r1, #9
 8004ea4:	4621      	mov	r1, r4
 8004ea6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eaa:	4621      	mov	r1, r4
 8004eac:	024a      	lsls	r2, r1, #9
 8004eae:	4610      	mov	r0, r2
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004eba:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ebc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ec0:	f7fb f9f6 	bl	80002b0 <__aeabi_uldivmod>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4613      	mov	r3, r2
 8004eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ece:	e065      	b.n	8004f9c <HAL_RCC_GetSysClockFreq+0x420>
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004edc:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	099b      	lsrs	r3, r3, #6
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004eec:	653b      	str	r3, [r7, #80]	; 0x50
 8004eee:	2300      	movs	r3, #0
 8004ef0:	657b      	str	r3, [r7, #84]	; 0x54
 8004ef2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004ef6:	4642      	mov	r2, r8
 8004ef8:	464b      	mov	r3, r9
 8004efa:	f04f 0000 	mov.w	r0, #0
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	0159      	lsls	r1, r3, #5
 8004f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f08:	0150      	lsls	r0, r2, #5
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4641      	mov	r1, r8
 8004f10:	1a51      	subs	r1, r2, r1
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	4649      	mov	r1, r9
 8004f16:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f28:	4659      	mov	r1, fp
 8004f2a:	018b      	lsls	r3, r1, #6
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f32:	4651      	mov	r1, sl
 8004f34:	018a      	lsls	r2, r1, #6
 8004f36:	4651      	mov	r1, sl
 8004f38:	1a54      	subs	r4, r2, r1
 8004f3a:	4659      	mov	r1, fp
 8004f3c:	eb63 0501 	sbc.w	r5, r3, r1
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 0300 	mov.w	r3, #0
 8004f48:	00eb      	lsls	r3, r5, #3
 8004f4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4e:	00e2      	lsls	r2, r4, #3
 8004f50:	4614      	mov	r4, r2
 8004f52:	461d      	mov	r5, r3
 8004f54:	4643      	mov	r3, r8
 8004f56:	18e3      	adds	r3, r4, r3
 8004f58:	603b      	str	r3, [r7, #0]
 8004f5a:	464b      	mov	r3, r9
 8004f5c:	eb45 0303 	adc.w	r3, r5, r3
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f6e:	4629      	mov	r1, r5
 8004f70:	028b      	lsls	r3, r1, #10
 8004f72:	4621      	mov	r1, r4
 8004f74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f78:	4621      	mov	r1, r4
 8004f7a:	028a      	lsls	r2, r1, #10
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f84:	2200      	movs	r2, #0
 8004f86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f88:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f8a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f8e:	f7fb f98f 	bl	80002b0 <__aeabi_uldivmod>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4613      	mov	r3, r2
 8004f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x458>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	0f1b      	lsrs	r3, r3, #28
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004faa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fba:	e003      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	37b8      	adds	r7, #184	; 0xb8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e28d      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8083 	beq.w	8005102 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ffc:	4b94      	ldr	r3, [pc, #592]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b04      	cmp	r3, #4
 8005006:	d019      	beq.n	800503c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005008:	4b91      	ldr	r3, [pc, #580]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005010:	2b08      	cmp	r3, #8
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005014:	4b8e      	ldr	r3, [pc, #568]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005020:	d00c      	beq.n	800503c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005022:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d112      	bne.n	8005054 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502e:	4b88      	ldr	r3, [pc, #544]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800503a:	d10b      	bne.n	8005054 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	4b84      	ldr	r3, [pc, #528]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d05b      	beq.n	8005100 <HAL_RCC_OscConfig+0x124>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d157      	bne.n	8005100 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e25a      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800505c:	d106      	bne.n	800506c <HAL_RCC_OscConfig+0x90>
 800505e:	4b7c      	ldr	r3, [pc, #496]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a7b      	ldr	r2, [pc, #492]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e01d      	b.n	80050a8 <HAL_RCC_OscConfig+0xcc>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005074:	d10c      	bne.n	8005090 <HAL_RCC_OscConfig+0xb4>
 8005076:	4b76      	ldr	r3, [pc, #472]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a75      	ldr	r2, [pc, #468]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800507c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	4b73      	ldr	r3, [pc, #460]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a72      	ldr	r2, [pc, #456]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00b      	b.n	80050a8 <HAL_RCC_OscConfig+0xcc>
 8005090:	4b6f      	ldr	r3, [pc, #444]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a6e      	ldr	r2, [pc, #440]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	4b6c      	ldr	r3, [pc, #432]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6b      	ldr	r2, [pc, #428]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80050a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fb ff2a 	bl	8000f08 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b8:	f7fb ff26 	bl	8000f08 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b64      	cmp	r3, #100	; 0x64
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e21f      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b61      	ldr	r3, [pc, #388]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0xdc>
 80050d6:	e014      	b.n	8005102 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fb ff16 	bl	8000f08 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050e0:	f7fb ff12 	bl	8000f08 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b64      	cmp	r3, #100	; 0x64
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e20b      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	4b57      	ldr	r3, [pc, #348]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f0      	bne.n	80050e0 <HAL_RCC_OscConfig+0x104>
 80050fe:	e000      	b.n	8005102 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d06f      	beq.n	80051ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800510e:	4b50      	ldr	r3, [pc, #320]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b00      	cmp	r3, #0
 8005118:	d017      	beq.n	800514a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800511a:	4b4d      	ldr	r3, [pc, #308]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005122:	2b08      	cmp	r3, #8
 8005124:	d105      	bne.n	8005132 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005126:	4b4a      	ldr	r3, [pc, #296]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005132:	4b47      	ldr	r3, [pc, #284]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d11c      	bne.n	8005178 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b44      	ldr	r3, [pc, #272]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d116      	bne.n	8005178 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800514a:	4b41      	ldr	r3, [pc, #260]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <HAL_RCC_OscConfig+0x186>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e1d3      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005162:	4b3b      	ldr	r3, [pc, #236]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	4937      	ldr	r1, [pc, #220]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005176:	e03a      	b.n	80051ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d020      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005180:	4b34      	ldr	r3, [pc, #208]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 8005182:	2201      	movs	r2, #1
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005186:	f7fb febf 	bl	8000f08 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800518e:	f7fb febb 	bl	8000f08 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e1b4      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a0:	4b2b      	ldr	r3, [pc, #172]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b28      	ldr	r3, [pc, #160]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4925      	ldr	r1, [pc, #148]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	600b      	str	r3, [r1, #0]
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <HAL_RCC_OscConfig+0x278>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fb fe9e 	bl	8000f08 <HAL_GetTick>
 80051cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d0:	f7fb fe9a 	bl	8000f08 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e193      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051e2:	4b1b      	ldr	r3, [pc, #108]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f0      	bne.n	80051d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d036      	beq.n	8005268 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d016      	beq.n	8005230 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005202:	4b15      	ldr	r3, [pc, #84]	; (8005258 <HAL_RCC_OscConfig+0x27c>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005208:	f7fb fe7e 	bl	8000f08 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005210:	f7fb fe7a 	bl	8000f08 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e173      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005222:	4b0b      	ldr	r3, [pc, #44]	; (8005250 <HAL_RCC_OscConfig+0x274>)
 8005224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x234>
 800522e:	e01b      	b.n	8005268 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005230:	4b09      	ldr	r3, [pc, #36]	; (8005258 <HAL_RCC_OscConfig+0x27c>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005236:	f7fb fe67 	bl	8000f08 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800523c:	e00e      	b.n	800525c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523e:	f7fb fe63 	bl	8000f08 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d907      	bls.n	800525c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e15c      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
 8005250:	40023800 	.word	0x40023800
 8005254:	42470000 	.word	0x42470000
 8005258:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800525c:	4b8a      	ldr	r3, [pc, #552]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800525e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1ea      	bne.n	800523e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8097 	beq.w	80053a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b83      	ldr	r3, [pc, #524]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10f      	bne.n	80052a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60bb      	str	r3, [r7, #8]
 800528a:	4b7f      	ldr	r3, [pc, #508]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800528c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528e:	4a7e      	ldr	r2, [pc, #504]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005294:	6413      	str	r3, [r2, #64]	; 0x40
 8005296:	4b7c      	ldr	r3, [pc, #496]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529e:	60bb      	str	r3, [r7, #8]
 80052a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052a2:	2301      	movs	r3, #1
 80052a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a6:	4b79      	ldr	r3, [pc, #484]	; (800548c <HAL_RCC_OscConfig+0x4b0>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d118      	bne.n	80052e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052b2:	4b76      	ldr	r3, [pc, #472]	; (800548c <HAL_RCC_OscConfig+0x4b0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a75      	ldr	r2, [pc, #468]	; (800548c <HAL_RCC_OscConfig+0x4b0>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052be:	f7fb fe23 	bl	8000f08 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c6:	f7fb fe1f 	bl	8000f08 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e118      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d8:	4b6c      	ldr	r3, [pc, #432]	; (800548c <HAL_RCC_OscConfig+0x4b0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0f0      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d106      	bne.n	80052fa <HAL_RCC_OscConfig+0x31e>
 80052ec:	4b66      	ldr	r3, [pc, #408]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4a65      	ldr	r2, [pc, #404]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 80052f2:	f043 0301 	orr.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
 80052f8:	e01c      	b.n	8005334 <HAL_RCC_OscConfig+0x358>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b05      	cmp	r3, #5
 8005300:	d10c      	bne.n	800531c <HAL_RCC_OscConfig+0x340>
 8005302:	4b61      	ldr	r3, [pc, #388]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005306:	4a60      	ldr	r2, [pc, #384]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005308:	f043 0304 	orr.w	r3, r3, #4
 800530c:	6713      	str	r3, [r2, #112]	; 0x70
 800530e:	4b5e      	ldr	r3, [pc, #376]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a5d      	ldr	r2, [pc, #372]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
 800531a:	e00b      	b.n	8005334 <HAL_RCC_OscConfig+0x358>
 800531c:	4b5a      	ldr	r3, [pc, #360]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800531e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005320:	4a59      	ldr	r2, [pc, #356]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	6713      	str	r3, [r2, #112]	; 0x70
 8005328:	4b57      	ldr	r3, [pc, #348]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a56      	ldr	r2, [pc, #344]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800532e:	f023 0304 	bic.w	r3, r3, #4
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d015      	beq.n	8005368 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533c:	f7fb fde4 	bl	8000f08 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005344:	f7fb fde0 	bl	8000f08 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0d7      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535a:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0ee      	beq.n	8005344 <HAL_RCC_OscConfig+0x368>
 8005366:	e014      	b.n	8005392 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fb fdce 	bl	8000f08 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536e:	e00a      	b.n	8005386 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005370:	f7fb fdca 	bl	8000f08 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	f241 3288 	movw	r2, #5000	; 0x1388
 800537e:	4293      	cmp	r3, r2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e0c1      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005386:	4b40      	ldr	r3, [pc, #256]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1ee      	bne.n	8005370 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005392:	7dfb      	ldrb	r3, [r7, #23]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d105      	bne.n	80053a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005398:	4b3b      	ldr	r3, [pc, #236]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	4a3a      	ldr	r2, [pc, #232]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800539e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80ad 	beq.w	8005508 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ae:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d060      	beq.n	800547c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d145      	bne.n	800544e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b33      	ldr	r3, [pc, #204]	; (8005490 <HAL_RCC_OscConfig+0x4b4>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fb fd9e 	bl	8000f08 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fb fd9a 	bl	8000f08 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e093      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	69da      	ldr	r2, [r3, #28]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fc:	019b      	lsls	r3, r3, #6
 80053fe:	431a      	orrs	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005404:	085b      	lsrs	r3, r3, #1
 8005406:	3b01      	subs	r3, #1
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	491b      	ldr	r1, [pc, #108]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 800541c:	4313      	orrs	r3, r2
 800541e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005420:	4b1b      	ldr	r3, [pc, #108]	; (8005490 <HAL_RCC_OscConfig+0x4b4>)
 8005422:	2201      	movs	r2, #1
 8005424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005426:	f7fb fd6f 	bl	8000f08 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800542e:	f7fb fd6b 	bl	8000f08 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e064      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005440:	4b11      	ldr	r3, [pc, #68]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x452>
 800544c:	e05c      	b.n	8005508 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544e:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_OscConfig+0x4b4>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb fd58 	bl	8000f08 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800545c:	f7fb fd54 	bl	8000f08 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e04d      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_OscConfig+0x4ac>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x480>
 800547a:	e045      	b.n	8005508 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d107      	bne.n	8005494 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e040      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
 8005488:	40023800 	.word	0x40023800
 800548c:	40007000 	.word	0x40007000
 8005490:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005494:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <HAL_RCC_OscConfig+0x538>)
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d030      	beq.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d129      	bne.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d122      	bne.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054c4:	4013      	ands	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d119      	bne.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	085b      	lsrs	r3, r3, #1
 80054dc:	3b01      	subs	r3, #1
 80054de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d10f      	bne.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d107      	bne.n	8005504 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40023800 	.word	0x40023800

08005518 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e03f      	b.n	80055aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d106      	bne.n	8005544 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb fb7c 	bl	8000c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2224      	movs	r2, #36	; 0x24
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800555a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f929 	bl	80057b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005570:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005580:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005590:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b08a      	sub	sp, #40	; 0x28
 80055b6:	af02      	add	r7, sp, #8
 80055b8:	60f8      	str	r0, [r7, #12]
 80055ba:	60b9      	str	r1, [r7, #8]
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	4613      	mov	r3, r2
 80055c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b20      	cmp	r3, #32
 80055d0:	d17c      	bne.n	80056cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_UART_Transmit+0x2c>
 80055d8:	88fb      	ldrh	r3, [r7, #6]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e075      	b.n	80056ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_UART_Transmit+0x3e>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e06e      	b.n	80056ce <HAL_UART_Transmit+0x11c>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2221      	movs	r2, #33	; 0x21
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005606:	f7fb fc7f 	bl	8000f08 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d108      	bne.n	8005634 <HAL_UART_Transmit+0x82>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d104      	bne.n	8005634 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61bb      	str	r3, [r7, #24]
 8005632:	e003      	b.n	800563c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005644:	e02a      	b.n	800569c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	2200      	movs	r2, #0
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 f840 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e036      	b.n	80056ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10b      	bne.n	800567e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	3302      	adds	r3, #2
 800567a:	61bb      	str	r3, [r7, #24]
 800567c:	e007      	b.n	800568e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	3301      	adds	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1cf      	bne.n	8005646 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2140      	movs	r1, #64	; 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f810 	bl	80056d6 <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b090      	sub	sp, #64	; 0x40
 80056da:	af00      	add	r7, sp, #0
 80056dc:	60f8      	str	r0, [r7, #12]
 80056de:	60b9      	str	r1, [r7, #8]
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	4613      	mov	r3, r2
 80056e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e6:	e050      	b.n	800578a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ee:	d04c      	beq.n	800578a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f6:	f7fb fc07 	bl	8000f08 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005702:	429a      	cmp	r2, r3
 8005704:	d241      	bcs.n	800578a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005726:	637a      	str	r2, [r7, #52]	; 0x34
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	613b      	str	r3, [r7, #16]
   return(result);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	63bb      	str	r3, [r7, #56]	; 0x38
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800575a:	623a      	str	r2, [r7, #32]
 800575c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	61bb      	str	r3, [r7, #24]
   return(result);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e00f      	b.n	80057aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4013      	ands	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	bf0c      	ite	eq
 800579a:	2301      	moveq	r3, #1
 800579c:	2300      	movne	r3, #0
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	461a      	mov	r2, r3
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d09f      	beq.n	80056e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3740      	adds	r7, #64	; 0x40
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b8:	b0c0      	sub	sp, #256	; 0x100
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	68d9      	ldr	r1, [r3, #12]
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	ea40 0301 	orr.w	r3, r0, r1
 80057dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	431a      	orrs	r2, r3
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800580c:	f021 010c 	bic.w	r1, r1, #12
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581a:	430b      	orrs	r3, r1
 800581c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	6999      	ldr	r1, [r3, #24]
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	ea40 0301 	orr.w	r3, r0, r1
 800583a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	4b8f      	ldr	r3, [pc, #572]	; (8005a80 <UART_SetConfig+0x2cc>)
 8005844:	429a      	cmp	r2, r3
 8005846:	d005      	beq.n	8005854 <UART_SetConfig+0xa0>
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b8d      	ldr	r3, [pc, #564]	; (8005a84 <UART_SetConfig+0x2d0>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d104      	bne.n	800585e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005854:	f7fe fe54 	bl	8004500 <HAL_RCC_GetPCLK2Freq>
 8005858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800585c:	e003      	b.n	8005866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800585e:	f7fe fe3b 	bl	80044d8 <HAL_RCC_GetPCLK1Freq>
 8005862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586a:	69db      	ldr	r3, [r3, #28]
 800586c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005870:	f040 810c 	bne.w	8005a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005878:	2200      	movs	r2, #0
 800587a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800587e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005886:	4622      	mov	r2, r4
 8005888:	462b      	mov	r3, r5
 800588a:	1891      	adds	r1, r2, r2
 800588c:	65b9      	str	r1, [r7, #88]	; 0x58
 800588e:	415b      	adcs	r3, r3
 8005890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005896:	4621      	mov	r1, r4
 8005898:	eb12 0801 	adds.w	r8, r2, r1
 800589c:	4629      	mov	r1, r5
 800589e:	eb43 0901 	adc.w	r9, r3, r1
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	f04f 0300 	mov.w	r3, #0
 80058aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058b6:	4690      	mov	r8, r2
 80058b8:	4699      	mov	r9, r3
 80058ba:	4623      	mov	r3, r4
 80058bc:	eb18 0303 	adds.w	r3, r8, r3
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c4:	462b      	mov	r3, r5
 80058c6:	eb49 0303 	adc.w	r3, r9, r3
 80058ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058e2:	460b      	mov	r3, r1
 80058e4:	18db      	adds	r3, r3, r3
 80058e6:	653b      	str	r3, [r7, #80]	; 0x50
 80058e8:	4613      	mov	r3, r2
 80058ea:	eb42 0303 	adc.w	r3, r2, r3
 80058ee:	657b      	str	r3, [r7, #84]	; 0x54
 80058f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058f8:	f7fa fcda 	bl	80002b0 <__aeabi_uldivmod>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	4b61      	ldr	r3, [pc, #388]	; (8005a88 <UART_SetConfig+0x2d4>)
 8005902:	fba3 2302 	umull	r2, r3, r3, r2
 8005906:	095b      	lsrs	r3, r3, #5
 8005908:	011c      	lsls	r4, r3, #4
 800590a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800590e:	2200      	movs	r2, #0
 8005910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800591c:	4642      	mov	r2, r8
 800591e:	464b      	mov	r3, r9
 8005920:	1891      	adds	r1, r2, r2
 8005922:	64b9      	str	r1, [r7, #72]	; 0x48
 8005924:	415b      	adcs	r3, r3
 8005926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800592c:	4641      	mov	r1, r8
 800592e:	eb12 0a01 	adds.w	sl, r2, r1
 8005932:	4649      	mov	r1, r9
 8005934:	eb43 0b01 	adc.w	fp, r3, r1
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800594c:	4692      	mov	sl, r2
 800594e:	469b      	mov	fp, r3
 8005950:	4643      	mov	r3, r8
 8005952:	eb1a 0303 	adds.w	r3, sl, r3
 8005956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595a:	464b      	mov	r3, r9
 800595c:	eb4b 0303 	adc.w	r3, fp, r3
 8005960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005978:	460b      	mov	r3, r1
 800597a:	18db      	adds	r3, r3, r3
 800597c:	643b      	str	r3, [r7, #64]	; 0x40
 800597e:	4613      	mov	r3, r2
 8005980:	eb42 0303 	adc.w	r3, r2, r3
 8005984:	647b      	str	r3, [r7, #68]	; 0x44
 8005986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800598a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800598e:	f7fa fc8f 	bl	80002b0 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4611      	mov	r1, r2
 8005998:	4b3b      	ldr	r3, [pc, #236]	; (8005a88 <UART_SetConfig+0x2d4>)
 800599a:	fba3 2301 	umull	r2, r3, r3, r1
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2264      	movs	r2, #100	; 0x64
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	1acb      	subs	r3, r1, r3
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059ae:	4b36      	ldr	r3, [pc, #216]	; (8005a88 <UART_SetConfig+0x2d4>)
 80059b0:	fba3 2302 	umull	r2, r3, r3, r2
 80059b4:	095b      	lsrs	r3, r3, #5
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059bc:	441c      	add	r4, r3
 80059be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d0:	4642      	mov	r2, r8
 80059d2:	464b      	mov	r3, r9
 80059d4:	1891      	adds	r1, r2, r2
 80059d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059d8:	415b      	adcs	r3, r3
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e0:	4641      	mov	r1, r8
 80059e2:	1851      	adds	r1, r2, r1
 80059e4:	6339      	str	r1, [r7, #48]	; 0x30
 80059e6:	4649      	mov	r1, r9
 80059e8:	414b      	adcs	r3, r1
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059f8:	4659      	mov	r1, fp
 80059fa:	00cb      	lsls	r3, r1, #3
 80059fc:	4651      	mov	r1, sl
 80059fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a02:	4651      	mov	r1, sl
 8005a04:	00ca      	lsls	r2, r1, #3
 8005a06:	4610      	mov	r0, r2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a14:	464b      	mov	r3, r9
 8005a16:	460a      	mov	r2, r1
 8005a18:	eb42 0303 	adc.w	r3, r2, r3
 8005a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a34:	460b      	mov	r3, r1
 8005a36:	18db      	adds	r3, r3, r3
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	eb42 0303 	adc.w	r3, r2, r3
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a4a:	f7fa fc31 	bl	80002b0 <__aeabi_uldivmod>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <UART_SetConfig+0x2d4>)
 8005a54:	fba3 1302 	umull	r1, r3, r3, r2
 8005a58:	095b      	lsrs	r3, r3, #5
 8005a5a:	2164      	movs	r1, #100	; 0x64
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	3332      	adds	r3, #50	; 0x32
 8005a66:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <UART_SetConfig+0x2d4>)
 8005a68:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6c:	095b      	lsrs	r3, r3, #5
 8005a6e:	f003 0207 	and.w	r2, r3, #7
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4422      	add	r2, r4
 8005a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a7c:	e105      	b.n	8005c8a <UART_SetConfig+0x4d6>
 8005a7e:	bf00      	nop
 8005a80:	40011000 	.word	0x40011000
 8005a84:	40011400 	.word	0x40011400
 8005a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a90:	2200      	movs	r2, #0
 8005a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	1891      	adds	r1, r2, r2
 8005aa4:	6239      	str	r1, [r7, #32]
 8005aa6:	415b      	adcs	r3, r3
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aae:	4641      	mov	r1, r8
 8005ab0:	1854      	adds	r4, r2, r1
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	eb43 0501 	adc.w	r5, r3, r1
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	f04f 0300 	mov.w	r3, #0
 8005ac0:	00eb      	lsls	r3, r5, #3
 8005ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ac6:	00e2      	lsls	r2, r4, #3
 8005ac8:	4614      	mov	r4, r2
 8005aca:	461d      	mov	r5, r3
 8005acc:	4643      	mov	r3, r8
 8005ace:	18e3      	adds	r3, r4, r3
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	eb45 0303 	adc.w	r3, r5, r3
 8005ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	f04f 0300 	mov.w	r3, #0
 8005af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005afa:	4629      	mov	r1, r5
 8005afc:	008b      	lsls	r3, r1, #2
 8005afe:	4621      	mov	r1, r4
 8005b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b04:	4621      	mov	r1, r4
 8005b06:	008a      	lsls	r2, r1, #2
 8005b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b0c:	f7fa fbd0 	bl	80002b0 <__aeabi_uldivmod>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4b60      	ldr	r3, [pc, #384]	; (8005c98 <UART_SetConfig+0x4e4>)
 8005b16:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1a:	095b      	lsrs	r3, r3, #5
 8005b1c:	011c      	lsls	r4, r3, #4
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b30:	4642      	mov	r2, r8
 8005b32:	464b      	mov	r3, r9
 8005b34:	1891      	adds	r1, r2, r2
 8005b36:	61b9      	str	r1, [r7, #24]
 8005b38:	415b      	adcs	r3, r3
 8005b3a:	61fb      	str	r3, [r7, #28]
 8005b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b40:	4641      	mov	r1, r8
 8005b42:	1851      	adds	r1, r2, r1
 8005b44:	6139      	str	r1, [r7, #16]
 8005b46:	4649      	mov	r1, r9
 8005b48:	414b      	adcs	r3, r1
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	f04f 0200 	mov.w	r2, #0
 8005b50:	f04f 0300 	mov.w	r3, #0
 8005b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b58:	4659      	mov	r1, fp
 8005b5a:	00cb      	lsls	r3, r1, #3
 8005b5c:	4651      	mov	r1, sl
 8005b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b62:	4651      	mov	r1, sl
 8005b64:	00ca      	lsls	r2, r1, #3
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	4642      	mov	r2, r8
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b74:	464b      	mov	r3, r9
 8005b76:	460a      	mov	r2, r1
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b98:	4649      	mov	r1, r9
 8005b9a:	008b      	lsls	r3, r1, #2
 8005b9c:	4641      	mov	r1, r8
 8005b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba2:	4641      	mov	r1, r8
 8005ba4:	008a      	lsls	r2, r1, #2
 8005ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005baa:	f7fa fb81 	bl	80002b0 <__aeabi_uldivmod>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4b39      	ldr	r3, [pc, #228]	; (8005c98 <UART_SetConfig+0x4e4>)
 8005bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	2164      	movs	r1, #100	; 0x64
 8005bbc:	fb01 f303 	mul.w	r3, r1, r3
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	011b      	lsls	r3, r3, #4
 8005bc4:	3332      	adds	r3, #50	; 0x32
 8005bc6:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <UART_SetConfig+0x4e4>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd2:	441c      	add	r4, r3
 8005bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bd8:	2200      	movs	r2, #0
 8005bda:	673b      	str	r3, [r7, #112]	; 0x70
 8005bdc:	677a      	str	r2, [r7, #116]	; 0x74
 8005bde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005be2:	4642      	mov	r2, r8
 8005be4:	464b      	mov	r3, r9
 8005be6:	1891      	adds	r1, r2, r2
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	415b      	adcs	r3, r3
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	1851      	adds	r1, r2, r1
 8005bf6:	6039      	str	r1, [r7, #0]
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	414b      	adcs	r3, r1
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c0a:	4659      	mov	r1, fp
 8005c0c:	00cb      	lsls	r3, r1, #3
 8005c0e:	4651      	mov	r1, sl
 8005c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c14:	4651      	mov	r1, sl
 8005c16:	00ca      	lsls	r2, r1, #3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4642      	mov	r2, r8
 8005c20:	189b      	adds	r3, r3, r2
 8005c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c24:	464b      	mov	r3, r9
 8005c26:	460a      	mov	r2, r1
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	663b      	str	r3, [r7, #96]	; 0x60
 8005c38:	667a      	str	r2, [r7, #100]	; 0x64
 8005c3a:	f04f 0200 	mov.w	r2, #0
 8005c3e:	f04f 0300 	mov.w	r3, #0
 8005c42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c46:	4649      	mov	r1, r9
 8005c48:	008b      	lsls	r3, r1, #2
 8005c4a:	4641      	mov	r1, r8
 8005c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c50:	4641      	mov	r1, r8
 8005c52:	008a      	lsls	r2, r1, #2
 8005c54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c58:	f7fa fb2a 	bl	80002b0 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4b0d      	ldr	r3, [pc, #52]	; (8005c98 <UART_SetConfig+0x4e4>)
 8005c62:	fba3 1302 	umull	r1, r3, r3, r2
 8005c66:	095b      	lsrs	r3, r3, #5
 8005c68:	2164      	movs	r1, #100	; 0x64
 8005c6a:	fb01 f303 	mul.w	r3, r1, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	3332      	adds	r3, #50	; 0x32
 8005c74:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <UART_SetConfig+0x4e4>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	f003 020f 	and.w	r2, r3, #15
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4422      	add	r2, r4
 8005c88:	609a      	str	r2, [r3, #8]
}
 8005c8a:	bf00      	nop
 8005c8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c90:	46bd      	mov	sp, r7
 8005c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c96:	bf00      	nop
 8005c98:	51eb851f 	.word	0x51eb851f

08005c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 001c 	add.w	r0, r7, #28
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d122      	bne.n	8005cfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d105      	bne.n	8005cee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fbe8 	bl	80074c4 <USB_CoreReset>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	73fb      	strb	r3, [r7, #15]
 8005cf8:	e01a      	b.n	8005d30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fbdc 	bl	80074c4 <USB_CoreReset>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
 8005d22:	e005      	b.n	8005d30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10b      	bne.n	8005d4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f043 0206 	orr.w	r2, r3, #6
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d5a:	b004      	add	sp, #16
 8005d5c:	4770      	bx	lr
	...

08005d60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d165      	bne.n	8005e40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	4a41      	ldr	r2, [pc, #260]	; (8005e7c <USB_SetTurnaroundTime+0x11c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d906      	bls.n	8005d8a <USB_SetTurnaroundTime+0x2a>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4a40      	ldr	r2, [pc, #256]	; (8005e80 <USB_SetTurnaroundTime+0x120>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d202      	bcs.n	8005d8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d84:	230f      	movs	r3, #15
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e062      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4a3c      	ldr	r2, [pc, #240]	; (8005e80 <USB_SetTurnaroundTime+0x120>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d306      	bcc.n	8005da0 <USB_SetTurnaroundTime+0x40>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4a3b      	ldr	r2, [pc, #236]	; (8005e84 <USB_SetTurnaroundTime+0x124>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d202      	bcs.n	8005da0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005d9a:	230e      	movs	r3, #14
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e057      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <USB_SetTurnaroundTime+0x124>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d306      	bcc.n	8005db6 <USB_SetTurnaroundTime+0x56>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	4a37      	ldr	r2, [pc, #220]	; (8005e88 <USB_SetTurnaroundTime+0x128>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d202      	bcs.n	8005db6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005db0:	230d      	movs	r3, #13
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e04c      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a33      	ldr	r2, [pc, #204]	; (8005e88 <USB_SetTurnaroundTime+0x128>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d306      	bcc.n	8005dcc <USB_SetTurnaroundTime+0x6c>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	4a32      	ldr	r2, [pc, #200]	; (8005e8c <USB_SetTurnaroundTime+0x12c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d802      	bhi.n	8005dcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dc6:	230c      	movs	r3, #12
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	e041      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a2f      	ldr	r2, [pc, #188]	; (8005e8c <USB_SetTurnaroundTime+0x12c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d906      	bls.n	8005de2 <USB_SetTurnaroundTime+0x82>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4a2e      	ldr	r2, [pc, #184]	; (8005e90 <USB_SetTurnaroundTime+0x130>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d802      	bhi.n	8005de2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ddc:	230b      	movs	r3, #11
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e036      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <USB_SetTurnaroundTime+0x130>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d906      	bls.n	8005df8 <USB_SetTurnaroundTime+0x98>
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <USB_SetTurnaroundTime+0x134>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d802      	bhi.n	8005df8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005df2:	230a      	movs	r3, #10
 8005df4:	617b      	str	r3, [r7, #20]
 8005df6:	e02b      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <USB_SetTurnaroundTime+0x134>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d906      	bls.n	8005e0e <USB_SetTurnaroundTime+0xae>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <USB_SetTurnaroundTime+0x138>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d202      	bcs.n	8005e0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e08:	2309      	movs	r3, #9
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e020      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <USB_SetTurnaroundTime+0x138>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d306      	bcc.n	8005e24 <USB_SetTurnaroundTime+0xc4>
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4a20      	ldr	r2, [pc, #128]	; (8005e9c <USB_SetTurnaroundTime+0x13c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d802      	bhi.n	8005e24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e1e:	2308      	movs	r3, #8
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e015      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <USB_SetTurnaroundTime+0x13c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d906      	bls.n	8005e3a <USB_SetTurnaroundTime+0xda>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <USB_SetTurnaroundTime+0x140>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d202      	bcs.n	8005e3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e34:	2307      	movs	r3, #7
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e00a      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e3a:	2306      	movs	r3, #6
 8005e3c:	617b      	str	r3, [r7, #20]
 8005e3e:	e007      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e40:	79fb      	ldrb	r3, [r7, #7]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d102      	bne.n	8005e4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e46:	2309      	movs	r3, #9
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e001      	b.n	8005e50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e4c:	2309      	movs	r3, #9
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68da      	ldr	r2, [r3, #12]
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	029b      	lsls	r3, r3, #10
 8005e64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	00d8acbf 	.word	0x00d8acbf
 8005e80:	00e4e1c0 	.word	0x00e4e1c0
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	01067380 	.word	0x01067380
 8005e8c:	011a499f 	.word	0x011a499f
 8005e90:	01312cff 	.word	0x01312cff
 8005e94:	014ca43f 	.word	0x014ca43f
 8005e98:	016e3600 	.word	0x016e3600
 8005e9c:	01a6ab1f 	.word	0x01a6ab1f
 8005ea0:	01e84800 	.word	0x01e84800

08005ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f043 0201 	orr.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b083      	sub	sp, #12
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f023 0201 	bic.w	r2, r3, #1
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d115      	bne.n	8005f36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f16:	2001      	movs	r0, #1
 8005f18:	f7fb f802 	bl	8000f20 <HAL_Delay>
      ms++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f001 fa3f 	bl	80073a6 <USB_GetMode>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d01e      	beq.n	8005f6c <USB_SetCurrentMode+0x84>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b31      	cmp	r3, #49	; 0x31
 8005f32:	d9f0      	bls.n	8005f16 <USB_SetCurrentMode+0x2e>
 8005f34:	e01a      	b.n	8005f6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f36:	78fb      	ldrb	r3, [r7, #3]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d115      	bne.n	8005f68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f7fa ffe9 	bl	8000f20 <HAL_Delay>
      ms++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f001 fa26 	bl	80073a6 <USB_GetMode>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <USB_SetCurrentMode+0x84>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b31      	cmp	r3, #49	; 0x31
 8005f64:	d9f0      	bls.n	8005f48 <USB_SetCurrentMode+0x60>
 8005f66:	e001      	b.n	8005f6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e005      	b.n	8005f78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b32      	cmp	r3, #50	; 0x32
 8005f70:	d101      	bne.n	8005f76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f80:	b084      	sub	sp, #16
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b086      	sub	sp, #24
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
 8005f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	e009      	b.n	8005fb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	3340      	adds	r3, #64	; 0x40
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b0e      	cmp	r3, #14
 8005fb8:	d9f2      	bls.n	8005fa0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d11c      	bne.n	8005ffa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fce:	f043 0302 	orr.w	r3, r3, #2
 8005fd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	e005      	b.n	8006006 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800600c:	461a      	mov	r2, r3
 800600e:	2300      	movs	r3, #0
 8006010:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	4619      	mov	r1, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006020:	461a      	mov	r2, r3
 8006022:	680b      	ldr	r3, [r1, #0]
 8006024:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	2b01      	cmp	r3, #1
 800602a:	d10c      	bne.n	8006046 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800602c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d104      	bne.n	800603c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006032:	2100      	movs	r1, #0
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f965 	bl	8006304 <USB_SetDevSpeed>
 800603a:	e008      	b.n	800604e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800603c:	2101      	movs	r1, #1
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f960 	bl	8006304 <USB_SetDevSpeed>
 8006044:	e003      	b.n	800604e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006046:	2103      	movs	r1, #3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f95b 	bl	8006304 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800604e:	2110      	movs	r1, #16
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f8f3 	bl	800623c <USB_FlushTxFifo>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f91f 	bl	80062a4 <USB_FlushRxFifo>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006076:	461a      	mov	r2, r3
 8006078:	2300      	movs	r3, #0
 800607a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e043      	b.n	8006122 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b0:	d118      	bne.n	80060e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c4:	461a      	mov	r2, r3
 80060c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e013      	b.n	80060f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060da:	461a      	mov	r2, r3
 80060dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e008      	b.n	80060f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	461a      	mov	r2, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800611a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	3301      	adds	r3, #1
 8006120:	613b      	str	r3, [r7, #16]
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	d3b7      	bcc.n	800609a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800612a:	2300      	movs	r3, #0
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	e043      	b.n	80061b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006146:	d118      	bne.n	800617a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615a:	461a      	mov	r2, r3
 800615c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e013      	b.n	800618c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	461a      	mov	r2, r3
 8006172:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e008      	b.n	800618c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006186:	461a      	mov	r2, r3
 8006188:	2300      	movs	r3, #0
 800618a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	015a      	lsls	r2, r3, #5
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4413      	add	r3, r2
 8006194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006198:	461a      	mov	r2, r3
 800619a:	2300      	movs	r3, #0
 800619c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	461a      	mov	r2, r3
 80061ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d3b7      	bcc.n	8006130 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d105      	bne.n	80061f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f043 0210 	orr.w	r2, r3, #16
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	4b0f      	ldr	r3, [pc, #60]	; (8006238 <USB_DevInit+0x2b8>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f043 0208 	orr.w	r2, r3, #8
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006214:	2b01      	cmp	r3, #1
 8006216:	d107      	bne.n	8006228 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006220:	f043 0304 	orr.w	r3, r3, #4
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006228:	7dfb      	ldrb	r3, [r7, #23]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3718      	adds	r7, #24
 800622e:	46bd      	mov	sp, r7
 8006230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006234:	b004      	add	sp, #16
 8006236:	4770      	bx	lr
 8006238:	803c3800 	.word	0x803c3800

0800623c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3301      	adds	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <USB_FlushTxFifo+0x64>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d901      	bls.n	800625c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e01b      	b.n	8006294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	daf2      	bge.n	800624a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	019b      	lsls	r3, r3, #6
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <USB_FlushTxFifo+0x64>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d901      	bls.n	8006286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e006      	b.n	8006294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0320 	and.w	r3, r3, #32
 800628e:	2b20      	cmp	r3, #32
 8006290:	d0f0      	beq.n	8006274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	00030d40 	.word	0x00030d40

080062a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a11      	ldr	r2, [pc, #68]	; (8006300 <USB_FlushRxFifo+0x5c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e018      	b.n	80062f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	daf2      	bge.n	80062b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2210      	movs	r2, #16
 80062d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4a08      	ldr	r2, [pc, #32]	; (8006300 <USB_FlushRxFifo+0x5c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d901      	bls.n	80062e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e006      	b.n	80062f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d0f0      	beq.n	80062d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	00030d40 	.word	0x00030d40

08006304 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631a:	681a      	ldr	r2, [r3, #0]
 800631c:	78fb      	ldrb	r3, [r7, #3]
 800631e:	68f9      	ldr	r1, [r7, #12]
 8006320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006324:	4313      	orrs	r3, r2
 8006326:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b087      	sub	sp, #28
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 0306 	and.w	r3, r3, #6
 800634e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]
 800635a:	e00a      	b.n	8006372 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d002      	beq.n	8006368 <USB_GetDevSpeed+0x32>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b06      	cmp	r3, #6
 8006366:	d102      	bne.n	800636e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006368:	2302      	movs	r3, #2
 800636a:	75fb      	strb	r3, [r7, #23]
 800636c:	e001      	b.n	8006372 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800636e:	230f      	movs	r3, #15
 8006370:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
}
 8006374:	4618      	mov	r0, r3
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d13a      	bne.n	8006412 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	2101      	movs	r1, #1
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	68f9      	ldr	r1, [r7, #12]
 80063b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063ba:	4313      	orrs	r3, r2
 80063bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d155      	bne.n	8006480 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	791b      	ldrb	r3, [r3, #4]
 80063ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	059b      	lsls	r3, r3, #22
 80063f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063f8:	4313      	orrs	r3, r2
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e036      	b.n	8006480 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	2101      	movs	r1, #1
 8006424:	fa01 f303 	lsl.w	r3, r1, r3
 8006428:	041b      	lsls	r3, r3, #16
 800642a:	68f9      	ldr	r1, [r7, #12]
 800642c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006430:	4313      	orrs	r3, r2
 8006432:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d11a      	bne.n	8006480 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	015a      	lsls	r2, r3, #5
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	791b      	ldrb	r3, [r3, #4]
 8006464:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006466:	430b      	orrs	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	68ba      	ldr	r2, [r7, #8]
 800646c:	0151      	lsls	r1, r2, #5
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	440a      	add	r2, r1
 8006472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
	...

08006490 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d161      	bne.n	8006570 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	015a      	lsls	r2, r3, #5
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4413      	add	r3, r2
 80064b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064c2:	d11f      	bne.n	8006504 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	0151      	lsls	r1, r2, #5
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	440a      	add	r2, r1
 80064da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	0151      	lsls	r1, r2, #5
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	440a      	add	r2, r1
 80064fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006502:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800650a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	2101      	movs	r1, #1
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	b29b      	uxth	r3, r3
 800651c:	43db      	mvns	r3, r3
 800651e:	68f9      	ldr	r1, [r7, #12]
 8006520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006524:	4013      	ands	r3, r2
 8006526:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652e:	69da      	ldr	r2, [r3, #28]
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f303 	lsl.w	r3, r1, r3
 800653e:	b29b      	uxth	r3, r3
 8006540:	43db      	mvns	r3, r3
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006548:	4013      	ands	r3, r2
 800654a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	0159      	lsls	r1, r3, #5
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	440b      	add	r3, r1
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	4619      	mov	r1, r3
 8006568:	4b35      	ldr	r3, [pc, #212]	; (8006640 <USB_DeactivateEndpoint+0x1b0>)
 800656a:	4013      	ands	r3, r2
 800656c:	600b      	str	r3, [r1, #0]
 800656e:	e060      	b.n	8006632 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006586:	d11f      	bne.n	80065c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	0151      	lsls	r1, r2, #5
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	440a      	add	r2, r1
 800659e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	015a      	lsls	r2, r3, #5
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	0151      	lsls	r1, r2, #5
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	440a      	add	r2, r1
 80065be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f003 030f 	and.w	r3, r3, #15
 80065d8:	2101      	movs	r1, #1
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	041b      	lsls	r3, r3, #16
 80065e0:	43db      	mvns	r3, r3
 80065e2:	68f9      	ldr	r1, [r7, #12]
 80065e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065e8:	4013      	ands	r3, r2
 80065ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	f003 030f 	and.w	r3, r3, #15
 80065fc:	2101      	movs	r1, #1
 80065fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006602:	041b      	lsls	r3, r3, #16
 8006604:	43db      	mvns	r3, r3
 8006606:	68f9      	ldr	r1, [r7, #12]
 8006608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800660c:	4013      	ands	r3, r2
 800660e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	0159      	lsls	r1, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	440b      	add	r3, r1
 8006626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800662a:	4619      	mov	r1, r3
 800662c:	4b05      	ldr	r3, [pc, #20]	; (8006644 <USB_DeactivateEndpoint+0x1b4>)
 800662e:	4013      	ands	r3, r2
 8006630:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	ec337800 	.word	0xec337800
 8006644:	eff37800 	.word	0xeff37800

08006648 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b08a      	sub	sp, #40	; 0x28
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	4613      	mov	r3, r2
 8006654:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	785b      	ldrb	r3, [r3, #1]
 8006664:	2b01      	cmp	r3, #1
 8006666:	f040 815c 	bne.w	8006922 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d132      	bne.n	80066d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006690:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	0151      	lsls	r1, r2, #5
 80066c8:	69fa      	ldr	r2, [r7, #28]
 80066ca:	440a      	add	r2, r1
 80066cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d0:	0cdb      	lsrs	r3, r3, #19
 80066d2:	04db      	lsls	r3, r3, #19
 80066d4:	6113      	str	r3, [r2, #16]
 80066d6:	e074      	b.n	80067c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f2:	0cdb      	lsrs	r3, r3, #19
 80066f4:	04db      	lsls	r3, r3, #19
 80066f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	0151      	lsls	r1, r2, #5
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	440a      	add	r2, r1
 800670e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006712:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006716:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800671a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6999      	ldr	r1, [r3, #24]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	440b      	add	r3, r1
 8006734:	1e59      	subs	r1, r3, #1
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	fbb1 f3f3 	udiv	r3, r1, r3
 800673e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006740:	4b9d      	ldr	r3, [pc, #628]	; (80069b8 <USB_EPStartXfer+0x370>)
 8006742:	400b      	ands	r3, r1
 8006744:	69b9      	ldr	r1, [r7, #24]
 8006746:	0148      	lsls	r0, r1, #5
 8006748:	69f9      	ldr	r1, [r7, #28]
 800674a:	4401      	add	r1, r0
 800674c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006750:	4313      	orrs	r3, r2
 8006752:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800676a:	69b9      	ldr	r1, [r7, #24]
 800676c:	0148      	lsls	r0, r1, #5
 800676e:	69f9      	ldr	r1, [r7, #28]
 8006770:	4401      	add	r1, r0
 8006772:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006776:	4313      	orrs	r3, r2
 8006778:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	791b      	ldrb	r3, [r3, #4]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d11f      	bne.n	80067c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d14b      	bne.n	8006860 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067dc:	461a      	mov	r2, r3
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	791b      	ldrb	r3, [r3, #4]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d128      	bne.n	800683e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d110      	bne.n	800681e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	4413      	add	r3, r2
 8006804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	69fa      	ldr	r2, [r7, #28]
 8006810:	440a      	add	r2, r1
 8006812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006816:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	e00f      	b.n	800683e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006858:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	e133      	b.n	8006ac8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	69fa      	ldr	r2, [r7, #28]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800687a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800687e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d015      	beq.n	80068b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 811b 	beq.w	8006ac8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	2101      	movs	r1, #1
 80068a4:	fa01 f303 	lsl.w	r3, r1, r3
 80068a8:	69f9      	ldr	r1, [r7, #28]
 80068aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ae:	4313      	orrs	r3, r2
 80068b0:	634b      	str	r3, [r1, #52]	; 0x34
 80068b2:	e109      	b.n	8006ac8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d110      	bne.n	80068e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69ba      	ldr	r2, [r7, #24]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	69fa      	ldr	r2, [r7, #28]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e00f      	b.n	8006906 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006904:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6919      	ldr	r1, [r3, #16]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	781a      	ldrb	r2, [r3, #0]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	b298      	uxth	r0, r3
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	4603      	mov	r3, r0
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fade 	bl	8006edc <USB_WritePacket>
 8006920:	e0d2      	b.n	8006ac8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	0cdb      	lsrs	r3, r3, #19
 800693e:	04db      	lsls	r3, r3, #19
 8006940:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	015a      	lsls	r2, r3, #5
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	4413      	add	r3, r2
 800694a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	69fa      	ldr	r2, [r7, #28]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006960:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006964:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d126      	bne.n	80069bc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800697a:	691a      	ldr	r2, [r3, #16]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	68db      	ldr	r3, [r3, #12]
 8006980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006984:	69b9      	ldr	r1, [r7, #24]
 8006986:	0148      	lsls	r0, r1, #5
 8006988:	69f9      	ldr	r1, [r7, #28]
 800698a:	4401      	add	r1, r0
 800698c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006990:	4313      	orrs	r3, r2
 8006992:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069b2:	6113      	str	r3, [r2, #16]
 80069b4:	e03a      	b.n	8006a2c <USB_EPStartXfer+0x3e4>
 80069b6:	bf00      	nop
 80069b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	699a      	ldr	r2, [r3, #24]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	1e5a      	subs	r2, r3, #1
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069d0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	8afa      	ldrh	r2, [r7, #22]
 80069d8:	fb03 f202 	mul.w	r2, r3, r2
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	04d9      	lsls	r1, r3, #19
 80069f2:	4b38      	ldr	r3, [pc, #224]	; (8006ad4 <USB_EPStartXfer+0x48c>)
 80069f4:	400b      	ands	r3, r1
 80069f6:	69b9      	ldr	r1, [r7, #24]
 80069f8:	0148      	lsls	r0, r1, #5
 80069fa:	69f9      	ldr	r1, [r7, #28]
 80069fc:	4401      	add	r1, r0
 80069fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a02:	4313      	orrs	r3, r2
 8006a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	0148      	lsls	r0, r1, #5
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	4401      	add	r1, r0
 8006a24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d10d      	bne.n	8006a4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	6919      	ldr	r1, [r3, #16]
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	791b      	ldrb	r3, [r3, #4]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d128      	bne.n	8006aa8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e00f      	b.n	8006aa8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aa6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	1ff80000 	.word	0x1ff80000

08006ad8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	f040 80ce 	bne.w	8006c96 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d132      	bne.n	8006b68 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	0151      	lsls	r1, r2, #5
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	440a      	add	r2, r1
 8006b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	0151      	lsls	r1, r2, #5
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	440a      	add	r2, r1
 8006b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	0151      	lsls	r1, r2, #5
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	440a      	add	r2, r1
 8006b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b60:	0cdb      	lsrs	r3, r3, #19
 8006b62:	04db      	lsls	r3, r3, #19
 8006b64:	6113      	str	r3, [r2, #16]
 8006b66:	e04e      	b.n	8006c06 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b82:	0cdb      	lsrs	r3, r3, #19
 8006b84:	04db      	lsls	r3, r3, #19
 8006b86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ba6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006baa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	699a      	ldr	r2, [r3, #24]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d903      	bls.n	8006bc0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	68da      	ldr	r2, [r3, #12]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	0151      	lsls	r1, r2, #5
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	440a      	add	r2, r1
 8006bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bde:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	691a      	ldr	r2, [r3, #16]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf6:	6939      	ldr	r1, [r7, #16]
 8006bf8:	0148      	lsls	r0, r1, #5
 8006bfa:	6979      	ldr	r1, [r7, #20]
 8006bfc:	4401      	add	r1, r0
 8006bfe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c02:	4313      	orrs	r3, r2
 8006c04:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d11e      	bne.n	8006c4a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	461a      	mov	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e097      	b.n	8006d7a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c68:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8083 	beq.w	8006d7a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f003 030f 	and.w	r3, r3, #15
 8006c84:	2101      	movs	r1, #1
 8006c86:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c90:	4313      	orrs	r3, r2
 8006c92:	634b      	str	r3, [r1, #52]	; 0x34
 8006c94:	e071      	b.n	8006d7a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb0:	0cdb      	lsrs	r3, r3, #19
 8006cb2:	04db      	lsls	r3, r3, #19
 8006cb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d10:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d1e:	691a      	ldr	r2, [r3, #16]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d28:	6939      	ldr	r1, [r7, #16]
 8006d2a:	0148      	lsls	r0, r1, #5
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	4401      	add	r1, r0
 8006d30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d34:	4313      	orrs	r3, r2
 8006d36:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d38:	79fb      	ldrb	r3, [r7, #7]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d10d      	bne.n	8006d5a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	6919      	ldr	r1, [r3, #16]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d56:	460a      	mov	r2, r1
 8006d58:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	785b      	ldrb	r3, [r3, #1]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d14a      	bne.n	8006e3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dbe:	f040 8086 	bne.w	8006ece <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	0151      	lsls	r1, r2, #5
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	440a      	add	r2, r1
 8006ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006de4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	7812      	ldrb	r2, [r2, #0]
 8006dfa:	0151      	lsls	r1, r2, #5
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	440a      	add	r2, r1
 8006e00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d902      	bls.n	8006e20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1e:	e056      	b.n	8006ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e38:	d0e7      	beq.n	8006e0a <USB_EPStopXfer+0x82>
 8006e3a:	e048      	b.n	8006ece <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e54:	d13b      	bne.n	8006ece <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	015a      	lsls	r2, r3, #5
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	7812      	ldrb	r2, [r2, #0]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	0151      	lsls	r1, r2, #5
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	440a      	add	r2, r1
 8006e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d902      	bls.n	8006eb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb2:	e00c      	b.n	8006ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ecc:	d0e7      	beq.n	8006e9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b089      	sub	sp, #36	; 0x24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	461a      	mov	r2, r3
 8006eea:	460b      	mov	r3, r1
 8006eec:	71fb      	strb	r3, [r7, #7]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006efa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d123      	bne.n	8006f4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f02:	88bb      	ldrh	r3, [r7, #4]
 8006f04:	3303      	adds	r3, #3
 8006f06:	089b      	lsrs	r3, r3, #2
 8006f08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e018      	b.n	8006f42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	031a      	lsls	r2, r3, #12
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4413      	add	r3, r2
 8006f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61bb      	str	r3, [r7, #24]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d3e2      	bcc.n	8006f10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3724      	adds	r7, #36	; 0x24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b08b      	sub	sp, #44	; 0x2c
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	089b      	lsrs	r3, r3, #2
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	f003 0303 	and.w	r3, r3, #3
 8006f7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	623b      	str	r3, [r7, #32]
 8006f82:	e014      	b.n	8006fae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	3301      	adds	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f98:	3301      	adds	r3, #1
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	3301      	adds	r3, #1
 8006fac:	623b      	str	r3, [r7, #32]
 8006fae:	6a3a      	ldr	r2, [r7, #32]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3e6      	bcc.n	8006f84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fb6:	8bfb      	ldrh	r3, [r7, #30]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f107 0310 	add.w	r3, r7, #16
 8006fcc:	6812      	ldr	r2, [r2, #0]
 8006fce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	701a      	strb	r2, [r3, #0]
      i++;
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	3301      	adds	r3, #1
 8006fec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006fee:	8bfb      	ldrh	r3, [r7, #30]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ff4:	8bfb      	ldrh	r3, [r7, #30]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ea      	bne.n	8006fd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	372c      	adds	r7, #44	; 0x2c
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	785b      	ldrb	r3, [r3, #1]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d12c      	bne.n	800707e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	db12      	blt.n	800705c <USB_EPSetStall+0x54>
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00f      	beq.n	800705c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800705a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007076:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e02b      	b.n	80070d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	db12      	blt.n	80070b6 <USB_EPSetStall+0xae>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00f      	beq.n	80070b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d128      	bne.n	8007152 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800711e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	791b      	ldrb	r3, [r3, #4]
 8007124:	2b03      	cmp	r3, #3
 8007126:	d003      	beq.n	8007130 <USB_EPClearStall+0x4c>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	2b02      	cmp	r3, #2
 800712e:	d138      	bne.n	80071a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	0151      	lsls	r1, r2, #5
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	440a      	add	r2, r1
 8007146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800714a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	e027      	b.n	80071a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	440a      	add	r2, r1
 8007168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800716c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007170:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	791b      	ldrb	r3, [r3, #4]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d003      	beq.n	8007182 <USB_EPClearStall+0x9e>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	791b      	ldrb	r3, [r3, #4]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d10f      	bne.n	80071a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800719c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	78fb      	ldrb	r3, [r7, #3]
 80071de:	011b      	lsls	r3, r3, #4
 80071e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ea:	4313      	orrs	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b085      	sub	sp, #20
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007216:	f023 0303 	bic.w	r3, r3, #3
 800721a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800722a:	f023 0302 	bic.w	r3, r3, #2
 800722e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800726c:	f043 0302 	orr.w	r3, r3, #2
 8007270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4013      	ands	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007298:	68fb      	ldr	r3, [r7, #12]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	4013      	ands	r3, r2
 80072c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	0c1b      	lsrs	r3, r3, #16
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3714      	adds	r7, #20
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ec:	699b      	ldr	r3, [r3, #24]
 80072ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	b29b      	uxth	r3, r3
}
 8007302:	4618      	mov	r0, r3
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800730e:	b480      	push	{r7}
 8007310:	b085      	sub	sp, #20
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	4013      	ands	r3, r2
 800733a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800733c:	68bb      	ldr	r3, [r7, #8]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
 8007352:	460b      	mov	r3, r1
 8007354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007360:	691b      	ldr	r3, [r3, #16]
 8007362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	fa22 f303 	lsr.w	r3, r2, r3
 800737a:	01db      	lsls	r3, r3, #7
 800737c:	b2db      	uxtb	r3, r3
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	4013      	ands	r3, r2
 8007396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007398:	68bb      	ldr	r3, [r7, #8]
}
 800739a:	4618      	mov	r0, r3
 800739c:	371c      	adds	r7, #28
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	f003 0301 	and.w	r3, r3, #1
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073e0:	f023 0307 	bic.w	r3, r3, #7
 80073e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073fa:	2300      	movs	r3, #0
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	460b      	mov	r3, r1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	333c      	adds	r3, #60	; 0x3c
 800741e:	3304      	adds	r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <USB_EP0_OutStart+0xb8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d90a      	bls.n	8007442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800743c:	d101      	bne.n	8007442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e037      	b.n	80074b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	461a      	mov	r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007470:	f043 0318 	orr.w	r3, r3, #24
 8007474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007484:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10f      	bne.n	80074b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	4f54300a 	.word	0x4f54300a

080074c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4a13      	ldr	r2, [pc, #76]	; (8007528 <USB_CoreReset+0x64>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e01b      	b.n	800751a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	daf2      	bge.n	80074d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f043 0201 	orr.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a09      	ldr	r2, [pc, #36]	; (8007528 <USB_CoreReset+0x64>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d901      	bls.n	800750c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e006      	b.n	800751a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d0f0      	beq.n	80074fa <USB_CoreReset+0x36>

  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3714      	adds	r7, #20
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	00030d40 	.word	0x00030d40

0800752c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800752c:	b084      	sub	sp, #16
 800752e:	b580      	push	{r7, lr}
 8007530:	b086      	sub	sp, #24
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800753a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800754c:	461a      	mov	r2, r3
 800754e:	2300      	movs	r3, #0
 8007550:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d018      	beq.n	800759c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800756a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756c:	2b01      	cmp	r3, #1
 800756e:	d10a      	bne.n	8007586 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800757e:	f043 0304 	orr.w	r3, r3, #4
 8007582:	6013      	str	r3, [r2, #0]
 8007584:	e014      	b.n	80075b0 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007594:	f023 0304 	bic.w	r3, r3, #4
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e009      	b.n	80075b0 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68fa      	ldr	r2, [r7, #12]
 80075a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075aa:	f023 0304 	bic.w	r3, r3, #4
 80075ae:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075b0:	2110      	movs	r1, #16
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fe fe42 	bl	800623c <USB_FlushTxFifo>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7fe fe6e 	bl	80062a4 <USB_FlushRxFifo>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e015      	b.n	8007604 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075e4:	461a      	mov	r2, r3
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f8:	461a      	mov	r2, r3
 80075fa:	2300      	movs	r3, #0
 80075fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d3e5      	bcc.n	80075d8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007618:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800762c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <USB_HostInit+0x154>)
 8007632:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a13      	ldr	r2, [pc, #76]	; (8007684 <USB_HostInit+0x158>)
 8007638:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800763c:	e009      	b.n	8007652 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2280      	movs	r2, #128	; 0x80
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a10      	ldr	r2, [pc, #64]	; (8007688 <USB_HostInit+0x15c>)
 8007648:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a0f      	ldr	r2, [pc, #60]	; (800768c <USB_HostInit+0x160>)
 800764e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2b00      	cmp	r3, #0
 8007656:	d105      	bne.n	8007664 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f043 0210 	orr.w	r2, r3, #16
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	4b09      	ldr	r3, [pc, #36]	; (8007690 <USB_HostInit+0x164>)
 800766a:	4313      	orrs	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800767c:	b004      	add	sp, #16
 800767e:	4770      	bx	lr
 8007680:	01000200 	.word	0x01000200
 8007684:	00e00300 	.word	0x00e00300
 8007688:	00600080 	.word	0x00600080
 800768c:	004000e0 	.word	0x004000e0
 8007690:	a3200008 	.word	0xa3200008

08007694 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	68f9      	ldr	r1, [r7, #12]
 80076c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076cc:	4313      	orrs	r3, r2
 80076ce:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d107      	bne.n	80076e6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076dc:	461a      	mov	r2, r3
 80076de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076e2:	6053      	str	r3, [r2, #4]
 80076e4:	e009      	b.n	80076fa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d106      	bne.n	80076fa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076f2:	461a      	mov	r2, r3
 80076f4:	f241 7370 	movw	r3, #6000	; 0x1770
 80076f8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007728:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007736:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007738:	2064      	movs	r0, #100	; 0x64
 800773a:	f7f9 fbf1 	bl	8000f20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007746:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800774a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800774c:	200a      	movs	r0, #10
 800774e:	f7f9 fbe7 	bl	8000f20 <HAL_Delay>

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007780:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <USB_DriveVbus+0x44>
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d106      	bne.n	80077a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800779a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800779e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077aa:	d109      	bne.n	80077c0 <USB_DriveVbus+0x64>
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b085      	sub	sp, #20
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	0c5b      	lsrs	r3, r3, #17
 80077ec:	f003 0303 	and.w	r3, r3, #3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	b29b      	uxth	r3, r3
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	4608      	mov	r0, r1
 800782a:	4611      	mov	r1, r2
 800782c:	461a      	mov	r2, r3
 800782e:	4603      	mov	r3, r0
 8007830:	70fb      	strb	r3, [r7, #3]
 8007832:	460b      	mov	r3, r1
 8007834:	70bb      	strb	r3, [r7, #2]
 8007836:	4613      	mov	r3, r2
 8007838:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4413      	add	r3, r2
 800784a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784e:	461a      	mov	r2, r3
 8007850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007854:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007856:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800785a:	2b03      	cmp	r3, #3
 800785c:	d87e      	bhi.n	800795c <USB_HC_Init+0x13c>
 800785e:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <USB_HC_Init+0x44>)
 8007860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007864:	08007875 	.word	0x08007875
 8007868:	0800791f 	.word	0x0800791f
 800786c:	08007875 	.word	0x08007875
 8007870:	080078e1 	.word	0x080078e1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	4413      	add	r3, r2
 800787c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007880:	461a      	mov	r2, r3
 8007882:	f240 439d 	movw	r3, #1181	; 0x49d
 8007886:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007888:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800788c:	2b00      	cmp	r3, #0
 800788e:	da10      	bge.n	80078b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007890:	78fb      	ldrb	r3, [r7, #3]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	4413      	add	r3, r2
 8007898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	78fa      	ldrb	r2, [r7, #3]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80078b0:	e057      	b.n	8007962 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d051      	beq.n	8007962 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078dc:	60d3      	str	r3, [r2, #12]
      break;
 80078de:	e040      	b.n	8007962 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078ec:	461a      	mov	r2, r3
 80078ee:	f240 639d 	movw	r3, #1693	; 0x69d
 80078f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80078f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da34      	bge.n	8007966 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	440a      	add	r2, r1
 8007912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800791c:	e023      	b.n	8007966 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800792a:	461a      	mov	r2, r3
 800792c:	f240 2325 	movw	r3, #549	; 0x225
 8007930:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007932:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007936:	2b00      	cmp	r3, #0
 8007938:	da17      	bge.n	800796a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	4413      	add	r3, r2
 8007942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	0151      	lsls	r1, r2, #5
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	440a      	add	r2, r1
 8007950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007954:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007958:	60d3      	str	r3, [r2, #12]
      }
      break;
 800795a:	e006      	b.n	800796a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	77fb      	strb	r3, [r7, #31]
      break;
 8007960:	e004      	b.n	800796c <USB_HC_Init+0x14c>
      break;
 8007962:	bf00      	nop
 8007964:	e002      	b.n	800796c <USB_HC_Init+0x14c>
      break;
 8007966:	bf00      	nop
 8007968:	e000      	b.n	800796c <USB_HC_Init+0x14c>
      break;
 800796a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	4413      	add	r3, r2
 8007974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	78fa      	ldrb	r2, [r7, #3]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	440a      	add	r2, r1
 8007982:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007986:	f043 0302 	orr.w	r3, r3, #2
 800798a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	f003 030f 	and.w	r3, r3, #15
 800799a:	2101      	movs	r1, #1
 800799c:	fa01 f303 	lsl.w	r3, r1, r3
 80079a0:	6939      	ldr	r1, [r7, #16]
 80079a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079a6:	4313      	orrs	r3, r2
 80079a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	da03      	bge.n	80079c6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	e001      	b.n	80079ca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7ff feff 	bl	80077ce <USB_GetHostSpeed>
 80079d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d106      	bne.n	80079e8 <USB_HC_Init+0x1c8>
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d003      	beq.n	80079e8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	e001      	b.n	80079ec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079ec:	787b      	ldrb	r3, [r7, #1]
 80079ee:	059b      	lsls	r3, r3, #22
 80079f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80079f4:	78bb      	ldrb	r3, [r7, #2]
 80079f6:	02db      	lsls	r3, r3, #11
 80079f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80079fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a02:	049b      	lsls	r3, r3, #18
 8007a04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	0159      	lsls	r1, r3, #5
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	440b      	add	r3, r1
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a22:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a28:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d003      	beq.n	8007a3a <USB_HC_Init+0x21a>
 8007a32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d10f      	bne.n	8007a5a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3720      	adds	r7, #32
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	; 0x30
 8007a68:	af02      	add	r7, sp, #8
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d02d      	beq.n	8007aea <USB_HC_StartXfer+0x86>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	791b      	ldrb	r3, [r3, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d129      	bne.n	8007aea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d117      	bne.n	8007acc <USB_HC_StartXfer+0x68>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	79db      	ldrb	r3, [r3, #7]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <USB_HC_StartXfer+0x48>
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	79db      	ldrb	r3, [r3, #7]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d10f      	bne.n	8007acc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	6a3a      	ldr	r2, [r7, #32]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <USB_HC_StartXfer+0x86>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	795b      	ldrb	r3, [r3, #5]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d107      	bne.n	8007aea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	785b      	ldrb	r3, [r3, #1]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fa0f 	bl	8007f04 <USB_DoPing>
      return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e0f8      	b.n	8007cdc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d018      	beq.n	8007b24 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	8912      	ldrh	r2, [r2, #8]
 8007afa:	4413      	add	r3, r2
 8007afc:	3b01      	subs	r3, #1
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	8912      	ldrh	r2, [r2, #8]
 8007b02:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b06:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b0a:	8b7b      	ldrh	r3, [r7, #26]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d90b      	bls.n	8007b28 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b10:	8b7b      	ldrh	r3, [r7, #26]
 8007b12:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	8912      	ldrh	r2, [r2, #8]
 8007b1a:	fb03 f202 	mul.w	r2, r3, r2
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	611a      	str	r2, [r3, #16]
 8007b22:	e001      	b.n	8007b28 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b24:	2301      	movs	r3, #1
 8007b26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	78db      	ldrb	r3, [r3, #3]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b32:	68ba      	ldr	r2, [r7, #8]
 8007b34:	8912      	ldrh	r2, [r2, #8]
 8007b36:	fb03 f202 	mul.w	r2, r3, r2
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	611a      	str	r2, [r3, #16]
 8007b3e:	e003      	b.n	8007b48 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	695a      	ldr	r2, [r3, #20]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b52:	04d9      	lsls	r1, r3, #19
 8007b54:	4b63      	ldr	r3, [pc, #396]	; (8007ce4 <USB_HC_StartXfer+0x280>)
 8007b56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	7a9b      	ldrb	r3, [r3, #10]
 8007b5e:	075b      	lsls	r3, r3, #29
 8007b60:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b64:	69f9      	ldr	r1, [r7, #28]
 8007b66:	0148      	lsls	r0, r1, #5
 8007b68:	6a39      	ldr	r1, [r7, #32]
 8007b6a:	4401      	add	r1, r0
 8007b6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	68d9      	ldr	r1, [r3, #12]
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	6a3b      	ldr	r3, [r7, #32]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8a:	460a      	mov	r2, r1
 8007b8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	bf0c      	ite	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	2300      	movne	r3, #0
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	6a3a      	ldr	r2, [r7, #32]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bc4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	7e7b      	ldrb	r3, [r7, #25]
 8007bd6:	075b      	lsls	r3, r3, #29
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	0148      	lsls	r0, r1, #5
 8007bdc:	6a39      	ldr	r1, [r7, #32]
 8007bde:	4401      	add	r1, r0
 8007be0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007be4:	4313      	orrs	r3, r2
 8007be6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bfe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	78db      	ldrb	r3, [r3, #3]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d004      	beq.n	8007c12 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	e003      	b.n	8007c1a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c18:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c20:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2e:	461a      	mov	r2, r3
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d001      	beq.n	8007c3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e04e      	b.n	8007cdc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	78db      	ldrb	r3, [r3, #3]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d149      	bne.n	8007cda <USB_HC_StartXfer+0x276>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d045      	beq.n	8007cda <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	79db      	ldrb	r3, [r3, #7]
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d830      	bhi.n	8007cb8 <USB_HC_StartXfer+0x254>
 8007c56:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <USB_HC_StartXfer+0x1f8>)
 8007c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c91 	.word	0x08007c91
 8007c64:	08007c6d 	.word	0x08007c6d
 8007c68:	08007c91 	.word	0x08007c91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	695b      	ldr	r3, [r3, #20]
 8007c70:	3303      	adds	r3, #3
 8007c72:	089b      	lsrs	r3, r3, #2
 8007c74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c76:	8afa      	ldrh	r2, [r7, #22]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d91c      	bls.n	8007cbc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c8e:	e015      	b.n	8007cbc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	3303      	adds	r3, #3
 8007c96:	089b      	lsrs	r3, r3, #2
 8007c98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c9a:	8afa      	ldrh	r2, [r7, #22]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d90a      	bls.n	8007cc0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cb6:	e003      	b.n	8007cc0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cb8:	bf00      	nop
 8007cba:	e002      	b.n	8007cc2 <USB_HC_StartXfer+0x25e>
        break;
 8007cbc:	bf00      	nop
 8007cbe:	e000      	b.n	8007cc2 <USB_HC_StartXfer+0x25e>
        break;
 8007cc0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	68d9      	ldr	r1, [r3, #12]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	785a      	ldrb	r2, [r3, #1]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	9000      	str	r0, [sp, #0]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff f901 	bl	8006edc <USB_WritePacket>
  }

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3728      	adds	r7, #40	; 0x28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	1ff80000 	.word	0x1ff80000

08007ce8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfa:	695b      	ldr	r3, [r3, #20]
 8007cfc:	b29b      	uxth	r3, r3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr

08007d0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d0a:	b480      	push	{r7}
 8007d0c:	b089      	sub	sp, #36	; 0x24
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	0c9b      	lsrs	r3, r3, #18
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	0fdb      	lsrs	r3, r3, #31
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b20      	cmp	r3, #32
 8007d58:	d104      	bne.n	8007d64 <USB_HC_Halt+0x5a>
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e0c8      	b.n	8007ef6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <USB_HC_Halt+0x66>
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d163      	bne.n	8007e38 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 80ab 	bne.w	8007ef4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d133      	bne.n	8007e12 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007de8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007df6:	d81d      	bhi.n	8007e34 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e0e:	d0ec      	beq.n	8007dea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e10:	e070      	b.n	8007ef4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e32:	e05f      	b.n	8007ef4 <USB_HC_Halt+0x1ea>
            break;
 8007e34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e36:	e05d      	b.n	8007ef4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69ba      	ldr	r2, [r7, #24]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	69fa      	ldr	r2, [r7, #28]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d133      	bne.n	8007ed0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ea2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ea6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007eb4:	d81d      	bhi.n	8007ef2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ecc:	d0ec      	beq.n	8007ea8 <USB_HC_Halt+0x19e>
 8007ece:	e011      	b.n	8007ef4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	e000      	b.n	8007ef4 <USB_HC_Halt+0x1ea>
          break;
 8007ef2:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3724      	adds	r7, #36	; 0x24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
	...

08007f04 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b087      	sub	sp, #28
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f14:	78fb      	ldrb	r3, [r7, #3]
 8007f16:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	04da      	lsls	r2, r3, #19
 8007f20:	4b15      	ldr	r3, [pc, #84]	; (8007f78 <USB_DoPing+0x74>)
 8007f22:	4013      	ands	r3, r2
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f34:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f4c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f54:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f62:	461a      	mov	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	371c      	adds	r7, #28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	1ff80000 	.word	0x1ff80000

08007f7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fd ff98 	bl	8005ec6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f96:	2110      	movs	r1, #16
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f7fe f94f 	bl	800623c <USB_FlushTxFifo>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe f97b 	bl	80062a4 <USB_FlushRxFifo>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	61bb      	str	r3, [r7, #24]
 8007fbc:	e01f      	b.n	8007ffe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fe4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	2b0f      	cmp	r3, #15
 8008002:	d9dc      	bls.n	8007fbe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
 8008008:	e034      	b.n	8008074 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008020:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008028:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008030:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	015a      	lsls	r2, r3, #5
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	4413      	add	r3, r2
 800803a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800803e:	461a      	mov	r2, r3
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	3301      	adds	r3, #1
 8008048:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008050:	d80c      	bhi.n	800806c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008068:	d0ec      	beq.n	8008044 <USB_StopHost+0xc8>
 800806a:	e000      	b.n	800806e <USB_StopHost+0xf2>
        break;
 800806c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	3301      	adds	r3, #1
 8008072:	61bb      	str	r3, [r7, #24]
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b0f      	cmp	r3, #15
 8008078:	d9c7      	bls.n	800800a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008080:	461a      	mov	r2, r3
 8008082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008086:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800808e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f7fd ff07 	bl	8005ea4 <USB_EnableGlobalInt>

  return ret;
 8008096:	7ffb      	ldrb	r3, [r7, #31]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80080ac:	2010      	movs	r0, #16
 80080ae:	f004 fc99 	bl	800c9e4 <USBD_static_malloc>
 80080b2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	32b0      	adds	r2, #176	; 0xb0
 80080c4:	2100      	movs	r1, #0
 80080c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080ca:	2302      	movs	r3, #2
 80080cc:	e048      	b.n	8008160 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	32b0      	adds	r2, #176	; 0xb0
 80080d8:	68f9      	ldr	r1, [r7, #12]
 80080da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	32b0      	adds	r2, #176	; 0xb0
 80080e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	7c1b      	ldrb	r3, [r3, #16]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10d      	bne.n	8008116 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80080fa:	4b1b      	ldr	r3, [pc, #108]	; (8008168 <USBD_HID_Init+0xc8>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 020f 	and.w	r2, r3, #15
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	3326      	adds	r3, #38	; 0x26
 8008110:	2207      	movs	r2, #7
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e00c      	b.n	8008130 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008116:	4b14      	ldr	r3, [pc, #80]	; (8008168 <USBD_HID_Init+0xc8>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f003 020f 	and.w	r2, r3, #15
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	4613      	mov	r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	440b      	add	r3, r1
 800812a:	3326      	adds	r3, #38	; 0x26
 800812c:	220a      	movs	r2, #10
 800812e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <USBD_HID_Init+0xc8>)
 8008132:	7819      	ldrb	r1, [r3, #0]
 8008134:	2304      	movs	r3, #4
 8008136:	2203      	movs	r2, #3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f004 faf4 	bl	800c726 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800813e:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <USBD_HID_Init+0xc8>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 020f 	and.w	r2, r3, #15
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	3324      	adds	r3, #36	; 0x24
 8008154:	2201      	movs	r2, #1
 8008156:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200000bf 	.word	0x200000bf

0800816c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008178:	4b1f      	ldr	r3, [pc, #124]	; (80081f8 <USBD_HID_DeInit+0x8c>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f004 faf7 	bl	800c772 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008184:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <USBD_HID_DeInit+0x8c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	f003 020f 	and.w	r2, r3, #15
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	2200      	movs	r2, #0
 800819c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800819e:	4b16      	ldr	r3, [pc, #88]	; (80081f8 <USBD_HID_DeInit+0x8c>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 020f 	and.w	r2, r3, #15
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	4613      	mov	r3, r2
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	009b      	lsls	r3, r3, #2
 80081b0:	440b      	add	r3, r1
 80081b2:	3326      	adds	r3, #38	; 0x26
 80081b4:	2200      	movs	r2, #0
 80081b6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32b0      	adds	r2, #176	; 0xb0
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d011      	beq.n	80081ee <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	32b0      	adds	r2, #176	; 0xb0
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	4618      	mov	r0, r3
 80081da:	f004 fc11 	bl	800ca00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	32b0      	adds	r2, #176	; 0xb0
 80081e8:	2100      	movs	r1, #0
 80081ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3708      	adds	r7, #8
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	200000bf 	.word	0x200000bf

080081fc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	32b0      	adds	r2, #176	; 0xb0
 8008210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008214:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	e0e8      	b.n	80083fa <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008230:	2b00      	cmp	r3, #0
 8008232:	d046      	beq.n	80082c2 <USBD_HID_Setup+0xc6>
 8008234:	2b20      	cmp	r3, #32
 8008236:	f040 80d8 	bne.w	80083ea <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	3b02      	subs	r3, #2
 8008240:	2b09      	cmp	r3, #9
 8008242:	d836      	bhi.n	80082b2 <USBD_HID_Setup+0xb6>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <USBD_HID_Setup+0x50>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	080082a3 	.word	0x080082a3
 8008250:	08008283 	.word	0x08008283
 8008254:	080082b3 	.word	0x080082b3
 8008258:	080082b3 	.word	0x080082b3
 800825c:	080082b3 	.word	0x080082b3
 8008260:	080082b3 	.word	0x080082b3
 8008264:	080082b3 	.word	0x080082b3
 8008268:	080082b3 	.word	0x080082b3
 800826c:	08008291 	.word	0x08008291
 8008270:	08008275 	.word	0x08008275
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	885b      	ldrh	r3, [r3, #2]
 8008278:	b2db      	uxtb	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]
          break;
 8008280:	e01e      	b.n	80082c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	4619      	mov	r1, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fbff 	bl	8009a8c <USBD_CtlSendData>
          break;
 800828e:	e017      	b.n	80082c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	0a1b      	lsrs	r3, r3, #8
 8008296:	b29b      	uxth	r3, r3
 8008298:	b2db      	uxtb	r3, r3
 800829a:	461a      	mov	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	605a      	str	r2, [r3, #4]
          break;
 80082a0:	e00e      	b.n	80082c0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	3304      	adds	r3, #4
 80082a6:	2201      	movs	r2, #1
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fbee 	bl	8009a8c <USBD_CtlSendData>
          break;
 80082b0:	e006      	b.n	80082c0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082b2:	6839      	ldr	r1, [r7, #0]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 fb78 	bl	80099aa <USBD_CtlError>
          ret = USBD_FAIL;
 80082ba:	2303      	movs	r3, #3
 80082bc:	75fb      	strb	r3, [r7, #23]
          break;
 80082be:	bf00      	nop
      }
      break;
 80082c0:	e09a      	b.n	80083f8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b0b      	cmp	r3, #11
 80082c8:	f200 8086 	bhi.w	80083d8 <USBD_HID_Setup+0x1dc>
 80082cc:	a201      	add	r2, pc, #4	; (adr r2, 80082d4 <USBD_HID_Setup+0xd8>)
 80082ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d2:	bf00      	nop
 80082d4:	08008305 	.word	0x08008305
 80082d8:	080083e7 	.word	0x080083e7
 80082dc:	080083d9 	.word	0x080083d9
 80082e0:	080083d9 	.word	0x080083d9
 80082e4:	080083d9 	.word	0x080083d9
 80082e8:	080083d9 	.word	0x080083d9
 80082ec:	0800832f 	.word	0x0800832f
 80082f0:	080083d9 	.word	0x080083d9
 80082f4:	080083d9 	.word	0x080083d9
 80082f8:	080083d9 	.word	0x080083d9
 80082fc:	08008387 	.word	0x08008387
 8008300:	080083b1 	.word	0x080083b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b03      	cmp	r3, #3
 800830e:	d107      	bne.n	8008320 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008310:	f107 030a 	add.w	r3, r7, #10
 8008314:	2202      	movs	r2, #2
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fbb7 	bl	8009a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800831e:	e063      	b.n	80083e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 fb41 	bl	80099aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	75fb      	strb	r3, [r7, #23]
          break;
 800832c:	e05c      	b.n	80083e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	b29b      	uxth	r3, r3
 8008336:	2b22      	cmp	r3, #34	; 0x22
 8008338:	d108      	bne.n	800834c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	88db      	ldrh	r3, [r3, #6]
 800833e:	2b3f      	cmp	r3, #63	; 0x3f
 8008340:	bf28      	it	cs
 8008342:	233f      	movcs	r3, #63	; 0x3f
 8008344:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008346:	4b2f      	ldr	r3, [pc, #188]	; (8008404 <USBD_HID_Setup+0x208>)
 8008348:	613b      	str	r3, [r7, #16]
 800834a:	e015      	b.n	8008378 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	885b      	ldrh	r3, [r3, #2]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	b29b      	uxth	r3, r3
 8008354:	2b21      	cmp	r3, #33	; 0x21
 8008356:	d108      	bne.n	800836a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008358:	4b2b      	ldr	r3, [pc, #172]	; (8008408 <USBD_HID_Setup+0x20c>)
 800835a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	88db      	ldrh	r3, [r3, #6]
 8008360:	2b09      	cmp	r3, #9
 8008362:	bf28      	it	cs
 8008364:	2309      	movcs	r3, #9
 8008366:	82bb      	strh	r3, [r7, #20]
 8008368:	e006      	b.n	8008378 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fb1c 	bl	80099aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008372:	2303      	movs	r3, #3
 8008374:	75fb      	strb	r3, [r7, #23]
            break;
 8008376:	e037      	b.n	80083e8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008378:	8abb      	ldrh	r3, [r7, #20]
 800837a:	461a      	mov	r2, r3
 800837c:	6939      	ldr	r1, [r7, #16]
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fb84 	bl	8009a8c <USBD_CtlSendData>
          break;
 8008384:	e030      	b.n	80083e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b03      	cmp	r3, #3
 8008390:	d107      	bne.n	80083a2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	3308      	adds	r3, #8
 8008396:	2201      	movs	r2, #1
 8008398:	4619      	mov	r1, r3
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 fb76 	bl	8009a8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083a0:	e022      	b.n	80083e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f001 fb00 	bl	80099aa <USBD_CtlError>
            ret = USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	75fb      	strb	r3, [r7, #23]
          break;
 80083ae:	e01b      	b.n	80083e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d106      	bne.n	80083ca <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	461a      	mov	r2, r3
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c8:	e00e      	b.n	80083e8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f001 faec 	bl	80099aa <USBD_CtlError>
            ret = USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	75fb      	strb	r3, [r7, #23]
          break;
 80083d6:	e007      	b.n	80083e8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fae5 	bl	80099aa <USBD_CtlError>
          ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          break;
 80083e4:	e000      	b.n	80083e8 <USBD_HID_Setup+0x1ec>
          break;
 80083e6:	bf00      	nop
      }
      break;
 80083e8:	e006      	b.n	80083f8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 fadc 	bl	80099aa <USBD_CtlError>
      ret = USBD_FAIL;
 80083f2:	2303      	movs	r3, #3
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000080 	.word	0x20000080
 8008408:	20000068 	.word	0x20000068

0800840c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	32b0      	adds	r2, #176	; 0xb0
 8008424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008428:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d101      	bne.n	8008434 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008430:	2303      	movs	r3, #3
 8008432:	e014      	b.n	800845e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800843a:	b2db      	uxtb	r3, r3
 800843c:	2b03      	cmp	r3, #3
 800843e:	d10d      	bne.n	800845c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	7b1b      	ldrb	r3, [r3, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d109      	bne.n	800845c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2201      	movs	r2, #1
 800844c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <USBD_HID_SendReport+0x5c>)
 8008450:	7819      	ldrb	r1, [r3, #0]
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f004 fa33 	bl	800c8c2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200000bf 	.word	0x200000bf

0800846c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008474:	2181      	movs	r1, #129	; 0x81
 8008476:	4809      	ldr	r0, [pc, #36]	; (800849c <USBD_HID_GetFSCfgDesc+0x30>)
 8008478:	f000 fc35 	bl	8008ce6 <USBD_GetEpDesc>
 800847c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	220a      	movs	r2, #10
 8008488:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2222      	movs	r2, #34	; 0x22
 800848e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000044 	.word	0x20000044

080084a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80084a8:	2181      	movs	r1, #129	; 0x81
 80084aa:	4809      	ldr	r0, [pc, #36]	; (80084d0 <USBD_HID_GetHSCfgDesc+0x30>)
 80084ac:	f000 fc1b 	bl	8008ce6 <USBD_GetEpDesc>
 80084b0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2207      	movs	r2, #7
 80084bc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2222      	movs	r2, #34	; 0x22
 80084c2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80084c4:	4b02      	ldr	r3, [pc, #8]	; (80084d0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000044 	.word	0x20000044

080084d4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80084dc:	2181      	movs	r1, #129	; 0x81
 80084de:	4809      	ldr	r0, [pc, #36]	; (8008504 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80084e0:	f000 fc01 	bl	8008ce6 <USBD_GetEpDesc>
 80084e4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	220a      	movs	r2, #10
 80084f0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2222      	movs	r2, #34	; 0x22
 80084f6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80084f8:	4b02      	ldr	r3, [pc, #8]	; (8008504 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000044 	.word	0x20000044

08008508 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	32b0      	adds	r2, #176	; 0xb0
 800851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008522:	2200      	movs	r2, #0
 8008524:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	220a      	movs	r2, #10
 8008540:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008542:	4b03      	ldr	r3, [pc, #12]	; (8008550 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	20000074 	.word	0x20000074

08008554 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	4613      	mov	r3, r2
 8008560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e01f      	b.n	80085ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	79fa      	ldrb	r2, [r7, #7]
 800859e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f004 f859 	bl	800c658 <USBD_LL_Init>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e025      	b.n	8008618 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	32ae      	adds	r2, #174	; 0xae
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00f      	beq.n	8008608 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	32ae      	adds	r2, #174	; 0xae
 80085f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	f107 020e 	add.w	r2, r7, #14
 80085fc:	4610      	mov	r0, r2
 80085fe:	4798      	blx	r3
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008616:	2300      	movs	r3, #0
}
 8008618:	4618      	mov	r0, r3
 800861a:	3710      	adds	r7, #16
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f004 f861 	bl	800c6f0 <USBD_LL_Start>
 800862e:	4603      	mov	r3, r0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008640:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	460b      	mov	r3, r1
 8008658:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008664:	2b00      	cmp	r3, #0
 8008666:	d009      	beq.n	800867c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4611      	mov	r1, r2
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b084      	sub	sp, #16
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	4611      	mov	r1, r2
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	4798      	blx	r3
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086ac:	2303      	movs	r3, #3
 80086ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f001 f932 	bl	8009936 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086e0:	461a      	mov	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d01a      	beq.n	800872c <USBD_LL_SetupStage+0x72>
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d822      	bhi.n	8008740 <USBD_LL_SetupStage+0x86>
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <USBD_LL_SetupStage+0x4a>
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d00a      	beq.n	8008718 <USBD_LL_SetupStage+0x5e>
 8008702:	e01d      	b.n	8008740 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fb5f 	bl	8008dd0 <USBD_StdDevReq>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
      break;
 8008716:	e020      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fbc7 	bl	8008eb4 <USBD_StdItfReq>
 8008726:	4603      	mov	r3, r0
 8008728:	73fb      	strb	r3, [r7, #15]
      break;
 800872a:	e016      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fc29 	bl	8008f8c <USBD_StdEPReq>
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e00c      	b.n	800875a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008746:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800874a:	b2db      	uxtb	r3, r3
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f004 f82e 	bl	800c7b0 <USBD_LL_StallEP>
 8008754:	4603      	mov	r3, r0
 8008756:	73fb      	strb	r3, [r7, #15]
      break;
 8008758:	bf00      	nop
  }

  return ret;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	460b      	mov	r3, r1
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d16e      	bne.n	800885a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008782:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800878a:	2b03      	cmp	r3, #3
 800878c:	f040 8098 	bne.w	80088c0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	689a      	ldr	r2, [r3, #8]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	429a      	cmp	r2, r3
 800879a:	d913      	bls.n	80087c4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	1ad2      	subs	r2, r2, r3
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	4293      	cmp	r3, r2
 80087b4:	bf28      	it	cs
 80087b6:	4613      	movcs	r3, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f001 f991 	bl	8009ae4 <USBD_CtlContinueRx>
 80087c2:	e07d      	b.n	80088c0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d014      	beq.n	80087fc <USBD_LL_DataOutStage+0x98>
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d81d      	bhi.n	8008812 <USBD_LL_DataOutStage+0xae>
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d002      	beq.n	80087e0 <USBD_LL_DataOutStage+0x7c>
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d003      	beq.n	80087e6 <USBD_LL_DataOutStage+0x82>
 80087de:	e018      	b.n	8008812 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75bb      	strb	r3, [r7, #22]
            break;
 80087e4:	e018      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	4619      	mov	r1, r3
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 fa5e 	bl	8008cb2 <USBD_CoreFindIF>
 80087f6:	4603      	mov	r3, r0
 80087f8:	75bb      	strb	r3, [r7, #22]
            break;
 80087fa:	e00d      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008802:	b2db      	uxtb	r3, r3
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fa60 	bl	8008ccc <USBD_CoreFindEP>
 800880c:	4603      	mov	r3, r0
 800880e:	75bb      	strb	r3, [r7, #22]
            break;
 8008810:	e002      	b.n	8008818 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008812:	2300      	movs	r3, #0
 8008814:	75bb      	strb	r3, [r7, #22]
            break;
 8008816:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008818:	7dbb      	ldrb	r3, [r7, #22]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d119      	bne.n	8008852 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b03      	cmp	r3, #3
 8008828:	d113      	bne.n	8008852 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800882a:	7dba      	ldrb	r2, [r7, #22]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	32ae      	adds	r2, #174	; 0xae
 8008830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800883a:	7dba      	ldrb	r2, [r7, #22]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008842:	7dba      	ldrb	r2, [r7, #22]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	32ae      	adds	r2, #174	; 0xae
 8008848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 f957 	bl	8009b06 <USBD_CtlSendStatus>
 8008858:	e032      	b.n	80088c0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008860:	b2db      	uxtb	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 fa31 	bl	8008ccc <USBD_CoreFindEP>
 800886a:	4603      	mov	r3, r0
 800886c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800886e:	7dbb      	ldrb	r3, [r7, #22]
 8008870:	2bff      	cmp	r3, #255	; 0xff
 8008872:	d025      	beq.n	80088c0 <USBD_LL_DataOutStage+0x15c>
 8008874:	7dbb      	ldrb	r3, [r7, #22]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d122      	bne.n	80088c0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b03      	cmp	r3, #3
 8008884:	d117      	bne.n	80088b6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008886:	7dba      	ldrb	r2, [r7, #22]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	32ae      	adds	r2, #174	; 0xae
 800888c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008896:	7dba      	ldrb	r2, [r7, #22]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800889e:	7dba      	ldrb	r2, [r7, #22]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	32ae      	adds	r2, #174	; 0xae
 80088a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	7afa      	ldrb	r2, [r7, #11]
 80088ac:	4611      	mov	r1, r2
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	4798      	blx	r3
 80088b2:	4603      	mov	r3, r0
 80088b4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088bc:	7dfb      	ldrb	r3, [r7, #23]
 80088be:	e000      	b.n	80088c2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b086      	sub	sp, #24
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	460b      	mov	r3, r1
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d16f      	bne.n	80089be <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3314      	adds	r3, #20
 80088e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d15a      	bne.n	80089a4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d914      	bls.n	8008924 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	1ad2      	subs	r2, r2, r3
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	461a      	mov	r2, r3
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f001 f8d6 	bl	8009ac2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008916:	2300      	movs	r3, #0
 8008918:	2200      	movs	r2, #0
 800891a:	2100      	movs	r1, #0
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f003 fff1 	bl	800c904 <USBD_LL_PrepareReceive>
 8008922:	e03f      	b.n	80089a4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	68da      	ldr	r2, [r3, #12]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	429a      	cmp	r2, r3
 800892e:	d11c      	bne.n	800896a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008938:	429a      	cmp	r2, r3
 800893a:	d316      	bcc.n	800896a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008946:	429a      	cmp	r2, r3
 8008948:	d20f      	bcs.n	800896a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 f8b7 	bl	8009ac2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800895c:	2300      	movs	r3, #0
 800895e:	2200      	movs	r2, #0
 8008960:	2100      	movs	r1, #0
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f003 ffce 	bl	800c904 <USBD_LL_PrepareReceive>
 8008968:	e01c      	b.n	80089a4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d10f      	bne.n	8008996 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f003 ff09 	bl	800c7b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f001 f8c4 	bl	8009b2c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d03a      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f7ff fe42 	bl	8008638 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089bc:	e032      	b.n	8008a24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089be:	7afb      	ldrb	r3, [r7, #11]
 80089c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	4619      	mov	r1, r3
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 f97f 	bl	8008ccc <USBD_CoreFindEP>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2bff      	cmp	r3, #255	; 0xff
 80089d6:	d025      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
 80089d8:	7dfb      	ldrb	r3, [r7, #23]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d122      	bne.n	8008a24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d11c      	bne.n	8008a24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089ea:	7dfa      	ldrb	r2, [r7, #23]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	32ae      	adds	r2, #174	; 0xae
 80089f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d014      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80089fa:	7dfa      	ldrb	r2, [r7, #23]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a02:	7dfa      	ldrb	r2, [r7, #23]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	32ae      	adds	r2, #174	; 0xae
 8008a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	7afa      	ldrb	r2, [r7, #11]
 8008a10:	4611      	mov	r1, r2
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	4798      	blx	r3
 8008a16:	4603      	mov	r3, r0
 8008a18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a1a:	7dbb      	ldrb	r3, [r7, #22]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a20:	7dbb      	ldrb	r3, [r7, #22]
 8008a22:	e000      	b.n	8008a26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d014      	beq.n	8008a94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00e      	beq.n	8008a94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6852      	ldr	r2, [r2, #4]
 8008a82:	b2d2      	uxtb	r2, r2
 8008a84:	4611      	mov	r1, r2
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	4798      	blx	r3
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a90:	2303      	movs	r3, #3
 8008a92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a94:	2340      	movs	r3, #64	; 0x40
 8008a96:	2200      	movs	r2, #0
 8008a98:	2100      	movs	r1, #0
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f003 fe43 	bl	800c726 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2240      	movs	r2, #64	; 0x40
 8008aac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ab0:	2340      	movs	r3, #64	; 0x40
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2180      	movs	r1, #128	; 0x80
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f003 fe35 	bl	800c726 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	621a      	str	r2, [r3, #32]

  return ret;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	370c      	adds	r7, #12
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b00:	b2da      	uxtb	r2, r3
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b083      	sub	sp, #12
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d106      	bne.n	8008b40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b38:	b2da      	uxtb	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b082      	sub	sp, #8
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d110      	bne.n	8008b84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00b      	beq.n	8008b84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b72:	69db      	ldr	r3, [r3, #28]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3708      	adds	r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	460b      	mov	r3, r1
 8008b98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	32ae      	adds	r2, #174	; 0xae
 8008ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e01c      	b.n	8008bea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d115      	bne.n	8008be8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	32ae      	adds	r2, #174	; 0xae
 8008bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bca:	6a1b      	ldr	r3, [r3, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	32ae      	adds	r2, #174	; 0xae
 8008bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	4611      	mov	r1, r2
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32ae      	adds	r2, #174	; 0xae
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e01c      	b.n	8008c4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b03      	cmp	r3, #3
 8008c1e:	d115      	bne.n	8008c4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	32ae      	adds	r2, #174	; 0xae
 8008c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	32ae      	adds	r2, #174	; 0xae
 8008c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c44:	78fa      	ldrb	r2, [r7, #3]
 8008c46:	4611      	mov	r1, r2
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00e      	beq.n	8008ca8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	6852      	ldr	r2, [r2, #4]
 8008c96:	b2d2      	uxtb	r2, r2
 8008c98:	4611      	mov	r1, r2
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	4798      	blx	r3
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d001      	beq.n	8008ca8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cb2:	b480      	push	{r7}
 8008cb4:	b083      	sub	sp, #12
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	370c      	adds	r7, #12
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce4:	4770      	bx	lr

08008ce6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b086      	sub	sp, #24
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	460b      	mov	r3, r1
 8008cf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	885b      	ldrh	r3, [r3, #2]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d920      	bls.n	8008d50 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d16:	e013      	b.n	8008d40 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d18:	f107 030a 	add.w	r3, r7, #10
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	6978      	ldr	r0, [r7, #20]
 8008d20:	f000 f81b 	bl	8008d5a <USBD_GetNextDesc>
 8008d24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d108      	bne.n	8008d40 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	789b      	ldrb	r3, [r3, #2]
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d008      	beq.n	8008d4e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	b29a      	uxth	r2, r3
 8008d46:	897b      	ldrh	r3, [r7, #10]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d8e5      	bhi.n	8008d18 <USBD_GetEpDesc+0x32>
 8008d4c:	e000      	b.n	8008d50 <USBD_GetEpDesc+0x6a>
          break;
 8008d4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d50:	693b      	ldr	r3, [r7, #16]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	881a      	ldrh	r2, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	4413      	add	r3, r2
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d86:	68fb      	ldr	r3, [r7, #12]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	3301      	adds	r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008db2:	8a3b      	ldrh	r3, [r7, #16]
 8008db4:	021b      	lsls	r3, r3, #8
 8008db6:	b21a      	sxth	r2, r3
 8008db8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dc2:	89fb      	ldrh	r3, [r7, #14]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008de6:	2b40      	cmp	r3, #64	; 0x40
 8008de8:	d005      	beq.n	8008df6 <USBD_StdDevReq+0x26>
 8008dea:	2b40      	cmp	r3, #64	; 0x40
 8008dec:	d857      	bhi.n	8008e9e <USBD_StdDevReq+0xce>
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00f      	beq.n	8008e12 <USBD_StdDevReq+0x42>
 8008df2:	2b20      	cmp	r3, #32
 8008df4:	d153      	bne.n	8008e9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	32ae      	adds	r2, #174	; 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	6839      	ldr	r1, [r7, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	4798      	blx	r3
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e10:	e04a      	b.n	8008ea8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	2b09      	cmp	r3, #9
 8008e18:	d83b      	bhi.n	8008e92 <USBD_StdDevReq+0xc2>
 8008e1a:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <USBD_StdDevReq+0x50>)
 8008e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e20:	08008e75 	.word	0x08008e75
 8008e24:	08008e89 	.word	0x08008e89
 8008e28:	08008e93 	.word	0x08008e93
 8008e2c:	08008e7f 	.word	0x08008e7f
 8008e30:	08008e93 	.word	0x08008e93
 8008e34:	08008e53 	.word	0x08008e53
 8008e38:	08008e49 	.word	0x08008e49
 8008e3c:	08008e93 	.word	0x08008e93
 8008e40:	08008e6b 	.word	0x08008e6b
 8008e44:	08008e5d 	.word	0x08008e5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa3c 	bl	80092c8 <USBD_GetDescriptor>
          break;
 8008e50:	e024      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fbcb 	bl	80095f0 <USBD_SetAddress>
          break;
 8008e5a:	e01f      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc0a 	bl	8009678 <USBD_SetConfig>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
          break;
 8008e68:	e018      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fcad 	bl	80097cc <USBD_GetConfig>
          break;
 8008e72:	e013      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcde 	bl	8009838 <USBD_GetStatus>
          break;
 8008e7c:	e00e      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fd0d 	bl	80098a0 <USBD_SetFeature>
          break;
 8008e86:	e009      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fd31 	bl	80098f2 <USBD_ClrFeature>
          break;
 8008e90:	e004      	b.n	8008e9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fd88 	bl	80099aa <USBD_CtlError>
          break;
 8008e9a:	bf00      	nop
      }
      break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd82 	bl	80099aa <USBD_CtlError>
      break;
 8008ea6:	bf00      	nop
  }

  return ret;
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
 8008eb2:	bf00      	nop

08008eb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d005      	beq.n	8008eda <USBD_StdItfReq+0x26>
 8008ece:	2b40      	cmp	r3, #64	; 0x40
 8008ed0:	d852      	bhi.n	8008f78 <USBD_StdItfReq+0xc4>
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <USBD_StdItfReq+0x26>
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d14e      	bne.n	8008f78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d840      	bhi.n	8008f6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	889b      	ldrh	r3, [r3, #4]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d836      	bhi.n	8008f60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	889b      	ldrh	r3, [r3, #4]
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fed9 	bl	8008cb2 <USBD_CoreFindIF>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	2bff      	cmp	r3, #255	; 0xff
 8008f08:	d01d      	beq.n	8008f46 <USBD_StdItfReq+0x92>
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11a      	bne.n	8008f46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f10:	7bba      	ldrb	r2, [r7, #14]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32ae      	adds	r2, #174	; 0xae
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00f      	beq.n	8008f40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f20:	7bba      	ldrb	r2, [r7, #14]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f28:	7bba      	ldrb	r2, [r7, #14]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	32ae      	adds	r2, #174	; 0xae
 8008f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	4798      	blx	r3
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f3e:	e004      	b.n	8008f4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f40:	2303      	movs	r3, #3
 8008f42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f44:	e001      	b.n	8008f4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f46:	2303      	movs	r3, #3
 8008f48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	88db      	ldrh	r3, [r3, #6]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d110      	bne.n	8008f74 <USBD_StdItfReq+0xc0>
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d10d      	bne.n	8008f74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fdd4 	bl	8009b06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f5e:	e009      	b.n	8008f74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fd21 	bl	80099aa <USBD_CtlError>
          break;
 8008f68:	e004      	b.n	8008f74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f6a:	6839      	ldr	r1, [r7, #0]
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 fd1c 	bl	80099aa <USBD_CtlError>
          break;
 8008f72:	e000      	b.n	8008f76 <USBD_StdItfReq+0xc2>
          break;
 8008f74:	bf00      	nop
      }
      break;
 8008f76:	e004      	b.n	8008f82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fd15 	bl	80099aa <USBD_CtlError>
      break;
 8008f80:	bf00      	nop
  }

  return ret;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	889b      	ldrh	r3, [r3, #4]
 8008f9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d007      	beq.n	8008fbc <USBD_StdEPReq+0x30>
 8008fac:	2b40      	cmp	r3, #64	; 0x40
 8008fae:	f200 817f 	bhi.w	80092b0 <USBD_StdEPReq+0x324>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d02a      	beq.n	800900c <USBD_StdEPReq+0x80>
 8008fb6:	2b20      	cmp	r3, #32
 8008fb8:	f040 817a 	bne.w	80092b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fbc:	7bbb      	ldrb	r3, [r7, #14]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7ff fe83 	bl	8008ccc <USBD_CoreFindEP>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fca:	7b7b      	ldrb	r3, [r7, #13]
 8008fcc:	2bff      	cmp	r3, #255	; 0xff
 8008fce:	f000 8174 	beq.w	80092ba <USBD_StdEPReq+0x32e>
 8008fd2:	7b7b      	ldrb	r3, [r7, #13]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f040 8170 	bne.w	80092ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fda:	7b7a      	ldrb	r2, [r7, #13]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fe2:	7b7a      	ldrb	r2, [r7, #13]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	32ae      	adds	r2, #174	; 0xae
 8008fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	f000 8163 	beq.w	80092ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008ff4:	7b7a      	ldrb	r2, [r7, #13]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	32ae      	adds	r2, #174	; 0xae
 8008ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	4798      	blx	r3
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800900a:	e156      	b.n	80092ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	785b      	ldrb	r3, [r3, #1]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d008      	beq.n	8009026 <USBD_StdEPReq+0x9a>
 8009014:	2b03      	cmp	r3, #3
 8009016:	f300 8145 	bgt.w	80092a4 <USBD_StdEPReq+0x318>
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 809b 	beq.w	8009156 <USBD_StdEPReq+0x1ca>
 8009020:	2b01      	cmp	r3, #1
 8009022:	d03c      	beq.n	800909e <USBD_StdEPReq+0x112>
 8009024:	e13e      	b.n	80092a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b02      	cmp	r3, #2
 8009030:	d002      	beq.n	8009038 <USBD_StdEPReq+0xac>
 8009032:	2b03      	cmp	r3, #3
 8009034:	d016      	beq.n	8009064 <USBD_StdEPReq+0xd8>
 8009036:	e02c      	b.n	8009092 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00d      	beq.n	800905a <USBD_StdEPReq+0xce>
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b80      	cmp	r3, #128	; 0x80
 8009042:	d00a      	beq.n	800905a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f003 fbb1 	bl	800c7b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800904e:	2180      	movs	r1, #128	; 0x80
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f003 fbad 	bl	800c7b0 <USBD_LL_StallEP>
 8009056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009058:	e020      	b.n	800909c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fca4 	bl	80099aa <USBD_CtlError>
              break;
 8009062:	e01b      	b.n	800909c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	885b      	ldrh	r3, [r3, #2]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10e      	bne.n	800908a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <USBD_StdEPReq+0xfe>
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b80      	cmp	r3, #128	; 0x80
 8009076:	d008      	beq.n	800908a <USBD_StdEPReq+0xfe>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	88db      	ldrh	r3, [r3, #6]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d104      	bne.n	800908a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009080:	7bbb      	ldrb	r3, [r7, #14]
 8009082:	4619      	mov	r1, r3
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f003 fb93 	bl	800c7b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fd3b 	bl	8009b06 <USBD_CtlSendStatus>

              break;
 8009090:	e004      	b.n	800909c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fc88 	bl	80099aa <USBD_CtlError>
              break;
 800909a:	bf00      	nop
          }
          break;
 800909c:	e107      	b.n	80092ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d002      	beq.n	80090b0 <USBD_StdEPReq+0x124>
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d016      	beq.n	80090dc <USBD_StdEPReq+0x150>
 80090ae:	e04b      	b.n	8009148 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090b0:	7bbb      	ldrb	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <USBD_StdEPReq+0x146>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	2b80      	cmp	r3, #128	; 0x80
 80090ba:	d00a      	beq.n	80090d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f003 fb75 	bl	800c7b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090c6:	2180      	movs	r1, #128	; 0x80
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f003 fb71 	bl	800c7b0 <USBD_LL_StallEP>
 80090ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090d0:	e040      	b.n	8009154 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fc68 	bl	80099aa <USBD_CtlError>
              break;
 80090da:	e03b      	b.n	8009154 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	885b      	ldrh	r3, [r3, #2]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d136      	bne.n	8009152 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090e4:	7bbb      	ldrb	r3, [r7, #14]
 80090e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d004      	beq.n	80090f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	4619      	mov	r1, r3
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f003 fb7b 	bl	800c7ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fd04 	bl	8009b06 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	4619      	mov	r1, r3
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f7ff fde2 	bl	8008ccc <USBD_CoreFindEP>
 8009108:	4603      	mov	r3, r0
 800910a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800910c:	7b7b      	ldrb	r3, [r7, #13]
 800910e:	2bff      	cmp	r3, #255	; 0xff
 8009110:	d01f      	beq.n	8009152 <USBD_StdEPReq+0x1c6>
 8009112:	7b7b      	ldrb	r3, [r7, #13]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d11c      	bne.n	8009152 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009118:	7b7a      	ldrb	r2, [r7, #13]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009120:	7b7a      	ldrb	r2, [r7, #13]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	32ae      	adds	r2, #174	; 0xae
 8009126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d010      	beq.n	8009152 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009130:	7b7a      	ldrb	r2, [r7, #13]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	32ae      	adds	r2, #174	; 0xae
 8009136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	4798      	blx	r3
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009146:	e004      	b.n	8009152 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fc2d 	bl	80099aa <USBD_CtlError>
              break;
 8009150:	e000      	b.n	8009154 <USBD_StdEPReq+0x1c8>
              break;
 8009152:	bf00      	nop
          }
          break;
 8009154:	e0ab      	b.n	80092ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b02      	cmp	r3, #2
 8009160:	d002      	beq.n	8009168 <USBD_StdEPReq+0x1dc>
 8009162:	2b03      	cmp	r3, #3
 8009164:	d032      	beq.n	80091cc <USBD_StdEPReq+0x240>
 8009166:	e097      	b.n	8009298 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <USBD_StdEPReq+0x1f2>
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d004      	beq.n	800917e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fc17 	bl	80099aa <USBD_CtlError>
                break;
 800917c:	e091      	b.n	80092a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800917e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009182:	2b00      	cmp	r3, #0
 8009184:	da0b      	bge.n	800919e <USBD_StdEPReq+0x212>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	3310      	adds	r3, #16
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	4413      	add	r3, r2
 800919a:	3304      	adds	r3, #4
 800919c:	e00b      	b.n	80091b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800919e:	7bbb      	ldrb	r3, [r7, #14]
 80091a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	4413      	add	r3, r2
 80091b4:	3304      	adds	r3, #4
 80091b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	2200      	movs	r2, #0
 80091bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2202      	movs	r2, #2
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fc61 	bl	8009a8c <USBD_CtlSendData>
              break;
 80091ca:	e06a      	b.n	80092a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	da11      	bge.n	80091f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	f003 020f 	and.w	r2, r3, #15
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	009b      	lsls	r3, r3, #2
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d117      	bne.n	800921e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091ee:	6839      	ldr	r1, [r7, #0]
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fbda 	bl	80099aa <USBD_CtlError>
                  break;
 80091f6:	e054      	b.n	80092a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	f003 020f 	and.w	r2, r3, #15
 80091fe:	6879      	ldr	r1, [r7, #4]
 8009200:	4613      	mov	r3, r2
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	440b      	add	r3, r1
 800920a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fbc7 	bl	80099aa <USBD_CtlError>
                  break;
 800921c:	e041      	b.n	80092a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800921e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009222:	2b00      	cmp	r3, #0
 8009224:	da0b      	bge.n	800923e <USBD_StdEPReq+0x2b2>
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800922c:	4613      	mov	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	3310      	adds	r3, #16
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	4413      	add	r3, r2
 800923a:	3304      	adds	r3, #4
 800923c:	e00b      	b.n	8009256 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009244:	4613      	mov	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4413      	add	r3, r2
 8009254:	3304      	adds	r3, #4
 8009256:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d002      	beq.n	8009264 <USBD_StdEPReq+0x2d8>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d103      	bne.n	800926c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2200      	movs	r2, #0
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	e00e      	b.n	800928a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f003 fadb 	bl	800c82c <USBD_LL_IsStallEP>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d003      	beq.n	8009284 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	e002      	b.n	800928a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2202      	movs	r2, #2
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fbfb 	bl	8009a8c <USBD_CtlSendData>
              break;
 8009296:	e004      	b.n	80092a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fb85 	bl	80099aa <USBD_CtlError>
              break;
 80092a0:	bf00      	nop
          }
          break;
 80092a2:	e004      	b.n	80092ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fb7f 	bl	80099aa <USBD_CtlError>
          break;
 80092ac:	bf00      	nop
      }
      break;
 80092ae:	e005      	b.n	80092bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb79 	bl	80099aa <USBD_CtlError>
      break;
 80092b8:	e000      	b.n	80092bc <USBD_StdEPReq+0x330>
      break;
 80092ba:	bf00      	nop
  }

  return ret;
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	885b      	ldrh	r3, [r3, #2]
 80092e2:	0a1b      	lsrs	r3, r3, #8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b0e      	cmp	r3, #14
 80092ea:	f200 8152 	bhi.w	8009592 <USBD_GetDescriptor+0x2ca>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USBD_GetDescriptor+0x2c>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009365 	.word	0x08009365
 80092f8:	0800937d 	.word	0x0800937d
 80092fc:	080093bd 	.word	0x080093bd
 8009300:	08009593 	.word	0x08009593
 8009304:	08009593 	.word	0x08009593
 8009308:	08009533 	.word	0x08009533
 800930c:	0800955f 	.word	0x0800955f
 8009310:	08009593 	.word	0x08009593
 8009314:	08009593 	.word	0x08009593
 8009318:	08009593 	.word	0x08009593
 800931c:	08009593 	.word	0x08009593
 8009320:	08009593 	.word	0x08009593
 8009324:	08009593 	.word	0x08009593
 8009328:	08009593 	.word	0x08009593
 800932c:	08009331 	.word	0x08009331
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009336:	69db      	ldr	r3, [r3, #28]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00b      	beq.n	8009354 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	7c12      	ldrb	r2, [r2, #16]
 8009348:	f107 0108 	add.w	r1, r7, #8
 800934c:	4610      	mov	r0, r2
 800934e:	4798      	blx	r3
 8009350:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009352:	e126      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fb27 	bl	80099aa <USBD_CtlError>
        err++;
 800935c:	7afb      	ldrb	r3, [r7, #11]
 800935e:	3301      	adds	r3, #1
 8009360:	72fb      	strb	r3, [r7, #11]
      break;
 8009362:	e11e      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
      break;
 800937a:	e112      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	7c1b      	ldrb	r3, [r3, #16]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10d      	bne.n	80093a0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	f107 0208 	add.w	r2, r7, #8
 8009390:	4610      	mov	r0, r2
 8009392:	4798      	blx	r3
 8009394:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	2202      	movs	r2, #2
 800939c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800939e:	e100      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	f107 0208 	add.w	r2, r7, #8
 80093ac:	4610      	mov	r0, r2
 80093ae:	4798      	blx	r3
 80093b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	3301      	adds	r3, #1
 80093b6:	2202      	movs	r2, #2
 80093b8:	701a      	strb	r2, [r3, #0]
      break;
 80093ba:	e0f2      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	885b      	ldrh	r3, [r3, #2]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	2b05      	cmp	r3, #5
 80093c4:	f200 80ac 	bhi.w	8009520 <USBD_GetDescriptor+0x258>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <USBD_GetDescriptor+0x108>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	080093e9 	.word	0x080093e9
 80093d4:	0800941d 	.word	0x0800941d
 80093d8:	08009451 	.word	0x08009451
 80093dc:	08009485 	.word	0x08009485
 80093e0:	080094b9 	.word	0x080094b9
 80093e4:	080094ed 	.word	0x080094ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	7c12      	ldrb	r2, [r2, #16]
 8009400:	f107 0108 	add.w	r1, r7, #8
 8009404:	4610      	mov	r0, r2
 8009406:	4798      	blx	r3
 8009408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800940a:	e091      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 facb 	bl	80099aa <USBD_CtlError>
            err++;
 8009414:	7afb      	ldrb	r3, [r7, #11]
 8009416:	3301      	adds	r3, #1
 8009418:	72fb      	strb	r3, [r7, #11]
          break;
 800941a:	e089      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00b      	beq.n	8009440 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	7c12      	ldrb	r2, [r2, #16]
 8009434:	f107 0108 	add.w	r1, r7, #8
 8009438:	4610      	mov	r0, r2
 800943a:	4798      	blx	r3
 800943c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800943e:	e077      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fab1 	bl	80099aa <USBD_CtlError>
            err++;
 8009448:	7afb      	ldrb	r3, [r7, #11]
 800944a:	3301      	adds	r3, #1
 800944c:	72fb      	strb	r3, [r7, #11]
          break;
 800944e:	e06f      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	7c12      	ldrb	r2, [r2, #16]
 8009468:	f107 0108 	add.w	r1, r7, #8
 800946c:	4610      	mov	r0, r2
 800946e:	4798      	blx	r3
 8009470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009472:	e05d      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009474:	6839      	ldr	r1, [r7, #0]
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 fa97 	bl	80099aa <USBD_CtlError>
            err++;
 800947c:	7afb      	ldrb	r3, [r7, #11]
 800947e:	3301      	adds	r3, #1
 8009480:	72fb      	strb	r3, [r7, #11]
          break;
 8009482:	e055      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	7c12      	ldrb	r2, [r2, #16]
 800949c:	f107 0108 	add.w	r1, r7, #8
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
 80094a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094a6:	e043      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa7d 	bl	80099aa <USBD_CtlError>
            err++;
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	3301      	adds	r3, #1
 80094b4:	72fb      	strb	r3, [r7, #11]
          break;
 80094b6:	e03b      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7c12      	ldrb	r2, [r2, #16]
 80094d0:	f107 0108 	add.w	r1, r7, #8
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094da:	e029      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fa63 	bl	80099aa <USBD_CtlError>
            err++;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	3301      	adds	r3, #1
 80094e8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ea:	e021      	b.n	8009530 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 0108 	add.w	r1, r7, #8
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800950e:	e00f      	b.n	8009530 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa49 	bl	80099aa <USBD_CtlError>
            err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
          break;
 800951e:	e007      	b.n	8009530 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa41 	bl	80099aa <USBD_CtlError>
          err++;
 8009528:	7afb      	ldrb	r3, [r7, #11]
 800952a:	3301      	adds	r3, #1
 800952c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800952e:	bf00      	nop
      }
      break;
 8009530:	e037      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7c1b      	ldrb	r3, [r3, #16]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009542:	f107 0208 	add.w	r2, r7, #8
 8009546:	4610      	mov	r0, r2
 8009548:	4798      	blx	r3
 800954a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800954c:	e029      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 fa2a 	bl	80099aa <USBD_CtlError>
        err++;
 8009556:	7afb      	ldrb	r3, [r7, #11]
 8009558:	3301      	adds	r3, #1
 800955a:	72fb      	strb	r3, [r7, #11]
      break;
 800955c:	e021      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7c1b      	ldrb	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10d      	bne.n	8009582 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	f107 0208 	add.w	r2, r7, #8
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
 8009576:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	3301      	adds	r3, #1
 800957c:	2207      	movs	r2, #7
 800957e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009580:	e00f      	b.n	80095a2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009582:	6839      	ldr	r1, [r7, #0]
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fa10 	bl	80099aa <USBD_CtlError>
        err++;
 800958a:	7afb      	ldrb	r3, [r7, #11]
 800958c:	3301      	adds	r3, #1
 800958e:	72fb      	strb	r3, [r7, #11]
      break;
 8009590:	e007      	b.n	80095a2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009592:	6839      	ldr	r1, [r7, #0]
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fa08 	bl	80099aa <USBD_CtlError>
      err++;
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	3301      	adds	r3, #1
 800959e:	72fb      	strb	r3, [r7, #11]
      break;
 80095a0:	bf00      	nop
  }

  if (err != 0U)
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d11e      	bne.n	80095e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	88db      	ldrh	r3, [r3, #6]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d016      	beq.n	80095de <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095b0:	893b      	ldrh	r3, [r7, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00e      	beq.n	80095d4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	88da      	ldrh	r2, [r3, #6]
 80095ba:	893b      	ldrh	r3, [r7, #8]
 80095bc:	4293      	cmp	r3, r2
 80095be:	bf28      	it	cs
 80095c0:	4613      	movcs	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	461a      	mov	r2, r3
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa5d 	bl	8009a8c <USBD_CtlSendData>
 80095d2:	e009      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f9e7 	bl	80099aa <USBD_CtlError>
 80095dc:	e004      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fa91 	bl	8009b06 <USBD_CtlSendStatus>
 80095e4:	e000      	b.n	80095e8 <USBD_GetDescriptor+0x320>
    return;
 80095e6:	bf00      	nop
  }
}
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop

080095f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	889b      	ldrh	r3, [r3, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d131      	bne.n	8009666 <USBD_SetAddress+0x76>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d12d      	bne.n	8009666 <USBD_SetAddress+0x76>
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	885b      	ldrh	r3, [r3, #2]
 800960e:	2b7f      	cmp	r3, #127	; 0x7f
 8009610:	d829      	bhi.n	8009666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	885b      	ldrh	r3, [r3, #2]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800961c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009624:	b2db      	uxtb	r3, r3
 8009626:	2b03      	cmp	r3, #3
 8009628:	d104      	bne.n	8009634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800962a:	6839      	ldr	r1, [r7, #0]
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9bc 	bl	80099aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009632:	e01d      	b.n	8009670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7bfa      	ldrb	r2, [r7, #15]
 8009638:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800963c:	7bfb      	ldrb	r3, [r7, #15]
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f003 f91f 	bl	800c884 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 fa5d 	bl	8009b06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d004      	beq.n	800965c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800965a:	e009      	b.n	8009670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009664:	e004      	b.n	8009670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f99e 	bl	80099aa <USBD_CtlError>
  }
}
 800966e:	bf00      	nop
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	885b      	ldrh	r3, [r3, #2]
 800968a:	b2da      	uxtb	r2, r3
 800968c:	4b4e      	ldr	r3, [pc, #312]	; (80097c8 <USBD_SetConfig+0x150>)
 800968e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009690:	4b4d      	ldr	r3, [pc, #308]	; (80097c8 <USBD_SetConfig+0x150>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d905      	bls.n	80096a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f985 	bl	80099aa <USBD_CtlError>
    return USBD_FAIL;
 80096a0:	2303      	movs	r3, #3
 80096a2:	e08c      	b.n	80097be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d002      	beq.n	80096b6 <USBD_SetConfig+0x3e>
 80096b0:	2b03      	cmp	r3, #3
 80096b2:	d029      	beq.n	8009708 <USBD_SetConfig+0x90>
 80096b4:	e075      	b.n	80097a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096b6:	4b44      	ldr	r3, [pc, #272]	; (80097c8 <USBD_SetConfig+0x150>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d020      	beq.n	8009700 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096be:	4b42      	ldr	r3, [pc, #264]	; (80097c8 <USBD_SetConfig+0x150>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096c8:	4b3f      	ldr	r3, [pc, #252]	; (80097c8 <USBD_SetConfig+0x150>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fe ffbd 	bl	800864e <USBD_SetClassConfig>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d008      	beq.n	80096f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096de:	6839      	ldr	r1, [r7, #0]
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 f962 	bl	80099aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2202      	movs	r2, #2
 80096ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096ee:	e065      	b.n	80097bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fa08 	bl	8009b06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2203      	movs	r2, #3
 80096fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80096fe:	e05d      	b.n	80097bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fa00 	bl	8009b06 <USBD_CtlSendStatus>
      break;
 8009706:	e059      	b.n	80097bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009708:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <USBD_SetConfig+0x150>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d112      	bne.n	8009736 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2202      	movs	r2, #2
 8009714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009718:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <USBD_SetConfig+0x150>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009722:	4b29      	ldr	r3, [pc, #164]	; (80097c8 <USBD_SetConfig+0x150>)
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f7fe ffac 	bl	8008686 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f9e9 	bl	8009b06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009734:	e042      	b.n	80097bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009736:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <USBD_SetConfig+0x150>)
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	429a      	cmp	r2, r3
 8009742:	d02a      	beq.n	800979a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f7fe ff9a 	bl	8008686 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009752:	4b1d      	ldr	r3, [pc, #116]	; (80097c8 <USBD_SetConfig+0x150>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <USBD_SetConfig+0x150>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7fe ff73 	bl	800864e <USBD_SetClassConfig>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00f      	beq.n	8009792 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009772:	6839      	ldr	r1, [r7, #0]
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f918 	bl	80099aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	b2db      	uxtb	r3, r3
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f7fe ff7f 	bl	8008686 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009790:	e014      	b.n	80097bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f9b7 	bl	8009b06 <USBD_CtlSendStatus>
      break;
 8009798:	e010      	b.n	80097bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9b3 	bl	8009b06 <USBD_CtlSendStatus>
      break;
 80097a0:	e00c      	b.n	80097bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f900 	bl	80099aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097aa:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <USBD_SetConfig+0x150>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fe ff68 	bl	8008686 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097b6:	2303      	movs	r3, #3
 80097b8:	73fb      	strb	r3, [r7, #15]
      break;
 80097ba:	bf00      	nop
  }

  return ret;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000278 	.word	0x20000278

080097cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88db      	ldrh	r3, [r3, #6]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d004      	beq.n	80097e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097de:	6839      	ldr	r1, [r7, #0]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 f8e2 	bl	80099aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097e6:	e023      	b.n	8009830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	dc02      	bgt.n	80097fa <USBD_GetConfig+0x2e>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dc03      	bgt.n	8009800 <USBD_GetConfig+0x34>
 80097f8:	e015      	b.n	8009826 <USBD_GetConfig+0x5a>
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d00b      	beq.n	8009816 <USBD_GetConfig+0x4a>
 80097fe:	e012      	b.n	8009826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	3308      	adds	r3, #8
 800980a:	2201      	movs	r2, #1
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 f93c 	bl	8009a8c <USBD_CtlSendData>
        break;
 8009814:	e00c      	b.n	8009830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	3304      	adds	r3, #4
 800981a:	2201      	movs	r2, #1
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f000 f934 	bl	8009a8c <USBD_CtlSendData>
        break;
 8009824:	e004      	b.n	8009830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009826:	6839      	ldr	r1, [r7, #0]
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f8be 	bl	80099aa <USBD_CtlError>
        break;
 800982e:	bf00      	nop
}
 8009830:	bf00      	nop
 8009832:	3708      	adds	r7, #8
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009848:	b2db      	uxtb	r3, r3
 800984a:	3b01      	subs	r3, #1
 800984c:	2b02      	cmp	r3, #2
 800984e:	d81e      	bhi.n	800988e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	88db      	ldrh	r3, [r3, #6]
 8009854:	2b02      	cmp	r3, #2
 8009856:	d004      	beq.n	8009862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009858:	6839      	ldr	r1, [r7, #0]
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f8a5 	bl	80099aa <USBD_CtlError>
        break;
 8009860:	e01a      	b.n	8009898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800986e:	2b00      	cmp	r3, #0
 8009870:	d005      	beq.n	800987e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f043 0202 	orr.w	r2, r3, #2
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	330c      	adds	r3, #12
 8009882:	2202      	movs	r2, #2
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f900 	bl	8009a8c <USBD_CtlSendData>
      break;
 800988c:	e004      	b.n	8009898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800988e:	6839      	ldr	r1, [r7, #0]
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f88a 	bl	80099aa <USBD_CtlError>
      break;
 8009896:	bf00      	nop
  }
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d107      	bne.n	80098c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f923 	bl	8009b06 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098c0:	e013      	b.n	80098ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	885b      	ldrh	r3, [r3, #2]
 80098c6:	2b02      	cmp	r3, #2
 80098c8:	d10b      	bne.n	80098e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	889b      	ldrh	r3, [r3, #4]
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	b2da      	uxtb	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f000 f913 	bl	8009b06 <USBD_CtlSendStatus>
}
 80098e0:	e003      	b.n	80098ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098e2:	6839      	ldr	r1, [r7, #0]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f860 	bl	80099aa <USBD_CtlError>
}
 80098ea:	bf00      	nop
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009902:	b2db      	uxtb	r3, r3
 8009904:	3b01      	subs	r3, #1
 8009906:	2b02      	cmp	r3, #2
 8009908:	d80b      	bhi.n	8009922 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	885b      	ldrh	r3, [r3, #2]
 800990e:	2b01      	cmp	r3, #1
 8009910:	d10c      	bne.n	800992c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8f3 	bl	8009b06 <USBD_CtlSendStatus>
      }
      break;
 8009920:	e004      	b.n	800992c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f000 f840 	bl	80099aa <USBD_CtlError>
      break;
 800992a:	e000      	b.n	800992e <USBD_ClrFeature+0x3c>
      break;
 800992c:	bf00      	nop
  }
}
 800992e:	bf00      	nop
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b084      	sub	sp, #16
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	781a      	ldrb	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	3301      	adds	r3, #1
 8009950:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	781a      	ldrb	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3301      	adds	r3, #1
 800995e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff fa17 	bl	8008d94 <SWAPBYTE>
 8009966:	4603      	mov	r3, r0
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	3301      	adds	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff fa0a 	bl	8008d94 <SWAPBYTE>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	3301      	adds	r3, #1
 800998c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3301      	adds	r3, #1
 8009992:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f7ff f9fd 	bl	8008d94 <SWAPBYTE>
 800999a:	4603      	mov	r3, r0
 800999c:	461a      	mov	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	80da      	strh	r2, [r3, #6]
}
 80099a2:	bf00      	nop
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b082      	sub	sp, #8
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099b4:	2180      	movs	r1, #128	; 0x80
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f002 fefa 	bl	800c7b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099bc:	2100      	movs	r1, #0
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 fef6 	bl	800c7b0 <USBD_LL_StallEP>
}
 80099c4:	bf00      	nop
 80099c6:	3708      	adds	r7, #8
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d036      	beq.n	8009a50 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099e6:	6938      	ldr	r0, [r7, #16]
 80099e8:	f000 f836 	bl	8009a58 <USBD_GetLen>
 80099ec:	4603      	mov	r3, r0
 80099ee:	3301      	adds	r3, #1
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80099fa:	7dfb      	ldrb	r3, [r7, #23]
 80099fc:	68ba      	ldr	r2, [r7, #8]
 80099fe:	4413      	add	r3, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	7812      	ldrb	r2, [r2, #0]
 8009a04:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a0c:	7dfb      	ldrb	r3, [r7, #23]
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4413      	add	r3, r2
 8009a12:	2203      	movs	r2, #3
 8009a14:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a1c:	e013      	b.n	8009a46 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	4413      	add	r3, r2
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	613b      	str	r3, [r7, #16]
    idx++;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	3301      	adds	r3, #1
 8009a34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a36:	7dfb      	ldrb	r3, [r7, #23]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
 8009a42:	3301      	adds	r3, #1
 8009a44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e7      	bne.n	8009a1e <USBD_GetString+0x52>
 8009a4e:	e000      	b.n	8009a52 <USBD_GetString+0x86>
    return;
 8009a50:	bf00      	nop
  }
}
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a68:	e005      	b.n	8009a76 <USBD_GetLen+0x1e>
  {
    len++;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	3301      	adds	r3, #1
 8009a74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d1f5      	bne.n	8009a6a <USBD_GetLen+0x12>
  }

  return len;
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2202      	movs	r2, #2
 8009a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	68f8      	ldr	r0, [r7, #12]
 8009ab4:	f002 ff05 	bl	800c8c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f002 fef4 	bl	800c8c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68ba      	ldr	r2, [r7, #8]
 8009af4:	2100      	movs	r1, #0
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f002 ff04 	bl	800c904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2204      	movs	r2, #4
 8009b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b16:	2300      	movs	r3, #0
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f002 fed0 	bl	800c8c2 <USBD_LL_Transmit>

  return USBD_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2205      	movs	r2, #5
 8009b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f002 fede 	bl	800c904 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b54:	b590      	push	{r4, r7, lr}
 8009b56:	b08b      	sub	sp, #44	; 0x2c
 8009b58:	af04      	add	r7, sp, #16
 8009b5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b66:	7919      	ldrb	r1, [r3, #4]
 8009b68:	23ff      	movs	r3, #255	; 0xff
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 ff75 	bl	800aa5c <USBH_FindInterface>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b76:	7dbb      	ldrb	r3, [r7, #22]
 8009b78:	2bff      	cmp	r3, #255	; 0xff
 8009b7a:	d002      	beq.n	8009b82 <USBH_HID_InterfaceInit+0x2e>
 8009b7c:	7dbb      	ldrb	r3, [r7, #22]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d901      	bls.n	8009b86 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b82:	2302      	movs	r3, #2
 8009b84:	e108      	b.n	8009d98 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b86:	7dbb      	ldrb	r3, [r7, #22]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 ff4a 	bl	800aa24 <USBH_SelectInterface>
 8009b90:	4603      	mov	r3, r0
 8009b92:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8009b94:	7d7b      	ldrb	r3, [r7, #21]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e0fc      	b.n	8009d98 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009ba4:	2034      	movs	r0, #52	; 0x34
 8009ba6:	f003 faa1 	bl	800d0ec <malloc>
 8009baa:	4603      	mov	r3, r0
 8009bac:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bb4:	69db      	ldr	r3, [r3, #28]
 8009bb6:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e0ea      	b.n	8009d98 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8009bc2:	2234      	movs	r2, #52	; 0x34
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	6938      	ldr	r0, [r7, #16]
 8009bc8:	f003 faa0 	bl	800d10c <memset>

  HID_Handle->state = HID_ERROR;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2207      	movs	r2, #7
 8009bd0:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8009bd2:	7dbb      	ldrb	r3, [r7, #22]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	211a      	movs	r1, #26
 8009bd8:	fb01 f303 	mul.w	r3, r1, r3
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d103      	bne.n	8009bf0 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4a6d      	ldr	r2, [pc, #436]	; (8009da0 <USBH_HID_InterfaceInit+0x24c>)
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
 8009bee:	e010      	b.n	8009c12 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8009bf0:	7dbb      	ldrb	r3, [r7, #22]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	211a      	movs	r1, #26
 8009bf6:	fb01 f303 	mul.w	r3, r1, r3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d103      	bne.n	8009c0e <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	4a66      	ldr	r2, [pc, #408]	; (8009da4 <USBH_HID_InterfaceInit+0x250>)
 8009c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8009c0c:	e001      	b.n	8009c12 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e0c2      	b.n	8009d98 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	2200      	movs	r2, #0
 8009c16:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c1e:	7dbb      	ldrb	r3, [r7, #22]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	211a      	movs	r1, #26
 8009c24:	fb01 f303 	mul.w	r3, r1, r3
 8009c28:	4413      	add	r3, r2
 8009c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c2e:	781a      	ldrb	r2, [r3, #0]
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c34:	7dbb      	ldrb	r3, [r7, #22]
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	211a      	movs	r1, #26
 8009c3a:	fb01 f303 	mul.w	r3, r1, r3
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009c4a:	7dbb      	ldrb	r3, [r7, #22]
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	211a      	movs	r1, #26
 8009c50:	fb01 f303 	mul.w	r3, r1, r3
 8009c54:	4413      	add	r3, r2
 8009c56:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	8b9b      	ldrh	r3, [r3, #28]
 8009c66:	2b09      	cmp	r3, #9
 8009c68:	d802      	bhi.n	8009c70 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8009c70:	7dbb      	ldrb	r3, [r7, #22]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	211a      	movs	r1, #26
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	2b02      	cmp	r3, #2
 8009c84:	bf28      	it	cs
 8009c86:	2302      	movcs	r3, #2
 8009c88:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
 8009c8e:	e07d      	b.n	8009d8c <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8009c90:	7dbb      	ldrb	r3, [r7, #22]
 8009c92:	7df9      	ldrb	r1, [r7, #23]
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	3101      	adds	r1, #1
 8009c98:	00c9      	lsls	r1, r1, #3
 8009c9a:	201a      	movs	r0, #26
 8009c9c:	fb00 f303 	mul.w	r3, r0, r3
 8009ca0:	440b      	add	r3, r1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	b25b      	sxtb	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	da35      	bge.n	8009d1c <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009cb0:	7dbb      	ldrb	r3, [r7, #22]
 8009cb2:	7df9      	ldrb	r1, [r7, #23]
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	3101      	adds	r1, #1
 8009cb8:	00c9      	lsls	r1, r1, #3
 8009cba:	201a      	movs	r0, #26
 8009cbc:	fb00 f303 	mul.w	r3, r0, r3
 8009cc0:	440b      	add	r3, r1
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009cc8:	781a      	ldrb	r2, [r3, #0]
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	791b      	ldrb	r3, [r3, #4]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f002 f9b8 	bl	800c04a <USBH_AllocPipe>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	461a      	mov	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	7859      	ldrb	r1, [r3, #1]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	7918      	ldrb	r0, [r3, #4]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cf6:	693a      	ldr	r2, [r7, #16]
 8009cf8:	8b12      	ldrh	r2, [r2, #24]
 8009cfa:	9202      	str	r2, [sp, #8]
 8009cfc:	2203      	movs	r2, #3
 8009cfe:	9201      	str	r2, [sp, #4]
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	4623      	mov	r3, r4
 8009d04:	4602      	mov	r2, r0
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f002 f970 	bl	800bfec <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	785b      	ldrb	r3, [r3, #1]
 8009d10:	2200      	movs	r2, #0
 8009d12:	4619      	mov	r1, r3
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f003 f93b 	bl	800cf90 <USBH_LL_SetToggle>
 8009d1a:	e034      	b.n	8009d86 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009d1c:	7dbb      	ldrb	r3, [r7, #22]
 8009d1e:	7df9      	ldrb	r1, [r7, #23]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	3101      	adds	r1, #1
 8009d24:	00c9      	lsls	r1, r1, #3
 8009d26:	201a      	movs	r0, #26
 8009d28:	fb00 f303 	mul.w	r3, r0, r3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	4413      	add	r3, r2
 8009d30:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	78db      	ldrb	r3, [r3, #3]
 8009d3e:	4619      	mov	r1, r3
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f002 f982 	bl	800c04a <USBH_AllocPipe>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	7819      	ldrb	r1, [r3, #0]
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	78d8      	ldrb	r0, [r3, #3]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	8b12      	ldrh	r2, [r2, #24]
 8009d66:	9202      	str	r2, [sp, #8]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	9201      	str	r2, [sp, #4]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4623      	mov	r3, r4
 8009d70:	4602      	mov	r2, r0
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f002 f93a 	bl	800bfec <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f003 f905 	bl	800cf90 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]
 8009d8c:	7dfa      	ldrb	r2, [r7, #23]
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	f4ff af7d 	bcc.w	8009c90 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	371c      	adds	r7, #28
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd90      	pop	{r4, r7, pc}
 8009da0:	0800a4a5 	.word	0x0800a4a5
 8009da4:	0800a6ed 	.word	0x0800a6ed

08009da8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d00e      	beq.n	8009de0 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	785b      	ldrb	r3, [r3, #1]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f002 f92e 	bl	800c02a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f002 f959 	bl	800c08c <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	781b      	ldrb	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d00e      	beq.n	8009e06 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f002 f91b 	bl	800c02a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f002 f946 	bl	800c08c <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e0c:	69db      	ldr	r3, [r3, #28]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00b      	beq.n	8009e2a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f003 f96e 	bl	800d0fc <free>
    phost->pActiveClass->pData = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e26:	2200      	movs	r2, #0
 8009e28:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8009e40:	2301      	movs	r3, #1
 8009e42:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	795b      	ldrb	r3, [r3, #5]
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	d860      	bhi.n	8009f18 <USBH_HID_ClassRequest+0xe4>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USBH_HID_ClassRequest+0x28>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e75 	.word	0x08009e75
 8009e60:	08009f19 	.word	0x08009f19
 8009e64:	08009e8f 	.word	0x08009e8f
 8009e68:	08009e75 	.word	0x08009e75
 8009e6c:	08009eb9 	.word	0x08009eb9
 8009e70:	08009ee3 	.word	0x08009ee3
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	331c      	adds	r3, #28
 8009e7e:	4619      	mov	r1, r3
 8009e80:	4610      	mov	r0, r2
 8009e82:	f000 f9cd 	bl	800a220 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2202      	movs	r2, #2
 8009e8a:	715a      	strb	r2, [r3, #5]

      break;
 8009e8c:	e04b      	b.n	8009f26 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e92:	4619      	mov	r1, r3
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f000 f930 	bl	800a0fa <USBH_HID_GetHIDReportDescriptor>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d103      	bne.n	8009eac <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2204      	movs	r2, #4
 8009ea8:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8009eaa:	e037      	b.n	8009f1c <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d134      	bne.n	8009f1c <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb6:	e031      	b.n	8009f1c <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8009eb8:	2200      	movs	r2, #0
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 f935 	bl	800a12c <USBH_HID_SetIdle>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d103      	bne.n	8009ed4 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2205      	movs	r2, #5
 8009ed0:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8009ed2:	e025      	b.n	8009f20 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8009ed4:	7bbb      	ldrb	r3, [r7, #14]
 8009ed6:	2b03      	cmp	r3, #3
 8009ed8:	d122      	bne.n	8009f20 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	2205      	movs	r2, #5
 8009ede:	715a      	strb	r2, [r3, #5]
      break;
 8009ee0:	e01e      	b.n	8009f20 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f975 	bl	800a1d4 <USBH_HID_SetProtocol>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10b      	bne.n	8009f0c <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f00:	2102      	movs	r1, #2
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	4798      	blx	r3
        status = USBH_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8009f0a:	e00b      	b.n	8009f24 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f0c:	7bbb      	ldrb	r3, [r7, #14]
 8009f0e:	2b03      	cmp	r3, #3
 8009f10:	d108      	bne.n	8009f24 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8009f12:	2302      	movs	r3, #2
 8009f14:	73fb      	strb	r3, [r7, #15]
      break;
 8009f16:	e005      	b.n	8009f24 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8009f18:	bf00      	nop
 8009f1a:	e004      	b.n	8009f26 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f1c:	bf00      	nop
 8009f1e:	e002      	b.n	8009f26 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f20:	bf00      	nop
 8009f22:	e000      	b.n	8009f26 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f24:	bf00      	nop
  }

  return status;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af02      	add	r7, sp, #8
 8009f36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f42:	69db      	ldr	r3, [r3, #28]
 8009f44:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	789b      	ldrb	r3, [r3, #2]
 8009f4a:	2b06      	cmp	r3, #6
 8009f4c:	f200 80a9 	bhi.w	800a0a2 <USBH_HID_Process+0x172>
 8009f50:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <USBH_HID_Process+0x28>)
 8009f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f56:	bf00      	nop
 8009f58:	08009f75 	.word	0x08009f75
 8009f5c:	08009f85 	.word	0x08009f85
 8009f60:	0800a0a3 	.word	0x0800a0a3
 8009f64:	0800a0a3 	.word	0x0800a0a3
 8009f68:	08009ff5 	.word	0x08009ff5
 8009f6c:	08009fdf 	.word	0x08009fdf
 8009f70:	0800a023 	.word	0x0800a023
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f82:	e093      	b.n	800a0ac <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	695a      	ldr	r2, [r3, #20]
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	8b1b      	ldrh	r3, [r3, #24]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	9300      	str	r3, [sp, #0]
 8009f90:	4613      	mov	r3, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	2101      	movs	r1, #1
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 f8f0 	bl	800a17c <USBH_HID_GetReport>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d103      	bne.n	8009fae <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2205      	movs	r2, #5
 8009faa:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fac:	e07e      	b.n	800a0ac <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d105      	bne.n	8009fc0 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8009fbe:	e075      	b.n	800a0ac <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d105      	bne.n	8009fd2 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	2205      	movs	r2, #5
 8009fca:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd0:	e06c      	b.n	800a0ac <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2207      	movs	r2, #7
 8009fd6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009fd8:	2302      	movs	r3, #2
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	e066      	b.n	800a0ac <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d05c      	beq.n	800a0a6 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2204      	movs	r2, #4
 8009ff0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ff2:	e058      	b.n	800a0a6 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	785b      	ldrb	r3, [r3, #1]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 ffd3 	bl	800bfae <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	2206      	movs	r2, #6
 800a00c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800a020:	e044      	b.n	800a0ac <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	785b      	ldrb	r3, [r3, #1]
 800a026:	4619      	mov	r1, r3
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f002 ff87 	bl	800cf3c <USBH_LL_GetURBState>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b01      	cmp	r3, #1
 800a032:	d120      	bne.n	800a076 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f002 feec 	bl	800ce18 <USBH_LL_GetLastXferSize>
 800a040:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d12e      	bne.n	800a0aa <USBH_HID_Process+0x17a>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d02b      	beq.n	800a0aa <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f103 0008 	add.w	r0, r3, #8
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	6959      	ldr	r1, [r3, #20]
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	8b1b      	ldrh	r3, [r3, #24]
 800a060:	461a      	mov	r2, r3
 800a062:	f000 f9ca 	bl	800a3fa <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	2201      	movs	r2, #1
 800a06a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f7f6 fac2 	bl	80005f8 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800a074:	e019      	b.n	800a0aa <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	4619      	mov	r1, r3
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f002 ff5d 	bl	800cf3c <USBH_LL_GetURBState>
 800a082:	4603      	mov	r3, r0
 800a084:	2b05      	cmp	r3, #5
 800a086:	d110      	bne.n	800a0aa <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	7e9b      	ldrb	r3, [r3, #26]
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f001 fab1 	bl	800b5f6 <USBH_ClrFeature>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d107      	bne.n	800a0aa <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	2204      	movs	r2, #4
 800a09e:	709a      	strb	r2, [r3, #2]
      break;
 800a0a0:	e003      	b.n	800a0aa <USBH_HID_Process+0x17a>

    default:
      break;
 800a0a2:	bf00      	nop
 800a0a4:	e002      	b.n	800a0ac <USBH_HID_Process+0x17c>
      break;
 800a0a6:	bf00      	nop
 800a0a8:	e000      	b.n	800a0ac <USBH_HID_Process+0x17c>
      break;
 800a0aa:	bf00      	nop
  }

  return status;
 800a0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop

0800a0b8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c6:	69db      	ldr	r3, [r3, #28]
 800a0c8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	789b      	ldrb	r3, [r3, #2]
 800a0ce:	2b06      	cmp	r3, #6
 800a0d0:	d10c      	bne.n	800a0ec <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	1ad3      	subs	r3, r2, r3
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	8b92      	ldrh	r2, [r2, #28]
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d302      	bcc.n	800a0ec <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2204      	movs	r2, #4
 800a0ea:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b086      	sub	sp, #24
 800a0fe:	af02      	add	r7, sp, #8
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	460b      	mov	r3, r1
 800a104:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a10c:	887b      	ldrh	r3, [r7, #2]
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	4613      	mov	r3, r2
 800a112:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800a116:	2101      	movs	r1, #1
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 f9cc 	bl	800b4b6 <USBH_GetDescriptor>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800a122:	7bfb      	ldrb	r3, [r7, #15]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
 800a138:	4613      	mov	r3, r2
 800a13a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2221      	movs	r2, #33	; 0x21
 800a140:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	220a      	movs	r2, #10
 800a146:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	021b      	lsls	r3, r3, #8
 800a14e:	b29a      	uxth	r2, r3
 800a150:	78bb      	ldrb	r3, [r7, #2]
 800a152:	b29b      	uxth	r3, r3
 800a154:	4313      	orrs	r3, r2
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a168:	2200      	movs	r2, #0
 800a16a:	2100      	movs	r1, #0
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 fd0f 	bl	800bb90 <USBH_CtlReq>
 800a172:	4603      	mov	r3, r0
}
 800a174:	4618      	mov	r0, r3
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	460b      	mov	r3, r1
 800a188:	72fb      	strb	r3, [r7, #11]
 800a18a:	4613      	mov	r3, r2
 800a18c:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	22a1      	movs	r2, #161	; 0xa1
 800a192:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800a19a:	7afb      	ldrb	r3, [r7, #11]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	021b      	lsls	r3, r3, #8
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	7abb      	ldrb	r3, [r7, #10]
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	b29a      	uxth	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800a1b4:	7e3b      	ldrb	r3, [r7, #24]
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800a1bc:	7e3b      	ldrb	r3, [r7, #24]
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f001 fce3 	bl	800bb90 <USBH_CtlReq>
 800a1ca:	4603      	mov	r3, r0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3710      	adds	r7, #16
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	460b      	mov	r3, r1
 800a1de:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2221      	movs	r2, #33	; 0x21
 800a1e4:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	220b      	movs	r2, #11
 800a1ea:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800a1ec:	78fb      	ldrb	r3, [r7, #3]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	825a      	strh	r2, [r3, #18]
 800a1f8:	e002      	b.n	800a200 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f001 fcbd 	bl	800bb90 <USBH_CtlReq>
 800a216:	4603      	mov	r3, r0

}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b084      	sub	sp, #16
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	3302      	adds	r3, #2
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	b29a      	uxth	r2, r3
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	3303      	adds	r3, #3
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	021b      	lsls	r3, r3, #8
 800a240:	b29b      	uxth	r3, r3
 800a242:	4313      	orrs	r3, r2
 800a244:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800a246:	897b      	ldrh	r3, [r7, #10]
 800a248:	2b09      	cmp	r3, #9
 800a24a:	d943      	bls.n	800a2d4 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a24c:	2309      	movs	r3, #9
 800a24e:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800a250:	e03c      	b.n	800a2cc <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4619      	mov	r1, r3
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f001 fc7e 	bl	800bb5a <USBH_GetNextDesc>
 800a25e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	2b21      	cmp	r3, #33	; 0x21
 800a266:	d131      	bne.n	800a2cc <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	781a      	ldrb	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	785a      	ldrb	r2, [r3, #1]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	3302      	adds	r3, #2
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	b29a      	uxth	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3303      	adds	r3, #3
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	b29b      	uxth	r3, r3
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	4313      	orrs	r3, r2
 800a28e:	b29a      	uxth	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	791a      	ldrb	r2, [r3, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	795a      	ldrb	r2, [r3, #5]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	799a      	ldrb	r2, [r3, #6]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3307      	adds	r3, #7
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	021b      	lsls	r3, r3, #8
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	811a      	strh	r2, [r3, #8]
        break;
 800a2c8:	bf00      	nop
      }
    }
  }
}
 800a2ca:	e003      	b.n	800a2d4 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800a2cc:	893b      	ldrh	r3, [r7, #8]
 800a2ce:	897a      	ldrh	r2, [r7, #10]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d8be      	bhi.n	800a252 <USBH_HID_ParseHIDDesc+0x32>
}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800a2e4:	23ff      	movs	r3, #255	; 0xff
 800a2e6:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b0b      	cmp	r3, #11
 800a2f0:	d117      	bne.n	800a322 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	231a      	movs	r3, #26
 800a2fe:	fb01 f303 	mul.w	r3, r1, r3
 800a302:	4413      	add	r3, r2
 800a304:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d102      	bne.n	800a318 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800a312:	2302      	movs	r3, #2
 800a314:	73fb      	strb	r3, [r7, #15]
 800a316:	e004      	b.n	800a322 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b02      	cmp	r3, #2
 800a31c:	d101      	bne.n	800a322 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800a31e:	2301      	movs	r3, #1
 800a320:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800a330:	b480      	push	{r7}
 800a332:	b085      	sub	sp, #20
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	4613      	mov	r3, r2
 800a33c:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	88fa      	ldrh	r2, [r7, #6]
 800a354:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	601a      	str	r2, [r3, #0]
}
 800a35c:	bf00      	nop
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800a368:	b480      	push	{r7}
 800a36a:	b087      	sub	sp, #28
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	4613      	mov	r3, r2
 800a374:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	7a9b      	ldrb	r3, [r3, #10]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d131      	bne.n	800a3e6 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a388:	2300      	movs	r3, #0
 800a38a:	82fb      	strh	r3, [r7, #22]
 800a38c:	e027      	b.n	800a3de <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	88da      	ldrh	r2, [r3, #6]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	889b      	ldrh	r3, [r3, #4]
 800a396:	429a      	cmp	r2, r3
 800a398:	d019      	beq.n	800a3ce <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	88d2      	ldrh	r2, [r2, #6]
 800a3a2:	441a      	add	r2, r3
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	1c59      	adds	r1, r3, #1
 800a3a8:	6139      	str	r1, [r7, #16]
 800a3aa:	7812      	ldrb	r2, [r2, #0]
 800a3ac:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	88db      	ldrh	r3, [r3, #6]
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	88da      	ldrh	r2, [r3, #6]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	891b      	ldrh	r3, [r3, #8]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d108      	bne.n	800a3d8 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	80da      	strh	r2, [r3, #6]
 800a3cc:	e004      	b.n	800a3d8 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	729a      	strb	r2, [r3, #10]
        return i;
 800a3d4:	8afb      	ldrh	r3, [r7, #22]
 800a3d6:	e00a      	b.n	800a3ee <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800a3d8:	8afb      	ldrh	r3, [r7, #22]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	82fb      	strh	r3, [r7, #22]
 800a3de:	8afa      	ldrh	r2, [r7, #22]
 800a3e0:	88fb      	ldrh	r3, [r7, #6]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d3d3      	bcc.n	800a38e <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b087      	sub	sp, #28
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	4613      	mov	r3, r2
 800a406:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	7a9b      	ldrb	r3, [r3, #10]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d13c      	bne.n	800a48e <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a41a:	2300      	movs	r3, #0
 800a41c:	82fb      	strh	r3, [r7, #22]
 800a41e:	e032      	b.n	800a486 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	889b      	ldrh	r3, [r3, #4]
 800a424:	3301      	adds	r3, #1
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	88d2      	ldrh	r2, [r2, #6]
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00a      	beq.n	800a444 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	889b      	ldrh	r3, [r3, #4]
 800a432:	3301      	adds	r3, #1
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800a438:	4293      	cmp	r3, r2
 800a43a:	d108      	bne.n	800a44e <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	88db      	ldrh	r3, [r3, #6]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d104      	bne.n	800a44e <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2200      	movs	r2, #0
 800a448:	729a      	strb	r2, [r3, #10]
        return i;
 800a44a:	8afb      	ldrh	r3, [r7, #22]
 800a44c:	e023      	b.n	800a496 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	1c5a      	adds	r2, r3, #1
 800a452:	613a      	str	r2, [r7, #16]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	6812      	ldr	r2, [r2, #0]
 800a458:	68f9      	ldr	r1, [r7, #12]
 800a45a:	8889      	ldrh	r1, [r1, #4]
 800a45c:	440a      	add	r2, r1
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	7013      	strb	r3, [r2, #0]
        f->head++;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	889b      	ldrh	r3, [r3, #4]
 800a466:	3301      	adds	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	889a      	ldrh	r2, [r3, #4]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	891b      	ldrh	r3, [r3, #8]
 800a476:	429a      	cmp	r2, r3
 800a478:	d102      	bne.n	800a480 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800a480:	8afb      	ldrh	r3, [r7, #22]
 800a482:	3301      	adds	r3, #1
 800a484:	82fb      	strh	r3, [r7, #22]
 800a486:	8afa      	ldrh	r2, [r7, #22]
 800a488:	88fb      	ldrh	r3, [r7, #6]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d3c8      	bcc.n	800a420 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a494:	88fb      	ldrh	r3, [r7, #6]
}
 800a496:	4618      	mov	r0, r3
 800a498:	371c      	adds	r7, #28
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
	...

0800a4a4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4b2:	69db      	ldr	r3, [r3, #28]
 800a4b4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800a4b6:	4b22      	ldr	r3, [pc, #136]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800a4bc:	4b20      	ldr	r3, [pc, #128]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4be:	2200      	movs	r2, #0
 800a4c0:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800a4c2:	4b1f      	ldr	r3, [pc, #124]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800a4c8:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800a4d4:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800a4da:	4b19      	ldr	r3, [pc, #100]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800a4e0:	4b17      	ldr	r3, [pc, #92]	; (800a540 <USBH_HID_KeybdInit+0x9c>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	60fb      	str	r3, [r7, #12]
 800a4ea:	e00c      	b.n	800a506 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800a4ec:	4a15      	ldr	r2, [pc, #84]	; (800a544 <USBH_HID_KeybdInit+0xa0>)
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800a4f6:	4a14      	ldr	r2, [pc, #80]	; (800a548 <USBH_HID_KeybdInit+0xa4>)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2100      	movs	r1, #0
 800a4fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	3301      	adds	r3, #1
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d9ef      	bls.n	800a4ec <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	8b1b      	ldrh	r3, [r3, #24]
 800a510:	2b08      	cmp	r3, #8
 800a512:	d902      	bls.n	800a51a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2208      	movs	r2, #8
 800a518:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	4a0a      	ldr	r2, [pc, #40]	; (800a548 <USBH_HID_KeybdInit+0xa4>)
 800a51e:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f103 0008 	add.w	r0, r3, #8
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a52c:	2250      	movs	r2, #80	; 0x50
 800a52e:	4619      	mov	r1, r3
 800a530:	f7ff fefe 	bl	800a330 <USBH_HID_FifoInit>

  return USBH_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	2000027c 	.word	0x2000027c
 800a544:	20000294 	.word	0x20000294
 800a548:	2000028c 	.word	0x2000028c

0800a54c <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f80d 	bl	800a574 <USBH_HID_KeybdDecode>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d101      	bne.n	800a564 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800a560:	4b03      	ldr	r3, [pc, #12]	; (800a570 <USBH_HID_GetKeybdInfo+0x24>)
 800a562:	e000      	b.n	800a566 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800a564:	2300      	movs	r3, #0
  }
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	2000027c 	.word	0x2000027c

0800a574 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	8b1b      	ldrh	r3, [r3, #24]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	e066      	b.n	800a660 <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	f103 0008 	add.w	r0, r3, #8
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	8b1b      	ldrh	r3, [r3, #24]
 800a59c:	461a      	mov	r2, r3
 800a59e:	4932      	ldr	r1, [pc, #200]	; (800a668 <USBH_HID_KeybdDecode+0xf4>)
 800a5a0:	f7ff fee2 	bl	800a368 <USBH_HID_FifoRead>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	8b1b      	ldrh	r3, [r3, #24]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d156      	bne.n	800a65e <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	482e      	ldr	r0, [pc, #184]	; (800a66c <USBH_HID_KeybdDecode+0xf8>)
 800a5b4:	f000 f8e4 	bl	800a780 <HID_ReadItem>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	4b2c      	ldr	r3, [pc, #176]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a5be:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	482c      	ldr	r0, [pc, #176]	; (800a674 <USBH_HID_KeybdDecode+0x100>)
 800a5c4:	f000 f8dc 	bl	800a780 <HID_ReadItem>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	4b28      	ldr	r3, [pc, #160]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a5ce:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4829      	ldr	r0, [pc, #164]	; (800a678 <USBH_HID_KeybdDecode+0x104>)
 800a5d4:	f000 f8d4 	bl	800a780 <HID_ReadItem>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	b2da      	uxtb	r2, r3
 800a5dc:	4b24      	ldr	r3, [pc, #144]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a5de:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4826      	ldr	r0, [pc, #152]	; (800a67c <USBH_HID_KeybdDecode+0x108>)
 800a5e4:	f000 f8cc 	bl	800a780 <HID_ReadItem>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	4b20      	ldr	r3, [pc, #128]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a5ee:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800a5f0:	2100      	movs	r1, #0
 800a5f2:	4823      	ldr	r0, [pc, #140]	; (800a680 <USBH_HID_KeybdDecode+0x10c>)
 800a5f4:	f000 f8c4 	bl	800a780 <HID_ReadItem>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	b2da      	uxtb	r2, r3
 800a5fc:	4b1c      	ldr	r3, [pc, #112]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a5fe:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800a600:	2100      	movs	r1, #0
 800a602:	4820      	ldr	r0, [pc, #128]	; (800a684 <USBH_HID_KeybdDecode+0x110>)
 800a604:	f000 f8bc 	bl	800a780 <HID_ReadItem>
 800a608:	4603      	mov	r3, r0
 800a60a:	b2da      	uxtb	r2, r3
 800a60c:	4b18      	ldr	r3, [pc, #96]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a60e:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800a610:	2100      	movs	r1, #0
 800a612:	481d      	ldr	r0, [pc, #116]	; (800a688 <USBH_HID_KeybdDecode+0x114>)
 800a614:	f000 f8b4 	bl	800a780 <HID_ReadItem>
 800a618:	4603      	mov	r3, r0
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	4b14      	ldr	r3, [pc, #80]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a61e:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800a620:	2100      	movs	r1, #0
 800a622:	481a      	ldr	r0, [pc, #104]	; (800a68c <USBH_HID_KeybdDecode+0x118>)
 800a624:	f000 f8ac 	bl	800a780 <HID_ReadItem>
 800a628:	4603      	mov	r3, r0
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	4b10      	ldr	r3, [pc, #64]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a62e:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
 800a634:	e00e      	b.n	800a654 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	4619      	mov	r1, r3
 800a63a:	4815      	ldr	r0, [pc, #84]	; (800a690 <USBH_HID_KeybdDecode+0x11c>)
 800a63c:	f000 f8a0 	bl	800a780 <HID_ReadItem>
 800a640:	4602      	mov	r2, r0
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	b2d1      	uxtb	r1, r2
 800a646:	4a0a      	ldr	r2, [pc, #40]	; (800a670 <USBH_HID_KeybdDecode+0xfc>)
 800a648:	4413      	add	r3, r2
 800a64a:	460a      	mov	r2, r1
 800a64c:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	3301      	adds	r3, #1
 800a652:	73fb      	strb	r3, [r7, #15]
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	2b05      	cmp	r3, #5
 800a658:	d9ed      	bls.n	800a636 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800a65e:	2302      	movs	r3, #2
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	20000294 	.word	0x20000294
 800a66c:	0800da98 	.word	0x0800da98
 800a670:	2000027c 	.word	0x2000027c
 800a674:	0800dab8 	.word	0x0800dab8
 800a678:	0800dad8 	.word	0x0800dad8
 800a67c:	0800daf8 	.word	0x0800daf8
 800a680:	0800db18 	.word	0x0800db18
 800a684:	0800db38 	.word	0x0800db38
 800a688:	0800db58 	.word	0x0800db58
 800a68c:	0800db78 	.word	0x0800db78
 800a690:	0800db98 	.word	0x0800db98

0800a694 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	789b      	ldrb	r3, [r3, #2]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <USBH_HID_GetASCIICode+0x18>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	799b      	ldrb	r3, [r3, #6]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d009      	beq.n	800a6c0 <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7a5b      	ldrb	r3, [r3, #9]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <USBH_HID_GetASCIICode+0x4c>)
 800a6b4:	5c9b      	ldrb	r3, [r3, r2]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <USBH_HID_GetASCIICode+0x50>)
 800a6ba:	5c9b      	ldrb	r3, [r3, r2]
 800a6bc:	73fb      	strb	r3, [r7, #15]
 800a6be:	e008      	b.n	800a6d2 <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	7a5b      	ldrb	r3, [r3, #9]
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	4b06      	ldr	r3, [pc, #24]	; (800a6e0 <USBH_HID_GetASCIICode+0x4c>)
 800a6c8:	5c9b      	ldrb	r3, [r3, r2]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	4b06      	ldr	r3, [pc, #24]	; (800a6e8 <USBH_HID_GetASCIICode+0x54>)
 800a6ce:	5c9b      	ldrb	r3, [r3, r2]
 800a6d0:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	0800dcc0 	.word	0x0800dcc0
 800a6e4:	0800dc3c 	.word	0x0800dc3c
 800a6e8:	0800dbb8 	.word	0x0800dbb8

0800a6ec <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <USBH_HID_MouseInit+0x88>)
 800a700:	2200      	movs	r2, #0
 800a702:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800a704:	4b1b      	ldr	r3, [pc, #108]	; (800a774 <USBH_HID_MouseInit+0x88>)
 800a706:	2200      	movs	r2, #0
 800a708:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800a70a:	4b1a      	ldr	r3, [pc, #104]	; (800a774 <USBH_HID_MouseInit+0x88>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800a710:	4b18      	ldr	r3, [pc, #96]	; (800a774 <USBH_HID_MouseInit+0x88>)
 800a712:	2200      	movs	r2, #0
 800a714:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800a716:	4b17      	ldr	r3, [pc, #92]	; (800a774 <USBH_HID_MouseInit+0x88>)
 800a718:	2200      	movs	r2, #0
 800a71a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a71c:	2300      	movs	r3, #0
 800a71e:	60fb      	str	r3, [r7, #12]
 800a720:	e00c      	b.n	800a73c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800a722:	4a15      	ldr	r2, [pc, #84]	; (800a778 <USBH_HID_MouseInit+0x8c>)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2100      	movs	r1, #0
 800a728:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800a72c:	4a13      	ldr	r2, [pc, #76]	; (800a77c <USBH_HID_MouseInit+0x90>)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2100      	movs	r1, #0
 800a732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3301      	adds	r3, #1
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d9ef      	bls.n	800a722 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	8b1b      	ldrh	r3, [r3, #24]
 800a746:	2b08      	cmp	r3, #8
 800a748:	d902      	bls.n	800a750 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	2208      	movs	r2, #8
 800a74e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <USBH_HID_MouseInit+0x90>)
 800a754:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f103 0008 	add.w	r0, r3, #8
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a762:	2250      	movs	r2, #80	; 0x50
 800a764:	4619      	mov	r1, r3
 800a766:	f7ff fde3 	bl	800a330 <USBH_HID_FifoInit>

  return USBH_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}
 800a774:	2000029c 	.word	0x2000029c
 800a778:	200002a4 	.word	0x200002a4
 800a77c:	200002ac 	.word	0x200002ac

0800a780 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800a780:	b480      	push	{r7}
 800a782:	b089      	sub	sp, #36	; 0x24
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800a78c:	2300      	movs	r3, #0
 800a78e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800a790:	2300      	movs	r3, #0
 800a792:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	7a1b      	ldrb	r3, [r3, #8]
 800a79e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7a5b      	ldrb	r3, [r3, #9]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01a      	beq.n	800a7de <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	7a5b      	ldrb	r3, [r3, #9]
 800a7ac:	78fa      	ldrb	r2, [r7, #3]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d301      	bcc.n	800a7b6 <HID_ReadItem+0x36>
    {
      return (0U);
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e078      	b.n	800a8a8 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6852      	ldr	r2, [r2, #4]
 800a7bc:	fb02 f303 	mul.w	r3, r2, r3
 800a7c0:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800a7c2:	7cfb      	ldrb	r3, [r7, #19]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 0307 	and.w	r3, r3, #7
 800a7dc:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a7de:	2300      	movs	r3, #0
 800a7e0:	61bb      	str	r3, [r7, #24]
 800a7e2:	e00a      	b.n	800a7fa <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f003 0307 	and.w	r3, r3, #7
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <HID_ReadItem+0x90>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	08db      	lsrs	r3, r3, #3
 800a80c:	3301      	adds	r3, #1
 800a80e:	e002      	b.n	800a816 <HID_ReadItem+0x96>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	08db      	lsrs	r3, r3, #3
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	4293      	cmp	r3, r2
 800a81a:	d8e3      	bhi.n	800a7e4 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800a81c:	7cfb      	ldrb	r3, [r7, #19]
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	40da      	lsrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a82a:	fa01 f303 	lsl.w	r3, r1, r3
 800a82e:	43db      	mvns	r3, r3
 800a830:	4013      	ands	r3, r2
 800a832:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d304      	bcc.n	800a848 <HID_ReadItem+0xc8>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	691b      	ldr	r3, [r3, #16]
 800a842:	69fa      	ldr	r2, [r7, #28]
 800a844:	429a      	cmp	r2, r3
 800a846:	d901      	bls.n	800a84c <HID_ReadItem+0xcc>
  {
    return (0U);
 800a848:	2300      	movs	r3, #0
 800a84a:	e02d      	b.n	800a8a8 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	7a9b      	ldrb	r3, [r3, #10]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01e      	beq.n	800a892 <HID_ReadItem+0x112>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	3b01      	subs	r3, #1
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d014      	beq.n	800a892 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	425b      	negs	r3, r3
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	4313      	orrs	r3, r2
 800a878:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	e010      	b.n	800a8a8 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	fb02 f303 	mul.w	r3, r2, r3
 800a890:	e00a      	b.n	800a8a8 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HID_ReadItem+0x11e>
    {
      return (val);
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	e004      	b.n	800a8a8 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	69fa      	ldr	r2, [r7, #28]
 800a8a4:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3724      	adds	r7, #36	; 0x24
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d101      	bne.n	800a8cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a8c8:	2302      	movs	r3, #2
 800a8ca:	e029      	b.n	800a920 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	79fa      	ldrb	r2, [r7, #7]
 800a8d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f000 f81f 	bl	800a928 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f002 f9bf 	bl	800cc9c <USBH_LL_Init>

  return USBH_OK;
 800a91e:	2300      	movs	r3, #0
}
 800a920:	4618      	mov	r0, r3
 800a922:	3710      	adds	r7, #16
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a934:	2300      	movs	r3, #0
 800a936:	60fb      	str	r3, [r7, #12]
 800a938:	e009      	b.n	800a94e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a93a:	687a      	ldr	r2, [r7, #4]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	33e0      	adds	r3, #224	; 0xe0
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	4413      	add	r3, r2
 800a944:	2200      	movs	r2, #0
 800a946:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3301      	adds	r3, #1
 800a94c:	60fb      	str	r3, [r7, #12]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2b0f      	cmp	r3, #15
 800a952:	d9f2      	bls.n	800a93a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e009      	b.n	800a96e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4413      	add	r3, r2
 800a960:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a964:	2200      	movs	r2, #0
 800a966:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3301      	adds	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a974:	d3f1      	bcc.n	800a95a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2200      	movs	r2, #0
 800a980:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2201      	movs	r2, #1
 800a994:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2240      	movs	r2, #64	; 0x40
 800a99a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d016      	beq.n	800aa12 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10e      	bne.n	800aa0c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9f4:	1c59      	adds	r1, r3, #1
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	33de      	adds	r3, #222	; 0xde
 800aa00:	6839      	ldr	r1, [r7, #0]
 800aa02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]
 800aa0a:	e004      	b.n	800aa16 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aa0c:	2302      	movs	r3, #2
 800aa0e:	73fb      	strb	r3, [r7, #15]
 800aa10:	e001      	b.n	800aa16 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aa12:	2302      	movs	r3, #2
 800aa14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aa3a:	78fa      	ldrb	r2, [r7, #3]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d204      	bcs.n	800aa4a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	78fa      	ldrb	r2, [r7, #3]
 800aa44:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aa48:	e001      	b.n	800aa4e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aa4a:	2302      	movs	r3, #2
 800aa4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	4608      	mov	r0, r1
 800aa66:	4611      	mov	r1, r2
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	70fb      	strb	r3, [r7, #3]
 800aa6e:	460b      	mov	r3, r1
 800aa70:	70bb      	strb	r3, [r7, #2]
 800aa72:	4613      	mov	r3, r2
 800aa74:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aa84:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa86:	e025      	b.n	800aad4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	221a      	movs	r2, #26
 800aa8c:	fb02 f303 	mul.w	r3, r2, r3
 800aa90:	3308      	adds	r3, #8
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	3302      	adds	r3, #2
 800aa98:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	795b      	ldrb	r3, [r3, #5]
 800aa9e:	78fa      	ldrb	r2, [r7, #3]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d002      	beq.n	800aaaa <USBH_FindInterface+0x4e>
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	2bff      	cmp	r3, #255	; 0xff
 800aaa8:	d111      	bne.n	800aace <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aaae:	78ba      	ldrb	r2, [r7, #2]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d002      	beq.n	800aaba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aab4:	78bb      	ldrb	r3, [r7, #2]
 800aab6:	2bff      	cmp	r3, #255	; 0xff
 800aab8:	d109      	bne.n	800aace <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aabe:	787a      	ldrb	r2, [r7, #1]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d002      	beq.n	800aaca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aac4:	787b      	ldrb	r3, [r7, #1]
 800aac6:	2bff      	cmp	r3, #255	; 0xff
 800aac8:	d101      	bne.n	800aace <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aaca:	7dfb      	ldrb	r3, [r7, #23]
 800aacc:	e006      	b.n	800aadc <USBH_FindInterface+0x80>
    }
    if_ix++;
 800aace:	7dfb      	ldrb	r3, [r7, #23]
 800aad0:	3301      	adds	r3, #1
 800aad2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aad4:	7dfb      	ldrb	r3, [r7, #23]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d9d6      	bls.n	800aa88 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800aada:	23ff      	movs	r3, #255	; 0xff
}
 800aadc:	4618      	mov	r0, r3
 800aade:	371c      	adds	r7, #28
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f002 f919 	bl	800cd28 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f002 fa32 	bl	800cf62 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b088      	sub	sp, #32
 800ab0c:	af04      	add	r7, sp, #16
 800ab0e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ab10:	2302      	movs	r3, #2
 800ab12:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ab14:	2300      	movs	r3, #0
 800ab16:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d102      	bne.n	800ab2a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2203      	movs	r2, #3
 800ab28:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	2b0b      	cmp	r3, #11
 800ab32:	f200 81be 	bhi.w	800aeb2 <USBH_Process+0x3aa>
 800ab36:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <USBH_Process+0x34>)
 800ab38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3c:	0800ab6d 	.word	0x0800ab6d
 800ab40:	0800ab9f 	.word	0x0800ab9f
 800ab44:	0800ac07 	.word	0x0800ac07
 800ab48:	0800ae4d 	.word	0x0800ae4d
 800ab4c:	0800aeb3 	.word	0x0800aeb3
 800ab50:	0800acab 	.word	0x0800acab
 800ab54:	0800adf3 	.word	0x0800adf3
 800ab58:	0800ace1 	.word	0x0800ace1
 800ab5c:	0800ad01 	.word	0x0800ad01
 800ab60:	0800ad21 	.word	0x0800ad21
 800ab64:	0800ad65 	.word	0x0800ad65
 800ab68:	0800ae35 	.word	0x0800ae35
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 819e 	beq.w	800aeb6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ab80:	20c8      	movs	r0, #200	; 0xc8
 800ab82:	f002 fa35 	bl	800cff0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f002 f92b 	bl	800cde2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ab9c:	e18b      	b.n	800aeb6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d107      	bne.n	800abb8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800abb6:	e18d      	b.n	800aed4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800abbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abc2:	d914      	bls.n	800abee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800abca:	3301      	adds	r3, #1
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800abda:	2b03      	cmp	r3, #3
 800abdc:	d903      	bls.n	800abe6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	220d      	movs	r2, #13
 800abe2:	701a      	strb	r2, [r3, #0]
      break;
 800abe4:	e176      	b.n	800aed4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	701a      	strb	r2, [r3, #0]
      break;
 800abec:	e172      	b.n	800aed4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800abf4:	f103 020a 	add.w	r2, r3, #10
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800abfe:	200a      	movs	r0, #10
 800ac00:	f002 f9f6 	bl	800cff0 <USBH_Delay>
      break;
 800ac04:	e166      	b.n	800aed4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac16:	2104      	movs	r1, #4
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac1c:	2064      	movs	r0, #100	; 0x64
 800ac1e:	f002 f9e7 	bl	800cff0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f002 f8b6 	bl	800cd94 <USBH_LL_GetSpeed>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2205      	movs	r2, #5
 800ac36:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ac38:	2100      	movs	r1, #0
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 fa05 	bl	800c04a <USBH_AllocPipe>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ac48:	2180      	movs	r1, #128	; 0x80
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 f9fd 	bl	800c04a <USBH_AllocPipe>
 800ac50:	4603      	mov	r3, r0
 800ac52:	461a      	mov	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	7919      	ldrb	r1, [r3, #4]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac6c:	b292      	uxth	r2, r2
 800ac6e:	9202      	str	r2, [sp, #8]
 800ac70:	2200      	movs	r2, #0
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	4603      	mov	r3, r0
 800ac78:	2280      	movs	r2, #128	; 0x80
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	f001 f9b6 	bl	800bfec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7959      	ldrb	r1, [r3, #5]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ac94:	b292      	uxth	r2, r2
 800ac96:	9202      	str	r2, [sp, #8]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	9201      	str	r2, [sp, #4]
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2200      	movs	r2, #0
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 f9a2 	bl	800bfec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aca8:	e114      	b.n	800aed4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f918 	bl	800aee0 <USBH_HandleEnum>
 800acb0:	4603      	mov	r3, r0
 800acb2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f040 80fe 	bne.w	800aeba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800accc:	2b01      	cmp	r3, #1
 800acce:	d103      	bne.n	800acd8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2208      	movs	r2, #8
 800acd4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800acd6:	e0f0      	b.n	800aeba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2207      	movs	r2, #7
 800acdc:	701a      	strb	r2, [r3, #0]
      break;
 800acde:	e0ec      	b.n	800aeba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80e9 	beq.w	800aebe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acf2:	2101      	movs	r1, #1
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2208      	movs	r2, #8
 800acfc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800acfe:	e0de      	b.n	800aebe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fc2c 	bl	800b568 <USBH_SetCfg>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 80d5 	bne.w	800aec2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2209      	movs	r2, #9
 800ad1c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad1e:	e0d0      	b.n	800aec2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d016      	beq.n	800ad5c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ad2e:	2101      	movs	r1, #1
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fc3c 	bl	800b5ae <USBH_SetFeature>
 800ad36:	4603      	mov	r3, r0
 800ad38:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d103      	bne.n	800ad4a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	220a      	movs	r2, #10
 800ad46:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad48:	e0bd      	b.n	800aec6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b03      	cmp	r3, #3
 800ad50:	f040 80b9 	bne.w	800aec6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	220a      	movs	r2, #10
 800ad58:	701a      	strb	r2, [r3, #0]
      break;
 800ad5a:	e0b4      	b.n	800aec6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	220a      	movs	r2, #10
 800ad60:	701a      	strb	r2, [r3, #0]
      break;
 800ad62:	e0b0      	b.n	800aec6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 80ad 	beq.w	800aeca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	e016      	b.n	800adac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ad7e:	7bfa      	ldrb	r2, [r7, #15]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	32de      	adds	r2, #222	; 0xde
 800ad84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad88:	791a      	ldrb	r2, [r3, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d108      	bne.n	800ada6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ad94:	7bfa      	ldrb	r2, [r7, #15]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	32de      	adds	r2, #222	; 0xde
 800ad9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ada4:	e005      	b.n	800adb2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	3301      	adds	r3, #1
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d0e5      	beq.n	800ad7e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d016      	beq.n	800adea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	4798      	blx	r3
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d109      	bne.n	800ade2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2206      	movs	r2, #6
 800add2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800adda:	2103      	movs	r1, #3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ade0:	e073      	b.n	800aeca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	220d      	movs	r2, #13
 800ade6:	701a      	strb	r2, [r3, #0]
      break;
 800ade8:	e06f      	b.n	800aeca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	220d      	movs	r2, #13
 800adee:	701a      	strb	r2, [r3, #0]
      break;
 800adf0:	e06b      	b.n	800aeca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d017      	beq.n	800ae2c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	4798      	blx	r3
 800ae08:	4603      	mov	r3, r0
 800ae0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d103      	bne.n	800ae1c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	220b      	movs	r2, #11
 800ae18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae1a:	e058      	b.n	800aece <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	d154      	bne.n	800aece <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	220d      	movs	r2, #13
 800ae28:	701a      	strb	r2, [r3, #0]
      break;
 800ae2a:	e050      	b.n	800aece <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	220d      	movs	r2, #13
 800ae30:	701a      	strb	r2, [r3, #0]
      break;
 800ae32:	e04c      	b.n	800aece <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d049      	beq.n	800aed2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	4798      	blx	r3
      }
      break;
 800ae4a:	e042      	b.n	800aed2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f7ff fd67 	bl	800a928 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d009      	beq.n	800ae78 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d005      	beq.n	800ae8e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae88:	2105      	movs	r1, #5
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d107      	bne.n	800aeaa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fe20 	bl	800aae8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aea8:	e014      	b.n	800aed4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f001 ff3c 	bl	800cd28 <USBH_LL_Start>
      break;
 800aeb0:	e010      	b.n	800aed4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800aeb2:	bf00      	nop
 800aeb4:	e00e      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aeb6:	bf00      	nop
 800aeb8:	e00c      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aeba:	bf00      	nop
 800aebc:	e00a      	b.n	800aed4 <USBH_Process+0x3cc>
    break;
 800aebe:	bf00      	nop
 800aec0:	e008      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aec2:	bf00      	nop
 800aec4:	e006      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aec6:	bf00      	nop
 800aec8:	e004      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aeca:	bf00      	nop
 800aecc:	e002      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aece:	bf00      	nop
 800aed0:	e000      	b.n	800aed4 <USBH_Process+0x3cc>
      break;
 800aed2:	bf00      	nop
  }
  return USBH_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
 800aede:	bf00      	nop

0800aee0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af04      	add	r7, sp, #16
 800aee6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aee8:	2301      	movs	r3, #1
 800aeea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aeec:	2301      	movs	r3, #1
 800aeee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	785b      	ldrb	r3, [r3, #1]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	f200 81c1 	bhi.w	800b27c <USBH_HandleEnum+0x39c>
 800aefa:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <USBH_HandleEnum+0x20>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af21 	.word	0x0800af21
 800af04:	0800afdf 	.word	0x0800afdf
 800af08:	0800b049 	.word	0x0800b049
 800af0c:	0800b0d7 	.word	0x0800b0d7
 800af10:	0800b141 	.word	0x0800b141
 800af14:	0800b1b1 	.word	0x0800b1b1
 800af18:	0800b1f7 	.word	0x0800b1f7
 800af1c:	0800b23d 	.word	0x0800b23d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af20:	2108      	movs	r1, #8
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fa50 	bl	800b3c8 <USBH_Get_DevDesc>
 800af28:	4603      	mov	r3, r0
 800af2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d130      	bne.n	800af94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	7919      	ldrb	r1, [r3, #4]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af52:	687a      	ldr	r2, [r7, #4]
 800af54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af56:	b292      	uxth	r2, r2
 800af58:	9202      	str	r2, [sp, #8]
 800af5a:	2200      	movs	r2, #0
 800af5c:	9201      	str	r2, [sp, #4]
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4603      	mov	r3, r0
 800af62:	2280      	movs	r2, #128	; 0x80
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f001 f841 	bl	800bfec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	7959      	ldrb	r1, [r3, #5]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af7e:	b292      	uxth	r2, r2
 800af80:	9202      	str	r2, [sp, #8]
 800af82:	2200      	movs	r2, #0
 800af84:	9201      	str	r2, [sp, #4]
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4603      	mov	r3, r0
 800af8a:	2200      	movs	r2, #0
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 f82d 	bl	800bfec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af92:	e175      	b.n	800b280 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800af94:	7bbb      	ldrb	r3, [r7, #14]
 800af96:	2b03      	cmp	r3, #3
 800af98:	f040 8172 	bne.w	800b280 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afa2:	3301      	adds	r3, #1
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afb2:	2b03      	cmp	r3, #3
 800afb4:	d903      	bls.n	800afbe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	220d      	movs	r2, #13
 800afba:	701a      	strb	r2, [r3, #0]
      break;
 800afbc:	e160      	b.n	800b280 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	795b      	ldrb	r3, [r3, #5]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 f861 	bl	800c08c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	791b      	ldrb	r3, [r3, #4]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 f85b 	bl	800c08c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	701a      	strb	r2, [r3, #0]
      break;
 800afdc:	e150      	b.n	800b280 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800afde:	2112      	movs	r1, #18
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f9f1 	bl	800b3c8 <USBH_Get_DevDesc>
 800afe6:	4603      	mov	r3, r0
 800afe8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d103      	bne.n	800aff8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2202      	movs	r2, #2
 800aff4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aff6:	e145      	b.n	800b284 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aff8:	7bbb      	ldrb	r3, [r7, #14]
 800affa:	2b03      	cmp	r3, #3
 800affc:	f040 8142 	bne.w	800b284 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b006:	3301      	adds	r3, #1
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b016:	2b03      	cmp	r3, #3
 800b018:	d903      	bls.n	800b022 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	220d      	movs	r2, #13
 800b01e:	701a      	strb	r2, [r3, #0]
      break;
 800b020:	e130      	b.n	800b284 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	795b      	ldrb	r3, [r3, #5]
 800b026:	4619      	mov	r1, r3
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f82f 	bl	800c08c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	791b      	ldrb	r3, [r3, #4]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f829 	bl	800c08c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
      break;
 800b046:	e11d      	b.n	800b284 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b048:	2101      	movs	r1, #1
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 fa68 	bl	800b520 <USBH_SetAddress>
 800b050:	4603      	mov	r3, r0
 800b052:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b054:	7bbb      	ldrb	r3, [r7, #14]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d132      	bne.n	800b0c0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b05a:	2002      	movs	r0, #2
 800b05c:	f001 ffc8 	bl	800cff0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2203      	movs	r2, #3
 800b06c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	7919      	ldrb	r1, [r3, #4]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b082:	b292      	uxth	r2, r2
 800b084:	9202      	str	r2, [sp, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	4603      	mov	r3, r0
 800b08e:	2280      	movs	r2, #128	; 0x80
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 ffab 	bl	800bfec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	7959      	ldrb	r1, [r3, #5]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0aa:	b292      	uxth	r2, r2
 800b0ac:	9202      	str	r2, [sp, #8]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 ff97 	bl	800bfec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0be:	e0e3      	b.n	800b288 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0c0:	7bbb      	ldrb	r3, [r7, #14]
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	f040 80e0 	bne.w	800b288 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	220d      	movs	r2, #13
 800b0cc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	705a      	strb	r2, [r3, #1]
      break;
 800b0d4:	e0d8      	b.n	800b288 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b0d6:	2109      	movs	r1, #9
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f99d 	bl	800b418 <USBH_Get_CfgDesc>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d103      	bne.n	800b0f0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2204      	movs	r2, #4
 800b0ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0ee:	e0cd      	b.n	800b28c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0f0:	7bbb      	ldrb	r3, [r7, #14]
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	f040 80ca 	bne.w	800b28c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b0fe:	3301      	adds	r3, #1
 800b100:	b2da      	uxtb	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d903      	bls.n	800b11a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	220d      	movs	r2, #13
 800b116:	701a      	strb	r2, [r3, #0]
      break;
 800b118:	e0b8      	b.n	800b28c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	795b      	ldrb	r3, [r3, #5]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 ffb3 	bl	800c08c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	791b      	ldrb	r3, [r3, #4]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 ffad 	bl	800c08c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	701a      	strb	r2, [r3, #0]
      break;
 800b13e:	e0a5      	b.n	800b28c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b146:	4619      	mov	r1, r3
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f000 f965 	bl	800b418 <USBH_Get_CfgDesc>
 800b14e:	4603      	mov	r3, r0
 800b150:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d103      	bne.n	800b160 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2205      	movs	r2, #5
 800b15c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b15e:	e097      	b.n	800b290 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b03      	cmp	r3, #3
 800b164:	f040 8094 	bne.w	800b290 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b16e:	3301      	adds	r3, #1
 800b170:	b2da      	uxtb	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b17e:	2b03      	cmp	r3, #3
 800b180:	d903      	bls.n	800b18a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	220d      	movs	r2, #13
 800b186:	701a      	strb	r2, [r3, #0]
      break;
 800b188:	e082      	b.n	800b290 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	795b      	ldrb	r3, [r3, #5]
 800b18e:	4619      	mov	r1, r3
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 ff7b 	bl	800c08c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	791b      	ldrb	r3, [r3, #4]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 ff75 	bl	800c08c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	701a      	strb	r2, [r3, #0]
      break;
 800b1ae:	e06f      	b.n	800b290 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d019      	beq.n	800b1ee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1c6:	23ff      	movs	r3, #255	; 0xff
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f949 	bl	800b460 <USBH_Get_StringDesc>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d103      	bne.n	800b1e0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2206      	movs	r2, #6
 800b1dc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b1de:	e059      	b.n	800b294 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	2b03      	cmp	r3, #3
 800b1e4:	d156      	bne.n	800b294 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	705a      	strb	r2, [r3, #1]
      break;
 800b1ec:	e052      	b.n	800b294 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2206      	movs	r2, #6
 800b1f2:	705a      	strb	r2, [r3, #1]
      break;
 800b1f4:	e04e      	b.n	800b294 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d019      	beq.n	800b234 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b20c:	23ff      	movs	r3, #255	; 0xff
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 f926 	bl	800b460 <USBH_Get_StringDesc>
 800b214:	4603      	mov	r3, r0
 800b216:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b218:	7bbb      	ldrb	r3, [r7, #14]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d103      	bne.n	800b226 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2207      	movs	r2, #7
 800b222:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b224:	e038      	b.n	800b298 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	2b03      	cmp	r3, #3
 800b22a:	d135      	bne.n	800b298 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2207      	movs	r2, #7
 800b230:	705a      	strb	r2, [r3, #1]
      break;
 800b232:	e031      	b.n	800b298 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2207      	movs	r2, #7
 800b238:	705a      	strb	r2, [r3, #1]
      break;
 800b23a:	e02d      	b.n	800b298 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b242:	2b00      	cmp	r3, #0
 800b244:	d017      	beq.n	800b276 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b252:	23ff      	movs	r3, #255	; 0xff
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 f903 	bl	800b460 <USBH_Get_StringDesc>
 800b25a:	4603      	mov	r3, r0
 800b25c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b25e:	7bbb      	ldrb	r3, [r7, #14]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d102      	bne.n	800b26a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b264:	2300      	movs	r3, #0
 800b266:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b268:	e018      	b.n	800b29c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b03      	cmp	r3, #3
 800b26e:	d115      	bne.n	800b29c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
      break;
 800b274:	e012      	b.n	800b29c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b276:	2300      	movs	r3, #0
 800b278:	73fb      	strb	r3, [r7, #15]
      break;
 800b27a:	e00f      	b.n	800b29c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b27c:	bf00      	nop
 800b27e:	e00e      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b280:	bf00      	nop
 800b282:	e00c      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b284:	bf00      	nop
 800b286:	e00a      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b288:	bf00      	nop
 800b28a:	e008      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b28c:	bf00      	nop
 800b28e:	e006      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b290:	bf00      	nop
 800b292:	e004      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b294:	bf00      	nop
 800b296:	e002      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b298:	bf00      	nop
 800b29a:	e000      	b.n	800b29e <USBH_HandleEnum+0x3be>
      break;
 800b29c:	bf00      	nop
  }
  return Status;
 800b29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2d4:	1c5a      	adds	r2, r3, #1
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 f804 	bl	800b2ea <USBH_HandleSof>
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b0b      	cmp	r3, #11
 800b2fa:	d10a      	bne.n	800b312 <USBH_HandleSof+0x28>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d005      	beq.n	800b312 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	4798      	blx	r3
  }
}
 800b312:	bf00      	nop
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b32a:	bf00      	nop
}
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b346:	bf00      	nop
}
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr

0800b352 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b352:	b480      	push	{r7}
 800b354:	b083      	sub	sp, #12
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2201      	movs	r2, #1
 800b35e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f001 fcdc 	bl	800cd5e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	791b      	ldrb	r3, [r3, #4]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fe6d 	bl	800c08c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	795b      	ldrb	r3, [r3, #5]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fe67 	bl	800c08c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af02      	add	r7, sp, #8
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	460b      	mov	r3, r1
 800b3d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b3da:	78fb      	ldrb	r3, [r7, #3]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 f864 	bl	800b4b6 <USBH_GetDescriptor>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10a      	bne.n	800b40e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b404:	78fa      	ldrb	r2, [r7, #3]
 800b406:	b292      	uxth	r2, r2
 800b408:	4619      	mov	r1, r3
 800b40a:	f000 f918 	bl	800b63e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af02      	add	r7, sp, #8
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	331c      	adds	r3, #28
 800b428:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b42a:	887b      	ldrh	r3, [r7, #2]
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b434:	2100      	movs	r1, #0
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f83d 	bl	800b4b6 <USBH_GetDescriptor>
 800b43c:	4603      	mov	r3, r0
 800b43e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d107      	bne.n	800b456 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b446:	887b      	ldrh	r3, [r7, #2]
 800b448:	461a      	mov	r2, r3
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f987 	bl	800b760 <USBH_ParseCfgDesc>
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b088      	sub	sp, #32
 800b464:	af02      	add	r7, sp, #8
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	461a      	mov	r2, r3
 800b46c:	460b      	mov	r3, r1
 800b46e:	72fb      	strb	r3, [r7, #11]
 800b470:	4613      	mov	r3, r2
 800b472:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	b29b      	uxth	r3, r3
 800b478:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b47c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b484:	893b      	ldrh	r3, [r7, #8]
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	460b      	mov	r3, r1
 800b48a:	2100      	movs	r1, #0
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f000 f812 	bl	800b4b6 <USBH_GetDescriptor>
 800b492:	4603      	mov	r3, r0
 800b494:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b496:	7dfb      	ldrb	r3, [r7, #23]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d107      	bne.n	800b4ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b4a2:	893a      	ldrh	r2, [r7, #8]
 800b4a4:	6879      	ldr	r1, [r7, #4]
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f000 fb24 	bl	800baf4 <USBH_ParseStringDesc>
  }

  return status;
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}

0800b4b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b4b6:	b580      	push	{r7, lr}
 800b4b8:	b084      	sub	sp, #16
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	60f8      	str	r0, [r7, #12]
 800b4be:	607b      	str	r3, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	72fb      	strb	r3, [r7, #11]
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	789b      	ldrb	r3, [r3, #2]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d11c      	bne.n	800b50a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2206      	movs	r2, #6
 800b4e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	893a      	ldrh	r2, [r7, #8]
 800b4e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b4e8:	893b      	ldrh	r3, [r7, #8]
 800b4ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b4ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4f2:	d104      	bne.n	800b4fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f240 4209 	movw	r2, #1033	; 0x409
 800b4fa:	829a      	strh	r2, [r3, #20]
 800b4fc:	e002      	b.n	800b504 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2200      	movs	r2, #0
 800b502:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8b3a      	ldrh	r2, [r7, #24]
 800b508:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b50a:	8b3b      	ldrh	r3, [r7, #24]
 800b50c:	461a      	mov	r2, r3
 800b50e:	6879      	ldr	r1, [r7, #4]
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f000 fb3d 	bl	800bb90 <USBH_CtlReq>
 800b516:	4603      	mov	r3, r0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3710      	adds	r7, #16
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	460b      	mov	r3, r1
 800b52a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	789b      	ldrb	r3, [r3, #2]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d10f      	bne.n	800b554 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2205      	movs	r2, #5
 800b53e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	b29a      	uxth	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2200      	movs	r2, #0
 800b54c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b554:	2200      	movs	r2, #0
 800b556:	2100      	movs	r1, #0
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 fb19 	bl	800bb90 <USBH_CtlReq>
 800b55e:	4603      	mov	r3, r0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	789b      	ldrb	r3, [r3, #2]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d10e      	bne.n	800b59a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2209      	movs	r2, #9
 800b586:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	887a      	ldrh	r2, [r7, #2]
 800b58c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2200      	movs	r2, #0
 800b598:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b59a:	2200      	movs	r2, #0
 800b59c:	2100      	movs	r1, #0
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 faf6 	bl	800bb90 <USBH_CtlReq>
 800b5a4:	4603      	mov	r3, r0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	789b      	ldrb	r3, [r3, #2]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d10f      	bne.n	800b5e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2203      	movs	r2, #3
 800b5cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b5ce:	78fb      	ldrb	r3, [r7, #3]
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fad2 	bl	800bb90 <USBH_CtlReq>
 800b5ec:	4603      	mov	r3, r0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3708      	adds	r7, #8
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}

0800b5f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b082      	sub	sp, #8
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	460b      	mov	r3, r1
 800b600:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	789b      	ldrb	r3, [r3, #2]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d10f      	bne.n	800b62a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2202      	movs	r2, #2
 800b60e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b61c:	78fb      	ldrb	r3, [r7, #3]
 800b61e:	b29a      	uxth	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b62a:	2200      	movs	r2, #0
 800b62c:	2100      	movs	r1, #0
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 faae 	bl	800bb90 <USBH_CtlReq>
 800b634:	4603      	mov	r3, r0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b63e:	b480      	push	{r7}
 800b640:	b085      	sub	sp, #20
 800b642:	af00      	add	r7, sp, #0
 800b644:	60f8      	str	r0, [r7, #12]
 800b646:	60b9      	str	r1, [r7, #8]
 800b648:	4613      	mov	r3, r2
 800b64a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	785a      	ldrb	r2, [r3, #1]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	3302      	adds	r3, #2
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	b29a      	uxth	r2, r3
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	3303      	adds	r3, #3
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	021b      	lsls	r3, r3, #8
 800b66e:	b29b      	uxth	r3, r3
 800b670:	4313      	orrs	r3, r2
 800b672:	b29a      	uxth	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	791a      	ldrb	r2, [r3, #4]
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	795a      	ldrb	r2, [r3, #5]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	799a      	ldrb	r2, [r3, #6]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	79da      	ldrb	r2, [r3, #7]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	79db      	ldrb	r3, [r3, #7]
 800b69c:	2b20      	cmp	r3, #32
 800b69e:	dc11      	bgt.n	800b6c4 <USBH_ParseDevDesc+0x86>
 800b6a0:	2b08      	cmp	r3, #8
 800b6a2:	db16      	blt.n	800b6d2 <USBH_ParseDevDesc+0x94>
 800b6a4:	3b08      	subs	r3, #8
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b6b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	bf14      	ite	ne
 800b6b8:	2301      	movne	r3, #1
 800b6ba:	2300      	moveq	r3, #0
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <USBH_ParseDevDesc+0x8a>
 800b6c2:	e006      	b.n	800b6d2 <USBH_ParseDevDesc+0x94>
 800b6c4:	2b40      	cmp	r3, #64	; 0x40
 800b6c6:	d104      	bne.n	800b6d2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	79da      	ldrb	r2, [r3, #7]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	71da      	strb	r2, [r3, #7]
      break;
 800b6d0:	e003      	b.n	800b6da <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2240      	movs	r2, #64	; 0x40
 800b6d6:	71da      	strb	r2, [r3, #7]
      break;
 800b6d8:	bf00      	nop
  }

  if (length > 8U)
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	2b08      	cmp	r3, #8
 800b6de:	d939      	bls.n	800b754 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	3309      	adds	r3, #9
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	b29b      	uxth	r3, r3
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	330a      	adds	r3, #10
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	b29a      	uxth	r2, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	330b      	adds	r3, #11
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b29b      	uxth	r3, r3
 800b70c:	021b      	lsls	r3, r3, #8
 800b70e:	b29b      	uxth	r3, r3
 800b710:	4313      	orrs	r3, r2
 800b712:	b29a      	uxth	r2, r3
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	330c      	adds	r3, #12
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	330d      	adds	r3, #13
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	b29b      	uxth	r3, r3
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	4313      	orrs	r3, r2
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	7b9a      	ldrb	r2, [r3, #14]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	7bda      	ldrb	r2, [r3, #15]
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	7c1a      	ldrb	r2, [r3, #16]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	7c5a      	ldrb	r2, [r3, #17]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	745a      	strb	r2, [r3, #17]
  }
}
 800b754:	bf00      	nop
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08c      	sub	sp, #48	; 0x30
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	4613      	mov	r3, r2
 800b76c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b774:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	781a      	ldrb	r2, [r3, #0]
 800b794:	6a3b      	ldr	r3, [r7, #32]
 800b796:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	785a      	ldrb	r2, [r3, #1]
 800b79c:	6a3b      	ldr	r3, [r7, #32]
 800b79e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	3302      	adds	r3, #2
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	b29a      	uxth	r2, r3
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	3303      	adds	r3, #3
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7bc:	bf28      	it	cs
 800b7be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	6a3b      	ldr	r3, [r7, #32]
 800b7c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	791a      	ldrb	r2, [r3, #4]
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	795a      	ldrb	r2, [r3, #5]
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	799a      	ldrb	r2, [r3, #6]
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	79da      	ldrb	r2, [r3, #7]
 800b7e4:	6a3b      	ldr	r3, [r7, #32]
 800b7e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	7a1a      	ldrb	r2, [r3, #8]
 800b7ec:	6a3b      	ldr	r3, [r7, #32]
 800b7ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b09      	cmp	r3, #9
 800b7f6:	d002      	beq.n	800b7fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	2209      	movs	r2, #9
 800b7fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
 800b800:	2b09      	cmp	r3, #9
 800b802:	f240 809d 	bls.w	800b940 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b806:	2309      	movs	r3, #9
 800b808:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b80a:	2300      	movs	r3, #0
 800b80c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b80e:	e081      	b.n	800b914 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b810:	f107 0316 	add.w	r3, r7, #22
 800b814:	4619      	mov	r1, r3
 800b816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b818:	f000 f99f 	bl	800bb5a <USBH_GetNextDesc>
 800b81c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	785b      	ldrb	r3, [r3, #1]
 800b822:	2b04      	cmp	r3, #4
 800b824:	d176      	bne.n	800b914 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	2b09      	cmp	r3, #9
 800b82c:	d002      	beq.n	800b834 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b830:	2209      	movs	r2, #9
 800b832:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b838:	221a      	movs	r2, #26
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	3308      	adds	r3, #8
 800b840:	6a3a      	ldr	r2, [r7, #32]
 800b842:	4413      	add	r3, r2
 800b844:	3302      	adds	r3, #2
 800b846:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b84a:	69f8      	ldr	r0, [r7, #28]
 800b84c:	f000 f87e 	bl	800b94c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b850:	2300      	movs	r3, #0
 800b852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b85a:	e043      	b.n	800b8e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b85c:	f107 0316 	add.w	r3, r7, #22
 800b860:	4619      	mov	r1, r3
 800b862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b864:	f000 f979 	bl	800bb5a <USBH_GetNextDesc>
 800b868:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86c:	785b      	ldrb	r3, [r3, #1]
 800b86e:	2b05      	cmp	r3, #5
 800b870:	d138      	bne.n	800b8e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b872:	69fb      	ldr	r3, [r7, #28]
 800b874:	795b      	ldrb	r3, [r3, #5]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d10f      	bne.n	800b89a <USBH_ParseCfgDesc+0x13a>
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	799b      	ldrb	r3, [r3, #6]
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d10b      	bne.n	800b89a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	79db      	ldrb	r3, [r3, #7]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10f      	bne.n	800b8aa <USBH_ParseCfgDesc+0x14a>
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	2b09      	cmp	r3, #9
 800b890:	d00b      	beq.n	800b8aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b894:	2209      	movs	r2, #9
 800b896:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b898:	e007      	b.n	800b8aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b07      	cmp	r3, #7
 800b8a0:	d004      	beq.n	800b8ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a4:	2207      	movs	r2, #7
 800b8a6:	701a      	strb	r2, [r3, #0]
 800b8a8:	e000      	b.n	800b8ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b8aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b8ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8b4:	3201      	adds	r2, #1
 800b8b6:	00d2      	lsls	r2, r2, #3
 800b8b8:	211a      	movs	r1, #26
 800b8ba:	fb01 f303 	mul.w	r3, r1, r3
 800b8be:	4413      	add	r3, r2
 800b8c0:	3308      	adds	r3, #8
 800b8c2:	6a3a      	ldr	r2, [r7, #32]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b8ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8cc:	69b9      	ldr	r1, [r7, #24]
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f86b 	bl	800b9aa <USBH_ParseEPDesc>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b8da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8de:	3301      	adds	r3, #1
 800b8e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	791b      	ldrb	r3, [r3, #4]
 800b8e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d204      	bcs.n	800b8fa <USBH_ParseCfgDesc+0x19a>
 800b8f0:	6a3b      	ldr	r3, [r7, #32]
 800b8f2:	885a      	ldrh	r2, [r3, #2]
 800b8f4:	8afb      	ldrh	r3, [r7, #22]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d8b0      	bhi.n	800b85c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	791b      	ldrb	r3, [r3, #4]
 800b8fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b902:	429a      	cmp	r2, r3
 800b904:	d201      	bcs.n	800b90a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b906:	2303      	movs	r3, #3
 800b908:	e01c      	b.n	800b944 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b90e:	3301      	adds	r3, #1
 800b910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d805      	bhi.n	800b928 <USBH_ParseCfgDesc+0x1c8>
 800b91c:	6a3b      	ldr	r3, [r7, #32]
 800b91e:	885a      	ldrh	r2, [r3, #2]
 800b920:	8afb      	ldrh	r3, [r7, #22]
 800b922:	429a      	cmp	r2, r3
 800b924:	f63f af74 	bhi.w	800b810 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	791b      	ldrb	r3, [r3, #4]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	bf28      	it	cs
 800b930:	2302      	movcs	r3, #2
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b938:	429a      	cmp	r2, r3
 800b93a:	d201      	bcs.n	800b940 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e001      	b.n	800b944 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b944:	4618      	mov	r0, r3
 800b946:	3730      	adds	r7, #48	; 0x30
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	781a      	ldrb	r2, [r3, #0]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	785a      	ldrb	r2, [r3, #1]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	789a      	ldrb	r2, [r3, #2]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	78da      	ldrb	r2, [r3, #3]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	791a      	ldrb	r2, [r3, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	795a      	ldrb	r2, [r3, #5]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	799a      	ldrb	r2, [r3, #6]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	79da      	ldrb	r2, [r3, #7]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	7a1a      	ldrb	r2, [r3, #8]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	721a      	strb	r2, [r3, #8]
}
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	b087      	sub	sp, #28
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	60f8      	str	r0, [r7, #12]
 800b9b2:	60b9      	str	r1, [r7, #8]
 800b9b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	781a      	ldrb	r2, [r3, #0]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	785a      	ldrb	r2, [r3, #1]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	789a      	ldrb	r2, [r3, #2]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	78da      	ldrb	r2, [r3, #3]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	3304      	adds	r3, #4
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	b29a      	uxth	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3305      	adds	r3, #5
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	021b      	lsls	r3, r3, #8
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	799a      	ldrb	r2, [r3, #6]
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	889b      	ldrh	r3, [r3, #4]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d102      	bne.n	800ba0c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ba06:	2303      	movs	r3, #3
 800ba08:	75fb      	strb	r3, [r7, #23]
 800ba0a:	e033      	b.n	800ba74 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	889b      	ldrh	r3, [r3, #4]
 800ba10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba14:	f023 0307 	bic.w	r3, r3, #7
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	889b      	ldrh	r3, [r3, #4]
 800ba22:	b21a      	sxth	r2, r3
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3304      	adds	r3, #4
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	b299      	uxth	r1, r3
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	3305      	adds	r3, #5
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	021b      	lsls	r3, r3, #8
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d110      	bne.n	800ba66 <USBH_ParseEPDesc+0xbc>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3304      	adds	r3, #4
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	b299      	uxth	r1, r3
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3305      	adds	r3, #5
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	430b      	orrs	r3, r1
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	b21b      	sxth	r3, r3
 800ba5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba62:	b21b      	sxth	r3, r3
 800ba64:	e001      	b.n	800ba6a <USBH_ParseEPDesc+0xc0>
 800ba66:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	b21b      	sxth	r3, r3
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d116      	bne.n	800baac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	78db      	ldrb	r3, [r3, #3]
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d005      	beq.n	800ba96 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	78db      	ldrb	r3, [r3, #3]
 800ba8e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d127      	bne.n	800bae6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	799b      	ldrb	r3, [r3, #6]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d003      	beq.n	800baa6 <USBH_ParseEPDesc+0xfc>
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	799b      	ldrb	r3, [r3, #6]
 800baa2:	2b10      	cmp	r3, #16
 800baa4:	d91f      	bls.n	800bae6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800baa6:	2303      	movs	r3, #3
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e01c      	b.n	800bae6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	78db      	ldrb	r3, [r3, #3]
 800bab0:	f003 0303 	and.w	r3, r3, #3
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d10a      	bne.n	800bace <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	799b      	ldrb	r3, [r3, #6]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <USBH_ParseEPDesc+0x11e>
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	799b      	ldrb	r3, [r3, #6]
 800bac4:	2b10      	cmp	r3, #16
 800bac6:	d90e      	bls.n	800bae6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bac8:	2303      	movs	r3, #3
 800baca:	75fb      	strb	r3, [r7, #23]
 800bacc:	e00b      	b.n	800bae6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	78db      	ldrb	r3, [r3, #3]
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d105      	bne.n	800bae6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	799b      	ldrb	r3, [r3, #6]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d101      	bne.n	800bae6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bae2:	2303      	movs	r3, #3
 800bae4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800bae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	371c      	adds	r7, #28
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	4613      	mov	r3, r2
 800bb00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3301      	adds	r3, #1
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	d120      	bne.n	800bb4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	1e9a      	subs	r2, r3, #2
 800bb12:	88fb      	ldrh	r3, [r7, #6]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	bf28      	it	cs
 800bb18:	4613      	movcs	r3, r2
 800bb1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3302      	adds	r3, #2
 800bb20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bb22:	2300      	movs	r3, #0
 800bb24:	82fb      	strh	r3, [r7, #22]
 800bb26:	e00b      	b.n	800bb40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bb28:	8afb      	ldrh	r3, [r7, #22]
 800bb2a:	68fa      	ldr	r2, [r7, #12]
 800bb2c:	4413      	add	r3, r2
 800bb2e:	781a      	ldrb	r2, [r3, #0]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	3301      	adds	r3, #1
 800bb38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bb3a:	8afb      	ldrh	r3, [r7, #22]
 800bb3c:	3302      	adds	r3, #2
 800bb3e:	82fb      	strh	r3, [r7, #22]
 800bb40:	8afa      	ldrh	r2, [r7, #22]
 800bb42:	8abb      	ldrh	r3, [r7, #20]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d3ef      	bcc.n	800bb28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
  }
}
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b085      	sub	sp, #20
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	881a      	ldrh	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	4413      	add	r3, r2
 800bb70:	b29a      	uxth	r2, r3
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4413      	add	r3, r2
 800bb80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb82:	68fb      	ldr	r3, [r7, #12]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b086      	sub	sp, #24
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bb9e:	2301      	movs	r3, #1
 800bba0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	789b      	ldrb	r3, [r3, #2]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d002      	beq.n	800bbb0 <USBH_CtlReq+0x20>
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d00f      	beq.n	800bbce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bbae:	e027      	b.n	800bc00 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	88fa      	ldrh	r2, [r7, #6]
 800bbba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	75fb      	strb	r3, [r7, #23]
      break;
 800bbcc:	e018      	b.n	800bc00 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f000 f81c 	bl	800bc0c <USBH_HandleControl>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d002      	beq.n	800bbe4 <USBH_CtlReq+0x54>
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	2b03      	cmp	r3, #3
 800bbe2:	d106      	bne.n	800bbf2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	761a      	strb	r2, [r3, #24]
      break;
 800bbf0:	e005      	b.n	800bbfe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d102      	bne.n	800bbfe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	709a      	strb	r2, [r3, #2]
      break;
 800bbfe:	bf00      	nop
  }
  return status;
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af02      	add	r7, sp, #8
 800bc12:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc14:	2301      	movs	r3, #1
 800bc16:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7e1b      	ldrb	r3, [r3, #24]
 800bc20:	3b01      	subs	r3, #1
 800bc22:	2b0a      	cmp	r3, #10
 800bc24:	f200 8156 	bhi.w	800bed4 <USBH_HandleControl+0x2c8>
 800bc28:	a201      	add	r2, pc, #4	; (adr r2, 800bc30 <USBH_HandleControl+0x24>)
 800bc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2e:	bf00      	nop
 800bc30:	0800bc5d 	.word	0x0800bc5d
 800bc34:	0800bc77 	.word	0x0800bc77
 800bc38:	0800bce1 	.word	0x0800bce1
 800bc3c:	0800bd07 	.word	0x0800bd07
 800bc40:	0800bd3f 	.word	0x0800bd3f
 800bc44:	0800bd69 	.word	0x0800bd69
 800bc48:	0800bdbb 	.word	0x0800bdbb
 800bc4c:	0800bddd 	.word	0x0800bddd
 800bc50:	0800be19 	.word	0x0800be19
 800bc54:	0800be3f 	.word	0x0800be3f
 800bc58:	0800be7d 	.word	0x0800be7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f103 0110 	add.w	r1, r3, #16
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	795b      	ldrb	r3, [r3, #5]
 800bc66:	461a      	mov	r2, r3
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 f943 	bl	800bef4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2202      	movs	r2, #2
 800bc72:	761a      	strb	r2, [r3, #24]
      break;
 800bc74:	e139      	b.n	800beea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	795b      	ldrb	r3, [r3, #5]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 f95d 	bl	800cf3c <USBH_LL_GetURBState>
 800bc82:	4603      	mov	r3, r0
 800bc84:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d11e      	bne.n	800bcca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	7c1b      	ldrb	r3, [r3, #16]
 800bc90:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bc94:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	8adb      	ldrh	r3, [r3, #22]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bc9e:	7b7b      	ldrb	r3, [r7, #13]
 800bca0:	2b80      	cmp	r3, #128	; 0x80
 800bca2:	d103      	bne.n	800bcac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2203      	movs	r2, #3
 800bca8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcaa:	e115      	b.n	800bed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2205      	movs	r2, #5
 800bcb0:	761a      	strb	r2, [r3, #24]
      break;
 800bcb2:	e111      	b.n	800bed8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bcb4:	7b7b      	ldrb	r3, [r7, #13]
 800bcb6:	2b80      	cmp	r3, #128	; 0x80
 800bcb8:	d103      	bne.n	800bcc2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2209      	movs	r2, #9
 800bcbe:	761a      	strb	r2, [r3, #24]
      break;
 800bcc0:	e10a      	b.n	800bed8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	2207      	movs	r2, #7
 800bcc6:	761a      	strb	r2, [r3, #24]
      break;
 800bcc8:	e106      	b.n	800bed8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b04      	cmp	r3, #4
 800bcce:	d003      	beq.n	800bcd8 <USBH_HandleControl+0xcc>
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	f040 8100 	bne.w	800bed8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	220b      	movs	r2, #11
 800bcdc:	761a      	strb	r2, [r3, #24]
      break;
 800bcde:	e0fb      	b.n	800bed8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6899      	ldr	r1, [r3, #8]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	899a      	ldrh	r2, [r3, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	791b      	ldrb	r3, [r3, #4]
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f93a 	bl	800bf72 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2204      	movs	r2, #4
 800bd02:	761a      	strb	r2, [r3, #24]
      break;
 800bd04:	e0f1      	b.n	800beea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	791b      	ldrb	r3, [r3, #4]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f001 f915 	bl	800cf3c <USBH_LL_GetURBState>
 800bd12:	4603      	mov	r3, r0
 800bd14:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd16:	7bbb      	ldrb	r3, [r7, #14]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d102      	bne.n	800bd22 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2209      	movs	r2, #9
 800bd20:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b05      	cmp	r3, #5
 800bd26:	d102      	bne.n	800bd2e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd2c:	e0d6      	b.n	800bedc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b04      	cmp	r3, #4
 800bd32:	f040 80d3 	bne.w	800bedc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	220b      	movs	r2, #11
 800bd3a:	761a      	strb	r2, [r3, #24]
      break;
 800bd3c:	e0ce      	b.n	800bedc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6899      	ldr	r1, [r3, #8]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	899a      	ldrh	r2, [r3, #12]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	795b      	ldrb	r3, [r3, #5]
 800bd4a:	2001      	movs	r0, #1
 800bd4c:	9000      	str	r0, [sp, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 f8ea 	bl	800bf28 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd5a:	b29a      	uxth	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2206      	movs	r2, #6
 800bd64:	761a      	strb	r2, [r3, #24]
      break;
 800bd66:	e0c0      	b.n	800beea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	795b      	ldrb	r3, [r3, #5]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f001 f8e4 	bl	800cf3c <USBH_LL_GetURBState>
 800bd74:	4603      	mov	r3, r0
 800bd76:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd78:	7bbb      	ldrb	r3, [r7, #14]
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d103      	bne.n	800bd86 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2207      	movs	r2, #7
 800bd82:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd84:	e0ac      	b.n	800bee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b05      	cmp	r3, #5
 800bd8a:	d105      	bne.n	800bd98 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	220c      	movs	r2, #12
 800bd90:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bd92:	2303      	movs	r3, #3
 800bd94:	73fb      	strb	r3, [r7, #15]
      break;
 800bd96:	e0a3      	b.n	800bee0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bd98:	7bbb      	ldrb	r3, [r7, #14]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d103      	bne.n	800bda6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2205      	movs	r2, #5
 800bda2:	761a      	strb	r2, [r3, #24]
      break;
 800bda4:	e09c      	b.n	800bee0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bda6:	7bbb      	ldrb	r3, [r7, #14]
 800bda8:	2b04      	cmp	r3, #4
 800bdaa:	f040 8099 	bne.w	800bee0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	220b      	movs	r2, #11
 800bdb2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdb8:	e092      	b.n	800bee0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	791b      	ldrb	r3, [r3, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f8d5 	bl	800bf72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2208      	movs	r2, #8
 800bdd8:	761a      	strb	r2, [r3, #24]

      break;
 800bdda:	e086      	b.n	800beea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	791b      	ldrb	r3, [r3, #4]
 800bde0:	4619      	mov	r1, r3
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 f8aa 	bl	800cf3c <USBH_LL_GetURBState>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bdec:	7bbb      	ldrb	r3, [r7, #14]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d105      	bne.n	800bdfe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	220d      	movs	r2, #13
 800bdf6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bdfc:	e072      	b.n	800bee4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
 800be00:	2b04      	cmp	r3, #4
 800be02:	d103      	bne.n	800be0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	220b      	movs	r2, #11
 800be08:	761a      	strb	r2, [r3, #24]
      break;
 800be0a:	e06b      	b.n	800bee4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800be0c:	7bbb      	ldrb	r3, [r7, #14]
 800be0e:	2b05      	cmp	r3, #5
 800be10:	d168      	bne.n	800bee4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800be12:	2303      	movs	r3, #3
 800be14:	73fb      	strb	r3, [r7, #15]
      break;
 800be16:	e065      	b.n	800bee4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	795b      	ldrb	r3, [r3, #5]
 800be1c:	2201      	movs	r2, #1
 800be1e:	9200      	str	r2, [sp, #0]
 800be20:	2200      	movs	r2, #0
 800be22:	2100      	movs	r1, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f87f 	bl	800bf28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be30:	b29a      	uxth	r2, r3
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	220a      	movs	r2, #10
 800be3a:	761a      	strb	r2, [r3, #24]
      break;
 800be3c:	e055      	b.n	800beea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	795b      	ldrb	r3, [r3, #5]
 800be42:	4619      	mov	r1, r3
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f001 f879 	bl	800cf3c <USBH_LL_GetURBState>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d105      	bne.n	800be60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	220d      	movs	r2, #13
 800be5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be5e:	e043      	b.n	800bee8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be60:	7bbb      	ldrb	r3, [r7, #14]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d103      	bne.n	800be6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2209      	movs	r2, #9
 800be6a:	761a      	strb	r2, [r3, #24]
      break;
 800be6c:	e03c      	b.n	800bee8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
 800be70:	2b04      	cmp	r3, #4
 800be72:	d139      	bne.n	800bee8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	220b      	movs	r2, #11
 800be78:	761a      	strb	r2, [r3, #24]
      break;
 800be7a:	e035      	b.n	800bee8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7e5b      	ldrb	r3, [r3, #25]
 800be80:	3301      	adds	r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	765a      	strb	r2, [r3, #25]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7e5b      	ldrb	r3, [r3, #25]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d806      	bhi.n	800be9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800be9c:	e025      	b.n	800beea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bea4:	2106      	movs	r1, #6
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	795b      	ldrb	r3, [r3, #5]
 800beb4:	4619      	mov	r1, r3
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f8e8 	bl	800c08c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	791b      	ldrb	r3, [r3, #4]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f8e2 	bl	800c08c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bece:	2302      	movs	r3, #2
 800bed0:	73fb      	strb	r3, [r7, #15]
      break;
 800bed2:	e00a      	b.n	800beea <USBH_HandleControl+0x2de>

    default:
      break;
 800bed4:	bf00      	nop
 800bed6:	e008      	b.n	800beea <USBH_HandleControl+0x2de>
      break;
 800bed8:	bf00      	nop
 800beda:	e006      	b.n	800beea <USBH_HandleControl+0x2de>
      break;
 800bedc:	bf00      	nop
 800bede:	e004      	b.n	800beea <USBH_HandleControl+0x2de>
      break;
 800bee0:	bf00      	nop
 800bee2:	e002      	b.n	800beea <USBH_HandleControl+0x2de>
      break;
 800bee4:	bf00      	nop
 800bee6:	e000      	b.n	800beea <USBH_HandleControl+0x2de>
      break;
 800bee8:	bf00      	nop
  }

  return status;
 800beea:	7bfb      	ldrb	r3, [r7, #15]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af04      	add	r7, sp, #16
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	4613      	mov	r3, r2
 800bf00:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf02:	79f9      	ldrb	r1, [r7, #7]
 800bf04:	2300      	movs	r3, #0
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	2308      	movs	r3, #8
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	2300      	movs	r3, #0
 800bf12:	9300      	str	r3, [sp, #0]
 800bf14:	2300      	movs	r3, #0
 800bf16:	2200      	movs	r2, #0
 800bf18:	68f8      	ldr	r0, [r7, #12]
 800bf1a:	f000 ffde 	bl	800ceda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b088      	sub	sp, #32
 800bf2c:	af04      	add	r7, sp, #16
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4611      	mov	r1, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	460b      	mov	r3, r1
 800bf38:	80fb      	strh	r3, [r7, #6]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf4c:	7979      	ldrb	r1, [r7, #5]
 800bf4e:	7e3b      	ldrb	r3, [r7, #24]
 800bf50:	9303      	str	r3, [sp, #12]
 800bf52:	88fb      	ldrh	r3, [r7, #6]
 800bf54:	9302      	str	r3, [sp, #8]
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	9300      	str	r3, [sp, #0]
 800bf5e:	2300      	movs	r3, #0
 800bf60:	2200      	movs	r2, #0
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f000 ffb9 	bl	800ceda <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bf68:	2300      	movs	r3, #0
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}

0800bf72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bf72:	b580      	push	{r7, lr}
 800bf74:	b088      	sub	sp, #32
 800bf76:	af04      	add	r7, sp, #16
 800bf78:	60f8      	str	r0, [r7, #12]
 800bf7a:	60b9      	str	r1, [r7, #8]
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	461a      	mov	r2, r3
 800bf80:	460b      	mov	r3, r1
 800bf82:	80fb      	strh	r3, [r7, #6]
 800bf84:	4613      	mov	r3, r2
 800bf86:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf88:	7979      	ldrb	r1, [r7, #5]
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9303      	str	r3, [sp, #12]
 800bf8e:	88fb      	ldrh	r3, [r7, #6]
 800bf90:	9302      	str	r3, [sp, #8]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	2301      	movs	r3, #1
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f000 ff9b 	bl	800ceda <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bfa4:	2300      	movs	r3, #0

}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}

0800bfae <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800bfae:	b580      	push	{r7, lr}
 800bfb0:	b088      	sub	sp, #32
 800bfb2:	af04      	add	r7, sp, #16
 800bfb4:	60f8      	str	r0, [r7, #12]
 800bfb6:	60b9      	str	r1, [r7, #8]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	461a      	mov	r2, r3
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	71fb      	strb	r3, [r7, #7]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	79b9      	ldrb	r1, [r7, #6]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	9203      	str	r2, [sp, #12]
 800bfce:	9302      	str	r3, [sp, #8]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	9301      	str	r3, [sp, #4]
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2303      	movs	r3, #3
 800bfda:	2201      	movs	r2, #1
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f000 ff7c 	bl	800ceda <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800bfe2:	2300      	movs	r3, #0
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3710      	adds	r7, #16
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b086      	sub	sp, #24
 800bff0:	af04      	add	r7, sp, #16
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	70fb      	strb	r3, [r7, #3]
 800bffe:	460b      	mov	r3, r1
 800c000:	70bb      	strb	r3, [r7, #2]
 800c002:	4613      	mov	r3, r2
 800c004:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c006:	7878      	ldrb	r0, [r7, #1]
 800c008:	78ba      	ldrb	r2, [r7, #2]
 800c00a:	78f9      	ldrb	r1, [r7, #3]
 800c00c:	8b3b      	ldrh	r3, [r7, #24]
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	7d3b      	ldrb	r3, [r7, #20]
 800c012:	9301      	str	r3, [sp, #4]
 800c014:	7c3b      	ldrb	r3, [r7, #16]
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	4603      	mov	r3, r0
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 ff0f 	bl	800ce3e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	4619      	mov	r1, r3
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 ff2e 	bl	800ce9c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3708      	adds	r7, #8
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}

0800c04a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b084      	sub	sp, #16
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	460b      	mov	r3, r1
 800c054:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 f836 	bl	800c0c8 <USBH_GetFreePipe>
 800c05c:	4603      	mov	r3, r0
 800c05e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c060:	89fb      	ldrh	r3, [r7, #14]
 800c062:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c066:	4293      	cmp	r3, r2
 800c068:	d00a      	beq.n	800c080 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c06a:	78fa      	ldrb	r2, [r7, #3]
 800c06c:	89fb      	ldrh	r3, [r7, #14]
 800c06e:	f003 030f 	and.w	r3, r3, #15
 800c072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	33e0      	adds	r3, #224	; 0xe0
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c080:	89fb      	ldrh	r3, [r7, #14]
 800c082:	b2db      	uxtb	r3, r3
}
 800c084:	4618      	mov	r0, r3
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c098:	78fb      	ldrb	r3, [r7, #3]
 800c09a:	2b0f      	cmp	r3, #15
 800c09c:	d80d      	bhi.n	800c0ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	33e0      	adds	r3, #224	; 0xe0
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	685a      	ldr	r2, [r3, #4]
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c0b0:	6879      	ldr	r1, [r7, #4]
 800c0b2:	33e0      	adds	r3, #224	; 0xe0
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	73fb      	strb	r3, [r7, #15]
 800c0d8:	e00f      	b.n	800c0fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	33e0      	adds	r3, #224	; 0xe0
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c0ee:	7bfb      	ldrb	r3, [r7, #15]
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	e007      	b.n	800c104 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c0f4:	7bfb      	ldrb	r3, [r7, #15]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	73fb      	strb	r3, [r7, #15]
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
 800c0fc:	2b0f      	cmp	r3, #15
 800c0fe:	d9ec      	bls.n	800c0da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c100:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c114:	2200      	movs	r2, #0
 800c116:	490e      	ldr	r1, [pc, #56]	; (800c150 <MX_USB_DEVICE_Init+0x40>)
 800c118:	480e      	ldr	r0, [pc, #56]	; (800c154 <MX_USB_DEVICE_Init+0x44>)
 800c11a:	f7fc fa1b 	bl	8008554 <USBD_Init>
 800c11e:	4603      	mov	r3, r0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d001      	beq.n	800c128 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c124:	f7f4 fd5c 	bl	8000be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c128:	490b      	ldr	r1, [pc, #44]	; (800c158 <MX_USB_DEVICE_Init+0x48>)
 800c12a:	480a      	ldr	r0, [pc, #40]	; (800c154 <MX_USB_DEVICE_Init+0x44>)
 800c12c:	f7fc fa42 	bl	80085b4 <USBD_RegisterClass>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c136:	f7f4 fd53 	bl	8000be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c13a:	4806      	ldr	r0, [pc, #24]	; (800c154 <MX_USB_DEVICE_Init+0x44>)
 800c13c:	f7fc fa70 	bl	8008620 <USBD_Start>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d001      	beq.n	800c14a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c146:	f7f4 fd4b 	bl	8000be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c14a:	bf00      	nop
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	200000e0 	.word	0x200000e0
 800c154:	200002b4 	.word	0x200002b4
 800c158:	2000000c 	.word	0x2000000c

0800c15c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	4603      	mov	r3, r0
 800c164:	6039      	str	r1, [r7, #0]
 800c166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2212      	movs	r2, #18
 800c16c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c16e:	4b03      	ldr	r3, [pc, #12]	; (800c17c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c170:	4618      	mov	r0, r3
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr
 800c17c:	20000100 	.word	0x20000100

0800c180 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2204      	movs	r2, #4
 800c190:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c192:	4b03      	ldr	r3, [pc, #12]	; (800c1a0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr
 800c1a0:	20000120 	.word	0x20000120

0800c1a4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	6039      	str	r1, [r7, #0]
 800c1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1b0:	79fb      	ldrb	r3, [r7, #7]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d105      	bne.n	800c1c2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1b6:	683a      	ldr	r2, [r7, #0]
 800c1b8:	4907      	ldr	r1, [pc, #28]	; (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1ba:	4808      	ldr	r0, [pc, #32]	; (800c1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c1bc:	f7fd fc06 	bl	80099cc <USBD_GetString>
 800c1c0:	e004      	b.n	800c1cc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4904      	ldr	r1, [pc, #16]	; (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1c6:	4805      	ldr	r0, [pc, #20]	; (800c1dc <USBD_FS_ProductStrDescriptor+0x38>)
 800c1c8:	f7fd fc00 	bl	80099cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1cc:	4b02      	ldr	r3, [pc, #8]	; (800c1d8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3708      	adds	r7, #8
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	20000590 	.word	0x20000590
 800c1dc:	0800da38 	.word	0x0800da38

0800c1e0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	6039      	str	r1, [r7, #0]
 800c1ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1ec:	683a      	ldr	r2, [r7, #0]
 800c1ee:	4904      	ldr	r1, [pc, #16]	; (800c200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1f0:	4804      	ldr	r0, [pc, #16]	; (800c204 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1f2:	f7fd fbeb 	bl	80099cc <USBD_GetString>
  return USBD_StrDesc;
 800c1f6:	4b02      	ldr	r3, [pc, #8]	; (800c200 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20000590 	.word	0x20000590
 800c204:	0800da50 	.word	0x0800da50

0800c208 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	221a      	movs	r2, #26
 800c218:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c21a:	f000 f855 	bl	800c2c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c21e:	4b02      	ldr	r3, [pc, #8]	; (800c228 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c220:	4618      	mov	r0, r3
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	20000124 	.word	0x20000124

0800c22c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	6039      	str	r1, [r7, #0]
 800c236:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d105      	bne.n	800c24a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	4907      	ldr	r1, [pc, #28]	; (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c242:	4808      	ldr	r0, [pc, #32]	; (800c264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c244:	f7fd fbc2 	bl	80099cc <USBD_GetString>
 800c248:	e004      	b.n	800c254 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	4904      	ldr	r1, [pc, #16]	; (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c24e:	4805      	ldr	r0, [pc, #20]	; (800c264 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c250:	f7fd fbbc 	bl	80099cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c254:	4b02      	ldr	r3, [pc, #8]	; (800c260 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20000590 	.word	0x20000590
 800c264:	0800da64 	.word	0x0800da64

0800c268 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	6039      	str	r1, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c274:	79fb      	ldrb	r3, [r7, #7]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d105      	bne.n	800c286 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	4907      	ldr	r1, [pc, #28]	; (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c27e:	4808      	ldr	r0, [pc, #32]	; (800c2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c280:	f7fd fba4 	bl	80099cc <USBD_GetString>
 800c284:	e004      	b.n	800c290 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	4904      	ldr	r1, [pc, #16]	; (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c28a:	4805      	ldr	r0, [pc, #20]	; (800c2a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c28c:	f7fd fb9e 	bl	80099cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800c290:	4b02      	ldr	r3, [pc, #8]	; (800c29c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c292:	4618      	mov	r0, r3
 800c294:	3708      	adds	r7, #8
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20000590 	.word	0x20000590
 800c2a0:	0800da70 	.word	0x0800da70

0800c2a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	6039      	str	r1, [r7, #0]
 800c2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	220c      	movs	r2, #12
 800c2b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c2b6:	4b03      	ldr	r3, [pc, #12]	; (800c2c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr
 800c2c4:	20000114 	.word	0x20000114

0800c2c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2ce:	4b0f      	ldr	r3, [pc, #60]	; (800c30c <Get_SerialNum+0x44>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2d4:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <Get_SerialNum+0x48>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2da:	4b0e      	ldr	r3, [pc, #56]	; (800c314 <Get_SerialNum+0x4c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4413      	add	r3, r2
 800c2e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d009      	beq.n	800c302 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2ee:	2208      	movs	r2, #8
 800c2f0:	4909      	ldr	r1, [pc, #36]	; (800c318 <Get_SerialNum+0x50>)
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f000 f814 	bl	800c320 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c2f8:	2204      	movs	r2, #4
 800c2fa:	4908      	ldr	r1, [pc, #32]	; (800c31c <Get_SerialNum+0x54>)
 800c2fc:	68b8      	ldr	r0, [r7, #8]
 800c2fe:	f000 f80f 	bl	800c320 <IntToUnicode>
  }
}
 800c302:	bf00      	nop
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	1fff7a10 	.word	0x1fff7a10
 800c310:	1fff7a14 	.word	0x1fff7a14
 800c314:	1fff7a18 	.word	0x1fff7a18
 800c318:	20000126 	.word	0x20000126
 800c31c:	20000136 	.word	0x20000136

0800c320 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4613      	mov	r3, r2
 800c32c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c32e:	2300      	movs	r3, #0
 800c330:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c332:	2300      	movs	r3, #0
 800c334:	75fb      	strb	r3, [r7, #23]
 800c336:	e027      	b.n	800c388 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	0f1b      	lsrs	r3, r3, #28
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	d80b      	bhi.n	800c358 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	0f1b      	lsrs	r3, r3, #28
 800c344:	b2da      	uxtb	r2, r3
 800c346:	7dfb      	ldrb	r3, [r7, #23]
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	4619      	mov	r1, r3
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	440b      	add	r3, r1
 800c350:	3230      	adds	r2, #48	; 0x30
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	e00a      	b.n	800c36e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	0f1b      	lsrs	r3, r3, #28
 800c35c:	b2da      	uxtb	r2, r3
 800c35e:	7dfb      	ldrb	r3, [r7, #23]
 800c360:	005b      	lsls	r3, r3, #1
 800c362:	4619      	mov	r1, r3
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	440b      	add	r3, r1
 800c368:	3237      	adds	r2, #55	; 0x37
 800c36a:	b2d2      	uxtb	r2, r2
 800c36c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	011b      	lsls	r3, r3, #4
 800c372:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	3301      	adds	r3, #1
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	4413      	add	r3, r2
 800c37e:	2200      	movs	r2, #0
 800c380:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	3301      	adds	r3, #1
 800c386:	75fb      	strb	r3, [r7, #23]
 800c388:	7dfa      	ldrb	r2, [r7, #23]
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d3d3      	bcc.n	800c338 <IntToUnicode+0x18>
  }
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	371c      	adds	r7, #28
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
	...

0800c3a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b0a0      	sub	sp, #128	; 0x80
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
 800c3b0:	605a      	str	r2, [r3, #4]
 800c3b2:	609a      	str	r2, [r3, #8]
 800c3b4:	60da      	str	r2, [r3, #12]
 800c3b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3b8:	f107 0310 	add.w	r3, r7, #16
 800c3bc:	225c      	movs	r2, #92	; 0x5c
 800c3be:	2100      	movs	r1, #0
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f000 fea3 	bl	800d10c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3ce:	d149      	bne.n	800c464 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c3d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3da:	f107 0310 	add.w	r3, r7, #16
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7f8 f8a2 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d001      	beq.n	800c3ee <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c3ea:	f7f4 fbf9 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
 800c3f2:	4b1e      	ldr	r3, [pc, #120]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	4a1d      	ldr	r2, [pc, #116]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c3f8:	f043 0301 	orr.w	r3, r3, #1
 800c3fc:	6313      	str	r3, [r2, #48]	; 0x30
 800c3fe:	4b1b      	ldr	r3, [pc, #108]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	60fb      	str	r3, [r7, #12]
 800c408:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c40a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c40e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c410:	2302      	movs	r3, #2
 800c412:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c414:	2300      	movs	r3, #0
 800c416:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c418:	2303      	movs	r3, #3
 800c41a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c41c:	230a      	movs	r3, #10
 800c41e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c420:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c424:	4619      	mov	r1, r3
 800c426:	4812      	ldr	r0, [pc, #72]	; (800c470 <HAL_PCD_MspInit+0xd0>)
 800c428:	f7f4 feb0 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c42c:	4b0f      	ldr	r3, [pc, #60]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c42e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c430:	4a0e      	ldr	r2, [pc, #56]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c436:	6353      	str	r3, [r2, #52]	; 0x34
 800c438:	2300      	movs	r3, #0
 800c43a:	60bb      	str	r3, [r7, #8]
 800c43c:	4b0b      	ldr	r3, [pc, #44]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c440:	4a0a      	ldr	r2, [pc, #40]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c446:	6453      	str	r3, [r2, #68]	; 0x44
 800c448:	4b08      	ldr	r3, [pc, #32]	; (800c46c <HAL_PCD_MspInit+0xcc>)
 800c44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c450:	60bb      	str	r3, [r7, #8]
 800c452:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c454:	2200      	movs	r2, #0
 800c456:	2100      	movs	r1, #0
 800c458:	2043      	movs	r0, #67	; 0x43
 800c45a:	f7f4 fe60 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c45e:	2043      	movs	r0, #67	; 0x43
 800c460:	f7f4 fe79 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c464:	bf00      	nop
 800c466:	3780      	adds	r7, #128	; 0x80
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	40023800 	.word	0x40023800
 800c470:	40020000 	.word	0x40020000

0800c474 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f7fc f915 	bl	80086ba <USBD_LL_SetupStage>
}
 800c490:	bf00      	nop
 800c492:	3708      	adds	r7, #8
 800c494:	46bd      	mov	sp, r7
 800c496:	bd80      	pop	{r7, pc}

0800c498 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	460b      	mov	r3, r1
 800c4a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4aa:	78fa      	ldrb	r2, [r7, #3]
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	4413      	add	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	440b      	add	r3, r1
 800c4b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7fc f94f 	bl	8008764 <USBD_LL_DataOutStage>
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b082      	sub	sp, #8
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4e0:	78fa      	ldrb	r2, [r7, #3]
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	4613      	mov	r3, r2
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	4413      	add	r3, r2
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	440b      	add	r3, r1
 800c4ee:	334c      	adds	r3, #76	; 0x4c
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	78fb      	ldrb	r3, [r7, #3]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	f7fc f9e8 	bl	80088ca <USBD_LL_DataInStage>
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c510:	4618      	mov	r0, r3
 800c512:	f7fc fb1c 	bl	8008b4e <USBD_LL_SOF>
}
 800c516:	bf00      	nop
 800c518:	3708      	adds	r7, #8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c526:	2301      	movs	r3, #1
 800c528:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	68db      	ldr	r3, [r3, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d102      	bne.n	800c538 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c532:	2300      	movs	r3, #0
 800c534:	73fb      	strb	r3, [r7, #15]
 800c536:	e008      	b.n	800c54a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d102      	bne.n	800c546 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c540:	2301      	movs	r3, #1
 800c542:	73fb      	strb	r3, [r7, #15]
 800c544:	e001      	b.n	800c54a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c546:	f7f4 fb4b 	bl	8000be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c550:	7bfa      	ldrb	r2, [r7, #15]
 800c552:	4611      	mov	r1, r2
 800c554:	4618      	mov	r0, r3
 800c556:	f7fc fabc 	bl	8008ad2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c560:	4618      	mov	r0, r3
 800c562:	f7fc fa64 	bl	8008a2e <USBD_LL_Reset>
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fc fab7 	bl	8008af2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	6812      	ldr	r2, [r2, #0]
 800c592:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6a1b      	ldr	r3, [r3, #32]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d005      	beq.n	800c5b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5a4:	4b04      	ldr	r3, [pc, #16]	; (800c5b8 <HAL_PCD_SuspendCallback+0x48>)
 800c5a6:	691b      	ldr	r3, [r3, #16]
 800c5a8:	4a03      	ldr	r2, [pc, #12]	; (800c5b8 <HAL_PCD_SuspendCallback+0x48>)
 800c5aa:	f043 0306 	orr.w	r3, r3, #6
 800c5ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5b0:	bf00      	nop
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}
 800c5b8:	e000ed00 	.word	0xe000ed00

0800c5bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b082      	sub	sp, #8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7fc faa7 	bl	8008b1e <USBD_LL_Resume>
}
 800c5d0:	bf00      	nop
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}

0800c5d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5ea:	78fa      	ldrb	r2, [r7, #3]
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fc faff 	bl	8008bf2 <USBD_LL_IsoOUTIncomplete>
}
 800c5f4:	bf00      	nop
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}

0800c5fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	460b      	mov	r3, r1
 800c606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c60e:	78fa      	ldrb	r2, [r7, #3]
 800c610:	4611      	mov	r1, r2
 800c612:	4618      	mov	r0, r3
 800c614:	f7fc fabb 	bl	8008b8e <USBD_LL_IsoINIncomplete>
}
 800c618:	bf00      	nop
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c62e:	4618      	mov	r0, r3
 800c630:	f7fc fb11 	bl	8008c56 <USBD_LL_DevConnected>
}
 800c634:	bf00      	nop
 800c636:	3708      	adds	r7, #8
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fc fb0e 	bl	8008c6c <USBD_LL_DevDisconnected>
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d13c      	bne.n	800c6e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c668:	4a20      	ldr	r2, [pc, #128]	; (800c6ec <USBD_LL_Init+0x94>)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a1e      	ldr	r2, [pc, #120]	; (800c6ec <USBD_LL_Init+0x94>)
 800c674:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c678:	4b1c      	ldr	r3, [pc, #112]	; (800c6ec <USBD_LL_Init+0x94>)
 800c67a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c67e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c680:	4b1a      	ldr	r3, [pc, #104]	; (800c6ec <USBD_LL_Init+0x94>)
 800c682:	2206      	movs	r2, #6
 800c684:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c686:	4b19      	ldr	r3, [pc, #100]	; (800c6ec <USBD_LL_Init+0x94>)
 800c688:	2202      	movs	r2, #2
 800c68a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c68c:	4b17      	ldr	r3, [pc, #92]	; (800c6ec <USBD_LL_Init+0x94>)
 800c68e:	2200      	movs	r2, #0
 800c690:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c692:	4b16      	ldr	r3, [pc, #88]	; (800c6ec <USBD_LL_Init+0x94>)
 800c694:	2202      	movs	r2, #2
 800c696:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c698:	4b14      	ldr	r3, [pc, #80]	; (800c6ec <USBD_LL_Init+0x94>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6a4:	4b11      	ldr	r3, [pc, #68]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6aa:	4b10      	ldr	r3, [pc, #64]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6b0:	4b0e      	ldr	r3, [pc, #56]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6b6:	480d      	ldr	r0, [pc, #52]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6b8:	f7f6 fb6a 	bl	8002d90 <HAL_PCD_Init>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d001      	beq.n	800c6c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6c2:	f7f4 fa8d 	bl	8000be0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6c6:	2180      	movs	r1, #128	; 0x80
 800c6c8:	4808      	ldr	r0, [pc, #32]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6ca:	f7f7 fdde 	bl	800428a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6ce:	2240      	movs	r2, #64	; 0x40
 800c6d0:	2100      	movs	r1, #0
 800c6d2:	4806      	ldr	r0, [pc, #24]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6d4:	f7f7 fd92 	bl	80041fc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6d8:	2280      	movs	r2, #128	; 0x80
 800c6da:	2101      	movs	r1, #1
 800c6dc:	4803      	ldr	r0, [pc, #12]	; (800c6ec <USBD_LL_Init+0x94>)
 800c6de:	f7f7 fd8d 	bl	80041fc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	20000790 	.word	0x20000790

0800c6f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c706:	4618      	mov	r0, r3
 800c708:	f7f6 fc66 	bl	8002fd8 <HAL_PCD_Start>
 800c70c:	4603      	mov	r3, r0
 800c70e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c710:	7bfb      	ldrb	r3, [r7, #15]
 800c712:	4618      	mov	r0, r3
 800c714:	f000 f97e 	bl	800ca14 <USBD_Get_USB_Status>
 800c718:	4603      	mov	r3, r0
 800c71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c726:	b580      	push	{r7, lr}
 800c728:	b084      	sub	sp, #16
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	4608      	mov	r0, r1
 800c730:	4611      	mov	r1, r2
 800c732:	461a      	mov	r2, r3
 800c734:	4603      	mov	r3, r0
 800c736:	70fb      	strb	r3, [r7, #3]
 800c738:	460b      	mov	r3, r1
 800c73a:	70bb      	strb	r3, [r7, #2]
 800c73c:	4613      	mov	r3, r2
 800c73e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c740:	2300      	movs	r3, #0
 800c742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c744:	2300      	movs	r3, #0
 800c746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c74e:	78bb      	ldrb	r3, [r7, #2]
 800c750:	883a      	ldrh	r2, [r7, #0]
 800c752:	78f9      	ldrb	r1, [r7, #3]
 800c754:	f7f7 f964 	bl	8003a20 <HAL_PCD_EP_Open>
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 f958 	bl	800ca14 <USBD_Get_USB_Status>
 800c764:	4603      	mov	r3, r0
 800c766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c768:	7bbb      	ldrb	r3, [r7, #14]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3710      	adds	r7, #16
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd80      	pop	{r7, pc}

0800c772 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c772:	b580      	push	{r7, lr}
 800c774:	b084      	sub	sp, #16
 800c776:	af00      	add	r7, sp, #0
 800c778:	6078      	str	r0, [r7, #4]
 800c77a:	460b      	mov	r3, r1
 800c77c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c78c:	78fa      	ldrb	r2, [r7, #3]
 800c78e:	4611      	mov	r1, r2
 800c790:	4618      	mov	r0, r3
 800c792:	f7f7 f9ad 	bl	8003af0 <HAL_PCD_EP_Close>
 800c796:	4603      	mov	r3, r0
 800c798:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c79a:	7bfb      	ldrb	r3, [r7, #15]
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 f939 	bl	800ca14 <USBD_Get_USB_Status>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3710      	adds	r7, #16
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ca:	78fa      	ldrb	r2, [r7, #3]
 800c7cc:	4611      	mov	r1, r2
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f7 fa6d 	bl	8003cae <HAL_PCD_EP_SetStall>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f91a 	bl	800ca14 <USBD_Get_USB_Status>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c808:	78fa      	ldrb	r2, [r7, #3]
 800c80a:	4611      	mov	r1, r2
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7f7 fab2 	bl	8003d76 <HAL_PCD_EP_ClrStall>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c816:	7bfb      	ldrb	r3, [r7, #15]
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 f8fb 	bl	800ca14 <USBD_Get_USB_Status>
 800c81e:	4603      	mov	r3, r0
 800c820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c822:	7bbb      	ldrb	r3, [r7, #14]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b085      	sub	sp, #20
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	460b      	mov	r3, r1
 800c836:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c83e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c840:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c844:	2b00      	cmp	r3, #0
 800c846:	da0b      	bge.n	800c860 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c848:	78fb      	ldrb	r3, [r7, #3]
 800c84a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c84e:	68f9      	ldr	r1, [r7, #12]
 800c850:	4613      	mov	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4413      	add	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	440b      	add	r3, r1
 800c85a:	333e      	adds	r3, #62	; 0x3e
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	e00b      	b.n	800c878 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c866:	68f9      	ldr	r1, [r7, #12]
 800c868:	4613      	mov	r3, r2
 800c86a:	00db      	lsls	r3, r3, #3
 800c86c:	4413      	add	r3, r2
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	440b      	add	r3, r1
 800c872:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c876:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	460b      	mov	r3, r1
 800c88e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c890:	2300      	movs	r3, #0
 800c892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c89e:	78fa      	ldrb	r2, [r7, #3]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f7f7 f897 	bl	80039d6 <HAL_PCD_SetAddress>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f000 f8b0 	bl	800ca14 <USBD_Get_USB_Status>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b086      	sub	sp, #24
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	60f8      	str	r0, [r7, #12]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	603b      	str	r3, [r7, #0]
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8e0:	7af9      	ldrb	r1, [r7, #11]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	f7f7 f998 	bl	8003c1a <HAL_PCD_EP_Transmit>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f000 f88f 	bl	800ca14 <USBD_Get_USB_Status>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c8fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	607a      	str	r2, [r7, #4]
 800c90e:	603b      	str	r3, [r7, #0]
 800c910:	460b      	mov	r3, r1
 800c912:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c914:	2300      	movs	r3, #0
 800c916:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c922:	7af9      	ldrb	r1, [r7, #11]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	f7f7 f92c 	bl	8003b84 <HAL_PCD_EP_Receive>
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f86e 	bl	800ca14 <USBD_Get_USB_Status>
 800c938:	4603      	mov	r3, r0
 800c93a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c93c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c954:	78fb      	ldrb	r3, [r7, #3]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <HAL_PCDEx_LPM_Callback+0x18>
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d01f      	beq.n	800c99e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c95e:	e03b      	b.n	800c9d8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d007      	beq.n	800c978 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c968:	f7f4 f82e 	bl	80009c8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c96c:	4b1c      	ldr	r3, [pc, #112]	; (800c9e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	4a1b      	ldr	r2, [pc, #108]	; (800c9e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c972:	f023 0306 	bic.w	r3, r3, #6
 800c976:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6812      	ldr	r2, [r2, #0]
 800c986:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c996:	4618      	mov	r0, r3
 800c998:	f7fc f8c1 	bl	8008b1e <USBD_LL_Resume>
    break;
 800c99c:	e01c      	b.n	800c9d8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	6812      	ldr	r2, [r2, #0]
 800c9ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9b0:	f043 0301 	orr.w	r3, r3, #1
 800c9b4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fc f898 	bl	8008af2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d005      	beq.n	800c9d6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9ca:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9cc:	691b      	ldr	r3, [r3, #16]
 800c9ce:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c9d0:	f043 0306 	orr.w	r3, r3, #6
 800c9d4:	6113      	str	r3, [r2, #16]
    break;
 800c9d6:	bf00      	nop
}
 800c9d8:	bf00      	nop
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	e000ed00 	.word	0xe000ed00

0800c9e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9ec:	4b03      	ldr	r3, [pc, #12]	; (800c9fc <USBD_static_malloc+0x18>)
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	20000c9c 	.word	0x20000c9c

0800ca00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]

}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca22:	79fb      	ldrb	r3, [r7, #7]
 800ca24:	2b03      	cmp	r3, #3
 800ca26:	d817      	bhi.n	800ca58 <USBD_Get_USB_Status+0x44>
 800ca28:	a201      	add	r2, pc, #4	; (adr r2, 800ca30 <USBD_Get_USB_Status+0x1c>)
 800ca2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca2e:	bf00      	nop
 800ca30:	0800ca41 	.word	0x0800ca41
 800ca34:	0800ca47 	.word	0x0800ca47
 800ca38:	0800ca4d 	.word	0x0800ca4d
 800ca3c:	0800ca53 	.word	0x0800ca53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	73fb      	strb	r3, [r7, #15]
    break;
 800ca44:	e00b      	b.n	800ca5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca46:	2303      	movs	r3, #3
 800ca48:	73fb      	strb	r3, [r7, #15]
    break;
 800ca4a:	e008      	b.n	800ca5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca50:	e005      	b.n	800ca5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca52:	2303      	movs	r3, #3
 800ca54:	73fb      	strb	r3, [r7, #15]
    break;
 800ca56:	e002      	b.n	800ca5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5c:	bf00      	nop
  }
  return usb_status;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ca70:	2200      	movs	r2, #0
 800ca72:	490e      	ldr	r1, [pc, #56]	; (800caac <MX_USB_HOST_Init+0x40>)
 800ca74:	480e      	ldr	r0, [pc, #56]	; (800cab0 <MX_USB_HOST_Init+0x44>)
 800ca76:	f7fd ff1d 	bl	800a8b4 <USBH_Init>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ca80:	f7f4 f8ae 	bl	8000be0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 800ca84:	490b      	ldr	r1, [pc, #44]	; (800cab4 <MX_USB_HOST_Init+0x48>)
 800ca86:	480a      	ldr	r0, [pc, #40]	; (800cab0 <MX_USB_HOST_Init+0x44>)
 800ca88:	f7fd ffa2 	bl	800a9d0 <USBH_RegisterClass>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d001      	beq.n	800ca96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ca92:	f7f4 f8a5 	bl	8000be0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ca96:	4806      	ldr	r0, [pc, #24]	; (800cab0 <MX_USB_HOST_Init+0x44>)
 800ca98:	f7fe f826 	bl	800aae8 <USBH_Start>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d001      	beq.n	800caa6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800caa2:	f7f4 f89d 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800caa6:	bf00      	nop
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	0800cacd 	.word	0x0800cacd
 800cab0:	20000cb0 	.word	0x20000cb0
 800cab4:	200000c0 	.word	0x200000c0

0800cab8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800cabc:	4802      	ldr	r0, [pc, #8]	; (800cac8 <MX_USB_HOST_Process+0x10>)
 800cabe:	f7fe f823 	bl	800ab08 <USBH_Process>
}
 800cac2:	bf00      	nop
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000cb0 	.word	0x20000cb0

0800cacc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	460b      	mov	r3, r1
 800cad6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cad8:	78fb      	ldrb	r3, [r7, #3]
 800cada:	3b01      	subs	r3, #1
 800cadc:	2b04      	cmp	r3, #4
 800cade:	d819      	bhi.n	800cb14 <USBH_UserProcess+0x48>
 800cae0:	a201      	add	r2, pc, #4	; (adr r2, 800cae8 <USBH_UserProcess+0x1c>)
 800cae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cae6:	bf00      	nop
 800cae8:	0800cb15 	.word	0x0800cb15
 800caec:	0800cb05 	.word	0x0800cb05
 800caf0:	0800cb15 	.word	0x0800cb15
 800caf4:	0800cb0d 	.word	0x0800cb0d
 800caf8:	0800cafd 	.word	0x0800cafd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cafc:	4b09      	ldr	r3, [pc, #36]	; (800cb24 <USBH_UserProcess+0x58>)
 800cafe:	2203      	movs	r2, #3
 800cb00:	701a      	strb	r2, [r3, #0]
  break;
 800cb02:	e008      	b.n	800cb16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cb04:	4b07      	ldr	r3, [pc, #28]	; (800cb24 <USBH_UserProcess+0x58>)
 800cb06:	2202      	movs	r2, #2
 800cb08:	701a      	strb	r2, [r3, #0]
  break;
 800cb0a:	e004      	b.n	800cb16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <USBH_UserProcess+0x58>)
 800cb0e:	2201      	movs	r2, #1
 800cb10:	701a      	strb	r2, [r3, #0]
  break;
 800cb12:	e000      	b.n	800cb16 <USBH_UserProcess+0x4a>

  default:
  break;
 800cb14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb16:	bf00      	nop
 800cb18:	370c      	adds	r7, #12
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	20001088 	.word	0x20001088

0800cb28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b0a0      	sub	sp, #128	; 0x80
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	605a      	str	r2, [r3, #4]
 800cb3a:	609a      	str	r2, [r3, #8]
 800cb3c:	60da      	str	r2, [r3, #12]
 800cb3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb40:	f107 0310 	add.w	r3, r7, #16
 800cb44:	225c      	movs	r2, #92	; 0x5c
 800cb46:	2100      	movs	r1, #0
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 fadf 	bl	800d10c <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a25      	ldr	r2, [pc, #148]	; (800cbe8 <HAL_HCD_MspInit+0xc0>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d143      	bne.n	800cbe0 <HAL_HCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cb58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb62:	f107 0310 	add.w	r3, r7, #16
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f7 fcde 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800cb72:	f7f4 f835 	bl	8000be0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb76:	2300      	movs	r3, #0
 800cb78:	60fb      	str	r3, [r7, #12]
 800cb7a:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7e:	4a1b      	ldr	r2, [pc, #108]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cb80:	f043 0302 	orr.w	r3, r3, #2
 800cb84:	6313      	str	r3, [r2, #48]	; 0x30
 800cb86:	4b19      	ldr	r3, [pc, #100]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8a:	f003 0302 	and.w	r3, r3, #2
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800cb92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800cb96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb98:	2302      	movs	r3, #2
 800cb9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cba0:	2303      	movs	r3, #3
 800cba2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cba4:	230c      	movs	r3, #12
 800cba6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cba8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cbac:	4619      	mov	r1, r3
 800cbae:	4810      	ldr	r0, [pc, #64]	; (800cbf0 <HAL_HCD_MspInit+0xc8>)
 800cbb0:	f7f4 faec 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	60bb      	str	r3, [r7, #8]
 800cbb8:	4b0c      	ldr	r3, [pc, #48]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbbc:	4a0b      	ldr	r2, [pc, #44]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cbbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbc2:	6313      	str	r3, [r2, #48]	; 0x30
 800cbc4:	4b09      	ldr	r3, [pc, #36]	; (800cbec <HAL_HCD_MspInit+0xc4>)
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbcc:	60bb      	str	r3, [r7, #8]
 800cbce:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	2100      	movs	r1, #0
 800cbd4:	204d      	movs	r0, #77	; 0x4d
 800cbd6:	f7f4 faa2 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cbda:	204d      	movs	r0, #77	; 0x4d
 800cbdc:	f7f4 fabb 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cbe0:	bf00      	nop
 800cbe2:	3780      	adds	r7, #128	; 0x80
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	40040000 	.word	0x40040000
 800cbec:	40023800 	.word	0x40023800
 800cbf0:	40020400 	.word	0x40020400

0800cbf4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fb5f 	bl	800b2c6 <USBH_LL_IncTimer>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fe fb97 	bl	800b352 <USBH_LL_Connect>
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe fba0 	bl	800b380 <USBH_LL_Disconnect>
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
 800cc54:	4613      	mov	r3, r2
 800cc56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe fb51 	bl	800b31a <USBH_LL_PortEnabled>
}
 800cc78:	bf00      	nop
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fb51 	bl	800b336 <USBH_LL_PortDisabled>
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d132      	bne.n	800cd14 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ccae:	4a1c      	ldr	r2, [pc, #112]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4a19      	ldr	r2, [pc, #100]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccba:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ccbe:	4b18      	ldr	r3, [pc, #96]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccc0:	4a18      	ldr	r2, [pc, #96]	; (800cd24 <USBH_LL_Init+0x88>)
 800ccc2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800ccc4:	4b16      	ldr	r3, [pc, #88]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccc6:	2210      	movs	r2, #16
 800ccc8:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ccca:	4b15      	ldr	r3, [pc, #84]	; (800cd20 <USBH_LL_Init+0x84>)
 800cccc:	2201      	movs	r2, #1
 800ccce:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ccd0:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ccd6:	4b12      	ldr	r3, [pc, #72]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccd8:	2202      	movs	r2, #2
 800ccda:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ccdc:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800cce2:	4b0f      	ldr	r3, [pc, #60]	; (800cd20 <USBH_LL_Init+0x84>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800cce8:	4b0d      	ldr	r3, [pc, #52]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ccf4:	480a      	ldr	r0, [pc, #40]	; (800cd20 <USBH_LL_Init+0x84>)
 800ccf6:	f7f4 fc41 	bl	800157c <HAL_HCD_Init>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d001      	beq.n	800cd04 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cd00:	f7f3 ff6e 	bl	8000be0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cd04:	4806      	ldr	r0, [pc, #24]	; (800cd20 <USBH_LL_Init+0x84>)
 800cd06:	f7f5 f824 	bl	8001d52 <HAL_HCD_GetCurrentFrame>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f7fe faca 	bl	800b2a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	2000108c 	.word	0x2000108c
 800cd24:	40040000 	.word	0x40040000

0800cd28 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7f4 ff91 	bl	8001c66 <HAL_HCD_Start>
 800cd44:	4603      	mov	r3, r0
 800cd46:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd48:	7bfb      	ldrb	r3, [r7, #15]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f000 f95c 	bl	800d008 <USBH_Get_USB_Status>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd66:	2300      	movs	r3, #0
 800cd68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7f4 ff99 	bl	8001cac <HAL_HCD_Stop>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 f941 	bl	800d008 <USBH_Get_USB_Status>
 800cd86:	4603      	mov	r3, r0
 800cd88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f4 ffe1 	bl	8001d6e <HAL_HCD_GetCurrentSpeed>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	d00c      	beq.n	800cdcc <USBH_LL_GetSpeed+0x38>
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d80d      	bhi.n	800cdd2 <USBH_LL_GetSpeed+0x3e>
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d002      	beq.n	800cdc0 <USBH_LL_GetSpeed+0x2c>
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d003      	beq.n	800cdc6 <USBH_LL_GetSpeed+0x32>
 800cdbe:	e008      	b.n	800cdd2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc4:	e008      	b.n	800cdd8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	73fb      	strb	r3, [r7, #15]
    break;
 800cdca:	e005      	b.n	800cdd8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cdcc:	2302      	movs	r3, #2
 800cdce:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd0:	e002      	b.n	800cdd8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd6:	bf00      	nop
  }
  return  speed;
 800cdd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3710      	adds	r7, #16
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7f4 ff74 	bl	8001ce6 <HAL_HCD_ResetPort>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 f8ff 	bl	800d008 <USBH_Get_USB_Status>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	460b      	mov	r3, r1
 800ce22:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce2a:	78fa      	ldrb	r2, [r7, #3]
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7f4 ff7b 	bl	8001d2a <HAL_HCD_HC_GetXferCount>
 800ce34:	4603      	mov	r3, r0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce3e:	b590      	push	{r4, r7, lr}
 800ce40:	b089      	sub	sp, #36	; 0x24
 800ce42:	af04      	add	r7, sp, #16
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	4608      	mov	r0, r1
 800ce48:	4611      	mov	r1, r2
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	70fb      	strb	r3, [r7, #3]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70bb      	strb	r3, [r7, #2]
 800ce54:	4613      	mov	r3, r2
 800ce56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce66:	787c      	ldrb	r4, [r7, #1]
 800ce68:	78ba      	ldrb	r2, [r7, #2]
 800ce6a:	78f9      	ldrb	r1, [r7, #3]
 800ce6c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce6e:	9302      	str	r3, [sp, #8]
 800ce70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	4623      	mov	r3, r4
 800ce7e:	f7f4 fbdf 	bl	8001640 <HAL_HCD_HC_Init>
 800ce82:	4603      	mov	r3, r0
 800ce84:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce86:	7bfb      	ldrb	r3, [r7, #15]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 f8bd 	bl	800d008 <USBH_Get_USB_Status>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd90      	pop	{r4, r7, pc}

0800ce9c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ceac:	2300      	movs	r3, #0
 800ceae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ceb6:	78fa      	ldrb	r2, [r7, #3]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7f4 fc4f 	bl	800175e <HAL_HCD_HC_Halt>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cec4:	7bfb      	ldrb	r3, [r7, #15]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f000 f89e 	bl	800d008 <USBH_Get_USB_Status>
 800cecc:	4603      	mov	r3, r0
 800cece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ceda:	b590      	push	{r4, r7, lr}
 800cedc:	b089      	sub	sp, #36	; 0x24
 800cede:	af04      	add	r7, sp, #16
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	461a      	mov	r2, r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	70fb      	strb	r3, [r7, #3]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70bb      	strb	r3, [r7, #2]
 800cef0:	4613      	mov	r3, r2
 800cef2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cef8:	2300      	movs	r3, #0
 800cefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cf02:	787c      	ldrb	r4, [r7, #1]
 800cf04:	78ba      	ldrb	r2, [r7, #2]
 800cf06:	78f9      	ldrb	r1, [r7, #3]
 800cf08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf0c:	9303      	str	r3, [sp, #12]
 800cf0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf10:	9302      	str	r3, [sp, #8]
 800cf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf14:	9301      	str	r3, [sp, #4]
 800cf16:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	4623      	mov	r3, r4
 800cf1e:	f7f4 fc41 	bl	80017a4 <HAL_HCD_HC_SubmitRequest>
 800cf22:	4603      	mov	r3, r0
 800cf24:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf26:	7bfb      	ldrb	r3, [r7, #15]
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 f86d 	bl	800d008 <USBH_Get_USB_Status>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd90      	pop	{r4, r7, pc}

0800cf3c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf4e:	78fa      	ldrb	r2, [r7, #3]
 800cf50:	4611      	mov	r1, r2
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7f4 fed5 	bl	8001d02 <HAL_HCD_HC_GetURBState>
 800cf58:	4603      	mov	r3, r0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b082      	sub	sp, #8
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	6078      	str	r0, [r7, #4]
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d103      	bne.n	800cf80 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cf78:	78fb      	ldrb	r3, [r7, #3]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f870 	bl	800d060 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cf80:	20c8      	movs	r0, #200	; 0xc8
 800cf82:	f7f3 ffcd 	bl	8000f20 <HAL_Delay>
  return USBH_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfa6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cfa8:	78fb      	ldrb	r3, [r7, #3]
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	212c      	movs	r1, #44	; 0x2c
 800cfae:	fb01 f303 	mul.w	r3, r1, r3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	333b      	adds	r3, #59	; 0x3b
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d009      	beq.n	800cfd0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cfbc:	78fb      	ldrb	r3, [r7, #3]
 800cfbe:	68fa      	ldr	r2, [r7, #12]
 800cfc0:	212c      	movs	r1, #44	; 0x2c
 800cfc2:	fb01 f303 	mul.w	r3, r1, r3
 800cfc6:	4413      	add	r3, r2
 800cfc8:	3354      	adds	r3, #84	; 0x54
 800cfca:	78ba      	ldrb	r2, [r7, #2]
 800cfcc:	701a      	strb	r2, [r3, #0]
 800cfce:	e008      	b.n	800cfe2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cfd0:	78fb      	ldrb	r3, [r7, #3]
 800cfd2:	68fa      	ldr	r2, [r7, #12]
 800cfd4:	212c      	movs	r1, #44	; 0x2c
 800cfd6:	fb01 f303 	mul.w	r3, r1, r3
 800cfda:	4413      	add	r3, r2
 800cfdc:	3355      	adds	r3, #85	; 0x55
 800cfde:	78ba      	ldrb	r2, [r7, #2]
 800cfe0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f7f3 ff91 	bl	8000f20 <HAL_Delay>
}
 800cffe:	bf00      	nop
 800d000:	3708      	adds	r7, #8
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}
	...

0800d008 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d008:	b480      	push	{r7}
 800d00a:	b085      	sub	sp, #20
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d012:	2300      	movs	r3, #0
 800d014:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d016:	79fb      	ldrb	r3, [r7, #7]
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d817      	bhi.n	800d04c <USBH_Get_USB_Status+0x44>
 800d01c:	a201      	add	r2, pc, #4	; (adr r2, 800d024 <USBH_Get_USB_Status+0x1c>)
 800d01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d022:	bf00      	nop
 800d024:	0800d035 	.word	0x0800d035
 800d028:	0800d03b 	.word	0x0800d03b
 800d02c:	0800d041 	.word	0x0800d041
 800d030:	0800d047 	.word	0x0800d047
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	73fb      	strb	r3, [r7, #15]
    break;
 800d038:	e00b      	b.n	800d052 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d03a:	2302      	movs	r3, #2
 800d03c:	73fb      	strb	r3, [r7, #15]
    break;
 800d03e:	e008      	b.n	800d052 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d040:	2301      	movs	r3, #1
 800d042:	73fb      	strb	r3, [r7, #15]
    break;
 800d044:	e005      	b.n	800d052 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d046:	2302      	movs	r3, #2
 800d048:	73fb      	strb	r3, [r7, #15]
    break;
 800d04a:	e002      	b.n	800d052 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d04c:	2302      	movs	r3, #2
 800d04e:	73fb      	strb	r3, [r7, #15]
    break;
 800d050:	bf00      	nop
  }
  return usb_status;
 800d052:	7bfb      	ldrb	r3, [r7, #15]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3714      	adds	r7, #20
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d06a:	79fb      	ldrb	r3, [r7, #7]
 800d06c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d06e:	79fb      	ldrb	r3, [r7, #7]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d074:	2301      	movs	r3, #1
 800d076:	73fb      	strb	r3, [r7, #15]
 800d078:	e001      	b.n	800d07e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,(GPIO_PinState)data);
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
 800d080:	461a      	mov	r2, r3
 800d082:	2120      	movs	r1, #32
 800d084:	4803      	ldr	r0, [pc, #12]	; (800d094 <MX_DriverVbusHS+0x34>)
 800d086:	f7f4 fa2d 	bl	80014e4 <HAL_GPIO_WritePin>
}
 800d08a:	bf00      	nop
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	40020000 	.word	0x40020000

0800d098 <__errno>:
 800d098:	4b01      	ldr	r3, [pc, #4]	; (800d0a0 <__errno+0x8>)
 800d09a:	6818      	ldr	r0, [r3, #0]
 800d09c:	4770      	bx	lr
 800d09e:	bf00      	nop
 800d0a0:	20000140 	.word	0x20000140

0800d0a4 <__libc_init_array>:
 800d0a4:	b570      	push	{r4, r5, r6, lr}
 800d0a6:	4d0d      	ldr	r5, [pc, #52]	; (800d0dc <__libc_init_array+0x38>)
 800d0a8:	4c0d      	ldr	r4, [pc, #52]	; (800d0e0 <__libc_init_array+0x3c>)
 800d0aa:	1b64      	subs	r4, r4, r5
 800d0ac:	10a4      	asrs	r4, r4, #2
 800d0ae:	2600      	movs	r6, #0
 800d0b0:	42a6      	cmp	r6, r4
 800d0b2:	d109      	bne.n	800d0c8 <__libc_init_array+0x24>
 800d0b4:	4d0b      	ldr	r5, [pc, #44]	; (800d0e4 <__libc_init_array+0x40>)
 800d0b6:	4c0c      	ldr	r4, [pc, #48]	; (800d0e8 <__libc_init_array+0x44>)
 800d0b8:	f000 fc9e 	bl	800d9f8 <_init>
 800d0bc:	1b64      	subs	r4, r4, r5
 800d0be:	10a4      	asrs	r4, r4, #2
 800d0c0:	2600      	movs	r6, #0
 800d0c2:	42a6      	cmp	r6, r4
 800d0c4:	d105      	bne.n	800d0d2 <__libc_init_array+0x2e>
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0cc:	4798      	blx	r3
 800d0ce:	3601      	adds	r6, #1
 800d0d0:	e7ee      	b.n	800d0b0 <__libc_init_array+0xc>
 800d0d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d6:	4798      	blx	r3
 800d0d8:	3601      	adds	r6, #1
 800d0da:	e7f2      	b.n	800d0c2 <__libc_init_array+0x1e>
 800d0dc:	0800dde4 	.word	0x0800dde4
 800d0e0:	0800dde4 	.word	0x0800dde4
 800d0e4:	0800dde4 	.word	0x0800dde4
 800d0e8:	0800dde8 	.word	0x0800dde8

0800d0ec <malloc>:
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <malloc+0xc>)
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	6818      	ldr	r0, [r3, #0]
 800d0f2:	f000 b87f 	b.w	800d1f4 <_malloc_r>
 800d0f6:	bf00      	nop
 800d0f8:	20000140 	.word	0x20000140

0800d0fc <free>:
 800d0fc:	4b02      	ldr	r3, [pc, #8]	; (800d108 <free+0xc>)
 800d0fe:	4601      	mov	r1, r0
 800d100:	6818      	ldr	r0, [r3, #0]
 800d102:	f000 b80b 	b.w	800d11c <_free_r>
 800d106:	bf00      	nop
 800d108:	20000140 	.word	0x20000140

0800d10c <memset>:
 800d10c:	4402      	add	r2, r0
 800d10e:	4603      	mov	r3, r0
 800d110:	4293      	cmp	r3, r2
 800d112:	d100      	bne.n	800d116 <memset+0xa>
 800d114:	4770      	bx	lr
 800d116:	f803 1b01 	strb.w	r1, [r3], #1
 800d11a:	e7f9      	b.n	800d110 <memset+0x4>

0800d11c <_free_r>:
 800d11c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d11e:	2900      	cmp	r1, #0
 800d120:	d044      	beq.n	800d1ac <_free_r+0x90>
 800d122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d126:	9001      	str	r0, [sp, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f1a1 0404 	sub.w	r4, r1, #4
 800d12e:	bfb8      	it	lt
 800d130:	18e4      	addlt	r4, r4, r3
 800d132:	f000 f903 	bl	800d33c <__malloc_lock>
 800d136:	4a1e      	ldr	r2, [pc, #120]	; (800d1b0 <_free_r+0x94>)
 800d138:	9801      	ldr	r0, [sp, #4]
 800d13a:	6813      	ldr	r3, [r2, #0]
 800d13c:	b933      	cbnz	r3, 800d14c <_free_r+0x30>
 800d13e:	6063      	str	r3, [r4, #4]
 800d140:	6014      	str	r4, [r2, #0]
 800d142:	b003      	add	sp, #12
 800d144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d148:	f000 b8fe 	b.w	800d348 <__malloc_unlock>
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	d908      	bls.n	800d162 <_free_r+0x46>
 800d150:	6825      	ldr	r5, [r4, #0]
 800d152:	1961      	adds	r1, r4, r5
 800d154:	428b      	cmp	r3, r1
 800d156:	bf01      	itttt	eq
 800d158:	6819      	ldreq	r1, [r3, #0]
 800d15a:	685b      	ldreq	r3, [r3, #4]
 800d15c:	1949      	addeq	r1, r1, r5
 800d15e:	6021      	streq	r1, [r4, #0]
 800d160:	e7ed      	b.n	800d13e <_free_r+0x22>
 800d162:	461a      	mov	r2, r3
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	b10b      	cbz	r3, 800d16c <_free_r+0x50>
 800d168:	42a3      	cmp	r3, r4
 800d16a:	d9fa      	bls.n	800d162 <_free_r+0x46>
 800d16c:	6811      	ldr	r1, [r2, #0]
 800d16e:	1855      	adds	r5, r2, r1
 800d170:	42a5      	cmp	r5, r4
 800d172:	d10b      	bne.n	800d18c <_free_r+0x70>
 800d174:	6824      	ldr	r4, [r4, #0]
 800d176:	4421      	add	r1, r4
 800d178:	1854      	adds	r4, r2, r1
 800d17a:	42a3      	cmp	r3, r4
 800d17c:	6011      	str	r1, [r2, #0]
 800d17e:	d1e0      	bne.n	800d142 <_free_r+0x26>
 800d180:	681c      	ldr	r4, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	6053      	str	r3, [r2, #4]
 800d186:	4421      	add	r1, r4
 800d188:	6011      	str	r1, [r2, #0]
 800d18a:	e7da      	b.n	800d142 <_free_r+0x26>
 800d18c:	d902      	bls.n	800d194 <_free_r+0x78>
 800d18e:	230c      	movs	r3, #12
 800d190:	6003      	str	r3, [r0, #0]
 800d192:	e7d6      	b.n	800d142 <_free_r+0x26>
 800d194:	6825      	ldr	r5, [r4, #0]
 800d196:	1961      	adds	r1, r4, r5
 800d198:	428b      	cmp	r3, r1
 800d19a:	bf04      	itt	eq
 800d19c:	6819      	ldreq	r1, [r3, #0]
 800d19e:	685b      	ldreq	r3, [r3, #4]
 800d1a0:	6063      	str	r3, [r4, #4]
 800d1a2:	bf04      	itt	eq
 800d1a4:	1949      	addeq	r1, r1, r5
 800d1a6:	6021      	streq	r1, [r4, #0]
 800d1a8:	6054      	str	r4, [r2, #4]
 800d1aa:	e7ca      	b.n	800d142 <_free_r+0x26>
 800d1ac:	b003      	add	sp, #12
 800d1ae:	bd30      	pop	{r4, r5, pc}
 800d1b0:	20001390 	.word	0x20001390

0800d1b4 <sbrk_aligned>:
 800d1b4:	b570      	push	{r4, r5, r6, lr}
 800d1b6:	4e0e      	ldr	r6, [pc, #56]	; (800d1f0 <sbrk_aligned+0x3c>)
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	6831      	ldr	r1, [r6, #0]
 800d1bc:	4605      	mov	r5, r0
 800d1be:	b911      	cbnz	r1, 800d1c6 <sbrk_aligned+0x12>
 800d1c0:	f000 f88c 	bl	800d2dc <_sbrk_r>
 800d1c4:	6030      	str	r0, [r6, #0]
 800d1c6:	4621      	mov	r1, r4
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f000 f887 	bl	800d2dc <_sbrk_r>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	d00a      	beq.n	800d1e8 <sbrk_aligned+0x34>
 800d1d2:	1cc4      	adds	r4, r0, #3
 800d1d4:	f024 0403 	bic.w	r4, r4, #3
 800d1d8:	42a0      	cmp	r0, r4
 800d1da:	d007      	beq.n	800d1ec <sbrk_aligned+0x38>
 800d1dc:	1a21      	subs	r1, r4, r0
 800d1de:	4628      	mov	r0, r5
 800d1e0:	f000 f87c 	bl	800d2dc <_sbrk_r>
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	d101      	bne.n	800d1ec <sbrk_aligned+0x38>
 800d1e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	bd70      	pop	{r4, r5, r6, pc}
 800d1f0:	20001394 	.word	0x20001394

0800d1f4 <_malloc_r>:
 800d1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f8:	1ccd      	adds	r5, r1, #3
 800d1fa:	f025 0503 	bic.w	r5, r5, #3
 800d1fe:	3508      	adds	r5, #8
 800d200:	2d0c      	cmp	r5, #12
 800d202:	bf38      	it	cc
 800d204:	250c      	movcc	r5, #12
 800d206:	2d00      	cmp	r5, #0
 800d208:	4607      	mov	r7, r0
 800d20a:	db01      	blt.n	800d210 <_malloc_r+0x1c>
 800d20c:	42a9      	cmp	r1, r5
 800d20e:	d905      	bls.n	800d21c <_malloc_r+0x28>
 800d210:	230c      	movs	r3, #12
 800d212:	603b      	str	r3, [r7, #0]
 800d214:	2600      	movs	r6, #0
 800d216:	4630      	mov	r0, r6
 800d218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d21c:	4e2e      	ldr	r6, [pc, #184]	; (800d2d8 <_malloc_r+0xe4>)
 800d21e:	f000 f88d 	bl	800d33c <__malloc_lock>
 800d222:	6833      	ldr	r3, [r6, #0]
 800d224:	461c      	mov	r4, r3
 800d226:	bb34      	cbnz	r4, 800d276 <_malloc_r+0x82>
 800d228:	4629      	mov	r1, r5
 800d22a:	4638      	mov	r0, r7
 800d22c:	f7ff ffc2 	bl	800d1b4 <sbrk_aligned>
 800d230:	1c43      	adds	r3, r0, #1
 800d232:	4604      	mov	r4, r0
 800d234:	d14d      	bne.n	800d2d2 <_malloc_r+0xde>
 800d236:	6834      	ldr	r4, [r6, #0]
 800d238:	4626      	mov	r6, r4
 800d23a:	2e00      	cmp	r6, #0
 800d23c:	d140      	bne.n	800d2c0 <_malloc_r+0xcc>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	4631      	mov	r1, r6
 800d242:	4638      	mov	r0, r7
 800d244:	eb04 0803 	add.w	r8, r4, r3
 800d248:	f000 f848 	bl	800d2dc <_sbrk_r>
 800d24c:	4580      	cmp	r8, r0
 800d24e:	d13a      	bne.n	800d2c6 <_malloc_r+0xd2>
 800d250:	6821      	ldr	r1, [r4, #0]
 800d252:	3503      	adds	r5, #3
 800d254:	1a6d      	subs	r5, r5, r1
 800d256:	f025 0503 	bic.w	r5, r5, #3
 800d25a:	3508      	adds	r5, #8
 800d25c:	2d0c      	cmp	r5, #12
 800d25e:	bf38      	it	cc
 800d260:	250c      	movcc	r5, #12
 800d262:	4629      	mov	r1, r5
 800d264:	4638      	mov	r0, r7
 800d266:	f7ff ffa5 	bl	800d1b4 <sbrk_aligned>
 800d26a:	3001      	adds	r0, #1
 800d26c:	d02b      	beq.n	800d2c6 <_malloc_r+0xd2>
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	442b      	add	r3, r5
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	e00e      	b.n	800d294 <_malloc_r+0xa0>
 800d276:	6822      	ldr	r2, [r4, #0]
 800d278:	1b52      	subs	r2, r2, r5
 800d27a:	d41e      	bmi.n	800d2ba <_malloc_r+0xc6>
 800d27c:	2a0b      	cmp	r2, #11
 800d27e:	d916      	bls.n	800d2ae <_malloc_r+0xba>
 800d280:	1961      	adds	r1, r4, r5
 800d282:	42a3      	cmp	r3, r4
 800d284:	6025      	str	r5, [r4, #0]
 800d286:	bf18      	it	ne
 800d288:	6059      	strne	r1, [r3, #4]
 800d28a:	6863      	ldr	r3, [r4, #4]
 800d28c:	bf08      	it	eq
 800d28e:	6031      	streq	r1, [r6, #0]
 800d290:	5162      	str	r2, [r4, r5]
 800d292:	604b      	str	r3, [r1, #4]
 800d294:	4638      	mov	r0, r7
 800d296:	f104 060b 	add.w	r6, r4, #11
 800d29a:	f000 f855 	bl	800d348 <__malloc_unlock>
 800d29e:	f026 0607 	bic.w	r6, r6, #7
 800d2a2:	1d23      	adds	r3, r4, #4
 800d2a4:	1af2      	subs	r2, r6, r3
 800d2a6:	d0b6      	beq.n	800d216 <_malloc_r+0x22>
 800d2a8:	1b9b      	subs	r3, r3, r6
 800d2aa:	50a3      	str	r3, [r4, r2]
 800d2ac:	e7b3      	b.n	800d216 <_malloc_r+0x22>
 800d2ae:	6862      	ldr	r2, [r4, #4]
 800d2b0:	42a3      	cmp	r3, r4
 800d2b2:	bf0c      	ite	eq
 800d2b4:	6032      	streq	r2, [r6, #0]
 800d2b6:	605a      	strne	r2, [r3, #4]
 800d2b8:	e7ec      	b.n	800d294 <_malloc_r+0xa0>
 800d2ba:	4623      	mov	r3, r4
 800d2bc:	6864      	ldr	r4, [r4, #4]
 800d2be:	e7b2      	b.n	800d226 <_malloc_r+0x32>
 800d2c0:	4634      	mov	r4, r6
 800d2c2:	6876      	ldr	r6, [r6, #4]
 800d2c4:	e7b9      	b.n	800d23a <_malloc_r+0x46>
 800d2c6:	230c      	movs	r3, #12
 800d2c8:	603b      	str	r3, [r7, #0]
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	f000 f83c 	bl	800d348 <__malloc_unlock>
 800d2d0:	e7a1      	b.n	800d216 <_malloc_r+0x22>
 800d2d2:	6025      	str	r5, [r4, #0]
 800d2d4:	e7de      	b.n	800d294 <_malloc_r+0xa0>
 800d2d6:	bf00      	nop
 800d2d8:	20001390 	.word	0x20001390

0800d2dc <_sbrk_r>:
 800d2dc:	b538      	push	{r3, r4, r5, lr}
 800d2de:	4d06      	ldr	r5, [pc, #24]	; (800d2f8 <_sbrk_r+0x1c>)
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	4608      	mov	r0, r1
 800d2e6:	602b      	str	r3, [r5, #0]
 800d2e8:	f7f3 fd36 	bl	8000d58 <_sbrk>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_sbrk_r+0x1a>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_sbrk_r+0x1a>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20001398 	.word	0x20001398

0800d2fc <siprintf>:
 800d2fc:	b40e      	push	{r1, r2, r3}
 800d2fe:	b500      	push	{lr}
 800d300:	b09c      	sub	sp, #112	; 0x70
 800d302:	ab1d      	add	r3, sp, #116	; 0x74
 800d304:	9002      	str	r0, [sp, #8]
 800d306:	9006      	str	r0, [sp, #24]
 800d308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d30c:	4809      	ldr	r0, [pc, #36]	; (800d334 <siprintf+0x38>)
 800d30e:	9107      	str	r1, [sp, #28]
 800d310:	9104      	str	r1, [sp, #16]
 800d312:	4909      	ldr	r1, [pc, #36]	; (800d338 <siprintf+0x3c>)
 800d314:	f853 2b04 	ldr.w	r2, [r3], #4
 800d318:	9105      	str	r1, [sp, #20]
 800d31a:	6800      	ldr	r0, [r0, #0]
 800d31c:	9301      	str	r3, [sp, #4]
 800d31e:	a902      	add	r1, sp, #8
 800d320:	f000 f874 	bl	800d40c <_svfiprintf_r>
 800d324:	9b02      	ldr	r3, [sp, #8]
 800d326:	2200      	movs	r2, #0
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	b01c      	add	sp, #112	; 0x70
 800d32c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d330:	b003      	add	sp, #12
 800d332:	4770      	bx	lr
 800d334:	20000140 	.word	0x20000140
 800d338:	ffff0208 	.word	0xffff0208

0800d33c <__malloc_lock>:
 800d33c:	4801      	ldr	r0, [pc, #4]	; (800d344 <__malloc_lock+0x8>)
 800d33e:	f000 baf9 	b.w	800d934 <__retarget_lock_acquire_recursive>
 800d342:	bf00      	nop
 800d344:	2000139c 	.word	0x2000139c

0800d348 <__malloc_unlock>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__malloc_unlock+0x8>)
 800d34a:	f000 baf4 	b.w	800d936 <__retarget_lock_release_recursive>
 800d34e:	bf00      	nop
 800d350:	2000139c 	.word	0x2000139c

0800d354 <__ssputs_r>:
 800d354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d358:	688e      	ldr	r6, [r1, #8]
 800d35a:	429e      	cmp	r6, r3
 800d35c:	4682      	mov	sl, r0
 800d35e:	460c      	mov	r4, r1
 800d360:	4690      	mov	r8, r2
 800d362:	461f      	mov	r7, r3
 800d364:	d838      	bhi.n	800d3d8 <__ssputs_r+0x84>
 800d366:	898a      	ldrh	r2, [r1, #12]
 800d368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d36c:	d032      	beq.n	800d3d4 <__ssputs_r+0x80>
 800d36e:	6825      	ldr	r5, [r4, #0]
 800d370:	6909      	ldr	r1, [r1, #16]
 800d372:	eba5 0901 	sub.w	r9, r5, r1
 800d376:	6965      	ldr	r5, [r4, #20]
 800d378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d380:	3301      	adds	r3, #1
 800d382:	444b      	add	r3, r9
 800d384:	106d      	asrs	r5, r5, #1
 800d386:	429d      	cmp	r5, r3
 800d388:	bf38      	it	cc
 800d38a:	461d      	movcc	r5, r3
 800d38c:	0553      	lsls	r3, r2, #21
 800d38e:	d531      	bpl.n	800d3f4 <__ssputs_r+0xa0>
 800d390:	4629      	mov	r1, r5
 800d392:	f7ff ff2f 	bl	800d1f4 <_malloc_r>
 800d396:	4606      	mov	r6, r0
 800d398:	b950      	cbnz	r0, 800d3b0 <__ssputs_r+0x5c>
 800d39a:	230c      	movs	r3, #12
 800d39c:	f8ca 3000 	str.w	r3, [sl]
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a6:	81a3      	strh	r3, [r4, #12]
 800d3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3b0:	6921      	ldr	r1, [r4, #16]
 800d3b2:	464a      	mov	r2, r9
 800d3b4:	f000 fac0 	bl	800d938 <memcpy>
 800d3b8:	89a3      	ldrh	r3, [r4, #12]
 800d3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3c2:	81a3      	strh	r3, [r4, #12]
 800d3c4:	6126      	str	r6, [r4, #16]
 800d3c6:	6165      	str	r5, [r4, #20]
 800d3c8:	444e      	add	r6, r9
 800d3ca:	eba5 0509 	sub.w	r5, r5, r9
 800d3ce:	6026      	str	r6, [r4, #0]
 800d3d0:	60a5      	str	r5, [r4, #8]
 800d3d2:	463e      	mov	r6, r7
 800d3d4:	42be      	cmp	r6, r7
 800d3d6:	d900      	bls.n	800d3da <__ssputs_r+0x86>
 800d3d8:	463e      	mov	r6, r7
 800d3da:	6820      	ldr	r0, [r4, #0]
 800d3dc:	4632      	mov	r2, r6
 800d3de:	4641      	mov	r1, r8
 800d3e0:	f000 fab8 	bl	800d954 <memmove>
 800d3e4:	68a3      	ldr	r3, [r4, #8]
 800d3e6:	1b9b      	subs	r3, r3, r6
 800d3e8:	60a3      	str	r3, [r4, #8]
 800d3ea:	6823      	ldr	r3, [r4, #0]
 800d3ec:	4433      	add	r3, r6
 800d3ee:	6023      	str	r3, [r4, #0]
 800d3f0:	2000      	movs	r0, #0
 800d3f2:	e7db      	b.n	800d3ac <__ssputs_r+0x58>
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	f000 fac7 	bl	800d988 <_realloc_r>
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d1e1      	bne.n	800d3c4 <__ssputs_r+0x70>
 800d400:	6921      	ldr	r1, [r4, #16]
 800d402:	4650      	mov	r0, sl
 800d404:	f7ff fe8a 	bl	800d11c <_free_r>
 800d408:	e7c7      	b.n	800d39a <__ssputs_r+0x46>
	...

0800d40c <_svfiprintf_r>:
 800d40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d410:	4698      	mov	r8, r3
 800d412:	898b      	ldrh	r3, [r1, #12]
 800d414:	061b      	lsls	r3, r3, #24
 800d416:	b09d      	sub	sp, #116	; 0x74
 800d418:	4607      	mov	r7, r0
 800d41a:	460d      	mov	r5, r1
 800d41c:	4614      	mov	r4, r2
 800d41e:	d50e      	bpl.n	800d43e <_svfiprintf_r+0x32>
 800d420:	690b      	ldr	r3, [r1, #16]
 800d422:	b963      	cbnz	r3, 800d43e <_svfiprintf_r+0x32>
 800d424:	2140      	movs	r1, #64	; 0x40
 800d426:	f7ff fee5 	bl	800d1f4 <_malloc_r>
 800d42a:	6028      	str	r0, [r5, #0]
 800d42c:	6128      	str	r0, [r5, #16]
 800d42e:	b920      	cbnz	r0, 800d43a <_svfiprintf_r+0x2e>
 800d430:	230c      	movs	r3, #12
 800d432:	603b      	str	r3, [r7, #0]
 800d434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d438:	e0d1      	b.n	800d5de <_svfiprintf_r+0x1d2>
 800d43a:	2340      	movs	r3, #64	; 0x40
 800d43c:	616b      	str	r3, [r5, #20]
 800d43e:	2300      	movs	r3, #0
 800d440:	9309      	str	r3, [sp, #36]	; 0x24
 800d442:	2320      	movs	r3, #32
 800d444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d448:	f8cd 800c 	str.w	r8, [sp, #12]
 800d44c:	2330      	movs	r3, #48	; 0x30
 800d44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d5f8 <_svfiprintf_r+0x1ec>
 800d452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d456:	f04f 0901 	mov.w	r9, #1
 800d45a:	4623      	mov	r3, r4
 800d45c:	469a      	mov	sl, r3
 800d45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d462:	b10a      	cbz	r2, 800d468 <_svfiprintf_r+0x5c>
 800d464:	2a25      	cmp	r2, #37	; 0x25
 800d466:	d1f9      	bne.n	800d45c <_svfiprintf_r+0x50>
 800d468:	ebba 0b04 	subs.w	fp, sl, r4
 800d46c:	d00b      	beq.n	800d486 <_svfiprintf_r+0x7a>
 800d46e:	465b      	mov	r3, fp
 800d470:	4622      	mov	r2, r4
 800d472:	4629      	mov	r1, r5
 800d474:	4638      	mov	r0, r7
 800d476:	f7ff ff6d 	bl	800d354 <__ssputs_r>
 800d47a:	3001      	adds	r0, #1
 800d47c:	f000 80aa 	beq.w	800d5d4 <_svfiprintf_r+0x1c8>
 800d480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d482:	445a      	add	r2, fp
 800d484:	9209      	str	r2, [sp, #36]	; 0x24
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80a2 	beq.w	800d5d4 <_svfiprintf_r+0x1c8>
 800d490:	2300      	movs	r3, #0
 800d492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d49a:	f10a 0a01 	add.w	sl, sl, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	9307      	str	r3, [sp, #28]
 800d4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4a8:	4654      	mov	r4, sl
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b0:	4851      	ldr	r0, [pc, #324]	; (800d5f8 <_svfiprintf_r+0x1ec>)
 800d4b2:	f7f2 fead 	bl	8000210 <memchr>
 800d4b6:	9a04      	ldr	r2, [sp, #16]
 800d4b8:	b9d8      	cbnz	r0, 800d4f2 <_svfiprintf_r+0xe6>
 800d4ba:	06d0      	lsls	r0, r2, #27
 800d4bc:	bf44      	itt	mi
 800d4be:	2320      	movmi	r3, #32
 800d4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4c4:	0711      	lsls	r1, r2, #28
 800d4c6:	bf44      	itt	mi
 800d4c8:	232b      	movmi	r3, #43	; 0x2b
 800d4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800d4d4:	d015      	beq.n	800d502 <_svfiprintf_r+0xf6>
 800d4d6:	9a07      	ldr	r2, [sp, #28]
 800d4d8:	4654      	mov	r4, sl
 800d4da:	2000      	movs	r0, #0
 800d4dc:	f04f 0c0a 	mov.w	ip, #10
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e6:	3b30      	subs	r3, #48	; 0x30
 800d4e8:	2b09      	cmp	r3, #9
 800d4ea:	d94e      	bls.n	800d58a <_svfiprintf_r+0x17e>
 800d4ec:	b1b0      	cbz	r0, 800d51c <_svfiprintf_r+0x110>
 800d4ee:	9207      	str	r2, [sp, #28]
 800d4f0:	e014      	b.n	800d51c <_svfiprintf_r+0x110>
 800d4f2:	eba0 0308 	sub.w	r3, r0, r8
 800d4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	9304      	str	r3, [sp, #16]
 800d4fe:	46a2      	mov	sl, r4
 800d500:	e7d2      	b.n	800d4a8 <_svfiprintf_r+0x9c>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	1d19      	adds	r1, r3, #4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	9103      	str	r1, [sp, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbb      	ittet	lt
 800d50e:	425b      	neglt	r3, r3
 800d510:	f042 0202 	orrlt.w	r2, r2, #2
 800d514:	9307      	strge	r3, [sp, #28]
 800d516:	9307      	strlt	r3, [sp, #28]
 800d518:	bfb8      	it	lt
 800d51a:	9204      	strlt	r2, [sp, #16]
 800d51c:	7823      	ldrb	r3, [r4, #0]
 800d51e:	2b2e      	cmp	r3, #46	; 0x2e
 800d520:	d10c      	bne.n	800d53c <_svfiprintf_r+0x130>
 800d522:	7863      	ldrb	r3, [r4, #1]
 800d524:	2b2a      	cmp	r3, #42	; 0x2a
 800d526:	d135      	bne.n	800d594 <_svfiprintf_r+0x188>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	1d1a      	adds	r2, r3, #4
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	9203      	str	r2, [sp, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	bfb8      	it	lt
 800d534:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d538:	3402      	adds	r4, #2
 800d53a:	9305      	str	r3, [sp, #20]
 800d53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d608 <_svfiprintf_r+0x1fc>
 800d540:	7821      	ldrb	r1, [r4, #0]
 800d542:	2203      	movs	r2, #3
 800d544:	4650      	mov	r0, sl
 800d546:	f7f2 fe63 	bl	8000210 <memchr>
 800d54a:	b140      	cbz	r0, 800d55e <_svfiprintf_r+0x152>
 800d54c:	2340      	movs	r3, #64	; 0x40
 800d54e:	eba0 000a 	sub.w	r0, r0, sl
 800d552:	fa03 f000 	lsl.w	r0, r3, r0
 800d556:	9b04      	ldr	r3, [sp, #16]
 800d558:	4303      	orrs	r3, r0
 800d55a:	3401      	adds	r4, #1
 800d55c:	9304      	str	r3, [sp, #16]
 800d55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d562:	4826      	ldr	r0, [pc, #152]	; (800d5fc <_svfiprintf_r+0x1f0>)
 800d564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d568:	2206      	movs	r2, #6
 800d56a:	f7f2 fe51 	bl	8000210 <memchr>
 800d56e:	2800      	cmp	r0, #0
 800d570:	d038      	beq.n	800d5e4 <_svfiprintf_r+0x1d8>
 800d572:	4b23      	ldr	r3, [pc, #140]	; (800d600 <_svfiprintf_r+0x1f4>)
 800d574:	bb1b      	cbnz	r3, 800d5be <_svfiprintf_r+0x1b2>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	3307      	adds	r3, #7
 800d57a:	f023 0307 	bic.w	r3, r3, #7
 800d57e:	3308      	adds	r3, #8
 800d580:	9303      	str	r3, [sp, #12]
 800d582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d584:	4433      	add	r3, r6
 800d586:	9309      	str	r3, [sp, #36]	; 0x24
 800d588:	e767      	b.n	800d45a <_svfiprintf_r+0x4e>
 800d58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d58e:	460c      	mov	r4, r1
 800d590:	2001      	movs	r0, #1
 800d592:	e7a5      	b.n	800d4e0 <_svfiprintf_r+0xd4>
 800d594:	2300      	movs	r3, #0
 800d596:	3401      	adds	r4, #1
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	4619      	mov	r1, r3
 800d59c:	f04f 0c0a 	mov.w	ip, #10
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a6:	3a30      	subs	r2, #48	; 0x30
 800d5a8:	2a09      	cmp	r2, #9
 800d5aa:	d903      	bls.n	800d5b4 <_svfiprintf_r+0x1a8>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d0c5      	beq.n	800d53c <_svfiprintf_r+0x130>
 800d5b0:	9105      	str	r1, [sp, #20]
 800d5b2:	e7c3      	b.n	800d53c <_svfiprintf_r+0x130>
 800d5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5b8:	4604      	mov	r4, r0
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e7f0      	b.n	800d5a0 <_svfiprintf_r+0x194>
 800d5be:	ab03      	add	r3, sp, #12
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	462a      	mov	r2, r5
 800d5c4:	4b0f      	ldr	r3, [pc, #60]	; (800d604 <_svfiprintf_r+0x1f8>)
 800d5c6:	a904      	add	r1, sp, #16
 800d5c8:	4638      	mov	r0, r7
 800d5ca:	f3af 8000 	nop.w
 800d5ce:	1c42      	adds	r2, r0, #1
 800d5d0:	4606      	mov	r6, r0
 800d5d2:	d1d6      	bne.n	800d582 <_svfiprintf_r+0x176>
 800d5d4:	89ab      	ldrh	r3, [r5, #12]
 800d5d6:	065b      	lsls	r3, r3, #25
 800d5d8:	f53f af2c 	bmi.w	800d434 <_svfiprintf_r+0x28>
 800d5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5de:	b01d      	add	sp, #116	; 0x74
 800d5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e4:	ab03      	add	r3, sp, #12
 800d5e6:	9300      	str	r3, [sp, #0]
 800d5e8:	462a      	mov	r2, r5
 800d5ea:	4b06      	ldr	r3, [pc, #24]	; (800d604 <_svfiprintf_r+0x1f8>)
 800d5ec:	a904      	add	r1, sp, #16
 800d5ee:	4638      	mov	r0, r7
 800d5f0:	f000 f87a 	bl	800d6e8 <_printf_i>
 800d5f4:	e7eb      	b.n	800d5ce <_svfiprintf_r+0x1c2>
 800d5f6:	bf00      	nop
 800d5f8:	0800dda8 	.word	0x0800dda8
 800d5fc:	0800ddb2 	.word	0x0800ddb2
 800d600:	00000000 	.word	0x00000000
 800d604:	0800d355 	.word	0x0800d355
 800d608:	0800ddae 	.word	0x0800ddae

0800d60c <_printf_common>:
 800d60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d610:	4616      	mov	r6, r2
 800d612:	4699      	mov	r9, r3
 800d614:	688a      	ldr	r2, [r1, #8]
 800d616:	690b      	ldr	r3, [r1, #16]
 800d618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d61c:	4293      	cmp	r3, r2
 800d61e:	bfb8      	it	lt
 800d620:	4613      	movlt	r3, r2
 800d622:	6033      	str	r3, [r6, #0]
 800d624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d628:	4607      	mov	r7, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	b10a      	cbz	r2, 800d632 <_printf_common+0x26>
 800d62e:	3301      	adds	r3, #1
 800d630:	6033      	str	r3, [r6, #0]
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	0699      	lsls	r1, r3, #26
 800d636:	bf42      	ittt	mi
 800d638:	6833      	ldrmi	r3, [r6, #0]
 800d63a:	3302      	addmi	r3, #2
 800d63c:	6033      	strmi	r3, [r6, #0]
 800d63e:	6825      	ldr	r5, [r4, #0]
 800d640:	f015 0506 	ands.w	r5, r5, #6
 800d644:	d106      	bne.n	800d654 <_printf_common+0x48>
 800d646:	f104 0a19 	add.w	sl, r4, #25
 800d64a:	68e3      	ldr	r3, [r4, #12]
 800d64c:	6832      	ldr	r2, [r6, #0]
 800d64e:	1a9b      	subs	r3, r3, r2
 800d650:	42ab      	cmp	r3, r5
 800d652:	dc26      	bgt.n	800d6a2 <_printf_common+0x96>
 800d654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d658:	1e13      	subs	r3, r2, #0
 800d65a:	6822      	ldr	r2, [r4, #0]
 800d65c:	bf18      	it	ne
 800d65e:	2301      	movne	r3, #1
 800d660:	0692      	lsls	r2, r2, #26
 800d662:	d42b      	bmi.n	800d6bc <_printf_common+0xb0>
 800d664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d668:	4649      	mov	r1, r9
 800d66a:	4638      	mov	r0, r7
 800d66c:	47c0      	blx	r8
 800d66e:	3001      	adds	r0, #1
 800d670:	d01e      	beq.n	800d6b0 <_printf_common+0xa4>
 800d672:	6823      	ldr	r3, [r4, #0]
 800d674:	68e5      	ldr	r5, [r4, #12]
 800d676:	6832      	ldr	r2, [r6, #0]
 800d678:	f003 0306 	and.w	r3, r3, #6
 800d67c:	2b04      	cmp	r3, #4
 800d67e:	bf08      	it	eq
 800d680:	1aad      	subeq	r5, r5, r2
 800d682:	68a3      	ldr	r3, [r4, #8]
 800d684:	6922      	ldr	r2, [r4, #16]
 800d686:	bf0c      	ite	eq
 800d688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d68c:	2500      	movne	r5, #0
 800d68e:	4293      	cmp	r3, r2
 800d690:	bfc4      	itt	gt
 800d692:	1a9b      	subgt	r3, r3, r2
 800d694:	18ed      	addgt	r5, r5, r3
 800d696:	2600      	movs	r6, #0
 800d698:	341a      	adds	r4, #26
 800d69a:	42b5      	cmp	r5, r6
 800d69c:	d11a      	bne.n	800d6d4 <_printf_common+0xc8>
 800d69e:	2000      	movs	r0, #0
 800d6a0:	e008      	b.n	800d6b4 <_printf_common+0xa8>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4652      	mov	r2, sl
 800d6a6:	4649      	mov	r1, r9
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	47c0      	blx	r8
 800d6ac:	3001      	adds	r0, #1
 800d6ae:	d103      	bne.n	800d6b8 <_printf_common+0xac>
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b8:	3501      	adds	r5, #1
 800d6ba:	e7c6      	b.n	800d64a <_printf_common+0x3e>
 800d6bc:	18e1      	adds	r1, r4, r3
 800d6be:	1c5a      	adds	r2, r3, #1
 800d6c0:	2030      	movs	r0, #48	; 0x30
 800d6c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6c6:	4422      	add	r2, r4
 800d6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6d0:	3302      	adds	r3, #2
 800d6d2:	e7c7      	b.n	800d664 <_printf_common+0x58>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	4622      	mov	r2, r4
 800d6d8:	4649      	mov	r1, r9
 800d6da:	4638      	mov	r0, r7
 800d6dc:	47c0      	blx	r8
 800d6de:	3001      	adds	r0, #1
 800d6e0:	d0e6      	beq.n	800d6b0 <_printf_common+0xa4>
 800d6e2:	3601      	adds	r6, #1
 800d6e4:	e7d9      	b.n	800d69a <_printf_common+0x8e>
	...

0800d6e8 <_printf_i>:
 800d6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ec:	7e0f      	ldrb	r7, [r1, #24]
 800d6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6f0:	2f78      	cmp	r7, #120	; 0x78
 800d6f2:	4691      	mov	r9, r2
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	469a      	mov	sl, r3
 800d6fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6fe:	d807      	bhi.n	800d710 <_printf_i+0x28>
 800d700:	2f62      	cmp	r7, #98	; 0x62
 800d702:	d80a      	bhi.n	800d71a <_printf_i+0x32>
 800d704:	2f00      	cmp	r7, #0
 800d706:	f000 80d8 	beq.w	800d8ba <_printf_i+0x1d2>
 800d70a:	2f58      	cmp	r7, #88	; 0x58
 800d70c:	f000 80a3 	beq.w	800d856 <_printf_i+0x16e>
 800d710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d718:	e03a      	b.n	800d790 <_printf_i+0xa8>
 800d71a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d71e:	2b15      	cmp	r3, #21
 800d720:	d8f6      	bhi.n	800d710 <_printf_i+0x28>
 800d722:	a101      	add	r1, pc, #4	; (adr r1, 800d728 <_printf_i+0x40>)
 800d724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d728:	0800d781 	.word	0x0800d781
 800d72c:	0800d795 	.word	0x0800d795
 800d730:	0800d711 	.word	0x0800d711
 800d734:	0800d711 	.word	0x0800d711
 800d738:	0800d711 	.word	0x0800d711
 800d73c:	0800d711 	.word	0x0800d711
 800d740:	0800d795 	.word	0x0800d795
 800d744:	0800d711 	.word	0x0800d711
 800d748:	0800d711 	.word	0x0800d711
 800d74c:	0800d711 	.word	0x0800d711
 800d750:	0800d711 	.word	0x0800d711
 800d754:	0800d8a1 	.word	0x0800d8a1
 800d758:	0800d7c5 	.word	0x0800d7c5
 800d75c:	0800d883 	.word	0x0800d883
 800d760:	0800d711 	.word	0x0800d711
 800d764:	0800d711 	.word	0x0800d711
 800d768:	0800d8c3 	.word	0x0800d8c3
 800d76c:	0800d711 	.word	0x0800d711
 800d770:	0800d7c5 	.word	0x0800d7c5
 800d774:	0800d711 	.word	0x0800d711
 800d778:	0800d711 	.word	0x0800d711
 800d77c:	0800d88b 	.word	0x0800d88b
 800d780:	682b      	ldr	r3, [r5, #0]
 800d782:	1d1a      	adds	r2, r3, #4
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	602a      	str	r2, [r5, #0]
 800d788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d790:	2301      	movs	r3, #1
 800d792:	e0a3      	b.n	800d8dc <_printf_i+0x1f4>
 800d794:	6820      	ldr	r0, [r4, #0]
 800d796:	6829      	ldr	r1, [r5, #0]
 800d798:	0606      	lsls	r6, r0, #24
 800d79a:	f101 0304 	add.w	r3, r1, #4
 800d79e:	d50a      	bpl.n	800d7b6 <_printf_i+0xce>
 800d7a0:	680e      	ldr	r6, [r1, #0]
 800d7a2:	602b      	str	r3, [r5, #0]
 800d7a4:	2e00      	cmp	r6, #0
 800d7a6:	da03      	bge.n	800d7b0 <_printf_i+0xc8>
 800d7a8:	232d      	movs	r3, #45	; 0x2d
 800d7aa:	4276      	negs	r6, r6
 800d7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7b0:	485e      	ldr	r0, [pc, #376]	; (800d92c <_printf_i+0x244>)
 800d7b2:	230a      	movs	r3, #10
 800d7b4:	e019      	b.n	800d7ea <_printf_i+0x102>
 800d7b6:	680e      	ldr	r6, [r1, #0]
 800d7b8:	602b      	str	r3, [r5, #0]
 800d7ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7be:	bf18      	it	ne
 800d7c0:	b236      	sxthne	r6, r6
 800d7c2:	e7ef      	b.n	800d7a4 <_printf_i+0xbc>
 800d7c4:	682b      	ldr	r3, [r5, #0]
 800d7c6:	6820      	ldr	r0, [r4, #0]
 800d7c8:	1d19      	adds	r1, r3, #4
 800d7ca:	6029      	str	r1, [r5, #0]
 800d7cc:	0601      	lsls	r1, r0, #24
 800d7ce:	d501      	bpl.n	800d7d4 <_printf_i+0xec>
 800d7d0:	681e      	ldr	r6, [r3, #0]
 800d7d2:	e002      	b.n	800d7da <_printf_i+0xf2>
 800d7d4:	0646      	lsls	r6, r0, #25
 800d7d6:	d5fb      	bpl.n	800d7d0 <_printf_i+0xe8>
 800d7d8:	881e      	ldrh	r6, [r3, #0]
 800d7da:	4854      	ldr	r0, [pc, #336]	; (800d92c <_printf_i+0x244>)
 800d7dc:	2f6f      	cmp	r7, #111	; 0x6f
 800d7de:	bf0c      	ite	eq
 800d7e0:	2308      	moveq	r3, #8
 800d7e2:	230a      	movne	r3, #10
 800d7e4:	2100      	movs	r1, #0
 800d7e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7ea:	6865      	ldr	r5, [r4, #4]
 800d7ec:	60a5      	str	r5, [r4, #8]
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	bfa2      	ittt	ge
 800d7f2:	6821      	ldrge	r1, [r4, #0]
 800d7f4:	f021 0104 	bicge.w	r1, r1, #4
 800d7f8:	6021      	strge	r1, [r4, #0]
 800d7fa:	b90e      	cbnz	r6, 800d800 <_printf_i+0x118>
 800d7fc:	2d00      	cmp	r5, #0
 800d7fe:	d04d      	beq.n	800d89c <_printf_i+0x1b4>
 800d800:	4615      	mov	r5, r2
 800d802:	fbb6 f1f3 	udiv	r1, r6, r3
 800d806:	fb03 6711 	mls	r7, r3, r1, r6
 800d80a:	5dc7      	ldrb	r7, [r0, r7]
 800d80c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d810:	4637      	mov	r7, r6
 800d812:	42bb      	cmp	r3, r7
 800d814:	460e      	mov	r6, r1
 800d816:	d9f4      	bls.n	800d802 <_printf_i+0x11a>
 800d818:	2b08      	cmp	r3, #8
 800d81a:	d10b      	bne.n	800d834 <_printf_i+0x14c>
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	07de      	lsls	r6, r3, #31
 800d820:	d508      	bpl.n	800d834 <_printf_i+0x14c>
 800d822:	6923      	ldr	r3, [r4, #16]
 800d824:	6861      	ldr	r1, [r4, #4]
 800d826:	4299      	cmp	r1, r3
 800d828:	bfde      	ittt	le
 800d82a:	2330      	movle	r3, #48	; 0x30
 800d82c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d834:	1b52      	subs	r2, r2, r5
 800d836:	6122      	str	r2, [r4, #16]
 800d838:	f8cd a000 	str.w	sl, [sp]
 800d83c:	464b      	mov	r3, r9
 800d83e:	aa03      	add	r2, sp, #12
 800d840:	4621      	mov	r1, r4
 800d842:	4640      	mov	r0, r8
 800d844:	f7ff fee2 	bl	800d60c <_printf_common>
 800d848:	3001      	adds	r0, #1
 800d84a:	d14c      	bne.n	800d8e6 <_printf_i+0x1fe>
 800d84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d850:	b004      	add	sp, #16
 800d852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d856:	4835      	ldr	r0, [pc, #212]	; (800d92c <_printf_i+0x244>)
 800d858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d85c:	6829      	ldr	r1, [r5, #0]
 800d85e:	6823      	ldr	r3, [r4, #0]
 800d860:	f851 6b04 	ldr.w	r6, [r1], #4
 800d864:	6029      	str	r1, [r5, #0]
 800d866:	061d      	lsls	r5, r3, #24
 800d868:	d514      	bpl.n	800d894 <_printf_i+0x1ac>
 800d86a:	07df      	lsls	r7, r3, #31
 800d86c:	bf44      	itt	mi
 800d86e:	f043 0320 	orrmi.w	r3, r3, #32
 800d872:	6023      	strmi	r3, [r4, #0]
 800d874:	b91e      	cbnz	r6, 800d87e <_printf_i+0x196>
 800d876:	6823      	ldr	r3, [r4, #0]
 800d878:	f023 0320 	bic.w	r3, r3, #32
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	2310      	movs	r3, #16
 800d880:	e7b0      	b.n	800d7e4 <_printf_i+0xfc>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	f043 0320 	orr.w	r3, r3, #32
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	2378      	movs	r3, #120	; 0x78
 800d88c:	4828      	ldr	r0, [pc, #160]	; (800d930 <_printf_i+0x248>)
 800d88e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d892:	e7e3      	b.n	800d85c <_printf_i+0x174>
 800d894:	0659      	lsls	r1, r3, #25
 800d896:	bf48      	it	mi
 800d898:	b2b6      	uxthmi	r6, r6
 800d89a:	e7e6      	b.n	800d86a <_printf_i+0x182>
 800d89c:	4615      	mov	r5, r2
 800d89e:	e7bb      	b.n	800d818 <_printf_i+0x130>
 800d8a0:	682b      	ldr	r3, [r5, #0]
 800d8a2:	6826      	ldr	r6, [r4, #0]
 800d8a4:	6961      	ldr	r1, [r4, #20]
 800d8a6:	1d18      	adds	r0, r3, #4
 800d8a8:	6028      	str	r0, [r5, #0]
 800d8aa:	0635      	lsls	r5, r6, #24
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	d501      	bpl.n	800d8b4 <_printf_i+0x1cc>
 800d8b0:	6019      	str	r1, [r3, #0]
 800d8b2:	e002      	b.n	800d8ba <_printf_i+0x1d2>
 800d8b4:	0670      	lsls	r0, r6, #25
 800d8b6:	d5fb      	bpl.n	800d8b0 <_printf_i+0x1c8>
 800d8b8:	8019      	strh	r1, [r3, #0]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	6123      	str	r3, [r4, #16]
 800d8be:	4615      	mov	r5, r2
 800d8c0:	e7ba      	b.n	800d838 <_printf_i+0x150>
 800d8c2:	682b      	ldr	r3, [r5, #0]
 800d8c4:	1d1a      	adds	r2, r3, #4
 800d8c6:	602a      	str	r2, [r5, #0]
 800d8c8:	681d      	ldr	r5, [r3, #0]
 800d8ca:	6862      	ldr	r2, [r4, #4]
 800d8cc:	2100      	movs	r1, #0
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7f2 fc9e 	bl	8000210 <memchr>
 800d8d4:	b108      	cbz	r0, 800d8da <_printf_i+0x1f2>
 800d8d6:	1b40      	subs	r0, r0, r5
 800d8d8:	6060      	str	r0, [r4, #4]
 800d8da:	6863      	ldr	r3, [r4, #4]
 800d8dc:	6123      	str	r3, [r4, #16]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8e4:	e7a8      	b.n	800d838 <_printf_i+0x150>
 800d8e6:	6923      	ldr	r3, [r4, #16]
 800d8e8:	462a      	mov	r2, r5
 800d8ea:	4649      	mov	r1, r9
 800d8ec:	4640      	mov	r0, r8
 800d8ee:	47d0      	blx	sl
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d0ab      	beq.n	800d84c <_printf_i+0x164>
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	079b      	lsls	r3, r3, #30
 800d8f8:	d413      	bmi.n	800d922 <_printf_i+0x23a>
 800d8fa:	68e0      	ldr	r0, [r4, #12]
 800d8fc:	9b03      	ldr	r3, [sp, #12]
 800d8fe:	4298      	cmp	r0, r3
 800d900:	bfb8      	it	lt
 800d902:	4618      	movlt	r0, r3
 800d904:	e7a4      	b.n	800d850 <_printf_i+0x168>
 800d906:	2301      	movs	r3, #1
 800d908:	4632      	mov	r2, r6
 800d90a:	4649      	mov	r1, r9
 800d90c:	4640      	mov	r0, r8
 800d90e:	47d0      	blx	sl
 800d910:	3001      	adds	r0, #1
 800d912:	d09b      	beq.n	800d84c <_printf_i+0x164>
 800d914:	3501      	adds	r5, #1
 800d916:	68e3      	ldr	r3, [r4, #12]
 800d918:	9903      	ldr	r1, [sp, #12]
 800d91a:	1a5b      	subs	r3, r3, r1
 800d91c:	42ab      	cmp	r3, r5
 800d91e:	dcf2      	bgt.n	800d906 <_printf_i+0x21e>
 800d920:	e7eb      	b.n	800d8fa <_printf_i+0x212>
 800d922:	2500      	movs	r5, #0
 800d924:	f104 0619 	add.w	r6, r4, #25
 800d928:	e7f5      	b.n	800d916 <_printf_i+0x22e>
 800d92a:	bf00      	nop
 800d92c:	0800ddb9 	.word	0x0800ddb9
 800d930:	0800ddca 	.word	0x0800ddca

0800d934 <__retarget_lock_acquire_recursive>:
 800d934:	4770      	bx	lr

0800d936 <__retarget_lock_release_recursive>:
 800d936:	4770      	bx	lr

0800d938 <memcpy>:
 800d938:	440a      	add	r2, r1
 800d93a:	4291      	cmp	r1, r2
 800d93c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d940:	d100      	bne.n	800d944 <memcpy+0xc>
 800d942:	4770      	bx	lr
 800d944:	b510      	push	{r4, lr}
 800d946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d94e:	4291      	cmp	r1, r2
 800d950:	d1f9      	bne.n	800d946 <memcpy+0xe>
 800d952:	bd10      	pop	{r4, pc}

0800d954 <memmove>:
 800d954:	4288      	cmp	r0, r1
 800d956:	b510      	push	{r4, lr}
 800d958:	eb01 0402 	add.w	r4, r1, r2
 800d95c:	d902      	bls.n	800d964 <memmove+0x10>
 800d95e:	4284      	cmp	r4, r0
 800d960:	4623      	mov	r3, r4
 800d962:	d807      	bhi.n	800d974 <memmove+0x20>
 800d964:	1e43      	subs	r3, r0, #1
 800d966:	42a1      	cmp	r1, r4
 800d968:	d008      	beq.n	800d97c <memmove+0x28>
 800d96a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d96e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d972:	e7f8      	b.n	800d966 <memmove+0x12>
 800d974:	4402      	add	r2, r0
 800d976:	4601      	mov	r1, r0
 800d978:	428a      	cmp	r2, r1
 800d97a:	d100      	bne.n	800d97e <memmove+0x2a>
 800d97c:	bd10      	pop	{r4, pc}
 800d97e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d986:	e7f7      	b.n	800d978 <memmove+0x24>

0800d988 <_realloc_r>:
 800d988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d98c:	4680      	mov	r8, r0
 800d98e:	4614      	mov	r4, r2
 800d990:	460e      	mov	r6, r1
 800d992:	b921      	cbnz	r1, 800d99e <_realloc_r+0x16>
 800d994:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	4611      	mov	r1, r2
 800d99a:	f7ff bc2b 	b.w	800d1f4 <_malloc_r>
 800d99e:	b92a      	cbnz	r2, 800d9ac <_realloc_r+0x24>
 800d9a0:	f7ff fbbc 	bl	800d11c <_free_r>
 800d9a4:	4625      	mov	r5, r4
 800d9a6:	4628      	mov	r0, r5
 800d9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ac:	f000 f81b 	bl	800d9e6 <_malloc_usable_size_r>
 800d9b0:	4284      	cmp	r4, r0
 800d9b2:	4607      	mov	r7, r0
 800d9b4:	d802      	bhi.n	800d9bc <_realloc_r+0x34>
 800d9b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9ba:	d812      	bhi.n	800d9e2 <_realloc_r+0x5a>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4640      	mov	r0, r8
 800d9c0:	f7ff fc18 	bl	800d1f4 <_malloc_r>
 800d9c4:	4605      	mov	r5, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d0ed      	beq.n	800d9a6 <_realloc_r+0x1e>
 800d9ca:	42bc      	cmp	r4, r7
 800d9cc:	4622      	mov	r2, r4
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	bf28      	it	cs
 800d9d2:	463a      	movcs	r2, r7
 800d9d4:	f7ff ffb0 	bl	800d938 <memcpy>
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4640      	mov	r0, r8
 800d9dc:	f7ff fb9e 	bl	800d11c <_free_r>
 800d9e0:	e7e1      	b.n	800d9a6 <_realloc_r+0x1e>
 800d9e2:	4635      	mov	r5, r6
 800d9e4:	e7df      	b.n	800d9a6 <_realloc_r+0x1e>

0800d9e6 <_malloc_usable_size_r>:
 800d9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ea:	1f18      	subs	r0, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	bfbc      	itt	lt
 800d9f0:	580b      	ldrlt	r3, [r1, r0]
 800d9f2:	18c0      	addlt	r0, r0, r3
 800d9f4:	4770      	bx	lr
	...

0800d9f8 <_init>:
 800d9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fa:	bf00      	nop
 800d9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fe:	bc08      	pop	{r3}
 800da00:	469e      	mov	lr, r3
 800da02:	4770      	bx	lr

0800da04 <_fini>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	bf00      	nop
 800da08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0a:	bc08      	pop	{r3}
 800da0c:	469e      	mov	lr, r3
 800da0e:	4770      	bx	lr
