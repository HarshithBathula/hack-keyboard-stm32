
USB HID Keyboard - STM32 F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d84c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800da1c  0800da1c  0001da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dde8  0800dde8  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dde8  0800dde8  0001dde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddf0  0800ddf0  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddf0  0800ddf0  0001ddf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddf4  0800ddf4  0001ddf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0800ddf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  200001a4  0800df9c  000201a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800df9c  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ddf0  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c51  00000000  00000000  0003dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00042c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001158  00000000  00000000  00043f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027dea  00000000  00000000  00045098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c6bf  00000000  00000000  0006ce82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d15b6  00000000  00000000  00089541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015aaf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d4  00000000  00000000  0015ab48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a4 	.word	0x200001a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800da04 	.word	0x0800da04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001a8 	.word	0x200001a8
 800020c:	0800da04 	.word	0x0800da04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005be:	2120      	movs	r1, #32
 80005c0:	4809      	ldr	r0, [pc, #36]	; (80005e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80005c2:	f000 ffae 	bl	8001522 <HAL_GPIO_TogglePin>
	int len = sprintf(uart_buff, "ISR callback.\r\n");
 80005c6:	4909      	ldr	r1, [pc, #36]	; (80005ec <HAL_GPIO_EXTI_Callback+0x38>)
 80005c8:	4809      	ldr	r0, [pc, #36]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005ca:	f00c fe9d 	bl	800d308 <siprintf>
 80005ce:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	4906      	ldr	r1, [pc, #24]	; (80005f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <HAL_GPIO_EXTI_Callback+0x40>)
 80005da:	f004 fff0 	bl	80055be <HAL_UART_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40020000 	.word	0x40020000
 80005ec:	0800da1c 	.word	0x0800da1c
 80005f0:	20000204 	.word	0x20000204
 80005f4:	200001c0 	.word	0x200001c0

080005f8 <USBH_HID_EventCallback>:

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	if (USBH_HID_GetDeviceType(phost) == HID_KEYBOARD) // if the HID is Mouse
 8000600:	6878      	ldr	r0, [r7, #4]
 8000602:	f009 fe71 	bl	800a2e8 <USBH_HID_GetDeviceType>
 8000606:	4603      	mov	r3, r0
 8000608:	2b02      	cmp	r3, #2
 800060a:	f040 80e6 	bne.w	80007da <USBH_HID_EventCallback+0x1e2>
	{
		HID_KEYBD_Info_TypeDef *Keyboard_Info = USBH_HID_GetKeybdInfo(phost); // get the info
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f009 ffa2 	bl	800a558 <USBH_HID_GetKeybdInfo>
 8000614:	6238      	str	r0, [r7, #32]
		uint8_t key = USBH_HID_GetASCIICode(Keyboard_Info);					  // get the key pressed
 8000616:	6a38      	ldr	r0, [r7, #32]
 8000618:	f00a f842 	bl	800a6a0 <USBH_HID_GetASCIICode>
 800061c:	4603      	mov	r3, r0
 800061e:	77fb      	strb	r3, [r7, #31]
		int len = sprintf(uart_buff, "Key Pressed = %c\r\n", key);
 8000620:	7ffb      	ldrb	r3, [r7, #31]
 8000622:	461a      	mov	r2, r3
 8000624:	496f      	ldr	r1, [pc, #444]	; (80007e4 <USBH_HID_EventCallback+0x1ec>)
 8000626:	4870      	ldr	r0, [pc, #448]	; (80007e8 <USBH_HID_EventCallback+0x1f0>)
 8000628:	f00c fe6e 	bl	800d308 <siprintf>
 800062c:	61b8      	str	r0, [r7, #24]
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buff, len, 100);
 800062e:	69bb      	ldr	r3, [r7, #24]
 8000630:	b29a      	uxth	r2, r3
 8000632:	2364      	movs	r3, #100	; 0x64
 8000634:	496c      	ldr	r1, [pc, #432]	; (80007e8 <USBH_HID_EventCallback+0x1f0>)
 8000636:	486d      	ldr	r0, [pc, #436]	; (80007ec <USBH_HID_EventCallback+0x1f4>)
 8000638:	f004 ffc1 	bl	80055be <HAL_UART_Transmit>

		uint8_t modifier_keys = 0U;
 800063c:	2300      	movs	r3, #0
 800063e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		int lshift, rshift, lctrl, rctrl, lalt, ralt, lgui, rgui;
		if (Keyboard_Info->lshift == 1U)
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <USBH_HID_EventCallback+0x64>
		{
			modifier_keys |= KBD_LEFT_SHIFT;
 800064a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lshift = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	e001      	b.n	8000660 <USBH_HID_EventCallback+0x68>
		}
		else
			lshift = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
		if (Keyboard_Info->rshift == 1U)
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	799b      	ldrb	r3, [r3, #6]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d108      	bne.n	800067a <USBH_HID_EventCallback+0x82>
		{
			modifier_keys |= KBD_RIGHT_SHIFT;
 8000668:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rshift = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	e001      	b.n	800067e <USBH_HID_EventCallback+0x86>
		}
		else
			rshift = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
		if (Keyboard_Info->lctrl == 1U)
 800067e:	6a3b      	ldr	r3, [r7, #32]
 8000680:	785b      	ldrb	r3, [r3, #1]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d108      	bne.n	8000698 <USBH_HID_EventCallback+0xa0>
		{
			modifier_keys |= KBD_LEFT_CTRL;
 8000686:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lctrl = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	633b      	str	r3, [r7, #48]	; 0x30
 8000696:	e001      	b.n	800069c <USBH_HID_EventCallback+0xa4>
		}
		else
			lctrl = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
		if (Keyboard_Info->rctrl == 1U)
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d108      	bne.n	80006b6 <USBH_HID_EventCallback+0xbe>
		{
			modifier_keys |= KBD_RIGHT_CTRL;
 80006a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006a8:	f043 0310 	orr.w	r3, r3, #16
 80006ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rctrl = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006b4:	e001      	b.n	80006ba <USBH_HID_EventCallback+0xc2>
		}
		else
			rctrl = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (Keyboard_Info->lalt == 1U)
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	78db      	ldrb	r3, [r3, #3]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d108      	bne.n	80006d4 <USBH_HID_EventCallback+0xdc>
		{
			modifier_keys |= KBD_LEFT_ALT;
 80006c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lalt = 1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d2:	e001      	b.n	80006d8 <USBH_HID_EventCallback+0xe0>
		}
		else
			lalt = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (Keyboard_Info->ralt == 1U)
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	79db      	ldrb	r3, [r3, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d108      	bne.n	80006f2 <USBH_HID_EventCallback+0xfa>
		{
			modifier_keys |= KBD_RIGHT_ALT;
 80006e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			ralt = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
 80006f0:	e001      	b.n	80006f6 <USBH_HID_EventCallback+0xfe>
		}
		else
			ralt = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (Keyboard_Info->lgui == 1U)
 80006f6:	6a3b      	ldr	r3, [r7, #32]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <USBH_HID_EventCallback+0x118>
		{
			modifier_keys |= KBD_LEFT_GUI;
 80006fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000702:	f043 0308 	orr.w	r3, r3, #8
 8000706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			lgui = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e001      	b.n	8000714 <USBH_HID_EventCallback+0x11c>
		}
		else
			lgui = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
		if (Keyboard_Info->rgui == 1U)
 8000714:	6a3b      	ldr	r3, [r7, #32]
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	2b01      	cmp	r3, #1
 800071a:	d108      	bne.n	800072e <USBH_HID_EventCallback+0x136>
		{
			modifier_keys |= KBD_RIGHT_GUI;
 800071c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			rgui = 1;
 8000728:	2301      	movs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	e001      	b.n	8000732 <USBH_HID_EventCallback+0x13a>
		}
		else
			rgui = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
		if ((lctrl == 1 || rctrl == 1) && (lalt == 1 || ralt == 1) && ((key == 'h' || key == 'H') || (key == 'c' || key == 'C') || (key == 'q' || key == 'Q') ||  (key == 't' || key == 'T')))
 8000732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000734:	2b01      	cmp	r3, #1
 8000736:	d002      	beq.n	800073e <USBH_HID_EventCallback+0x146>
 8000738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800073a:	2b01      	cmp	r3, #1
 800073c:	d143      	bne.n	80007c6 <USBH_HID_EventCallback+0x1ce>
 800073e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000740:	2b01      	cmp	r3, #1
 8000742:	d002      	beq.n	800074a <USBH_HID_EventCallback+0x152>
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	2b01      	cmp	r3, #1
 8000748:	d13d      	bne.n	80007c6 <USBH_HID_EventCallback+0x1ce>
 800074a:	7ffb      	ldrb	r3, [r7, #31]
 800074c:	2b68      	cmp	r3, #104	; 0x68
 800074e:	d014      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000750:	7ffb      	ldrb	r3, [r7, #31]
 8000752:	2b48      	cmp	r3, #72	; 0x48
 8000754:	d011      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000756:	7ffb      	ldrb	r3, [r7, #31]
 8000758:	2b63      	cmp	r3, #99	; 0x63
 800075a:	d00e      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 800075c:	7ffb      	ldrb	r3, [r7, #31]
 800075e:	2b43      	cmp	r3, #67	; 0x43
 8000760:	d00b      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000762:	7ffb      	ldrb	r3, [r7, #31]
 8000764:	2b71      	cmp	r3, #113	; 0x71
 8000766:	d008      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000768:	7ffb      	ldrb	r3, [r7, #31]
 800076a:	2b51      	cmp	r3, #81	; 0x51
 800076c:	d005      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 800076e:	7ffb      	ldrb	r3, [r7, #31]
 8000770:	2b74      	cmp	r3, #116	; 0x74
 8000772:	d002      	beq.n	800077a <USBH_HID_EventCallback+0x182>
 8000774:	7ffb      	ldrb	r3, [r7, #31]
 8000776:	2b54      	cmp	r3, #84	; 0x54
 8000778:	d125      	bne.n	80007c6 <USBH_HID_EventCallback+0x1ce>
		{
			if (key == 'h' || key == 'H')
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	2b68      	cmp	r3, #104	; 0x68
 800077e:	d002      	beq.n	8000786 <USBH_HID_EventCallback+0x18e>
 8000780:	7ffb      	ldrb	r3, [r7, #31]
 8000782:	2b48      	cmp	r3, #72	; 0x48
 8000784:	d102      	bne.n	800078c <USBH_HID_EventCallback+0x194>
				type_hello_world();
 8000786:	f000 f8d3 	bl	8000930 <type_hello_world>
 800078a:	e01b      	b.n	80007c4 <USBH_HID_EventCallback+0x1cc>
			else if ((key == 'c' || key == 'C'))
 800078c:	7ffb      	ldrb	r3, [r7, #31]
 800078e:	2b63      	cmp	r3, #99	; 0x63
 8000790:	d022      	beq.n	80007d8 <USBH_HID_EventCallback+0x1e0>
 8000792:	7ffb      	ldrb	r3, [r7, #31]
 8000794:	2b43      	cmp	r3, #67	; 0x43
 8000796:	d01f      	beq.n	80007d8 <USBH_HID_EventCallback+0x1e0>
			{
				// char *command = "echo \"Hello World in command line!\"";
				// type_command(&command, 36);
			}
			else if ((key == 'q' || key == 'Q'))
 8000798:	7ffb      	ldrb	r3, [r7, #31]
 800079a:	2b71      	cmp	r3, #113	; 0x71
 800079c:	d002      	beq.n	80007a4 <USBH_HID_EventCallback+0x1ac>
 800079e:	7ffb      	ldrb	r3, [r7, #31]
 80007a0:	2b51      	cmp	r3, #81	; 0x51
 80007a2:	d104      	bne.n	80007ae <USBH_HID_EventCallback+0x1b6>
			{
				emoji(key);
 80007a4:	7ffb      	ldrb	r3, [r7, #31]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 f84e 	bl	8000848 <emoji>
 80007ac:	e00a      	b.n	80007c4 <USBH_HID_EventCallback+0x1cc>
			}
			else if ((key == 't' || key == 'T'))
 80007ae:	7ffb      	ldrb	r3, [r7, #31]
 80007b0:	2b74      	cmp	r3, #116	; 0x74
 80007b2:	d002      	beq.n	80007ba <USBH_HID_EventCallback+0x1c2>
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	2b54      	cmp	r3, #84	; 0x54
 80007b8:	d10e      	bne.n	80007d8 <USBH_HID_EventCallback+0x1e0>
			{
				emoji(key);
 80007ba:	7ffb      	ldrb	r3, [r7, #31]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f843 	bl	8000848 <emoji>
			if (key == 'h' || key == 'H')
 80007c2:	e009      	b.n	80007d8 <USBH_HID_EventCallback+0x1e0>
 80007c4:	e008      	b.n	80007d8 <USBH_HID_EventCallback+0x1e0>
			}
		}
		else
		{
			send_key(modifier_keys, Keyboard_Info->keys[0]);
 80007c6:	6a3b      	ldr	r3, [r7, #32]
 80007c8:	7a5a      	ldrb	r2, [r3, #9]
 80007ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ce:	4611      	mov	r1, r2
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f80d 	bl	80007f0 <send_key>
		}
	}
}
 80007d6:	e000      	b.n	80007da <USBH_HID_EventCallback+0x1e2>
			if (key == 'h' || key == 'H')
 80007d8:	bf00      	nop
}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	; 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	0800da2c 	.word	0x0800da2c
 80007e8:	20000204 	.word	0x20000204
 80007ec:	200001c0 	.word	0x200001c0

080007f0 <send_key>:
void send_key(uint8_t modifier, uint8_t key)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	HID_Buffer[0] = modifier;
 8000800:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <send_key+0x50>)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	7013      	strb	r3, [r2, #0]
	HID_Buffer[2] = key;
 8000806:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <send_key+0x50>)
 8000808:	79bb      	ldrb	r3, [r7, #6]
 800080a:	7093      	strb	r3, [r2, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 800080c:	2208      	movs	r2, #8
 800080e:	490c      	ldr	r1, [pc, #48]	; (8000840 <send_key+0x50>)
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <send_key+0x54>)
 8000812:	f007 fe01 	bl	8008418 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000816:	2032      	movs	r0, #50	; 0x32
 8000818:	f000 fb88 	bl	8000f2c <HAL_Delay>

	// Release all keys
	HID_Buffer[0] = 0x00;
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <send_key+0x50>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	HID_Buffer[2] = 0x00;
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <send_key+0x50>)
 8000824:	2200      	movs	r2, #0
 8000826:	709a      	strb	r2, [r3, #2]
	USBD_HID_SendReport(&hUsbDeviceFS, HID_Buffer, 8);
 8000828:	2208      	movs	r2, #8
 800082a:	4905      	ldr	r1, [pc, #20]	; (8000840 <send_key+0x50>)
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <send_key+0x54>)
 800082e:	f007 fdf3 	bl	8008418 <USBD_HID_SendReport>
	HAL_Delay(50);
 8000832:	2032      	movs	r0, #50	; 0x32
 8000834:	f000 fb7a 	bl	8000f2c <HAL_Delay>
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000268 	.word	0x20000268
 8000844:	200002b4 	.word	0x200002b4

08000848 <emoji>:

void emoji(char key)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	71fb      	strb	r3, [r7, #7]
	send_key(0x08, 0x37);
 8000852:	2137      	movs	r1, #55	; 0x37
 8000854:	2008      	movs	r0, #8
 8000856:	f7ff ffcb 	bl	80007f0 <send_key>

	if (key == 'q')
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b71      	cmp	r3, #113	; 0x71
 800085e:	d134      	bne.n	80008ca <emoji+0x82>
	{
		send_key(0x00, 0x1a);
 8000860:	211a      	movs	r1, #26
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff ffc4 	bl	80007f0 <send_key>
		send_key(0x00, 0x04);
 8000868:	2104      	movs	r1, #4
 800086a:	2000      	movs	r0, #0
 800086c:	f7ff ffc0 	bl	80007f0 <send_key>
		send_key(0x00, 0x19);
 8000870:	2119      	movs	r1, #25
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff ffbc 	bl	80007f0 <send_key>
		send_key(0x00, 0x0c);
 8000878:	210c      	movs	r1, #12
 800087a:	2000      	movs	r0, #0
 800087c:	f7ff ffb8 	bl	80007f0 <send_key>
		send_key(0x00, 0x11);
 8000880:	2111      	movs	r1, #17
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff ffb4 	bl	80007f0 <send_key>
		send_key(0x00, 0x0a);
 8000888:	210a      	movs	r1, #10
 800088a:	2000      	movs	r0, #0
 800088c:	f7ff ffb0 	bl	80007f0 <send_key>
		send_key(0x00, 0x2c);
 8000890:	212c      	movs	r1, #44	; 0x2c
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffac 	bl	80007f0 <send_key>
		send_key(0x00, 0x0b);
 8000898:	210b      	movs	r1, #11
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff ffa8 	bl	80007f0 <send_key>
		send_key(0x00, 0x04);
 80008a0:	2104      	movs	r1, #4
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ffa4 	bl	80007f0 <send_key>
		send_key(0x00, 0x11);
 80008a8:	2111      	movs	r1, #17
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffa0 	bl	80007f0 <send_key>
		send_key(0x00, 0x07);
 80008b0:	2107      	movs	r1, #7
 80008b2:	2000      	movs	r0, #0
 80008b4:	f7ff ff9c 	bl	80007f0 <send_key>
		send_key(0x00, 0x28);
 80008b8:	2128      	movs	r1, #40	; 0x28
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff98 	bl	80007f0 <send_key>
		send_key(0x00, 0x29);
 80008c0:	2129      	movs	r1, #41	; 0x29
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff94 	bl	80007f0 <send_key>
		send_key(0x00, 0x13);
		send_key(0x00, 0x28);
		send_key(0x00, 0x29);
	}

}
 80008c8:	e02e      	b.n	8000928 <emoji+0xe0>
	else if (key == 't')
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	2b74      	cmp	r3, #116	; 0x74
 80008ce:	d12b      	bne.n	8000928 <emoji+0xe0>
		send_key(0x00, 0x17);
 80008d0:	2117      	movs	r1, #23
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ff8c 	bl	80007f0 <send_key>
		send_key(0x00, 0x0b);
 80008d8:	210b      	movs	r1, #11
 80008da:	2000      	movs	r0, #0
 80008dc:	f7ff ff88 	bl	80007f0 <send_key>
		send_key(0x00, 0x18);
 80008e0:	2118      	movs	r1, #24
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff ff84 	bl	80007f0 <send_key>
		send_key(0x00, 0x10);
 80008e8:	2110      	movs	r1, #16
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff ff80 	bl	80007f0 <send_key>
		send_key(0x00, 0x05);
 80008f0:	2105      	movs	r1, #5
 80008f2:	2000      	movs	r0, #0
 80008f4:	f7ff ff7c 	bl	80007f0 <send_key>
		send_key(0x00, 0x16);
 80008f8:	2116      	movs	r1, #22
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff ff78 	bl	80007f0 <send_key>
		send_key(0x00, 0x2c);
 8000900:	212c      	movs	r1, #44	; 0x2c
 8000902:	2000      	movs	r0, #0
 8000904:	f7ff ff74 	bl	80007f0 <send_key>
		send_key(0x00, 0x18);
 8000908:	2118      	movs	r1, #24
 800090a:	2000      	movs	r0, #0
 800090c:	f7ff ff70 	bl	80007f0 <send_key>
		send_key(0x00, 0x13);
 8000910:	2113      	movs	r1, #19
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ff6c 	bl	80007f0 <send_key>
		send_key(0x00, 0x28);
 8000918:	2128      	movs	r1, #40	; 0x28
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff ff68 	bl	80007f0 <send_key>
		send_key(0x00, 0x29);
 8000920:	2129      	movs	r1, #41	; 0x29
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff ff64 	bl	80007f0 <send_key>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <type_hello_world>:

void type_hello_world(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	send_key(0x00, 0x0B);
 8000934:	210b      	movs	r1, #11
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff5a 	bl	80007f0 <send_key>
	send_key(0x00, 0x08);
 800093c:	2108      	movs	r1, #8
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff ff56 	bl	80007f0 <send_key>
	send_key(0x00, 0x0f);
 8000944:	210f      	movs	r1, #15
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ff52 	bl	80007f0 <send_key>
	send_key(0x00, 0x0f);
 800094c:	210f      	movs	r1, #15
 800094e:	2000      	movs	r0, #0
 8000950:	f7ff ff4e 	bl	80007f0 <send_key>
	send_key(0x00, 0x12);
 8000954:	2112      	movs	r1, #18
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff ff4a 	bl	80007f0 <send_key>
	send_key(0x00, 0x2c);
 800095c:	212c      	movs	r1, #44	; 0x2c
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ff46 	bl	80007f0 <send_key>
	send_key(0x00, 0x1a);
 8000964:	211a      	movs	r1, #26
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff ff42 	bl	80007f0 <send_key>
	send_key(0x00, 0x12);
 800096c:	2112      	movs	r1, #18
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff ff3e 	bl	80007f0 <send_key>
	send_key(0x00, 0x15);
 8000974:	2115      	movs	r1, #21
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff ff3a 	bl	80007f0 <send_key>
	send_key(0x00, 0x0f);
 800097c:	210f      	movs	r1, #15
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ff36 	bl	80007f0 <send_key>
	send_key(0x00, 0x07);
 8000984:	2107      	movs	r1, #7
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff32 	bl	80007f0 <send_key>
	send_key(0x00, 0x28);
 800098c:	2128      	movs	r1, #40	; 0x28
 800098e:	2000      	movs	r0, #0
 8000990:	f7ff ff2e 	bl	80007f0 <send_key>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800099c:	f000 fa54 	bl	8000e48 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009a0:	f000 f818 	bl	80009d4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009a4:	f000 f8ac 	bl	8000b00 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80009a8:	f00b fbb8 	bl	800c11c <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 80009ac:	f00c f864 	bl	800ca78 <MX_USB_HOST_Init>
	MX_USART2_UART_Init();
 80009b0:	f000 f87c 	bl	8000aac <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80009b4:	f00c f886 	bl	800cac4 <MX_USB_HOST_Process>

		/* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80009b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <main+0x38>)
 80009be:	f000 fd7f 	bl	80014c0 <HAL_GPIO_ReadPin>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <main+0x1c>
		{
			type_hello_world();
 80009c8:	f7ff ffb2 	bl	8000930 <type_hello_world>
		MX_USB_HOST_Process();
 80009cc:	e7f2      	b.n	80009b4 <main+0x1c>
 80009ce:	bf00      	nop
 80009d0:	40020800 	.word	0x40020800

080009d4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b094      	sub	sp, #80	; 0x50
 80009d8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2234      	movs	r2, #52	; 0x34
 80009e0:	2100      	movs	r1, #0
 80009e2:	4618      	mov	r0, r3
 80009e4:	f00c fb98 	bl	800d118 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <SystemClock_Config+0xd0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a06:	6413      	str	r3, [r2, #64]	; 0x40
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <SystemClock_Config+0xd0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a20:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a3c:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000a4c:	2348      	movs	r3, #72	; 0x48
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a54:	2303      	movs	r3, #3
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f004 fac1 	bl	8004fe8 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000a6c:	f000 f8be 	bl	8000bec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000a70:	230f      	movs	r3, #15
 8000a72:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f003 fc37 	bl	8004300 <HAL_RCC_ClockConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0xc8>
	{
		Error_Handler();
 8000a98:	f000 f8a8 	bl	8000bec <Error_Handler>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3750      	adds	r7, #80	; 0x50
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40007000 	.word	0x40007000

08000aac <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_USART2_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f004 fd1e 	bl	8005524 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8000aee:	f000 f87d 	bl	8000bec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001c0 	.word	0x200001c0
 8000afc:	40004400 	.word	0x40004400

08000b00 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b31      	ldr	r3, [pc, #196]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a30      	ldr	r2, [pc, #192]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b2e      	ldr	r3, [pc, #184]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_GPIO_Init+0xe0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	4816      	ldr	r0, [pc, #88]	; (8000be4 <MX_GPIO_Init+0xe4>)
 8000b8c:	f000 fcb0 	bl	80014f0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4810      	ldr	r0, [pc, #64]	; (8000be8 <MX_GPIO_Init+0xe8>)
 8000ba8:	f000 faf6 	bl	8001198 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000bac:	2320      	movs	r3, #32
 8000bae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <MX_GPIO_Init+0xe4>)
 8000bc4:	f000 fae8 	bl	8001198 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2028      	movs	r0, #40	; 0x28
 8000bce:	f000 faac 	bl	800112a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd2:	2028      	movs	r0, #40	; 0x28
 8000bd4:	f000 fac5 	bl	8001162 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd8:	bf00      	nop
 8000bda:	3728      	adds	r7, #40	; 0x28
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000
 8000be8:	40020800 	.word	0x40020800

08000bec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c36:	2007      	movs	r0, #7
 8000c38:	f000 fa6c 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c78:	6413      	str	r3, [r2, #64]	; 0x40
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_UART_MspInit+0x88>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <HAL_UART_MspInit+0x8c>)
 8000cbe:	f000 fa6b 	bl	8001198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8e2 	bl	8000eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d34:	f000 fc10 	bl	8001558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <OTG_FS_IRQHandler+0x10>)
 8000d42:	f002 f982 	bl	800304a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000790 	.word	0x20000790

08000d50 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <OTG_HS_IRQHandler+0x10>)
 8000d56:	f000 fe81 	bl	8001a5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000108c 	.word	0x2000108c

08000d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d6c:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <_sbrk+0x5c>)
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <_sbrk+0x60>)
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d78:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <_sbrk+0x64>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <_sbrk+0x64>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <_sbrk+0x68>)
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d207      	bcs.n	8000da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d94:	f00c f986 	bl	800d0a4 <__errno>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	e009      	b.n	8000db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <_sbrk+0x64>)
 8000db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db6:	68fb      	ldr	r3, [r7, #12]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20020000 	.word	0x20020000
 8000dc4:	00000400 	.word	0x00000400
 8000dc8:	20000270 	.word	0x20000270
 8000dcc:	200013a0 	.word	0x200013a0

08000dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <SystemInit+0x20>)
 8000dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <SystemInit+0x20>)
 8000ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000de0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dfa:	490e      	ldr	r1, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e10:	4c0b      	ldr	r4, [pc, #44]	; (8000e40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1e:	f7ff ffd7 	bl	8000dd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e22:	f00c f945 	bl	800d0b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e26:	f7ff fdb7 	bl	8000998 <main>
  bx  lr    
 8000e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e34:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000e38:	0800ddf8 	.word	0x0800ddf8
  ldr r2, =_sbss
 8000e3c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000e40:	200013a0 	.word	0x200013a0

08000e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e44:	e7fe      	b.n	8000e44 <ADC_IRQHandler>
	...

08000e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0d      	ldr	r2, [pc, #52]	; (8000e88 <HAL_Init+0x40>)
 8000e52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_Init+0x40>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <HAL_Init+0x40>)
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e70:	2003      	movs	r0, #3
 8000e72:	f000 f94f 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e76:	2000      	movs	r0, #0
 8000e78:	f000 f808 	bl	8000e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e7c:	f7ff febc 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023c00 	.word	0x40023c00

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x54>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x58>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f967 	bl	800117e <HAL_SYSTICK_Config>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00e      	b.n	8000ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b0f      	cmp	r3, #15
 8000ebe:	d80a      	bhi.n	8000ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f000 f92f 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_InitTick+0x5c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	e000      	b.n	8000ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x20>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x24>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_IncTick+0x24>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	20000274 	.word	0x20000274

08000f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return uwTick;
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <HAL_GetTick+0x14>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000274 	.word	0x20000274

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff ffee 	bl	8000f14 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Delay+0x44>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffde 	bl	8000f14 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	e165      	b.n	8001480 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b4:	2201      	movs	r2, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	f040 8154 	bne.w	800147a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d005      	beq.n	80011ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d130      	bne.n	800124c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	68da      	ldr	r2, [r3, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	091b      	lsrs	r3, r3, #4
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	69b9      	ldr	r1, [r7, #24]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4313      	orrs	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ae 	beq.w	800147a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132c:	6453      	str	r3, [r2, #68]	; 0x44
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x300>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800133a:	4a58      	ldr	r2, [pc, #352]	; (800149c <HAL_GPIO_Init+0x304>)
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x308>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x30c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x216>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4d      	ldr	r2, [pc, #308]	; (80014a8 <HAL_GPIO_Init+0x310>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x212>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4c      	ldr	r2, [pc, #304]	; (80014ac <HAL_GPIO_Init+0x314>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <HAL_GPIO_Init+0x318>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x20a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <HAL_GPIO_Init+0x31c>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x206>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_GPIO_Init+0x320>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x202>
 8001396:	2306      	movs	r3, #6
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139a:	2307      	movs	r3, #7
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x21c>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4935      	ldr	r1, [pc, #212]	; (800149c <HAL_GPIO_Init+0x304>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x324>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x324>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x324>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae96 	bls.w	80011b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	bf00      	nop
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40021800 	.word	0x40021800
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001522:	b480      	push	{r7}
 8001524:	b085      	sub	sp, #20
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	43d9      	mvns	r1, r3
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	400b      	ands	r3, r1
 8001544:	431a      	orrs	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	619a      	str	r2, [r3, #24]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d006      	beq.n	800157c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f81c 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158a:	b08f      	sub	sp, #60	; 0x3c
 800158c:	af0a      	add	r7, sp, #40	; 0x28
 800158e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e054      	b.n	8001644 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d106      	bne.n	80015ba <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f00b fabd 	bl	800cb34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2203      	movs	r2, #3
 80015be:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d102      	bne.n	80015d4 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 fc7a 	bl	8005ed2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	687e      	ldr	r6, [r7, #4]
 80015e6:	466d      	mov	r5, sp
 80015e8:	f106 0410 	add.w	r4, r6, #16
 80015ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fc:	1d33      	adds	r3, r6, #4
 80015fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f004 fb51 	bl	8005ca8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	4618      	mov	r0, r3
 800160e:	f004 fc71 	bl	8005ef4 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	687e      	ldr	r6, [r7, #4]
 800161a:	466d      	mov	r5, sp
 800161c:	f106 0410 	add.w	r4, r6, #16
 8001620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001628:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001630:	1d33      	adds	r3, r6, #4
 8001632:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f005 ff7f 	bl	8007538 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800164c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af04      	add	r7, sp, #16
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	4608      	mov	r0, r1
 8001656:	4611      	mov	r1, r2
 8001658:	461a      	mov	r2, r3
 800165a:	4603      	mov	r3, r0
 800165c:	70fb      	strb	r3, [r7, #3]
 800165e:	460b      	mov	r3, r1
 8001660:	70bb      	strb	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_HCD_HC_Init+0x28>
 8001670:	2302      	movs	r3, #2
 8001672:	e076      	b.n	8001762 <HAL_HCD_HC_Init+0x116>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	212c      	movs	r1, #44	; 0x2c
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4413      	add	r3, r2
 8001688:	333d      	adds	r3, #61	; 0x3d
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800168e:	78fb      	ldrb	r3, [r7, #3]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	212c      	movs	r1, #44	; 0x2c
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	3338      	adds	r3, #56	; 0x38
 800169c:	787a      	ldrb	r2, [r7, #1]
 800169e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	212c      	movs	r1, #44	; 0x2c
 80016a6:	fb01 f303 	mul.w	r3, r1, r3
 80016aa:	4413      	add	r3, r2
 80016ac:	3340      	adds	r3, #64	; 0x40
 80016ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016b0:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3339      	adds	r3, #57	; 0x39
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	333f      	adds	r3, #63	; 0x3f
 80016d2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80016d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	78ba      	ldrb	r2, [r7, #2]
 80016dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016e0:	b2d0      	uxtb	r0, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	212c      	movs	r1, #44	; 0x2c
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	4413      	add	r3, r2
 80016ec:	333a      	adds	r3, #58	; 0x3a
 80016ee:	4602      	mov	r2, r0
 80016f0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80016f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da09      	bge.n	800170e <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	212c      	movs	r1, #44	; 0x2c
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	4413      	add	r3, r2
 8001706:	333b      	adds	r3, #59	; 0x3b
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	e008      	b.n	8001720 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333b      	adds	r3, #59	; 0x3b
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	333c      	adds	r3, #60	; 0x3c
 800172e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001732:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	787c      	ldrb	r4, [r7, #1]
 800173a:	78ba      	ldrb	r2, [r7, #2]
 800173c:	78f9      	ldrb	r1, [r7, #3]
 800173e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	f897 3020 	ldrb.w	r3, [r7, #32]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	4623      	mov	r3, r4
 8001750:	f006 f86c 	bl	800782c <USB_HC_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001760:	7bfb      	ldrb	r3, [r7, #15]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}

0800176a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	460b      	mov	r3, r1
 8001774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_HCD_HC_Halt+0x1e>
 8001784:	2302      	movs	r3, #2
 8001786:	e00f      	b.n	80017a8 <HAL_HCD_HC_Halt+0x3e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f006 fabc 	bl	8007d16 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4603      	mov	r3, r0
 80017c0:	70fb      	strb	r3, [r7, #3]
 80017c2:	460b      	mov	r3, r1
 80017c4:	70bb      	strb	r3, [r7, #2]
 80017c6:	4613      	mov	r3, r2
 80017c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	212c      	movs	r1, #44	; 0x2c
 80017d0:	fb01 f303 	mul.w	r3, r1, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	333b      	adds	r3, #59	; 0x3b
 80017d8:	78ba      	ldrb	r2, [r7, #2]
 80017da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80017dc:	78fb      	ldrb	r3, [r7, #3]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	212c      	movs	r1, #44	; 0x2c
 80017e2:	fb01 f303 	mul.w	r3, r1, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	333f      	adds	r3, #63	; 0x3f
 80017ea:	787a      	ldrb	r2, [r7, #1]
 80017ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80017ee:	7c3b      	ldrb	r3, [r7, #16]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d112      	bne.n	800181a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017f4:	78fb      	ldrb	r3, [r7, #3]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	212c      	movs	r1, #44	; 0x2c
 80017fa:	fb01 f303 	mul.w	r3, r1, r3
 80017fe:	4413      	add	r3, r2
 8001800:	3342      	adds	r3, #66	; 0x42
 8001802:	2203      	movs	r2, #3
 8001804:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	212c      	movs	r1, #44	; 0x2c
 800180c:	fb01 f303 	mul.w	r3, r1, r3
 8001810:	4413      	add	r3, r2
 8001812:	333d      	adds	r3, #61	; 0x3d
 8001814:	7f3a      	ldrb	r2, [r7, #28]
 8001816:	701a      	strb	r2, [r3, #0]
 8001818:	e008      	b.n	800182c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	212c      	movs	r1, #44	; 0x2c
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	3342      	adds	r3, #66	; 0x42
 8001828:	2202      	movs	r2, #2
 800182a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b03      	cmp	r3, #3
 8001830:	f200 80c6 	bhi.w	80019c0 <HAL_HCD_HC_SubmitRequest+0x210>
 8001834:	a201      	add	r2, pc, #4	; (adr r2, 800183c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183a:	bf00      	nop
 800183c:	0800184d 	.word	0x0800184d
 8001840:	080019ad 	.word	0x080019ad
 8001844:	080018b1 	.word	0x080018b1
 8001848:	0800192f 	.word	0x0800192f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800184c:	7c3b      	ldrb	r3, [r7, #16]
 800184e:	2b01      	cmp	r3, #1
 8001850:	f040 80b8 	bne.w	80019c4 <HAL_HCD_HC_SubmitRequest+0x214>
 8001854:	78bb      	ldrb	r3, [r7, #2]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f040 80b4 	bne.w	80019c4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800185c:	8b3b      	ldrh	r3, [r7, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d108      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001862:	78fb      	ldrb	r3, [r7, #3]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	212c      	movs	r1, #44	; 0x2c
 8001868:	fb01 f303 	mul.w	r3, r1, r3
 800186c:	4413      	add	r3, r2
 800186e:	3355      	adds	r3, #85	; 0x55
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	212c      	movs	r1, #44	; 0x2c
 800187a:	fb01 f303 	mul.w	r3, r1, r3
 800187e:	4413      	add	r3, r2
 8001880:	3355      	adds	r3, #85	; 0x55
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	3342      	adds	r3, #66	; 0x42
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800189a:	e093      	b.n	80019c4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3342      	adds	r3, #66	; 0x42
 80018aa:	2202      	movs	r2, #2
 80018ac:	701a      	strb	r2, [r3, #0]
      break;
 80018ae:	e089      	b.n	80019c4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018b0:	78bb      	ldrb	r3, [r7, #2]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d11d      	bne.n	80018f2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3355      	adds	r3, #85	; 0x55
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3342      	adds	r3, #66	; 0x42
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018dc:	e073      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	3342      	adds	r3, #66	; 0x42
 80018ec:	2202      	movs	r2, #2
 80018ee:	701a      	strb	r2, [r3, #0]
      break;
 80018f0:	e069      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3354      	adds	r3, #84	; 0x54
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	212c      	movs	r1, #44	; 0x2c
 800190c:	fb01 f303 	mul.w	r3, r1, r3
 8001910:	4413      	add	r3, r2
 8001912:	3342      	adds	r3, #66	; 0x42
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
      break;
 8001918:	e055      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	212c      	movs	r1, #44	; 0x2c
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	4413      	add	r3, r2
 8001926:	3342      	adds	r3, #66	; 0x42
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
      break;
 800192c:	e04b      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800192e:	78bb      	ldrb	r3, [r7, #2]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d11d      	bne.n	8001970 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3355      	adds	r3, #85	; 0x55
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d109      	bne.n	800195c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	212c      	movs	r1, #44	; 0x2c
 800194e:	fb01 f303 	mul.w	r3, r1, r3
 8001952:	4413      	add	r3, r2
 8001954:	3342      	adds	r3, #66	; 0x42
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800195a:	e034      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3342      	adds	r3, #66	; 0x42
 800196a:	2202      	movs	r2, #2
 800196c:	701a      	strb	r2, [r3, #0]
      break;
 800196e:	e02a      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	3354      	adds	r3, #84	; 0x54
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	e016      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3342      	adds	r3, #66	; 0x42
 80019a6:	2202      	movs	r2, #2
 80019a8:	701a      	strb	r2, [r3, #0]
      break;
 80019aa:	e00c      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ac:	78fb      	ldrb	r3, [r7, #3]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	212c      	movs	r1, #44	; 0x2c
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	3342      	adds	r3, #66	; 0x42
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80019c0:	bf00      	nop
 80019c2:	e000      	b.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80019c4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019c6:	78fb      	ldrb	r3, [r7, #3]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	212c      	movs	r1, #44	; 0x2c
 80019cc:	fb01 f303 	mul.w	r3, r1, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	3344      	adds	r3, #68	; 0x44
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	8b3a      	ldrh	r2, [r7, #24]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	202c      	movs	r0, #44	; 0x2c
 80019e0:	fb00 f303 	mul.w	r3, r0, r3
 80019e4:	440b      	add	r3, r1
 80019e6:	334c      	adds	r3, #76	; 0x4c
 80019e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3360      	adds	r3, #96	; 0x60
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	212c      	movs	r1, #44	; 0x2c
 8001a02:	fb01 f303 	mul.w	r3, r1, r3
 8001a06:	4413      	add	r3, r2
 8001a08:	3350      	adds	r3, #80	; 0x50
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	212c      	movs	r1, #44	; 0x2c
 8001a14:	fb01 f303 	mul.w	r3, r1, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	3339      	adds	r3, #57	; 0x39
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a20:	78fb      	ldrb	r3, [r7, #3]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	212c      	movs	r1, #44	; 0x2c
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	3361      	adds	r3, #97	; 0x61
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	222c      	movs	r2, #44	; 0x2c
 8001a3a:	fb02 f303 	mul.w	r3, r2, r3
 8001a3e:	3338      	adds	r3, #56	; 0x38
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	18d1      	adds	r1, r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	f006 f810 	bl	8007a70 <USB_HC_StartXfer>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop

08001a5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f005 fc9d 	bl	80073b2 <USB_GetMode>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	f040 80f6 	bne.w	8001c6c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 fc01 	bl	800728c <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80ec 	beq.w	8001c6a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f005 fbf8 	bl	800728c <USB_ReadInterrupts>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001aa6:	d104      	bne.n	8001ab2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f005 fbe8 	bl	800728c <USB_ReadInterrupts>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ac6:	d104      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ad0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 fbd8 	bl	800728c <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ae6:	d104      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001af0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f005 fbc8 	bl	800728c <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d103      	bne.n	8001b0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f005 fbba 	bl	800728c <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b22:	d11c      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10f      	bne.n	8001b5e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b3e:	2110      	movs	r1, #16
 8001b40:	6938      	ldr	r0, [r7, #16]
 8001b42:	f004 fb81 	bl	8006248 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b46:	6938      	ldr	r0, [r7, #16]
 8001b48:	f004 fbb2 	bl	80062b0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	4618      	mov	r0, r3
 8001b54:	f005 fda4 	bl	80076a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f00b f86d 	bl	800cc38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 fb92 	bl	800728c <USB_ReadInterrupts>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b72:	d102      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f001 f89e 	bl	8002cb6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f005 fb84 	bl	800728c <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d106      	bne.n	8001b9c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f00b f836 	bl	800cc00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2208      	movs	r2, #8
 8001b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f005 fb73 	bl	800728c <USB_ReadInterrupts>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d101      	bne.n	8001bb4 <HAL_HCD_IRQHandler+0x158>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_HCD_IRQHandler+0x15a>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d012      	beq.n	8001be0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0210 	bic.w	r2, r2, #16
 8001bc8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 ffa1 	bl	8002b12 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0210 	orr.w	r2, r2, #16
 8001bde:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fb51 	bl	800728c <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bf4:	d13a      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f006 f87a 	bl	8007cf4 <USB_HC_ReadInterrupt>
 8001c00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e025      	b.n	8001c54 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c32:	d106      	bne.n	8001c42 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f8ab 	bl	8001d96 <HCD_HC_IN_IRQHandler>
 8001c40:	e005      	b.n	8001c4e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fbf9 	bl	8002440 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d3d4      	bcc.n	8001c08 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	e000      	b.n	8001c6c <HAL_HCD_IRQHandler+0x210>
      return;
 8001c6a:	bf00      	nop
    }
  }
}
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_HCD_Start+0x16>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e013      	b.n	8001cb0 <HAL_HCD_Start+0x3e>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	4618      	mov	r0, r3
 8001c98:	f005 fd66 	bl	8007768 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f004 f905 	bl	8005eb0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_HCD_Stop+0x16>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e00d      	b.n	8001cea <HAL_HCD_Stop+0x32>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f006 f954 	bl	8007f88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f005 fd08 	bl	8007714 <USB_ResetPort>
 8001d04:	4603      	mov	r3, r0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	460b      	mov	r3, r1
 8001d18:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3360      	adds	r3, #96	; 0x60
 8001d28:	781b      	ldrb	r3, [r3, #0]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	212c      	movs	r1, #44	; 0x2c
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3350      	adds	r3, #80	; 0x50
 8001d50:	681b      	ldr	r3, [r3, #0]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f005 fd4c 	bl	8007808 <USB_GetCurrentFrame>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b082      	sub	sp, #8
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f005 fd27 	bl	80077da <USB_GetHostSpeed>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d11a      	bne.n	8001dfc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	212c      	movs	r1, #44	; 0x2c
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	3361      	adds	r3, #97	; 0x61
 8001de6:	2206      	movs	r2, #6
 8001de8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f005 ff8e 	bl	8007d16 <USB_HC_Halt>
 8001dfa:	e0af      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	015a      	lsls	r2, r3, #5
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4413      	add	r3, r2
 8001e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e12:	d11b      	bne.n	8001e4c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e20:	461a      	mov	r2, r3
 8001e22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3361      	adds	r3, #97	; 0x61
 8001e36:	2207      	movs	r2, #7
 8001e38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f005 ff66 	bl	8007d16 <USB_HC_Halt>
 8001e4a:	e087      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 0320 	and.w	r3, r3, #32
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d109      	bne.n	8001e76 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	015a      	lsls	r2, r3, #5
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6e:	461a      	mov	r2, r3
 8001e70:	2320      	movs	r3, #32
 8001e72:	6093      	str	r3, [r2, #8]
 8001e74:	e072      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	015a      	lsls	r2, r3, #5
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d11a      	bne.n	8001ec2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	015a      	lsls	r2, r3, #5
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4413      	add	r3, r2
 8001e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3361      	adds	r3, #97	; 0x61
 8001eac:	2205      	movs	r2, #5
 8001eae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 ff2b 	bl	8007d16 <USB_HC_Halt>
 8001ec0:	e04c      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed8:	d11b      	bne.n	8001f12 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	3361      	adds	r3, #97	; 0x61
 8001efc:	2208      	movs	r2, #8
 8001efe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	4611      	mov	r1, r2
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f005 ff03 	bl	8007d16 <USB_HC_Halt>
 8001f10:	e024      	b.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f24:	2b80      	cmp	r3, #128	; 0x80
 8001f26:	d119      	bne.n	8001f5c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	015a      	lsls	r2, r3, #5
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f34:	461a      	mov	r2, r3
 8001f36:	2380      	movs	r3, #128	; 0x80
 8001f38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	3361      	adds	r3, #97	; 0x61
 8001f48:	2206      	movs	r2, #6
 8001f4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 fedd 	bl	8007d16 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f72:	d112      	bne.n	8001f9a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f005 fec9 	bl	8007d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f90:	461a      	mov	r2, r3
 8001f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f96:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f98:	e24e      	b.n	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f040 80df 	bne.w	8002170 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d019      	beq.n	8001fee <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	212c      	movs	r1, #44	; 0x2c
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3348      	adds	r3, #72	; 0x48
 8001fc8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	0159      	lsls	r1, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	440b      	add	r3, r1
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001fdc:	1ad2      	subs	r2, r2, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	202c      	movs	r0, #44	; 0x2c
 8001fe4:	fb00 f303 	mul.w	r3, r0, r3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3350      	adds	r3, #80	; 0x50
 8001fec:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3361      	adds	r3, #97	; 0x61
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	212c      	movs	r1, #44	; 0x2c
 8002006:	fb01 f303 	mul.w	r3, r1, r3
 800200a:	4413      	add	r3, r2
 800200c:	335c      	adds	r3, #92	; 0x5c
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	461a      	mov	r2, r3
 8002020:	2301      	movs	r3, #1
 8002022:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	212c      	movs	r1, #44	; 0x2c
 800202a:	fb01 f303 	mul.w	r3, r1, r3
 800202e:	4413      	add	r3, r2
 8002030:	333f      	adds	r3, #63	; 0x3f
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d009      	beq.n	800204c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	212c      	movs	r1, #44	; 0x2c
 800203e:	fb01 f303 	mul.w	r3, r1, r3
 8002042:	4413      	add	r3, r2
 8002044:	333f      	adds	r3, #63	; 0x3f
 8002046:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002048:	2b02      	cmp	r3, #2
 800204a:	d111      	bne.n	8002070 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f005 fe5d 	bl	8007d16 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002068:	461a      	mov	r2, r3
 800206a:	2310      	movs	r3, #16
 800206c:	6093      	str	r3, [r2, #8]
 800206e:	e03a      	b.n	80020e6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	333f      	adds	r3, #63	; 0x3f
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d009      	beq.n	8002098 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	333f      	adds	r3, #63	; 0x3f
 8002092:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002094:	2b01      	cmp	r3, #1
 8002096:	d126      	bne.n	80020e6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	015a      	lsls	r2, r3, #5
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4413      	add	r3, r2
 80020a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	0151      	lsls	r1, r2, #5
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	440a      	add	r2, r1
 80020ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020b6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	3360      	adds	r3, #96	; 0x60
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	b2d9      	uxtb	r1, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	202c      	movs	r0, #44	; 0x2c
 80020d4:	fb00 f303 	mul.w	r3, r0, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3360      	adds	r3, #96	; 0x60
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f00a fdb7 	bl	800cc54 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12b      	bne.n	8002146 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	212c      	movs	r1, #44	; 0x2c
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3348      	adds	r3, #72	; 0x48
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	202c      	movs	r0, #44	; 0x2c
 8002104:	fb00 f202 	mul.w	r2, r0, r2
 8002108:	440a      	add	r2, r1
 800210a:	3240      	adds	r2, #64	; 0x40
 800210c:	8812      	ldrh	r2, [r2, #0]
 800210e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 818e 	beq.w	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3354      	adds	r3, #84	; 0x54
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2d8      	uxtb	r0, r3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3354      	adds	r3, #84	; 0x54
 8002140:	4602      	mov	r2, r0
 8002142:	701a      	strb	r2, [r3, #0]
}
 8002144:	e178      	b.n	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	212c      	movs	r1, #44	; 0x2c
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	4413      	add	r3, r2
 8002152:	3354      	adds	r3, #84	; 0x54
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2d8      	uxtb	r0, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	3354      	adds	r3, #84	; 0x54
 800216a:	4602      	mov	r2, r0
 800216c:	701a      	strb	r2, [r3, #0]
}
 800216e:	e163      	b.n	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	f040 80f6 	bne.w	8002374 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d109      	bne.n	80021b0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e0c9      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	212c      	movs	r1, #44	; 0x2c
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3361      	adds	r3, #97	; 0x61
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d109      	bne.n	80021d8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3360      	adds	r3, #96	; 0x60
 80021d2:	2205      	movs	r2, #5
 80021d4:	701a      	strb	r2, [r3, #0]
 80021d6:	e0b5      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3361      	adds	r3, #97	; 0x61
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b06      	cmp	r3, #6
 80021ea:	d009      	beq.n	8002200 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	212c      	movs	r1, #44	; 0x2c
 80021f2:	fb01 f303 	mul.w	r3, r1, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	3361      	adds	r3, #97	; 0x61
 80021fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	d150      	bne.n	80022a2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	335c      	adds	r3, #92	; 0x5c
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	202c      	movs	r0, #44	; 0x2c
 8002218:	fb00 f303 	mul.w	r3, r0, r3
 800221c:	440b      	add	r3, r1
 800221e:	335c      	adds	r3, #92	; 0x5c
 8002220:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	335c      	adds	r3, #92	; 0x5c
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d912      	bls.n	800225c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	335c      	adds	r3, #92	; 0x5c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	2204      	movs	r2, #4
 8002258:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800225a:	e073      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3360      	adds	r3, #96	; 0x60
 800226a:	2202      	movs	r2, #2
 800226c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002284:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800228c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a0:	e050      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	212c      	movs	r1, #44	; 0x2c
 80022a8:	fb01 f303 	mul.w	r3, r1, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	3361      	adds	r3, #97	; 0x61
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d122      	bne.n	80022fc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	212c      	movs	r1, #44	; 0x2c
 80022bc:	fb01 f303 	mul.w	r3, r1, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	3360      	adds	r3, #96	; 0x60
 80022c4:	2202      	movs	r2, #2
 80022c6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	015a      	lsls	r2, r3, #5
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4413      	add	r3, r2
 80022d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022de:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e023      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3361      	adds	r3, #97	; 0x61
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b07      	cmp	r3, #7
 800230e:	d119      	bne.n	8002344 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	335c      	adds	r3, #92	; 0x5c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	202c      	movs	r0, #44	; 0x2c
 8002328:	fb00 f303 	mul.w	r3, r0, r3
 800232c:	440b      	add	r3, r1
 800232e:	335c      	adds	r3, #92	; 0x5c
 8002330:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	212c      	movs	r1, #44	; 0x2c
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	4413      	add	r3, r2
 800233e:	3360      	adds	r3, #96	; 0x60
 8002340:	2204      	movs	r2, #4
 8002342:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2302      	movs	r3, #2
 8002354:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	b2d9      	uxtb	r1, r3
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	202c      	movs	r0, #44	; 0x2c
 8002360:	fb00 f303 	mul.w	r3, r0, r3
 8002364:	4413      	add	r3, r2
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f00a fc71 	bl	800cc54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002372:	e061      	b.n	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4413      	add	r3, r2
 800237c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b10      	cmp	r3, #16
 8002388:	d156      	bne.n	8002438 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	333f      	adds	r3, #63	; 0x3f
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d111      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f005 fcab 	bl	8007d16 <USB_HC_Halt>
 80023c0:	e031      	b.n	8002426 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	212c      	movs	r1, #44	; 0x2c
 80023c8:	fb01 f303 	mul.w	r3, r1, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	333f      	adds	r3, #63	; 0x3f
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	212c      	movs	r1, #44	; 0x2c
 80023dc:	fb01 f303 	mul.w	r3, r1, r3
 80023e0:	4413      	add	r3, r2
 80023e2:	333f      	adds	r3, #63	; 0x3f
 80023e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d11d      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	335c      	adds	r3, #92	; 0x5c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d110      	bne.n	8002426 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	2203      	movs	r2, #3
 8002414:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f005 fc78 	bl	8007d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	461a      	mov	r2, r3
 8002434:	2310      	movs	r3, #16
 8002436:	6093      	str	r3, [r2, #8]
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	015a      	lsls	r2, r3, #5
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4413      	add	r3, r2
 8002462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11a      	bne.n	80024a6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	2304      	movs	r3, #4
 8002480:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	3361      	adds	r3, #97	; 0x61
 8002490:	2206      	movs	r2, #6
 8002492:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	b2d2      	uxtb	r2, r2
 800249c:	4611      	mov	r1, r2
 800249e:	4618      	mov	r0, r3
 80024a0:	f005 fc39 	bl	8007d16 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80024a4:	e331      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d12e      	bne.n	800251a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	461a      	mov	r2, r3
 80024ca:	2320      	movs	r3, #32
 80024cc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	333d      	adds	r3, #61	; 0x3d
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	f040 8313 	bne.w	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	333d      	adds	r3, #61	; 0x3d
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3360      	adds	r3, #96	; 0x60
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fbff 	bl	8007d16 <USB_HC_Halt>
}
 8002518:	e2f7      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	015a      	lsls	r2, r3, #5
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4413      	add	r3, r2
 8002522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002530:	d112      	bne.n	8002558 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	461a      	mov	r2, r3
 8002540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002544:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f005 fbe0 	bl	8007d16 <USB_HC_Halt>
}
 8002556:	e2d8      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d140      	bne.n	80025f0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002592:	2b40      	cmp	r3, #64	; 0x40
 8002594:	d111      	bne.n	80025ba <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	333d      	adds	r3, #61	; 0x3d
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	2340      	movs	r3, #64	; 0x40
 80025b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	015a      	lsls	r2, r3, #5
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	4413      	add	r3, r2
 80025c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025c6:	461a      	mov	r2, r3
 80025c8:	2301      	movs	r3, #1
 80025ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	212c      	movs	r1, #44	; 0x2c
 80025d2:	fb01 f303 	mul.w	r3, r1, r3
 80025d6:	4413      	add	r3, r2
 80025d8:	3361      	adds	r3, #97	; 0x61
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f005 fb94 	bl	8007d16 <USB_HC_Halt>
}
 80025ee:	e28c      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d12c      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3361      	adds	r3, #97	; 0x61
 8002614:	2204      	movs	r2, #4
 8002616:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	333d      	adds	r3, #61	; 0x3d
 8002626:	2201      	movs	r2, #1
 8002628:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	335c      	adds	r3, #92	; 0x5c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f005 fb65 	bl	8007d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	015a      	lsls	r2, r3, #5
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	4413      	add	r3, r2
 8002654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002658:	461a      	mov	r2, r3
 800265a:	2340      	movs	r3, #64	; 0x40
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e254      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	d11a      	bne.n	80026ac <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	2308      	movs	r3, #8
 8002686:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	3361      	adds	r3, #97	; 0x61
 8002696:	2205      	movs	r2, #5
 8002698:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f005 fb36 	bl	8007d16 <USB_HC_Halt>
}
 80026aa:	e22e      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0310 	and.w	r3, r3, #16
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d140      	bne.n	8002744 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	212c      	movs	r1, #44	; 0x2c
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	4413      	add	r3, r2
 80026ce:	335c      	adds	r3, #92	; 0x5c
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	212c      	movs	r1, #44	; 0x2c
 80026da:	fb01 f303 	mul.w	r3, r1, r3
 80026de:	4413      	add	r3, r2
 80026e0:	3361      	adds	r3, #97	; 0x61
 80026e2:	2203      	movs	r2, #3
 80026e4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	333d      	adds	r3, #61	; 0x3d
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d112      	bne.n	8002720 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333c      	adds	r3, #60	; 0x3c
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	333d      	adds	r3, #61	; 0x3d
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f005 faf3 	bl	8007d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	461a      	mov	r2, r3
 800273e:	2310      	movs	r3, #16
 8002740:	6093      	str	r3, [r2, #8]
}
 8002742:	e1e2      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d164      	bne.n	8002824 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d111      	bne.n	8002786 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3361      	adds	r3, #97	; 0x61
 8002770:	2206      	movs	r2, #6
 8002772:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f005 fac9 	bl	8007d16 <USB_HC_Halt>
 8002784:	e044      	b.n	8002810 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	212c      	movs	r1, #44	; 0x2c
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	335c      	adds	r3, #92	; 0x5c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	202c      	movs	r0, #44	; 0x2c
 800279e:	fb00 f303 	mul.w	r3, r0, r3
 80027a2:	440b      	add	r3, r1
 80027a4:	335c      	adds	r3, #92	; 0x5c
 80027a6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	335c      	adds	r3, #92	; 0x5c
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d920      	bls.n	80027fe <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	335c      	adds	r3, #92	; 0x5c
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	3360      	adds	r3, #96	; 0x60
 80027dc:	2204      	movs	r2, #4
 80027de:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	202c      	movs	r0, #44	; 0x2c
 80027ea:	fb00 f303 	mul.w	r3, r0, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f00a fa2c 	bl	800cc54 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027fc:	e008      	b.n	8002810 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	212c      	movs	r1, #44	; 0x2c
 8002804:	fb01 f303 	mul.w	r3, r1, r3
 8002808:	4413      	add	r3, r2
 800280a:	3360      	adds	r3, #96	; 0x60
 800280c:	2202      	movs	r2, #2
 800280e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	6093      	str	r3, [r2, #8]
}
 8002822:	e172      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283a:	d11b      	bne.n	8002874 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3361      	adds	r3, #97	; 0x61
 800284a:	2208      	movs	r2, #8
 800284c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f005 fa5c 	bl	8007d16 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	461a      	mov	r2, r3
 800286c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002870:	6093      	str	r3, [r2, #8]
}
 8002872:	e14a      	b.n	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b02      	cmp	r3, #2
 8002888:	f040 813f 	bne.w	8002b0a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	212c      	movs	r1, #44	; 0x2c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	3361      	adds	r3, #97	; 0x61
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d17d      	bne.n	800299c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	212c      	movs	r1, #44	; 0x2c
 80028a6:	fb01 f303 	mul.w	r3, r1, r3
 80028aa:	4413      	add	r3, r2
 80028ac:	3360      	adds	r3, #96	; 0x60
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333f      	adds	r3, #63	; 0x3f
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d00a      	beq.n	80028dc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	212c      	movs	r1, #44	; 0x2c
 80028cc:	fb01 f303 	mul.w	r3, r1, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	333f      	adds	r3, #63	; 0x3f
 80028d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	f040 8100 	bne.w	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d113      	bne.n	800290c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	212c      	movs	r1, #44	; 0x2c
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	3355      	adds	r3, #85	; 0x55
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2d8      	uxtb	r0, r3
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	212c      	movs	r1, #44	; 0x2c
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	3355      	adds	r3, #85	; 0x55
 8002908:	4602      	mov	r2, r0
 800290a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b01      	cmp	r3, #1
 8002912:	f040 80e3 	bne.w	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	334c      	adds	r3, #76	; 0x4c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80d8 	beq.w	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	334c      	adds	r3, #76	; 0x4c
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	202c      	movs	r0, #44	; 0x2c
 8002942:	fb00 f202 	mul.w	r2, r0, r2
 8002946:	440a      	add	r2, r1
 8002948:	3240      	adds	r2, #64	; 0x40
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	4413      	add	r3, r2
 800294e:	3b01      	subs	r3, #1
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	202c      	movs	r0, #44	; 0x2c
 8002956:	fb00 f202 	mul.w	r2, r0, r2
 800295a:	440a      	add	r2, r1
 800295c:	3240      	adds	r2, #64	; 0x40
 800295e:	8812      	ldrh	r2, [r2, #0]
 8002960:	fbb3 f3f2 	udiv	r3, r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80b5 	beq.w	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3355      	adds	r3, #85	; 0x55
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2d8      	uxtb	r0, r3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	212c      	movs	r1, #44	; 0x2c
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	4413      	add	r3, r2
 8002994:	3355      	adds	r3, #85	; 0x55
 8002996:	4602      	mov	r2, r0
 8002998:	701a      	strb	r2, [r3, #0]
 800299a:	e09f      	b.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	3361      	adds	r3, #97	; 0x61
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d109      	bne.n	80029c4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	2202      	movs	r2, #2
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e08b      	b.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	212c      	movs	r1, #44	; 0x2c
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	3361      	adds	r3, #97	; 0x61
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d109      	bne.n	80029ec <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	212c      	movs	r1, #44	; 0x2c
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	3360      	adds	r3, #96	; 0x60
 80029e6:	2202      	movs	r2, #2
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	e077      	b.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	212c      	movs	r1, #44	; 0x2c
 80029f2:	fb01 f303 	mul.w	r3, r1, r3
 80029f6:	4413      	add	r3, r2
 80029f8:	3361      	adds	r3, #97	; 0x61
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	d109      	bne.n	8002a14 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3360      	adds	r3, #96	; 0x60
 8002a0e:	2205      	movs	r2, #5
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e063      	b.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3361      	adds	r3, #97	; 0x61
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	d009      	beq.n	8002a3c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3361      	adds	r3, #97	; 0x61
 8002a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d14f      	bne.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	212c      	movs	r1, #44	; 0x2c
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	335c      	adds	r3, #92	; 0x5c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	202c      	movs	r0, #44	; 0x2c
 8002a54:	fb00 f303 	mul.w	r3, r0, r3
 8002a58:	440b      	add	r3, r1
 8002a5a:	335c      	adds	r3, #92	; 0x5c
 8002a5c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	335c      	adds	r3, #92	; 0x5c
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d912      	bls.n	8002a98 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	212c      	movs	r1, #44	; 0x2c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	335c      	adds	r3, #92	; 0x5c
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3360      	adds	r3, #96	; 0x60
 8002a92:	2204      	movs	r2, #4
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e021      	b.n	8002adc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3360      	adds	r3, #96	; 0x60
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ac0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	015a      	lsls	r2, r3, #5
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae8:	461a      	mov	r2, r3
 8002aea:	2302      	movs	r3, #2
 8002aec:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b2d9      	uxtb	r1, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	202c      	movs	r0, #44	; 0x2c
 8002af8:	fb00 f303 	mul.w	r3, r0, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	3360      	adds	r3, #96	; 0x60
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f00a f8a5 	bl	800cc54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b0a:	bf00      	nop
 8002b0c:	3720      	adds	r7, #32
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b08a      	sub	sp, #40	; 0x28
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	0c5b      	lsrs	r3, r3, #17
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b46:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d004      	beq.n	8002b58 <HCD_RXQLVL_IRQHandler+0x46>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	f000 80a9 	beq.w	8002ca8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b56:	e0aa      	b.n	8002cae <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a6 	beq.w	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	212c      	movs	r1, #44	; 0x2c
 8002b66:	fb01 f303 	mul.w	r3, r1, r3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	3344      	adds	r3, #68	; 0x44
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 809b 	beq.w	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	3350      	adds	r3, #80	; 0x50
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	441a      	add	r2, r3
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	334c      	adds	r3, #76	; 0x4c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d87a      	bhi.n	8002c94 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	3344      	adds	r3, #68	; 0x44
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f004 f9d4 	bl	8006f64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	441a      	add	r2, r3
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	202c      	movs	r0, #44	; 0x2c
 8002bd6:	fb00 f303 	mul.w	r3, r0, r3
 8002bda:	440b      	add	r3, r1
 8002bdc:	3344      	adds	r3, #68	; 0x44
 8002bde:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3350      	adds	r3, #80	; 0x50
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	441a      	add	r2, r3
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	202c      	movs	r0, #44	; 0x2c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	440b      	add	r3, r1
 8002c00:	3350      	adds	r3, #80	; 0x50
 8002c02:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	0cdb      	lsrs	r3, r3, #19
 8002c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c18:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3340      	adds	r3, #64	; 0x40
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d13c      	bne.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d039      	beq.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c56:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	461a      	mov	r2, r3
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3354      	adds	r3, #84	; 0x54
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2d8      	uxtb	r0, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3354      	adds	r3, #84	; 0x54
 8002c8e:	4602      	mov	r2, r0
 8002c90:	701a      	strb	r2, [r3, #0]
      break;
 8002c92:	e00b      	b.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3360      	adds	r3, #96	; 0x60
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	701a      	strb	r2, [r3, #0]
      break;
 8002ca6:	e001      	b.n	8002cac <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ca8:	bf00      	nop
 8002caa:	e000      	b.n	8002cae <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cac:	bf00      	nop
  }
}
 8002cae:	bf00      	nop
 8002cb0:	3728      	adds	r7, #40	; 0x28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ce2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d10b      	bne.n	8002d06 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d102      	bne.n	8002cfe <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f009 ff8f 	bl	800cc1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f003 0308 	and.w	r3, r3, #8
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d132      	bne.n	8002d76 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d126      	bne.n	8002d70 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d113      	bne.n	8002d52 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d34:	d106      	bne.n	8002d44 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f004 fcaf 	bl	80076a0 <USB_InitFSLSPClkSel>
 8002d42:	e011      	b.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 fca8 	bl	80076a0 <USB_InitFSLSPClkSel>
 8002d50:	e00a      	b.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d106      	bne.n	8002d68 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d60:	461a      	mov	r2, r3
 8002d62:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d66:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f009 ff81 	bl	800cc70 <HAL_HCD_PortEnabled_Callback>
 8002d6e:	e002      	b.n	8002d76 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f009 ff8b 	bl	800cc8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b20      	cmp	r3, #32
 8002d7e:	d103      	bne.n	8002d88 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f043 0320 	orr.w	r3, r3, #32
 8002d86:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6013      	str	r3, [r2, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9e:	b08f      	sub	sp, #60	; 0x3c
 8002da0:	af0a      	add	r7, sp, #40	; 0x28
 8002da2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e116      	b.n	8002fdc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f009 faef 	bl	800c3ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f003 f870 	bl	8005ed2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	687e      	ldr	r6, [r7, #4]
 8002dfa:	466d      	mov	r5, sp
 8002dfc:	f106 0410 	add.w	r4, r6, #16
 8002e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e10:	1d33      	adds	r3, r6, #4
 8002e12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e14:	6838      	ldr	r0, [r7, #0]
 8002e16:	f002 ff47 	bl	8005ca8 <USB_CoreInit>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d7      	b.n	8002fdc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f003 f85e 	bl	8005ef4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e04a      	b.n	8002ed4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	333d      	adds	r3, #61	; 0x3d
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	333c      	adds	r3, #60	; 0x3c
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3344      	adds	r3, #68	; 0x44
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3340      	adds	r3, #64	; 0x40
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3348      	adds	r3, #72	; 0x48
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	334c      	adds	r3, #76	; 0x4c
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3354      	adds	r3, #84	; 0x54
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3af      	bcc.n	8002e3e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e044      	b.n	8002f6e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3b5      	bcc.n	8002ee4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	687e      	ldr	r6, [r7, #4]
 8002f80:	466d      	mov	r5, sp
 8002f82:	f106 0410 	add.w	r4, r6, #16
 8002f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f96:	1d33      	adds	r3, r6, #4
 8002f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f9a:	6838      	ldr	r0, [r7, #0]
 8002f9c:	f002 fff6 	bl	8005f8c <USB_DevInit>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e014      	b.n	8002fdc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f001 f974 	bl	80042b8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f004 f938 	bl	800724a <USB_DevDisconnect>

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_PCD_Start+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e020      	b.n	8003042 <HAL_PCD_Start+0x5e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	2b01      	cmp	r3, #1
 800300e:	d109      	bne.n	8003024 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003014:	2b01      	cmp	r3, #1
 8003016:	d005      	beq.n	8003024 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f002 ff41 	bl	8005eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f004 f8e8 	bl	8007208 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b08d      	sub	sp, #52	; 0x34
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 f9a6 	bl	80073b2 <USB_GetMode>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 84b7 	bne.w	80039dc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 f90a 	bl	800728c <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 84ad 	beq.w	80039da <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 f8f7 	bl	800728c <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d107      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f002 0202 	and.w	r2, r2, #2
 80030b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 f8e5 	bl	800728c <USB_ReadInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d161      	bne.n	8003190 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0210 	bic.w	r2, r2, #16
 80030da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	0c5b      	lsrs	r3, r3, #17
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	2b02      	cmp	r3, #2
 8003106:	d124      	bne.n	8003152 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d035      	beq.n	8003180 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6a38      	ldr	r0, [r7, #32]
 8003128:	f003 ff1c 	bl	8006f64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003138:	441a      	add	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314a:	441a      	add	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	621a      	str	r2, [r3, #32]
 8003150:	e016      	b.n	8003180 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	0c5b      	lsrs	r3, r3, #17
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	2b06      	cmp	r3, #6
 800315c:	d110      	bne.n	8003180 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003164:	2208      	movs	r2, #8
 8003166:	4619      	mov	r1, r3
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f003 fefb 	bl	8006f64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317a:	441a      	add	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0210 	orr.w	r2, r2, #16
 800318e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f004 f879 	bl	800728c <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031a4:	f040 80a7 	bne.w	80032f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 f87e 	bl	80072b2 <USB_ReadDevAllOutEpInterrupt>
 80031b6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031b8:	e099      	b.n	80032ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 808e 	beq.w	80032e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 f8a2 	bl	800731a <USB_ReadDevOutEPInterrupt>
 80031d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fed8 	bl	8003fac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	2308      	movs	r3, #8
 8003216:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 ffae 	bl	800417c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	2310      	movs	r3, #16
 800323a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d030      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324e:	2b80      	cmp	r3, #128	; 0x80
 8003250:	d109      	bne.n	8003266 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003264:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d108      	bne.n	8003296 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f009 f9a7 	bl	800c5e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2302      	movs	r3, #2
 80032a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	2320      	movs	r3, #32
 80032c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	3301      	adds	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f af62 	bne.w	80031ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 ffc6 	bl	800728c <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800330a:	f040 80db 	bne.w	80034c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 ffe7 	bl	80072e6 <USB_ReadDevAllInEpInterrupt>
 8003318:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800331e:	e0cd      	b.n	80034bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80c2 	beq.w	80034b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f004 f80d 	bl	8007356 <USB_ReadDevInEPInterrupt>
 800333c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d057      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2201      	movs	r2, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	69f9      	ldr	r1, [r7, #28]
 8003364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003368:	4013      	ands	r3, r2
 800336a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d132      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	334c      	adds	r3, #76	; 0x4c
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4403      	add	r3, r0
 80033a6:	3348      	adds	r3, #72	; 0x48
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4419      	add	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	334c      	adds	r3, #76	; 0x4c
 80033bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d113      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3354      	adds	r3, #84	; 0x54
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e4:	461a      	mov	r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	f004 f814 	bl	8007414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f009 f871 	bl	800c4da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800340e:	461a      	mov	r2, r3
 8003410:	2308      	movs	r3, #8
 8003412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2310      	movs	r3, #16
 800342e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003446:	461a      	mov	r2, r3
 8003448:	2340      	movs	r3, #64	; 0x40
 800344a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003458:	6a38      	ldr	r0, [r7, #32]
 800345a:	f002 fef5 	bl	8006248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800345e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3338      	adds	r3, #56	; 0x38
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	78db      	ldrb	r3, [r3, #3]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d108      	bne.n	800348c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f009 f8be 	bl	800c608 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	2302      	movs	r3, #2
 800349c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fcf0 	bl	8003e90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f47f af2e 	bne.w	8003320 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 fedf 	bl	800728c <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d8:	d122      	bne.n	8003520 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f009 fa26 	bl	800c954 <HAL_PCDEx_LPM_Callback>
 8003508:	e002      	b.n	8003510 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f009 f85c 	bl	800c5c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800351e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 feb1 	bl	800728c <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003534:	d112      	bne.n	800355c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 f818 	bl	800c57c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800355a:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f003 fe93 	bl	800728c <USB_ReadInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800356c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003570:	d121      	bne.n	80035b6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003580:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d111      	bne.n	80035b0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	f003 020f 	and.w	r2, r3, #15
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035a6:	2101      	movs	r1, #1
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f009 f9d3 	bl	800c954 <HAL_PCDEx_LPM_Callback>
 80035ae:	e002      	b.n	80035b6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f008 ffe3 	bl	800c57c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f003 fe66 	bl	800728c <USB_ReadInterrupts>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	f040 80b7 	bne.w	800373c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f023 0301 	bic.w	r3, r3, #1
 80035e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2110      	movs	r1, #16
 80035e8:	4618      	mov	r0, r3
 80035ea:	f002 fe2d 	bl	8006248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f2:	e046      	b.n	8003682 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003600:	461a      	mov	r2, r3
 8003602:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003606:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	69fa      	ldr	r2, [r7, #28]
 800361c:	440a      	add	r2, r1
 800361e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003626:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800363a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800365a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800367c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800367e:	3301      	adds	r3, #1
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d3b3      	bcc.n	80035f4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800369e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d016      	beq.n	80036d6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b8:	f043 030b 	orr.w	r3, r3, #11
 80036bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ce:	f043 030b 	orr.w	r3, r3, #11
 80036d2:	6453      	str	r3, [r2, #68]	; 0x44
 80036d4:	e015      	b.n	8003702 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036fc:	f043 030b 	orr.w	r3, r3, #11
 8003700:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69fa      	ldr	r2, [r7, #28]
 800370c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003710:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003714:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003726:	461a      	mov	r2, r3
 8003728:	f003 fe74 	bl	8007414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800373a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 fda3 	bl	800728c <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800374c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003750:	d124      	bne.n	800379c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fe39 	bl	80073ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f002 fdee 	bl	8006342 <USB_GetDevSpeed>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681c      	ldr	r4, [r3, #0]
 8003772:	f000 feab 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8003776:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	4620      	mov	r0, r4
 8003782:	f002 faf3 	bl	8005d6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f008 fecf 	bl	800c52a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800379a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fd73 	bl	800728c <USB_ReadInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d10a      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f008 feac 	bl	800c50e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695a      	ldr	r2, [r3, #20]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f002 0208 	and.w	r2, r2, #8
 80037c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fd5e 	bl	800728c <USB_ReadInterrupts>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b80      	cmp	r3, #128	; 0x80
 80037d8:	d122      	bne.n	8003820 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e6:	2301      	movs	r3, #1
 80037e8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ea:	e014      	b.n	8003816 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	b2db      	uxtb	r3, r3
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fb0f 	bl	8003e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	3301      	adds	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381c:	429a      	cmp	r2, r3
 800381e:	d3e5      	bcc.n	80037ec <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f003 fd31 	bl	800728c <USB_ReadInterrupts>
 800382a:	4603      	mov	r3, r0
 800382c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003834:	d13b      	bne.n	80038ae <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003836:	2301      	movs	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
 800383a:	e02b      	b.n	8003894 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3340      	adds	r3, #64	; 0x40
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d115      	bne.n	800388e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003862:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	da12      	bge.n	800388e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386c:	4613      	mov	r3, r2
 800386e:	00db      	lsls	r3, r3, #3
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	333f      	adds	r3, #63	; 0x3f
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003884:	b2db      	uxtb	r3, r3
 8003886:	4619      	mov	r1, r3
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fad0 	bl	8003e2e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	3301      	adds	r3, #1
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	429a      	cmp	r2, r3
 800389c:	d3ce      	bcc.n	800383c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f003 fcea 	bl	800728c <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038c2:	d155      	bne.n	8003970 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c4:	2301      	movs	r3, #1
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	e045      	b.n	8003956 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d12e      	bne.n	8003950 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da2b      	bge.n	8003950 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003904:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003908:	429a      	cmp	r2, r3
 800390a:	d121      	bne.n	8003950 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800391e:	2201      	movs	r2, #1
 8003920:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800392e:	6a3b      	ldr	r3, [r7, #32]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800394c:	6053      	str	r3, [r2, #4]
            break;
 800394e:	e007      	b.n	8003960 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	3301      	adds	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395c:	429a      	cmp	r2, r3
 800395e:	d3b4      	bcc.n	80038ca <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 fc89 	bl	800728c <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003984:	d10a      	bne.n	800399c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f008 fe50 	bl	800c62c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fc73 	bl	800728c <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d115      	bne.n	80039dc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f008 fe40 	bl	800c648 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	e000      	b.n	80039dc <HAL_PCD_IRQHandler+0x992>
      return;
 80039da:	bf00      	nop
    }
  }
}
 80039dc:	3734      	adds	r7, #52	; 0x34
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}

080039e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_PCD_SetAddress+0x1a>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e013      	b.n	8003a24 <HAL_PCD_SetAddress+0x42>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f003 fbd1 	bl	80071bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	70fb      	strb	r3, [r7, #3]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	803b      	strh	r3, [r7, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	da0f      	bge.n	8003a72 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	3338      	adds	r3, #56	; 0x38
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	705a      	strb	r2, [r3, #1]
 8003a70:	e00f      	b.n	8003a92 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	4613      	mov	r3, r2
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a9e:	883a      	ldrh	r2, [r7, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	78ba      	ldrb	r2, [r7, #2]
 8003aa8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003abc:	78bb      	ldrb	r3, [r7, #2]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d102      	bne.n	8003ac8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d101      	bne.n	8003ad6 <HAL_PCD_EP_Open+0xaa>
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e00e      	b.n	8003af4 <HAL_PCD_EP_Open+0xc8>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68f9      	ldr	r1, [r7, #12]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fc51 	bl	800638c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003af2:	7afb      	ldrb	r3, [r7, #11]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	da0f      	bge.n	8003b30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3338      	adds	r3, #56	; 0x38
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	705a      	strb	r2, [r3, #1]
 8003b2e:	e00f      	b.n	8003b50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b50:	78fb      	ldrb	r3, [r7, #3]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_PCD_EP_Close+0x6e>
 8003b66:	2302      	movs	r3, #2
 8003b68:	e00e      	b.n	8003b88 <HAL_PCD_EP_Close+0x8c>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 fc8f 	bl	800649c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	f003 020f 	and.w	r2, r3, #15
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bec:	7afb      	ldrb	r3, [r7, #11]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	6979      	ldr	r1, [r7, #20]
 8003c04:	f002 ff6e 	bl	8006ae4 <USB_EP0StartXfer>
 8003c08:	e008      	b.n	8003c1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6979      	ldr	r1, [r7, #20]
 8003c18:	f002 fd1c 	bl	8006654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b086      	sub	sp, #24
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	460b      	mov	r3, r1
 8003c34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	3338      	adds	r3, #56	; 0x38
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2201      	movs	r2, #1
 8003c64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	461a      	mov	r2, r3
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	f002 ff24 	bl	8006ae4 <USB_EP0StartXfer>
 8003c9c:	e008      	b.n	8003cb0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	6979      	ldr	r1, [r7, #20]
 8003cac:	f002 fcd2 	bl	8006654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	f003 020f 	and.w	r2, r3, #15
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d901      	bls.n	8003cd8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e050      	b.n	8003d7a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da0f      	bge.n	8003d00 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	3338      	adds	r3, #56	; 0x38
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	705a      	strb	r2, [r3, #1]
 8003cfe:	e00d      	b.n	8003d1c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	4613      	mov	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4413      	add	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	3304      	adds	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d101      	bne.n	8003d3c <HAL_PCD_EP_SetStall+0x82>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e01e      	b.n	8003d7a <HAL_PCD_EP_SetStall+0xc0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68f9      	ldr	r1, [r7, #12]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 f962 	bl	8007014 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10a      	bne.n	8003d70 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6818      	ldr	r0, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	b2d9      	uxtb	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f003 fb52 	bl	8007414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 020f 	and.w	r2, r3, #15
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d901      	bls.n	8003da0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e042      	b.n	8003e26 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	da0f      	bge.n	8003dc8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da8:	78fb      	ldrb	r3, [r7, #3]
 8003daa:	f003 020f 	and.w	r2, r3, #15
 8003dae:	4613      	mov	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	4413      	add	r3, r2
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	705a      	strb	r2, [r3, #1]
 8003dc6:	e00f      	b.n	8003de8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4413      	add	r3, r2
 8003dde:	3304      	adds	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_PCD_EP_ClrStall+0x86>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e00e      	b.n	8003e26 <HAL_PCD_EP_ClrStall+0xa4>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 f96a 	bl	80070f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	460b      	mov	r3, r1
 8003e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	da0c      	bge.n	8003e5c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	3338      	adds	r3, #56	; 0x38
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	3304      	adds	r3, #4
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	e00c      	b.n	8003e76 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68f9      	ldr	r1, [r7, #12]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 ff89 	bl	8006d94 <USB_EPStopXfer>
 8003e82:	4603      	mov	r3, r0
 8003e84:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e86:	7afb      	ldrb	r3, [r7, #11]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	3338      	adds	r3, #56	; 0x38
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d901      	bls.n	8003ec8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e06c      	b.n	8003fa2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d902      	bls.n	8003ee4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	3303      	adds	r3, #3
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eec:	e02b      	b.n	8003f46 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d902      	bls.n	8003f0a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3303      	adds	r3, #3
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6919      	ldr	r1, [r3, #16]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4603      	mov	r3, r0
 8003f28:	6978      	ldr	r0, [r7, #20]
 8003f2a:	f002 ffdd 	bl	8006ee8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	441a      	add	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6a1a      	ldr	r2, [r3, #32]
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	441a      	add	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d809      	bhi.n	8003f70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d203      	bcs.n	8003f70 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1be      	bne.n	8003eee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d811      	bhi.n	8003fa0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	2201      	movs	r2, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	6939      	ldr	r1, [r7, #16]
 8003f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3720      	adds	r7, #32
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	333c      	adds	r3, #60	; 0x3c
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d17b      	bne.n	80040da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0308 	and.w	r3, r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	4a61      	ldr	r2, [pc, #388]	; (8004174 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	f240 80b9 	bls.w	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 80b3 	beq.w	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004014:	6093      	str	r3, [r2, #8]
 8004016:	e0a7      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	4413      	add	r3, r2
 800402a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402e:	461a      	mov	r2, r3
 8004030:	2320      	movs	r3, #32
 8004032:	6093      	str	r3, [r2, #8]
 8004034:	e098      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	f040 8093 	bne.w	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90f      	bls.n	800406a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	461a      	mov	r2, r3
 8004062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004066:	6093      	str	r3, [r2, #8]
 8004068:	e07e      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	3304      	adds	r3, #4
 800407e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	0159      	lsls	r1, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	440b      	add	r3, r1
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	1ad2      	subs	r2, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d114      	bne.n	80040cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040b4:	461a      	mov	r2, r3
 80040b6:	2101      	movs	r1, #1
 80040b8:	f003 f9ac 	bl	8007414 <USB_EP0_OutStart>
 80040bc:	e006      	b.n	80040cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	4619      	mov	r1, r3
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f008 f9e6 	bl	800c4a4 <HAL_PCD_DataOutStageCallback>
 80040d8:	e046      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	4a26      	ldr	r2, [pc, #152]	; (8004178 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d124      	bne.n	800412c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f8:	461a      	mov	r2, r3
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	6093      	str	r3, [r2, #8]
 8004100:	e032      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	461a      	mov	r2, r3
 800411a:	2320      	movs	r3, #32
 800411c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	4619      	mov	r1, r3
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f008 f9bd 	bl	800c4a4 <HAL_PCD_DataOutStageCallback>
 800412a:	e01d      	b.n	8004168 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d114      	bne.n	800415c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	4613      	mov	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	440b      	add	r3, r1
 8004140:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d108      	bne.n	800415c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004154:	461a      	mov	r2, r3
 8004156:	2100      	movs	r1, #0
 8004158:	f003 f95c 	bl	8007414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	4619      	mov	r1, r3
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f008 f99e 	bl	800c4a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3720      	adds	r7, #32
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	4f54300a 	.word	0x4f54300a
 8004178:	4f54310a 	.word	0x4f54310a

0800417c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	333c      	adds	r3, #60	; 0x3c
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d90e      	bls.n	80041d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f008 f955 	bl	800c480 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a0a      	ldr	r2, [pc, #40]	; (8004204 <PCD_EP_OutSetupPacket_int+0x88>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d90c      	bls.n	80041f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041f0:	461a      	mov	r2, r3
 80041f2:	2101      	movs	r1, #1
 80041f4:	f003 f90e 	bl	8007414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	4f54300a 	.word	0x4f54300a

08004208 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
 8004214:	4613      	mov	r3, r2
 8004216:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d107      	bne.n	8004236 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004226:	883b      	ldrh	r3, [r7, #0]
 8004228:	0419      	lsls	r1, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	430a      	orrs	r2, r1
 8004232:	629a      	str	r2, [r3, #40]	; 0x28
 8004234:	e028      	b.n	8004288 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423c:	0c1b      	lsrs	r3, r3, #16
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4413      	add	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e00d      	b.n	8004266 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	3340      	adds	r3, #64	; 0x40
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	4413      	add	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	3301      	adds	r3, #1
 8004264:	73fb      	strb	r3, [r7, #15]
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	3b01      	subs	r3, #1
 800426c:	429a      	cmp	r2, r3
 800426e:	d3ec      	bcc.n	800424a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004270:	883b      	ldrh	r3, [r7, #0]
 8004272:	0418      	lsls	r0, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	3b01      	subs	r3, #1
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	4302      	orrs	r2, r0
 8004280:	3340      	adds	r3, #64	; 0x40
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	460b      	mov	r3, r1
 80042a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	f043 0303 	orr.w	r3, r3, #3
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0cc      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d90c      	bls.n	800433c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004322:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a52      	ldr	r2, [pc, #328]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d044      	beq.n	8004420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d119      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e06f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ce:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e067      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043de:	4b37      	ldr	r3, [pc, #220]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4934      	ldr	r1, [pc, #208]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f0:	f7fc fd90 	bl	8000f14 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f6:	e00a      	b.n	800440e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f8:	f7fc fd8c 	bl	8000f14 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e04f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	4b2b      	ldr	r3, [pc, #172]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 020c 	and.w	r2, r3, #12
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	429a      	cmp	r2, r3
 800441e:	d1eb      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004420:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d20c      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	b2d2      	uxtb	r2, r2
 8004434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004486:	f000 fb7f 	bl	8004b88 <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_ClockConfig+0x1c8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc fcf0 	bl	8000e8c <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023c00 	.word	0x40023c00
 80044bc:	40023800 	.word	0x40023800
 80044c0:	0800da8c 	.word	0x0800da8c
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004

080044cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000

080044e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044e8:	f7ff fff0 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a9b      	lsrs	r3, r3, #10
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4903      	ldr	r1, [pc, #12]	; (8004508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40023800 	.word	0x40023800
 8004508:	0800da9c 	.word	0x0800da9c

0800450c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004510:	f7ff ffdc 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0b5b      	lsrs	r3, r3, #13
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	0800da9c 	.word	0x0800da9c

08004534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d010      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800456e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004572:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	496c      	ldr	r1, [pc, #432]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800459a:	4b64      	ldr	r3, [pc, #400]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	4960      	ldr	r1, [pc, #384]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80045b8:	2301      	movs	r3, #1
 80045ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d017      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c8:	4b58      	ldr	r3, [pc, #352]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	4955      	ldr	r1, [pc, #340]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045e6:	d101      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80045e8:	2301      	movs	r3, #1
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80045f4:	2301      	movs	r3, #1
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d017      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004604:	4b49      	ldr	r3, [pc, #292]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	4946      	ldr	r1, [pc, #280]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004622:	d101      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004624:	2301      	movs	r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004630:	2301      	movs	r3, #1
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0320 	and.w	r3, r3, #32
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 808a 	beq.w	8004756 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	4a38      	ldr	r2, [pc, #224]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800464c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004650:	6413      	str	r3, [r2, #64]	; 0x40
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	60bb      	str	r3, [r7, #8]
 800465c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800465e:	4b34      	ldr	r3, [pc, #208]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a33      	ldr	r2, [pc, #204]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004668:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800466a:	f7fc fc53 	bl	8000f14 <HAL_GetTick>
 800466e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004670:	e008      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004672:	f7fc fc4f 	bl	8000f14 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e278      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0f0      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004690:	4b26      	ldr	r3, [pc, #152]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004698:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02f      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a8:	6a3a      	ldr	r2, [r7, #32]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d028      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ae:	4b1f      	ldr	r3, [pc, #124]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b8:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046c4:	4a19      	ldr	r2, [pc, #100]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046c6:	6a3b      	ldr	r3, [r7, #32]
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d114      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046d6:	f7fc fc1d 	bl	8000f14 <HAL_GetTick>
 80046da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fc fc19 	bl	8000f14 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e240      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ee      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470c:	d114      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800471e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004722:	4902      	ldr	r1, [pc, #8]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	608b      	str	r3, [r1, #8]
 8004728:	e00c      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470e40 	.word	0x42470e40
 8004738:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a49      	ldr	r2, [pc, #292]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800473e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004742:	6093      	str	r3, [r2, #8]
 8004744:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004746:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004750:	4944      	ldr	r1, [pc, #272]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004752:	4313      	orrs	r3, r2
 8004754:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d004      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004768:	4b3f      	ldr	r3, [pc, #252]	; (8004868 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800476a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00a      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004778:	4b3a      	ldr	r3, [pc, #232]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004786:	4937      	ldr	r1, [pc, #220]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d00a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800479a:	4b32      	ldr	r3, [pc, #200]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800479c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	492e      	ldr	r1, [pc, #184]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d011      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047bc:	4b29      	ldr	r3, [pc, #164]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ca:	4926      	ldr	r1, [pc, #152]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047da:	d101      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80047dc:	2301      	movs	r3, #1
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80047ec:	4b1d      	ldr	r3, [pc, #116]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fa:	491a      	ldr	r1, [pc, #104]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480a:	2b00      	cmp	r3, #0
 800480c:	d011      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004814:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800481c:	4911      	ldr	r1, [pc, #68]	; (8004864 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482c:	d101      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800482e:	2301      	movs	r3, #1
 8004830:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d005      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004840:	f040 80ff 	bne.w	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800484a:	f7fc fb63 	bl	8000f14 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004850:	e00e      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004852:	f7fc fb5f 	bl	8000f14 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d907      	bls.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e188      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004864:	40023800 	.word	0x40023800
 8004868:	424711e0 	.word	0x424711e0
 800486c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004870:	4b7e      	ldr	r3, [pc, #504]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004898:	2b00      	cmp	r3, #0
 800489a:	d028      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d124      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80048a4:	4b71      	ldr	r3, [pc, #452]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	3301      	adds	r3, #1
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b6:	4b6d      	ldr	r3, [pc, #436]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	019b      	lsls	r3, r3, #6
 80048ce:	431a      	orrs	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	3b01      	subs	r3, #1
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4961      	ldr	r1, [pc, #388]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800490c:	2b00      	cmp	r3, #0
 800490e:	d035      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d130      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800491a:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	3301      	adds	r3, #1
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800492c:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	019b      	lsls	r3, r3, #6
 8004944:	431a      	orrs	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	085b      	lsrs	r3, r3, #1
 800494a:	3b01      	subs	r3, #1
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	061b      	lsls	r3, r3, #24
 8004956:	431a      	orrs	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	071b      	lsls	r3, r3, #28
 800495c:	4943      	ldr	r1, [pc, #268]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004964:	4b41      	ldr	r3, [pc, #260]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496a:	f023 021f 	bic.w	r2, r3, #31
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	493d      	ldr	r1, [pc, #244]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d029      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004990:	d124      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004992:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	3301      	adds	r3, #1
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049aa:	0f1b      	lsrs	r3, r3, #28
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	019b      	lsls	r3, r3, #6
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	431a      	orrs	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	061b      	lsls	r3, r3, #24
 80049ce:	431a      	orrs	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4925      	ldr	r1, [pc, #148]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d016      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	019b      	lsls	r3, r3, #6
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	3b01      	subs	r3, #1
 80049fc:	041b      	lsls	r3, r3, #16
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	061b      	lsls	r3, r3, #24
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	071b      	lsls	r3, r3, #28
 8004a0e:	4917      	ldr	r1, [pc, #92]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a1c:	f7fc fa7a 	bl	8000f14 <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a24:	f7fc fa76 	bl	8000f14 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e09f      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a36:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	f040 8095 	bne.w	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a4a:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a50:	f7fc fa60 	bl	8000f14 <HAL_GetTick>
 8004a54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a56:	e00f      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004a58:	f7fc fa5c 	bl	8000f14 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d908      	bls.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e085      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004a6a:	bf00      	nop
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	42470068 	.word	0x42470068
 8004a74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a78:	4b41      	ldr	r3, [pc, #260]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a84:	d0e8      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d009      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d02b      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d127      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004aae:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	3301      	adds	r3, #1
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	019b      	lsls	r3, r3, #6
 8004aca:	431a      	orrs	r2, r3
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	085b      	lsrs	r3, r3, #1
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	4928      	ldr	r1, [pc, #160]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ae4:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	3b01      	subs	r3, #1
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	4922      	ldr	r1, [pc, #136]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d01d      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b12:	d118      	bne.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1a:	0e1b      	lsrs	r3, r3, #24
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	019b      	lsls	r3, r3, #6
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	3b01      	subs	r3, #1
 8004b36:	041b      	lsls	r3, r3, #16
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	061b      	lsls	r3, r3, #24
 8004b3e:	4910      	ldr	r1, [pc, #64]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4c:	f7fc f9e2 	bl	8000f14 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b54:	f7fc f9de 	bl	8000f14 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e007      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b66:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b72:	d1ef      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3730      	adds	r7, #48	; 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	42470070 	.word	0x42470070

08004b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b8c:	b0ae      	sub	sp, #184	; 0xb8
 8004b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bae:	4bcb      	ldr	r3, [pc, #812]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	f200 8206 	bhi.w	8004fc8 <HAL_RCC_GetSysClockFreq+0x440>
 8004bbc:	a201      	add	r2, pc, #4	; (adr r2, 8004bc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004bf9 	.word	0x08004bf9
 8004bc8:	08004fc9 	.word	0x08004fc9
 8004bcc:	08004fc9 	.word	0x08004fc9
 8004bd0:	08004fc9 	.word	0x08004fc9
 8004bd4:	08004c01 	.word	0x08004c01
 8004bd8:	08004fc9 	.word	0x08004fc9
 8004bdc:	08004fc9 	.word	0x08004fc9
 8004be0:	08004fc9 	.word	0x08004fc9
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004fc9 	.word	0x08004fc9
 8004bec:	08004fc9 	.word	0x08004fc9
 8004bf0:	08004fc9 	.word	0x08004fc9
 8004bf4:	08004df9 	.word	0x08004df9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4bb9      	ldr	r3, [pc, #740]	; (8004ee0 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004bfe:	e1e7      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c00:	4bb8      	ldr	r3, [pc, #736]	; (8004ee4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004c06:	e1e3      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4bb4      	ldr	r3, [pc, #720]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c14:	4bb1      	ldr	r3, [pc, #708]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d071      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c20:	4bae      	ldr	r3, [pc, #696]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	099b      	lsrs	r3, r3, #6
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c38:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f04f 0000 	mov.w	r0, #0
 8004c4e:	f04f 0100 	mov.w	r1, #0
 8004c52:	0159      	lsls	r1, r3, #5
 8004c54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c58:	0150      	lsls	r0, r2, #5
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4621      	mov	r1, r4
 8004c60:	1a51      	subs	r1, r2, r1
 8004c62:	6439      	str	r1, [r7, #64]	; 0x40
 8004c64:	4629      	mov	r1, r5
 8004c66:	eb63 0301 	sbc.w	r3, r3, r1
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004c78:	4649      	mov	r1, r9
 8004c7a:	018b      	lsls	r3, r1, #6
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c82:	4641      	mov	r1, r8
 8004c84:	018a      	lsls	r2, r1, #6
 8004c86:	4641      	mov	r1, r8
 8004c88:	1a51      	subs	r1, r2, r1
 8004c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c8c:	4649      	mov	r1, r9
 8004c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	f04f 0300 	mov.w	r3, #0
 8004c9c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004ca0:	4649      	mov	r1, r9
 8004ca2:	00cb      	lsls	r3, r1, #3
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004caa:	4641      	mov	r1, r8
 8004cac:	00ca      	lsls	r2, r1, #3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4622      	mov	r2, r4
 8004cb6:	189b      	adds	r3, r3, r2
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cba:	462b      	mov	r3, r5
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	eb42 0303 	adc.w	r3, r2, r3
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004cd0:	4629      	mov	r1, r5
 8004cd2:	024b      	lsls	r3, r1, #9
 8004cd4:	4621      	mov	r1, r4
 8004cd6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cda:	4621      	mov	r1, r4
 8004cdc:	024a      	lsls	r2, r1, #9
 8004cde:	4610      	mov	r0, r2
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004cf4:	f7fb fadc 	bl	80002b0 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d02:	e067      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d10:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d1e:	2300      	movs	r3, #0
 8004d20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d22:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	f04f 0000 	mov.w	r0, #0
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d38:	0150      	lsls	r0, r2, #5
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4621      	mov	r1, r4
 8004d40:	1a51      	subs	r1, r2, r1
 8004d42:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d44:	4629      	mov	r1, r5
 8004d46:	eb63 0301 	sbc.w	r3, r3, r1
 8004d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004d58:	4649      	mov	r1, r9
 8004d5a:	018b      	lsls	r3, r1, #6
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d62:	4641      	mov	r1, r8
 8004d64:	018a      	lsls	r2, r1, #6
 8004d66:	4641      	mov	r1, r8
 8004d68:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	f04f 0300 	mov.w	r3, #0
 8004d7a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d7e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d86:	4692      	mov	sl, r2
 8004d88:	469b      	mov	fp, r3
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	eb1a 0303 	adds.w	r3, sl, r3
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	462b      	mov	r3, r5
 8004d94:	eb4b 0303 	adc.w	r3, fp, r3
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004da6:	4629      	mov	r1, r5
 8004da8:	028b      	lsls	r3, r1, #10
 8004daa:	4621      	mov	r1, r4
 8004dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004db0:	4621      	mov	r1, r4
 8004db2:	028a      	lsls	r2, r1, #10
 8004db4:	4610      	mov	r0, r2
 8004db6:	4619      	mov	r1, r3
 8004db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8004dc2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004dc6:	f7fb fa73 	bl	80002b0 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4613      	mov	r3, r2
 8004dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd4:	4b41      	ldr	r3, [pc, #260]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	0c1b      	lsrs	r3, r3, #16
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	3301      	adds	r3, #1
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004de6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004dea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004df6:	e0eb      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004df8:	4b38      	ldr	r3, [pc, #224]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d06b      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e10:	4b32      	ldr	r3, [pc, #200]	; (8004edc <HAL_RCC_GetSysClockFreq+0x354>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	099b      	lsrs	r3, r3, #6
 8004e16:	2200      	movs	r2, #0
 8004e18:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	663b      	str	r3, [r7, #96]	; 0x60
 8004e24:	2300      	movs	r3, #0
 8004e26:	667b      	str	r3, [r7, #100]	; 0x64
 8004e28:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	462b      	mov	r3, r5
 8004e30:	f04f 0000 	mov.w	r0, #0
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	0159      	lsls	r1, r3, #5
 8004e3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e3e:	0150      	lsls	r0, r2, #5
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	4621      	mov	r1, r4
 8004e46:	1a51      	subs	r1, r2, r1
 8004e48:	61b9      	str	r1, [r7, #24]
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004e5e:	4659      	mov	r1, fp
 8004e60:	018b      	lsls	r3, r1, #6
 8004e62:	4651      	mov	r1, sl
 8004e64:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e68:	4651      	mov	r1, sl
 8004e6a:	018a      	lsls	r2, r1, #6
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ebb2 0801 	subs.w	r8, r2, r1
 8004e72:	4659      	mov	r1, fp
 8004e74:	eb63 0901 	sbc.w	r9, r3, r1
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e88:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8c:	4690      	mov	r8, r2
 8004e8e:	4699      	mov	r9, r3
 8004e90:	4623      	mov	r3, r4
 8004e92:	eb18 0303 	adds.w	r3, r8, r3
 8004e96:	613b      	str	r3, [r7, #16]
 8004e98:	462b      	mov	r3, r5
 8004e9a:	eb49 0303 	adc.w	r3, r9, r3
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004eac:	4629      	mov	r1, r5
 8004eae:	024b      	lsls	r3, r1, #9
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004eb6:	4621      	mov	r1, r4
 8004eb8:	024a      	lsls	r2, r1, #9
 8004eba:	4610      	mov	r0, r2
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004ec8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ecc:	f7fb f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004eda:	e065      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x420>
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	099b      	lsrs	r3, r3, #6
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8004efa:	2300      	movs	r3, #0
 8004efc:	657b      	str	r3, [r7, #84]	; 0x54
 8004efe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004f02:	4642      	mov	r2, r8
 8004f04:	464b      	mov	r3, r9
 8004f06:	f04f 0000 	mov.w	r0, #0
 8004f0a:	f04f 0100 	mov.w	r1, #0
 8004f0e:	0159      	lsls	r1, r3, #5
 8004f10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f14:	0150      	lsls	r0, r2, #5
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1a51      	subs	r1, r2, r1
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	4649      	mov	r1, r9
 8004f22:	eb63 0301 	sbc.w	r3, r3, r1
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004f34:	4659      	mov	r1, fp
 8004f36:	018b      	lsls	r3, r1, #6
 8004f38:	4651      	mov	r1, sl
 8004f3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f3e:	4651      	mov	r1, sl
 8004f40:	018a      	lsls	r2, r1, #6
 8004f42:	4651      	mov	r1, sl
 8004f44:	1a54      	subs	r4, r2, r1
 8004f46:	4659      	mov	r1, fp
 8004f48:	eb63 0501 	sbc.w	r5, r3, r1
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb45 0303 	adc.w	r3, r5, r3
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f90:	2200      	movs	r2, #0
 8004f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f94:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004f96:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f9a:	f7fb f989 	bl	80002b0 <__aeabi_uldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0x458>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0f1b      	lsrs	r3, r3, #28
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fc6:	e003      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004fca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	37b8      	adds	r7, #184	; 0xb8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fde:	bf00      	nop
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	00f42400 	.word	0x00f42400

08004fe8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e28d      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 8083 	beq.w	800510e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005008:	4b94      	ldr	r3, [pc, #592]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b04      	cmp	r3, #4
 8005012:	d019      	beq.n	8005048 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005014:	4b91      	ldr	r3, [pc, #580]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800501c:	2b08      	cmp	r3, #8
 800501e:	d106      	bne.n	800502e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005020:	4b8e      	ldr	r3, [pc, #568]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005028:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800502c:	d00c      	beq.n	8005048 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502e:	4b8b      	ldr	r3, [pc, #556]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005036:	2b0c      	cmp	r3, #12
 8005038:	d112      	bne.n	8005060 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800503a:	4b88      	ldr	r3, [pc, #544]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005042:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005046:	d10b      	bne.n	8005060 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005048:	4b84      	ldr	r3, [pc, #528]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d05b      	beq.n	800510c <HAL_RCC_OscConfig+0x124>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d157      	bne.n	800510c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e25a      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005068:	d106      	bne.n	8005078 <HAL_RCC_OscConfig+0x90>
 800506a:	4b7c      	ldr	r3, [pc, #496]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a7b      	ldr	r2, [pc, #492]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e01d      	b.n	80050b4 <HAL_RCC_OscConfig+0xcc>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005080:	d10c      	bne.n	800509c <HAL_RCC_OscConfig+0xb4>
 8005082:	4b76      	ldr	r3, [pc, #472]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	4b73      	ldr	r3, [pc, #460]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a72      	ldr	r2, [pc, #456]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	6013      	str	r3, [r2, #0]
 800509a:	e00b      	b.n	80050b4 <HAL_RCC_OscConfig+0xcc>
 800509c:	4b6f      	ldr	r3, [pc, #444]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6e      	ldr	r2, [pc, #440]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80050a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	4b6c      	ldr	r3, [pc, #432]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6b      	ldr	r2, [pc, #428]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80050ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d013      	beq.n	80050e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fb ff2a 	bl	8000f14 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c4:	f7fb ff26 	bl	8000f14 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b64      	cmp	r3, #100	; 0x64
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e21f      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d6:	4b61      	ldr	r3, [pc, #388]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0xdc>
 80050e2:	e014      	b.n	800510e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fb ff16 	bl	8000f14 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050ec:	f7fb ff12 	bl	8000f14 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b64      	cmp	r3, #100	; 0x64
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e20b      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fe:	4b57      	ldr	r3, [pc, #348]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x104>
 800510a:	e000      	b.n	800510e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800510c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d06f      	beq.n	80051fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800511a:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b00      	cmp	r3, #0
 8005124:	d017      	beq.n	8005156 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005126:	4b4d      	ldr	r3, [pc, #308]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800512e:	2b08      	cmp	r3, #8
 8005130:	d105      	bne.n	800513e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005132:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b47      	ldr	r3, [pc, #284]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005146:	2b0c      	cmp	r3, #12
 8005148:	d11c      	bne.n	8005184 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b44      	ldr	r3, [pc, #272]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x186>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1d3      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4937      	ldr	r1, [pc, #220]	; (800525c <HAL_RCC_OscConfig+0x274>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	e03a      	b.n	80051fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <HAL_RCC_OscConfig+0x278>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fb febf 	bl	8000f14 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519a:	f7fb febb 	bl	8000f14 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e1b4      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4925      	ldr	r1, [pc, #148]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	e015      	b.n	80051fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_OscConfig+0x278>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fb fe9e 	bl	8000f14 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fb fe9a 	bl	8000f14 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e193      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	4b1b      	ldr	r3, [pc, #108]	; (800525c <HAL_RCC_OscConfig+0x274>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4b15      	ldr	r3, [pc, #84]	; (8005264 <HAL_RCC_OscConfig+0x27c>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fb fe7e 	bl	8000f14 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800521c:	f7fb fe7a 	bl	8000f14 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e173      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <HAL_RCC_OscConfig+0x274>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x234>
 800523a:	e01b      	b.n	8005274 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_OscConfig+0x27c>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005242:	f7fb fe67 	bl	8000f14 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800524a:	f7fb fe63 	bl	8000f14 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e15c      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
 800525c:	40023800 	.word	0x40023800
 8005260:	42470000 	.word	0x42470000
 8005264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	4b8a      	ldr	r3, [pc, #552]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800526a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8097 	beq.w	80053b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005286:	4b83      	ldr	r3, [pc, #524]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10f      	bne.n	80052b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	4b7f      	ldr	r3, [pc, #508]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a7e      	ldr	r2, [pc, #504]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b7c      	ldr	r3, [pc, #496]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b2:	4b79      	ldr	r3, [pc, #484]	; (8005498 <HAL_RCC_OscConfig+0x4b0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d118      	bne.n	80052f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052be:	4b76      	ldr	r3, [pc, #472]	; (8005498 <HAL_RCC_OscConfig+0x4b0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a75      	ldr	r2, [pc, #468]	; (8005498 <HAL_RCC_OscConfig+0x4b0>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ca:	f7fb fe23 	bl	8000f14 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fb fe1f 	bl	8000f14 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e118      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	4b6c      	ldr	r3, [pc, #432]	; (8005498 <HAL_RCC_OscConfig+0x4b0>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x31e>
 80052f8:	4b66      	ldr	r3, [pc, #408]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a65      	ldr	r2, [pc, #404]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
 8005304:	e01c      	b.n	8005340 <HAL_RCC_OscConfig+0x358>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x340>
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a60      	ldr	r2, [pc, #384]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
 800531a:	4b5e      	ldr	r3, [pc, #376]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	4a5d      	ldr	r2, [pc, #372]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6713      	str	r3, [r2, #112]	; 0x70
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x358>
 8005328:	4b5a      	ldr	r3, [pc, #360]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	4a59      	ldr	r2, [pc, #356]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	; 0x70
 8005334:	4b57      	ldr	r3, [pc, #348]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005338:	4a56      	ldr	r2, [pc, #344]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fb fde4 	bl	8000f14 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fb fde0 	bl	8000f14 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	; 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0d7      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	4b4b      	ldr	r3, [pc, #300]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ee      	beq.n	8005350 <HAL_RCC_OscConfig+0x368>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005374:	f7fb fdce 	bl	8000f14 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fb fdca 	bl	8000f14 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	; 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0c1      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005392:	4b40      	ldr	r3, [pc, #256]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ee      	bne.n	800537c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a4:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	4a3a      	ldr	r2, [pc, #232]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80ad 	beq.w	8005514 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ba:	4b36      	ldr	r3, [pc, #216]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d060      	beq.n	8005488 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d145      	bne.n	800545a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_RCC_OscConfig+0x4b4>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d4:	f7fb fd9e 	bl	8000f14 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fb fd9a 	bl	8000f14 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e093      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b29      	ldr	r3, [pc, #164]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	3b01      	subs	r3, #1
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	071b      	lsls	r3, r3, #28
 8005426:	491b      	ldr	r1, [pc, #108]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x4b4>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fb fd6f 	bl	8000f14 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543a:	f7fb fd6b 	bl	8000f14 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e064      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	4b11      	ldr	r3, [pc, #68]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x452>
 8005458:	e05c      	b.n	8005514 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_OscConfig+0x4b4>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fb fd58 	bl	8000f14 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005468:	f7fb fd54 	bl	8000f14 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e04d      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_RCC_OscConfig+0x4ac>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x480>
 8005486:	e045      	b.n	8005514 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e040      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
 8005494:	40023800 	.word	0x40023800
 8005498:	40007000 	.word	0x40007000
 800549c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054a0:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <HAL_RCC_OscConfig+0x538>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d030      	beq.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d129      	bne.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d122      	bne.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054d0:	4013      	ands	r3, r2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d8:	4293      	cmp	r3, r2
 80054da:	d119      	bne.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	085b      	lsrs	r3, r3, #1
 80054e8:	3b01      	subs	r3, #1
 80054ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d10f      	bne.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800550c:	429a      	cmp	r2, r3
 800550e:	d001      	beq.n	8005514 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	e000      	b.n	8005516 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800

08005524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e03f      	b.n	80055b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fb7c 	bl	8000c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2224      	movs	r2, #36	; 0x24
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 f929 	bl	80057c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800557c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695a      	ldr	r2, [r3, #20]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800558c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800559c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af02      	add	r7, sp, #8
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d17c      	bne.n	80056d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_UART_Transmit+0x2c>
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e075      	b.n	80056da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_UART_Transmit+0x3e>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e06e      	b.n	80056da <HAL_UART_Transmit+0x11c>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2221      	movs	r2, #33	; 0x21
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005612:	f7fb fc7f 	bl	8000f14 <HAL_GetTick>
 8005616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	88fa      	ldrh	r2, [r7, #6]
 800561c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	88fa      	ldrh	r2, [r7, #6]
 8005622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	d108      	bne.n	8005640 <HAL_UART_Transmit+0x82>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d104      	bne.n	8005640 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	61bb      	str	r3, [r7, #24]
 800563e:	e003      	b.n	8005648 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005650:	e02a      	b.n	80056a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2200      	movs	r2, #0
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f840 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e036      	b.n	80056da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10b      	bne.n	800568a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005680:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	3302      	adds	r3, #2
 8005686:	61bb      	str	r3, [r7, #24]
 8005688:	e007      	b.n	800569a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	781a      	ldrb	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800569e:	b29b      	uxth	r3, r3
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1cf      	bne.n	8005652 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2140      	movs	r1, #64	; 0x40
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f810 	bl	80056e2 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e006      	b.n	80056da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e000      	b.n	80056da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056d8:	2302      	movs	r3, #2
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b090      	sub	sp, #64	; 0x40
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	603b      	str	r3, [r7, #0]
 80056ee:	4613      	mov	r3, r2
 80056f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	e050      	b.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d04c      	beq.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <UART_WaitOnFlagUntilTimeout+0x30>
 8005702:	f7fb fc07 	bl	8000f14 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800570e:	429a      	cmp	r2, r3
 8005710:	d241      	bcs.n	8005796 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005732:	637a      	str	r2, [r7, #52]	; 0x34
 8005734:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e5      	bne.n	8005712 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	e853 3f00 	ldrex	r3, [r3]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f023 0301 	bic.w	r3, r3, #1
 800575c:	63bb      	str	r3, [r7, #56]	; 0x38
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005766:	623a      	str	r2, [r7, #32]
 8005768:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	6a3a      	ldr	r2, [r7, #32]
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	61bb      	str	r3, [r7, #24]
   return(result);
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e5      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e00f      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4013      	ands	r3, r2
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	bf0c      	ite	eq
 80057a6:	2301      	moveq	r3, #1
 80057a8:	2300      	movne	r3, #0
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d09f      	beq.n	80056f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3740      	adds	r7, #64	; 0x40
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
	...

080057c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c4:	b0c0      	sub	sp, #256	; 0x100
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	ea40 0301 	orr.w	r3, r0, r1
 80057e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	431a      	orrs	r2, r3
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005818:	f021 010c 	bic.w	r1, r1, #12
 800581c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005826:	430b      	orrs	r3, r1
 8005828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800582a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	6999      	ldr	r1, [r3, #24]
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	ea40 0301 	orr.w	r3, r0, r1
 8005846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	4b8f      	ldr	r3, [pc, #572]	; (8005a8c <UART_SetConfig+0x2cc>)
 8005850:	429a      	cmp	r2, r3
 8005852:	d005      	beq.n	8005860 <UART_SetConfig+0xa0>
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b8d      	ldr	r3, [pc, #564]	; (8005a90 <UART_SetConfig+0x2d0>)
 800585c:	429a      	cmp	r2, r3
 800585e:	d104      	bne.n	800586a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005860:	f7fe fe54 	bl	800450c <HAL_RCC_GetPCLK2Freq>
 8005864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005868:	e003      	b.n	8005872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800586a:	f7fe fe3b 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 800586e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800587c:	f040 810c 	bne.w	8005a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005884:	2200      	movs	r2, #0
 8005886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800588a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800588e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005892:	4622      	mov	r2, r4
 8005894:	462b      	mov	r3, r5
 8005896:	1891      	adds	r1, r2, r2
 8005898:	65b9      	str	r1, [r7, #88]	; 0x58
 800589a:	415b      	adcs	r3, r3
 800589c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800589e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058a2:	4621      	mov	r1, r4
 80058a4:	eb12 0801 	adds.w	r8, r2, r1
 80058a8:	4629      	mov	r1, r5
 80058aa:	eb43 0901 	adc.w	r9, r3, r1
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058c2:	4690      	mov	r8, r2
 80058c4:	4699      	mov	r9, r3
 80058c6:	4623      	mov	r3, r4
 80058c8:	eb18 0303 	adds.w	r3, r8, r3
 80058cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058d0:	462b      	mov	r3, r5
 80058d2:	eb49 0303 	adc.w	r3, r9, r3
 80058d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058ee:	460b      	mov	r3, r1
 80058f0:	18db      	adds	r3, r3, r3
 80058f2:	653b      	str	r3, [r7, #80]	; 0x50
 80058f4:	4613      	mov	r3, r2
 80058f6:	eb42 0303 	adc.w	r3, r2, r3
 80058fa:	657b      	str	r3, [r7, #84]	; 0x54
 80058fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005904:	f7fa fcd4 	bl	80002b0 <__aeabi_uldivmod>
 8005908:	4602      	mov	r2, r0
 800590a:	460b      	mov	r3, r1
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <UART_SetConfig+0x2d4>)
 800590e:	fba3 2302 	umull	r2, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	011c      	lsls	r4, r3, #4
 8005916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800591a:	2200      	movs	r2, #0
 800591c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	1891      	adds	r1, r2, r2
 800592e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005930:	415b      	adcs	r3, r3
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005938:	4641      	mov	r1, r8
 800593a:	eb12 0a01 	adds.w	sl, r2, r1
 800593e:	4649      	mov	r1, r9
 8005940:	eb43 0b01 	adc.w	fp, r3, r1
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005958:	4692      	mov	sl, r2
 800595a:	469b      	mov	fp, r3
 800595c:	4643      	mov	r3, r8
 800595e:	eb1a 0303 	adds.w	r3, sl, r3
 8005962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005966:	464b      	mov	r3, r9
 8005968:	eb4b 0303 	adc.w	r3, fp, r3
 800596c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800597c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005984:	460b      	mov	r3, r1
 8005986:	18db      	adds	r3, r3, r3
 8005988:	643b      	str	r3, [r7, #64]	; 0x40
 800598a:	4613      	mov	r3, r2
 800598c:	eb42 0303 	adc.w	r3, r2, r3
 8005990:	647b      	str	r3, [r7, #68]	; 0x44
 8005992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800599a:	f7fa fc89 	bl	80002b0 <__aeabi_uldivmod>
 800599e:	4602      	mov	r2, r0
 80059a0:	460b      	mov	r3, r1
 80059a2:	4611      	mov	r1, r2
 80059a4:	4b3b      	ldr	r3, [pc, #236]	; (8005a94 <UART_SetConfig+0x2d4>)
 80059a6:	fba3 2301 	umull	r2, r3, r3, r1
 80059aa:	095b      	lsrs	r3, r3, #5
 80059ac:	2264      	movs	r2, #100	; 0x64
 80059ae:	fb02 f303 	mul.w	r3, r2, r3
 80059b2:	1acb      	subs	r3, r1, r3
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059ba:	4b36      	ldr	r3, [pc, #216]	; (8005a94 <UART_SetConfig+0x2d4>)
 80059bc:	fba3 2302 	umull	r2, r3, r3, r2
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c8:	441c      	add	r4, r3
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80059e4:	415b      	adcs	r3, r3
 80059e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6339      	str	r1, [r7, #48]	; 0x30
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a20:	464b      	mov	r3, r9
 8005a22:	460a      	mov	r2, r1
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a40:	460b      	mov	r3, r1
 8005a42:	18db      	adds	r3, r3, r3
 8005a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a46:	4613      	mov	r3, r2
 8005a48:	eb42 0303 	adc.w	r3, r2, r3
 8005a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a56:	f7fa fc2b 	bl	80002b0 <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <UART_SetConfig+0x2d4>)
 8005a60:	fba3 1302 	umull	r1, r3, r3, r2
 8005a64:	095b      	lsrs	r3, r3, #5
 8005a66:	2164      	movs	r1, #100	; 0x64
 8005a68:	fb01 f303 	mul.w	r3, r1, r3
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	3332      	adds	r3, #50	; 0x32
 8005a72:	4a08      	ldr	r2, [pc, #32]	; (8005a94 <UART_SetConfig+0x2d4>)
 8005a74:	fba2 2303 	umull	r2, r3, r2, r3
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	f003 0207 	and.w	r2, r3, #7
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4422      	add	r2, r4
 8005a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a88:	e105      	b.n	8005c96 <UART_SetConfig+0x4d6>
 8005a8a:	bf00      	nop
 8005a8c:	40011000 	.word	0x40011000
 8005a90:	40011400 	.word	0x40011400
 8005a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aaa:	4642      	mov	r2, r8
 8005aac:	464b      	mov	r3, r9
 8005aae:	1891      	adds	r1, r2, r2
 8005ab0:	6239      	str	r1, [r7, #32]
 8005ab2:	415b      	adcs	r3, r3
 8005ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005aba:	4641      	mov	r1, r8
 8005abc:	1854      	adds	r4, r2, r1
 8005abe:	4649      	mov	r1, r9
 8005ac0:	eb43 0501 	adc.w	r5, r3, r1
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	00eb      	lsls	r3, r5, #3
 8005ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ad2:	00e2      	lsls	r2, r4, #3
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	461d      	mov	r5, r3
 8005ad8:	4643      	mov	r3, r8
 8005ada:	18e3      	adds	r3, r4, r3
 8005adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ae0:	464b      	mov	r3, r9
 8005ae2:	eb45 0303 	adc.w	r3, r5, r3
 8005ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b06:	4629      	mov	r1, r5
 8005b08:	008b      	lsls	r3, r1, #2
 8005b0a:	4621      	mov	r1, r4
 8005b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b10:	4621      	mov	r1, r4
 8005b12:	008a      	lsls	r2, r1, #2
 8005b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b18:	f7fa fbca 	bl	80002b0 <__aeabi_uldivmod>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	460b      	mov	r3, r1
 8005b20:	4b60      	ldr	r3, [pc, #384]	; (8005ca4 <UART_SetConfig+0x4e4>)
 8005b22:	fba3 2302 	umull	r2, r3, r3, r2
 8005b26:	095b      	lsrs	r3, r3, #5
 8005b28:	011c      	lsls	r4, r3, #4
 8005b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	464b      	mov	r3, r9
 8005b40:	1891      	adds	r1, r2, r2
 8005b42:	61b9      	str	r1, [r7, #24]
 8005b44:	415b      	adcs	r3, r3
 8005b46:	61fb      	str	r3, [r7, #28]
 8005b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b4c:	4641      	mov	r1, r8
 8005b4e:	1851      	adds	r1, r2, r1
 8005b50:	6139      	str	r1, [r7, #16]
 8005b52:	4649      	mov	r1, r9
 8005b54:	414b      	adcs	r3, r1
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b64:	4659      	mov	r1, fp
 8005b66:	00cb      	lsls	r3, r1, #3
 8005b68:	4651      	mov	r1, sl
 8005b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b6e:	4651      	mov	r1, sl
 8005b70:	00ca      	lsls	r2, r1, #3
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	4642      	mov	r2, r8
 8005b7a:	189b      	adds	r3, r3, r2
 8005b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b80:	464b      	mov	r3, r9
 8005b82:	460a      	mov	r2, r1
 8005b84:	eb42 0303 	adc.w	r3, r2, r3
 8005b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005ba4:	4649      	mov	r1, r9
 8005ba6:	008b      	lsls	r3, r1, #2
 8005ba8:	4641      	mov	r1, r8
 8005baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bae:	4641      	mov	r1, r8
 8005bb0:	008a      	lsls	r2, r1, #2
 8005bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bb6:	f7fa fb7b 	bl	80002b0 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4b39      	ldr	r3, [pc, #228]	; (8005ca4 <UART_SetConfig+0x4e4>)
 8005bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc4:	095b      	lsrs	r3, r3, #5
 8005bc6:	2164      	movs	r1, #100	; 0x64
 8005bc8:	fb01 f303 	mul.w	r3, r1, r3
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	3332      	adds	r3, #50	; 0x32
 8005bd2:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <UART_SetConfig+0x4e4>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bde:	441c      	add	r4, r3
 8005be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005be4:	2200      	movs	r2, #0
 8005be6:	673b      	str	r3, [r7, #112]	; 0x70
 8005be8:	677a      	str	r2, [r7, #116]	; 0x74
 8005bea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bee:	4642      	mov	r2, r8
 8005bf0:	464b      	mov	r3, r9
 8005bf2:	1891      	adds	r1, r2, r2
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	415b      	adcs	r3, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfe:	4641      	mov	r1, r8
 8005c00:	1851      	adds	r1, r2, r1
 8005c02:	6039      	str	r1, [r7, #0]
 8005c04:	4649      	mov	r1, r9
 8005c06:	414b      	adcs	r3, r1
 8005c08:	607b      	str	r3, [r7, #4]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c16:	4659      	mov	r1, fp
 8005c18:	00cb      	lsls	r3, r1, #3
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c20:	4651      	mov	r1, sl
 8005c22:	00ca      	lsls	r2, r1, #3
 8005c24:	4610      	mov	r0, r2
 8005c26:	4619      	mov	r1, r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4642      	mov	r2, r8
 8005c2c:	189b      	adds	r3, r3, r2
 8005c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c30:	464b      	mov	r3, r9
 8005c32:	460a      	mov	r2, r1
 8005c34:	eb42 0303 	adc.w	r3, r2, r3
 8005c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	663b      	str	r3, [r7, #96]	; 0x60
 8005c44:	667a      	str	r2, [r7, #100]	; 0x64
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c52:	4649      	mov	r1, r9
 8005c54:	008b      	lsls	r3, r1, #2
 8005c56:	4641      	mov	r1, r8
 8005c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c5c:	4641      	mov	r1, r8
 8005c5e:	008a      	lsls	r2, r1, #2
 8005c60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c64:	f7fa fb24 	bl	80002b0 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <UART_SetConfig+0x4e4>)
 8005c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	2164      	movs	r1, #100	; 0x64
 8005c76:	fb01 f303 	mul.w	r3, r1, r3
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	3332      	adds	r3, #50	; 0x32
 8005c80:	4a08      	ldr	r2, [pc, #32]	; (8005ca4 <UART_SetConfig+0x4e4>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	f003 020f 	and.w	r2, r3, #15
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4422      	add	r2, r4
 8005c94:	609a      	str	r2, [r3, #8]
}
 8005c96:	bf00      	nop
 8005c98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca2:	bf00      	nop
 8005ca4:	51eb851f 	.word	0x51eb851f

08005ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ca8:	b084      	sub	sp, #16
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	f107 001c 	add.w	r0, r7, #28
 8005cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d122      	bne.n	8005d06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d105      	bne.n	8005cfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f001 fbe8 	bl	80074d0 <USB_CoreReset>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	e01a      	b.n	8005d3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f001 fbdc 	bl	80074d0 <USB_CoreReset>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005d2e:	e005      	b.n	8005d3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d10b      	bne.n	8005d5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f043 0206 	orr.w	r2, r3, #6
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d66:	b004      	add	sp, #16
 8005d68:	4770      	bx	lr
	...

08005d6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d165      	bne.n	8005e4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4a41      	ldr	r2, [pc, #260]	; (8005e88 <USB_SetTurnaroundTime+0x11c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d906      	bls.n	8005d96 <USB_SetTurnaroundTime+0x2a>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <USB_SetTurnaroundTime+0x120>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d202      	bcs.n	8005d96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005d90:	230f      	movs	r3, #15
 8005d92:	617b      	str	r3, [r7, #20]
 8005d94:	e062      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	4a3c      	ldr	r2, [pc, #240]	; (8005e8c <USB_SetTurnaroundTime+0x120>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d306      	bcc.n	8005dac <USB_SetTurnaroundTime+0x40>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <USB_SetTurnaroundTime+0x124>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d202      	bcs.n	8005dac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005da6:	230e      	movs	r3, #14
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e057      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	4a38      	ldr	r2, [pc, #224]	; (8005e90 <USB_SetTurnaroundTime+0x124>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d306      	bcc.n	8005dc2 <USB_SetTurnaroundTime+0x56>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4a37      	ldr	r2, [pc, #220]	; (8005e94 <USB_SetTurnaroundTime+0x128>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d202      	bcs.n	8005dc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005dbc:	230d      	movs	r3, #13
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e04c      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <USB_SetTurnaroundTime+0x128>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d306      	bcc.n	8005dd8 <USB_SetTurnaroundTime+0x6c>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	4a32      	ldr	r2, [pc, #200]	; (8005e98 <USB_SetTurnaroundTime+0x12c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d802      	bhi.n	8005dd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005dd2:	230c      	movs	r3, #12
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	e041      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a2f      	ldr	r2, [pc, #188]	; (8005e98 <USB_SetTurnaroundTime+0x12c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d906      	bls.n	8005dee <USB_SetTurnaroundTime+0x82>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <USB_SetTurnaroundTime+0x130>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d802      	bhi.n	8005dee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005de8:	230b      	movs	r3, #11
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	e036      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <USB_SetTurnaroundTime+0x130>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d906      	bls.n	8005e04 <USB_SetTurnaroundTime+0x98>
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4a29      	ldr	r2, [pc, #164]	; (8005ea0 <USB_SetTurnaroundTime+0x134>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d802      	bhi.n	8005e04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005dfe:	230a      	movs	r3, #10
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	e02b      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <USB_SetTurnaroundTime+0x134>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d906      	bls.n	8005e1a <USB_SetTurnaroundTime+0xae>
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4a25      	ldr	r2, [pc, #148]	; (8005ea4 <USB_SetTurnaroundTime+0x138>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d202      	bcs.n	8005e1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e14:	2309      	movs	r3, #9
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	e020      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4a21      	ldr	r2, [pc, #132]	; (8005ea4 <USB_SetTurnaroundTime+0x138>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d306      	bcc.n	8005e30 <USB_SetTurnaroundTime+0xc4>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <USB_SetTurnaroundTime+0x13c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d802      	bhi.n	8005e30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e015      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <USB_SetTurnaroundTime+0x13c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d906      	bls.n	8005e46 <USB_SetTurnaroundTime+0xda>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <USB_SetTurnaroundTime+0x140>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d202      	bcs.n	8005e46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005e40:	2307      	movs	r3, #7
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	e00a      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005e46:	2306      	movs	r3, #6
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e007      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005e4c:	79fb      	ldrb	r3, [r7, #7]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005e52:	2309      	movs	r3, #9
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e001      	b.n	8005e5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005e58:	2309      	movs	r3, #9
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	68da      	ldr	r2, [r3, #12]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	029b      	lsls	r3, r3, #10
 8005e70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	00d8acbf 	.word	0x00d8acbf
 8005e8c:	00e4e1c0 	.word	0x00e4e1c0
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	01067380 	.word	0x01067380
 8005e98:	011a499f 	.word	0x011a499f
 8005e9c:	01312cff 	.word	0x01312cff
 8005ea0:	014ca43f 	.word	0x014ca43f
 8005ea4:	016e3600 	.word	0x016e3600
 8005ea8:	01a6ab1f 	.word	0x01a6ab1f
 8005eac:	01e84800 	.word	0x01e84800

08005eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f043 0201 	orr.w	r2, r3, #1
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f023 0201 	bic.w	r2, r3, #1
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f10:	78fb      	ldrb	r3, [r7, #3]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d115      	bne.n	8005f42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f22:	2001      	movs	r0, #1
 8005f24:	f7fb f802 	bl	8000f2c <HAL_Delay>
      ms++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 fa3f 	bl	80073b2 <USB_GetMode>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d01e      	beq.n	8005f78 <USB_SetCurrentMode+0x84>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b31      	cmp	r3, #49	; 0x31
 8005f3e:	d9f0      	bls.n	8005f22 <USB_SetCurrentMode+0x2e>
 8005f40:	e01a      	b.n	8005f78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d115      	bne.n	8005f74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fa ffe9 	bl	8000f2c <HAL_Delay>
      ms++;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 fa26 	bl	80073b2 <USB_GetMode>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <USB_SetCurrentMode+0x84>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2b31      	cmp	r3, #49	; 0x31
 8005f70:	d9f0      	bls.n	8005f54 <USB_SetCurrentMode+0x60>
 8005f72:	e001      	b.n	8005f78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e005      	b.n	8005f84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b32      	cmp	r3, #50	; 0x32
 8005f7c:	d101      	bne.n	8005f82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3710      	adds	r7, #16
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b086      	sub	sp, #24
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	e009      	b.n	8005fc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	3340      	adds	r3, #64	; 0x40
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b0e      	cmp	r3, #14
 8005fc4:	d9f2      	bls.n	8005fac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d11c      	bne.n	8006006 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	e005      	b.n	8006012 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006024:	4619      	mov	r1, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602c:	461a      	mov	r2, r3
 800602e:	680b      	ldr	r3, [r1, #0]
 8006030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	2b01      	cmp	r3, #1
 8006036:	d10c      	bne.n	8006052 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d104      	bne.n	8006048 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f965 	bl	8006310 <USB_SetDevSpeed>
 8006046:	e008      	b.n	800605a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006048:	2101      	movs	r1, #1
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f960 	bl	8006310 <USB_SetDevSpeed>
 8006050:	e003      	b.n	800605a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006052:	2103      	movs	r1, #3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f95b 	bl	8006310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800605a:	2110      	movs	r1, #16
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8f3 	bl	8006248 <USB_FlushTxFifo>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f91f 	bl	80062b0 <USB_FlushRxFifo>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006082:	461a      	mov	r2, r3
 8006084:	2300      	movs	r3, #0
 8006086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	461a      	mov	r2, r3
 8006090:	2300      	movs	r3, #0
 8006092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	461a      	mov	r2, r3
 800609c:	2300      	movs	r3, #0
 800609e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	e043      	b.n	800612e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060bc:	d118      	bne.n	80060f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10a      	bne.n	80060da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	461a      	mov	r2, r3
 80060d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e013      	b.n	8006102 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	461a      	mov	r2, r3
 80060e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e008      	b.n	8006102 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	461a      	mov	r2, r3
 80060fe:	2300      	movs	r3, #0
 8006100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	461a      	mov	r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	461a      	mov	r2, r3
 8006122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b7      	bcc.n	80060a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006136:	2300      	movs	r3, #0
 8006138:	613b      	str	r3, [r7, #16]
 800613a:	e043      	b.n	80061c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800614e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006152:	d118      	bne.n	8006186 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10a      	bne.n	8006170 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	461a      	mov	r2, r3
 8006168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	e013      	b.n	8006198 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617c:	461a      	mov	r2, r3
 800617e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	e008      	b.n	8006198 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	461a      	mov	r2, r3
 8006194:	2300      	movs	r3, #0
 8006196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	461a      	mov	r2, r3
 80061a6:	2300      	movs	r3, #0
 80061a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	461a      	mov	r2, r3
 80061b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3301      	adds	r3, #1
 80061c2:	613b      	str	r3, [r7, #16]
 80061c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d3b7      	bcc.n	800613c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80061ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d105      	bne.n	8006200 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	699b      	ldr	r3, [r3, #24]
 80061f8:	f043 0210 	orr.w	r2, r3, #16
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	699a      	ldr	r2, [r3, #24]
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <USB_DevInit+0x2b8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800620c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620e:	2b00      	cmp	r3, #0
 8006210:	d005      	beq.n	800621e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f043 0208 	orr.w	r2, r3, #8
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800621e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d107      	bne.n	8006234 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800622c:	f043 0304 	orr.w	r3, r3, #4
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006234:	7dfb      	ldrb	r3, [r7, #23]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006240:	b004      	add	sp, #16
 8006242:	4770      	bx	lr
 8006244:	803c3800 	.word	0x803c3800

08006248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3301      	adds	r3, #1
 800625a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4a13      	ldr	r2, [pc, #76]	; (80062ac <USB_FlushTxFifo+0x64>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d901      	bls.n	8006268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e01b      	b.n	80062a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	daf2      	bge.n	8006256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	019b      	lsls	r3, r3, #6
 8006278:	f043 0220 	orr.w	r2, r3, #32
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	4a08      	ldr	r2, [pc, #32]	; (80062ac <USB_FlushTxFifo+0x64>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e006      	b.n	80062a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b20      	cmp	r3, #32
 800629c:	d0f0      	beq.n	8006280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3714      	adds	r7, #20
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr
 80062ac:	00030d40 	.word	0x00030d40

080062b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	3301      	adds	r3, #1
 80062c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4a11      	ldr	r2, [pc, #68]	; (800630c <USB_FlushRxFifo+0x5c>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d901      	bls.n	80062ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e018      	b.n	8006300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	daf2      	bge.n	80062bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2210      	movs	r2, #16
 80062de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a08      	ldr	r2, [pc, #32]	; (800630c <USB_FlushRxFifo+0x5c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e006      	b.n	8006300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b10      	cmp	r3, #16
 80062fc:	d0f0      	beq.n	80062e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	00030d40 	.word	0x00030d40

08006310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006342:	b480      	push	{r7}
 8006344:	b087      	sub	sp, #28
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 0306 	and.w	r3, r3, #6
 800635a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d102      	bne.n	8006368 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006362:	2300      	movs	r3, #0
 8006364:	75fb      	strb	r3, [r7, #23]
 8006366:	e00a      	b.n	800637e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b02      	cmp	r3, #2
 800636c:	d002      	beq.n	8006374 <USB_GetDevSpeed+0x32>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b06      	cmp	r3, #6
 8006372:	d102      	bne.n	800637a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006374:	2302      	movs	r3, #2
 8006376:	75fb      	strb	r3, [r7, #23]
 8006378:	e001      	b.n	800637e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800637a:	230f      	movs	r3, #15
 800637c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800637e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006380:	4618      	mov	r0, r3
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d13a      	bne.n	800641e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	b29b      	uxth	r3, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d155      	bne.n	800648c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	791b      	ldrb	r3, [r3, #4]
 80063fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80063fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	059b      	lsls	r3, r3, #22
 8006402:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006404:	4313      	orrs	r3, r2
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	e036      	b.n	800648c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	2101      	movs	r1, #1
 8006430:	fa01 f303 	lsl.w	r3, r1, r3
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	68f9      	ldr	r1, [r7, #12]
 8006438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800643c:	4313      	orrs	r3, r2
 800643e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d11a      	bne.n	800648c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	791b      	ldrb	r3, [r3, #4]
 8006470:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006472:	430b      	orrs	r3, r1
 8006474:	4313      	orrs	r3, r2
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	0151      	lsls	r1, r2, #5
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	440a      	add	r2, r1
 800647e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d161      	bne.n	800657c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ce:	d11f      	bne.n	8006510 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800650e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2101      	movs	r1, #1
 8006522:	fa01 f303 	lsl.w	r3, r1, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006530:	4013      	ands	r3, r2
 8006532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	2101      	movs	r1, #1
 8006546:	fa01 f303 	lsl.w	r3, r1, r3
 800654a:	b29b      	uxth	r3, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006554:	4013      	ands	r3, r2
 8006556:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	0159      	lsls	r1, r3, #5
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	440b      	add	r3, r1
 800656e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006572:	4619      	mov	r1, r3
 8006574:	4b35      	ldr	r3, [pc, #212]	; (800664c <USB_DeactivateEndpoint+0x1b0>)
 8006576:	4013      	ands	r3, r2
 8006578:	600b      	str	r3, [r1, #0]
 800657a:	e060      	b.n	800663e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800658e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006592:	d11f      	bne.n	80065d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	f003 030f 	and.w	r3, r3, #15
 80065e4:	2101      	movs	r1, #1
 80065e6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ea:	041b      	lsls	r3, r3, #16
 80065ec:	43db      	mvns	r3, r3
 80065ee:	68f9      	ldr	r1, [r7, #12]
 80065f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065f4:	4013      	ands	r3, r2
 80065f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fe:	69da      	ldr	r2, [r3, #28]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	2101      	movs	r1, #1
 800660a:	fa01 f303 	lsl.w	r3, r1, r3
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	43db      	mvns	r3, r3
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006618:	4013      	ands	r3, r2
 800661a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	0159      	lsls	r1, r3, #5
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	440b      	add	r3, r1
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	4619      	mov	r1, r3
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <USB_DeactivateEndpoint+0x1b4>)
 800663a:	4013      	ands	r3, r2
 800663c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	ec337800 	.word	0xec337800
 8006650:	eff37800 	.word	0xeff37800

08006654 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	f040 815c 	bne.w	800692e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d132      	bne.n	80066e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800669c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	0151      	lsls	r1, r2, #5
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	440a      	add	r2, r1
 80066d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066dc:	0cdb      	lsrs	r3, r3, #19
 80066de:	04db      	lsls	r3, r3, #19
 80066e0:	6113      	str	r3, [r2, #16]
 80066e2:	e074      	b.n	80067ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fe:	0cdb      	lsrs	r3, r3, #19
 8006700:	04db      	lsls	r3, r3, #19
 8006702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	0151      	lsls	r1, r2, #5
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	440a      	add	r2, r1
 800671a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006722:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	4413      	add	r3, r2
 8006730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006734:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	440b      	add	r3, r1
 8006740:	1e59      	subs	r1, r3, #1
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	fbb1 f3f3 	udiv	r3, r1, r3
 800674a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800674c:	4b9d      	ldr	r3, [pc, #628]	; (80069c4 <USB_EPStartXfer+0x370>)
 800674e:	400b      	ands	r3, r1
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	0148      	lsls	r0, r1, #5
 8006754:	69f9      	ldr	r1, [r7, #28]
 8006756:	4401      	add	r1, r0
 8006758:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800675c:	4313      	orrs	r3, r2
 800675e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	691a      	ldr	r2, [r3, #16]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006776:	69b9      	ldr	r1, [r7, #24]
 8006778:	0148      	lsls	r0, r1, #5
 800677a:	69f9      	ldr	r1, [r7, #28]
 800677c:	4401      	add	r1, r0
 800677e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006782:	4313      	orrs	r3, r2
 8006784:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	791b      	ldrb	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d11f      	bne.n	80067ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	015a      	lsls	r2, r3, #5
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	4413      	add	r3, r2
 8006796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	0151      	lsls	r1, r2, #5
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	440a      	add	r2, r1
 80067a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067ce:	79fb      	ldrb	r3, [r7, #7]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d14b      	bne.n	800686c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	461a      	mov	r2, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	791b      	ldrb	r3, [r3, #4]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d128      	bne.n	800684a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006804:	2b00      	cmp	r3, #0
 8006806:	d110      	bne.n	800682a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	015a      	lsls	r2, r3, #5
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	0151      	lsls	r1, r2, #5
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	440a      	add	r2, r1
 800681e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e00f      	b.n	800684a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	440a      	add	r2, r1
 8006840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006848:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	e133      	b.n	8006ad4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800688a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	791b      	ldrb	r3, [r3, #4]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d015      	beq.n	80068c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 811b 	beq.w	8006ad4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	f003 030f 	and.w	r3, r3, #15
 80068ae:	2101      	movs	r1, #1
 80068b0:	fa01 f303 	lsl.w	r3, r1, r3
 80068b4:	69f9      	ldr	r1, [r7, #28]
 80068b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ba:	4313      	orrs	r3, r2
 80068bc:	634b      	str	r3, [r1, #52]	; 0x34
 80068be:	e109      	b.n	8006ad4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d110      	bne.n	80068f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69ba      	ldr	r2, [r7, #24]
 80068e0:	0151      	lsls	r1, r2, #5
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	440a      	add	r2, r1
 80068e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	e00f      	b.n	8006912 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006910:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	6919      	ldr	r1, [r3, #16]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781a      	ldrb	r2, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	b298      	uxth	r0, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	4603      	mov	r3, r0
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fade 	bl	8006ee8 <USB_WritePacket>
 800692c:	e0d2      	b.n	8006ad4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800692e:	69bb      	ldr	r3, [r7, #24]
 8006930:	015a      	lsls	r2, r3, #5
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4413      	add	r3, r2
 8006936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	0151      	lsls	r1, r2, #5
 8006940:	69fa      	ldr	r2, [r7, #28]
 8006942:	440a      	add	r2, r1
 8006944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006948:	0cdb      	lsrs	r3, r3, #19
 800694a:	04db      	lsls	r3, r3, #19
 800694c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	0151      	lsls	r1, r2, #5
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	440a      	add	r2, r1
 8006964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800696c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006970:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d126      	bne.n	80069c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006990:	69b9      	ldr	r1, [r7, #24]
 8006992:	0148      	lsls	r0, r1, #5
 8006994:	69f9      	ldr	r1, [r7, #28]
 8006996:	4401      	add	r1, r0
 8006998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800699c:	4313      	orrs	r3, r2
 800699e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	0151      	lsls	r1, r2, #5
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	440a      	add	r2, r1
 80069b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069be:	6113      	str	r3, [r2, #16]
 80069c0:	e03a      	b.n	8006a38 <USB_EPStartXfer+0x3e4>
 80069c2:	bf00      	nop
 80069c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	699a      	ldr	r2, [r3, #24]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	4413      	add	r3, r2
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	8afa      	ldrh	r2, [r7, #22]
 80069e4:	fb03 f202 	mul.w	r2, r3, r2
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	015a      	lsls	r2, r3, #5
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	4413      	add	r3, r2
 80069f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f8:	691a      	ldr	r2, [r3, #16]
 80069fa:	8afb      	ldrh	r3, [r7, #22]
 80069fc:	04d9      	lsls	r1, r3, #19
 80069fe:	4b38      	ldr	r3, [pc, #224]	; (8006ae0 <USB_EPStartXfer+0x48c>)
 8006a00:	400b      	ands	r3, r1
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	0148      	lsls	r0, r1, #5
 8006a06:	69f9      	ldr	r1, [r7, #28]
 8006a08:	4401      	add	r1, r0
 8006a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1e:	691a      	ldr	r2, [r3, #16]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	69db      	ldr	r3, [r3, #28]
 8006a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a28:	69b9      	ldr	r1, [r7, #24]
 8006a2a:	0148      	lsls	r0, r1, #5
 8006a2c:	69f9      	ldr	r1, [r7, #28]
 8006a2e:	4401      	add	r1, r0
 8006a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a34:	4313      	orrs	r3, r2
 8006a36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a38:	79fb      	ldrb	r3, [r7, #7]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d10d      	bne.n	8006a5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6919      	ldr	r1, [r3, #16]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	460a      	mov	r2, r1
 8006a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	791b      	ldrb	r3, [r3, #4]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d128      	bne.n	8006ab4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d110      	bne.n	8006a94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e00f      	b.n	8006ab4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	69fa      	ldr	r2, [r7, #28]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3720      	adds	r7, #32
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	1ff80000 	.word	0x1ff80000

08006ae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b087      	sub	sp, #28
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	4613      	mov	r3, r2
 8006af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	785b      	ldrb	r3, [r3, #1]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	f040 80ce 	bne.w	8006ca2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d132      	bne.n	8006b74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	0151      	lsls	r1, r2, #5
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	440a      	add	r2, r1
 8006b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	0151      	lsls	r1, r2, #5
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	440a      	add	r2, r1
 8006b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b6c:	0cdb      	lsrs	r3, r3, #19
 8006b6e:	04db      	lsls	r3, r3, #19
 8006b70:	6113      	str	r3, [r2, #16]
 8006b72:	e04e      	b.n	8006c12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	015a      	lsls	r2, r3, #5
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	0151      	lsls	r1, r2, #5
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	440a      	add	r2, r1
 8006b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b8e:	0cdb      	lsrs	r3, r3, #19
 8006b90:	04db      	lsls	r3, r3, #19
 8006b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	0151      	lsls	r1, r2, #5
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	440a      	add	r2, r1
 8006baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	699a      	ldr	r2, [r3, #24]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d903      	bls.n	8006bcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	0151      	lsls	r1, r2, #5
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	440a      	add	r2, r1
 8006be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	691a      	ldr	r2, [r3, #16]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c02:	6939      	ldr	r1, [r7, #16]
 8006c04:	0148      	lsls	r0, r1, #5
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	4401      	add	r1, r0
 8006c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d11e      	bne.n	8006c56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	015a      	lsls	r2, r3, #5
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	0151      	lsls	r1, r2, #5
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	440a      	add	r2, r1
 8006c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	e097      	b.n	8006d86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	0151      	lsls	r1, r2, #5
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	440a      	add	r2, r1
 8006c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 8083 	beq.w	8006d86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f303 	lsl.w	r3, r1, r3
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	634b      	str	r3, [r1, #52]	; 0x34
 8006ca0:	e071      	b.n	8006d86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	697a      	ldr	r2, [r7, #20]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cbc:	0cdb      	lsrs	r3, r3, #19
 8006cbe:	04db      	lsls	r3, r3, #19
 8006cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	0151      	lsls	r1, r2, #5
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	440a      	add	r2, r1
 8006cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d34:	6939      	ldr	r1, [r7, #16]
 8006d36:	0148      	lsls	r0, r1, #5
 8006d38:	6979      	ldr	r1, [r7, #20]
 8006d3a:	4401      	add	r1, r0
 8006d3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d40:	4313      	orrs	r3, r2
 8006d42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d44:	79fb      	ldrb	r3, [r7, #7]
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d10d      	bne.n	8006d66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	6919      	ldr	r1, [r3, #16]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d62:	460a      	mov	r2, r1
 8006d64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d14a      	bne.n	8006e48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dca:	f040 8086 	bne.w	8006eda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	0151      	lsls	r1, r2, #5
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	440a      	add	r2, r1
 8006de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006df0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	7812      	ldrb	r2, [r2, #0]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d902      	bls.n	8006e2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2a:	e056      	b.n	8006eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e44:	d0e7      	beq.n	8006e16 <USB_EPStopXfer+0x82>
 8006e46:	e048      	b.n	8006eda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e60:	d13b      	bne.n	8006eda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	7812      	ldrb	r2, [r2, #0]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3301      	adds	r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d902      	bls.n	8006ec0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e00c      	b.n	8006eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ed8:	d0e7      	beq.n	8006eaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b089      	sub	sp, #36	; 0x24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	4611      	mov	r1, r2
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	71fb      	strb	r3, [r7, #7]
 8006efa:	4613      	mov	r3, r2
 8006efc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d123      	bne.n	8006f56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f0e:	88bb      	ldrh	r3, [r7, #4]
 8006f10:	3303      	adds	r3, #3
 8006f12:	089b      	lsrs	r3, r3, #2
 8006f14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	e018      	b.n	8006f4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	031a      	lsls	r2, r3, #12
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f28:	461a      	mov	r2, r3
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d3e2      	bcc.n	8006f1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3724      	adds	r7, #36	; 0x24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b08b      	sub	sp, #44	; 0x2c
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	089b      	lsrs	r3, r3, #2
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
 8006f8e:	e014      	b.n	8006fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006faa:	3301      	adds	r3, #1
 8006fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	623b      	str	r3, [r7, #32]
 8006fba:	6a3a      	ldr	r2, [r7, #32]
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d3e6      	bcc.n	8006f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fc2:	8bfb      	ldrh	r3, [r7, #30]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d01e      	beq.n	8007006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f107 0310 	add.w	r3, r7, #16
 8006fd8:	6812      	ldr	r2, [r2, #0]
 8006fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fdc:	693a      	ldr	r2, [r7, #16]
 8006fde:	6a3b      	ldr	r3, [r7, #32]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	701a      	strb	r2, [r3, #0]
      i++;
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ffa:	8bfb      	ldrh	r3, [r7, #30]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007000:	8bfb      	ldrh	r3, [r7, #30]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1ea      	bne.n	8006fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007008:	4618      	mov	r0, r3
 800700a:	372c      	adds	r7, #44	; 0x2c
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	785b      	ldrb	r3, [r3, #1]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d12c      	bne.n	800708a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	db12      	blt.n	8007068 <USB_EPSetStall+0x54>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00f      	beq.n	8007068 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	015a      	lsls	r2, r3, #5
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	4413      	add	r3, r2
 8007050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	0151      	lsls	r1, r2, #5
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	440a      	add	r2, r1
 800705e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007066:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	e02b      	b.n	80070e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	db12      	blt.n	80070c2 <USB_EPSetStall+0xae>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00f      	beq.n	80070c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	0151      	lsls	r1, r2, #5
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	440a      	add	r2, r1
 80070b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	015a      	lsls	r2, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4413      	add	r3, r2
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d128      	bne.n	800715e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	015a      	lsls	r2, r3, #5
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4413      	add	r3, r2
 8007114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800712a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	791b      	ldrb	r3, [r3, #4]
 8007130:	2b03      	cmp	r3, #3
 8007132:	d003      	beq.n	800713c <USB_EPClearStall+0x4c>
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	791b      	ldrb	r3, [r3, #4]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d138      	bne.n	80071ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e027      	b.n	80071ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007178:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800717c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	791b      	ldrb	r3, [r3, #4]
 8007182:	2b03      	cmp	r3, #3
 8007184:	d003      	beq.n	800718e <USB_EPClearStall+0x9e>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	791b      	ldrb	r3, [r3, #4]
 800718a:	2b02      	cmp	r3, #2
 800718c:	d10f      	bne.n	80071ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	0151      	lsls	r1, r2, #5
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	440a      	add	r2, r1
 80071a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071bc:	b480      	push	{r7}
 80071be:	b085      	sub	sp, #20
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80071de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f6:	4313      	orrs	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007222:	f023 0303 	bic.w	r3, r3, #3
 8007226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007236:	f023 0302 	bic.w	r3, r3, #2
 800723a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007264:	f023 0303 	bic.w	r3, r3, #3
 8007268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4013      	ands	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072a4:	68fb      	ldr	r3, [r7, #12]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	4013      	ands	r3, r2
 80072d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	0c1b      	lsrs	r3, r3, #16
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	4013      	ands	r3, r2
 8007308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	b29b      	uxth	r3, r3
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800732a:	78fb      	ldrb	r3, [r7, #3]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007348:	68bb      	ldr	r3, [r7, #8]
}
 800734a:	4618      	mov	r0, r3
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007356:	b480      	push	{r7}
 8007358:	b087      	sub	sp, #28
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
 800735e:	460b      	mov	r3, r1
 8007360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	fa22 f303 	lsr.w	r3, r2, r3
 8007386:	01db      	lsls	r3, r3, #7
 8007388:	b2db      	uxtb	r3, r3
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	4413      	add	r3, r2
 8007398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073a4:	68bb      	ldr	r3, [r7, #8]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b083      	sub	sp, #12
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	f003 0301 	and.w	r3, r3, #1
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b085      	sub	sp, #20
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80073ec:	f023 0307 	bic.w	r3, r3, #7
 80073f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007414:	b480      	push	{r7}
 8007416:	b087      	sub	sp, #28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	460b      	mov	r3, r1
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	333c      	adds	r3, #60	; 0x3c
 800742a:	3304      	adds	r3, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	4a26      	ldr	r2, [pc, #152]	; (80074cc <USB_EP0_OutStart+0xb8>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d90a      	bls.n	800744e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007448:	d101      	bne.n	800744e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e037      	b.n	80074be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	461a      	mov	r2, r3
 8007456:	2300      	movs	r3, #0
 8007458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800746c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	f043 0318 	orr.w	r3, r3, #24
 8007480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007490:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007496:	7afb      	ldrb	r3, [r7, #11]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10f      	bne.n	80074bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	371c      	adds	r7, #28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	4f54300a 	.word	0x4f54300a

080074d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a13      	ldr	r2, [pc, #76]	; (8007534 <USB_CoreReset+0x64>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d901      	bls.n	80074ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e01b      	b.n	8007526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	daf2      	bge.n	80074dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f043 0201 	orr.w	r2, r3, #1
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3301      	adds	r3, #1
 800750a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a09      	ldr	r2, [pc, #36]	; (8007534 <USB_CoreReset+0x64>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d901      	bls.n	8007518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007514:	2303      	movs	r3, #3
 8007516:	e006      	b.n	8007526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b01      	cmp	r3, #1
 8007522:	d0f0      	beq.n	8007506 <USB_CoreReset+0x36>

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3714      	adds	r7, #20
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	00030d40 	.word	0x00030d40

08007538 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007538:	b084      	sub	sp, #16
 800753a:	b580      	push	{r7, lr}
 800753c:	b086      	sub	sp, #24
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007562:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d018      	beq.n	80075a8 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d10a      	bne.n	8007592 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800758a:	f043 0304 	orr.w	r3, r3, #4
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e014      	b.n	80075bc <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075a0:	f023 0304 	bic.w	r3, r3, #4
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	e009      	b.n	80075bc <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80075b6:	f023 0304 	bic.w	r3, r3, #4
 80075ba:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075bc:	2110      	movs	r1, #16
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fe fe42 	bl	8006248 <USB_FlushTxFifo>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fe fe6e 	bl	80062b0 <USB_FlushRxFifo>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	613b      	str	r3, [r7, #16]
 80075e2:	e015      	b.n	8007610 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f0:	461a      	mov	r2, r3
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295
 80075f6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	3301      	adds	r3, #1
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	429a      	cmp	r2, r3
 8007616:	d3e5      	bcc.n	80075e4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f04f 32ff 	mov.w	r2, #4294967295
 8007624:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00b      	beq.n	800764a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007638:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a13      	ldr	r2, [pc, #76]	; (800768c <USB_HostInit+0x154>)
 800763e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <USB_HostInit+0x158>)
 8007644:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007648:	e009      	b.n	800765e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2280      	movs	r2, #128	; 0x80
 800764e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a10      	ldr	r2, [pc, #64]	; (8007694 <USB_HostInit+0x15c>)
 8007654:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <USB_HostInit+0x160>)
 800765a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	2b00      	cmp	r3, #0
 8007662:	d105      	bne.n	8007670 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f043 0210 	orr.w	r2, r3, #16
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699a      	ldr	r2, [r3, #24]
 8007674:	4b09      	ldr	r3, [pc, #36]	; (800769c <USB_HostInit+0x164>)
 8007676:	4313      	orrs	r3, r2
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800767c:	7dfb      	ldrb	r3, [r7, #23]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007688:	b004      	add	sp, #16
 800768a:	4770      	bx	lr
 800768c:	01000200 	.word	0x01000200
 8007690:	00e00300 	.word	0x00e00300
 8007694:	00600080 	.word	0x00600080
 8007698:	004000e0 	.word	0x004000e0
 800769c:	a3200008 	.word	0xa3200008

080076a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	78fb      	ldrb	r3, [r7, #3]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	68f9      	ldr	r1, [r7, #12]
 80076d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80076d8:	4313      	orrs	r3, r2
 80076da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d107      	bne.n	80076f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076e8:	461a      	mov	r2, r3
 80076ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076ee:	6053      	str	r3, [r2, #4]
 80076f0:	e009      	b.n	8007706 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b02      	cmp	r3, #2
 80076f6:	d106      	bne.n	8007706 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076fe:	461a      	mov	r2, r3
 8007700:	f241 7370 	movw	r3, #6000	; 0x1770
 8007704:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007734:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800773e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007742:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007744:	2064      	movs	r0, #100	; 0x64
 8007746:	f7f9 fbf1 	bl	8000f2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007752:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007756:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007758:	200a      	movs	r0, #10
 800775a:	f7f9 fbe7 	bl	8000f2c <HAL_Delay>

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800778c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <USB_DriveVbus+0x44>
 8007798:	78fb      	ldrb	r3, [r7, #3]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d106      	bne.n	80077ac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80077aa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077b6:	d109      	bne.n	80077cc <USB_DriveVbus+0x64>
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d106      	bne.n	80077cc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80077c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3714      	adds	r7, #20
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80077da:	b480      	push	{r7}
 80077dc:	b085      	sub	sp, #20
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	0c5b      	lsrs	r3, r3, #17
 80077f8:	f003 0303 	and.w	r3, r3, #3
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	b29b      	uxth	r3, r3
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
	...

0800782c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	461a      	mov	r2, r3
 800783a:	4603      	mov	r3, r0
 800783c:	70fb      	strb	r3, [r7, #3]
 800783e:	460b      	mov	r3, r1
 8007840:	70bb      	strb	r3, [r7, #2]
 8007842:	4613      	mov	r3, r2
 8007844:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800784e:	78fb      	ldrb	r3, [r7, #3]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	4413      	add	r3, r2
 8007856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785a:	461a      	mov	r2, r3
 800785c:	f04f 33ff 	mov.w	r3, #4294967295
 8007860:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007862:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007866:	2b03      	cmp	r3, #3
 8007868:	d87e      	bhi.n	8007968 <USB_HC_Init+0x13c>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <USB_HC_Init+0x44>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	0800792b 	.word	0x0800792b
 8007878:	08007881 	.word	0x08007881
 800787c:	080078ed 	.word	0x080078ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007880:	78fb      	ldrb	r3, [r7, #3]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4413      	add	r3, r2
 8007888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788c:	461a      	mov	r2, r3
 800788e:	f240 439d 	movw	r3, #1181	; 0x49d
 8007892:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007894:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da10      	bge.n	80078be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	78fa      	ldrb	r2, [r7, #3]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ba:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80078bc:	e057      	b.n	800796e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d051      	beq.n	800796e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	0151      	lsls	r1, r2, #5
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	440a      	add	r2, r1
 80078e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80078e8:	60d3      	str	r3, [r2, #12]
      break;
 80078ea:	e040      	b.n	800796e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078f8:	461a      	mov	r2, r3
 80078fa:	f240 639d 	movw	r3, #1693	; 0x69d
 80078fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007900:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	da34      	bge.n	8007972 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	78fa      	ldrb	r2, [r7, #3]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007926:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007928:	e023      	b.n	8007972 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007936:	461a      	mov	r2, r3
 8007938:	f240 2325 	movw	r3, #549	; 0x225
 800793c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800793e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007942:	2b00      	cmp	r3, #0
 8007944:	da17      	bge.n	8007976 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007946:	78fb      	ldrb	r3, [r7, #3]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4413      	add	r3, r2
 800794e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	0151      	lsls	r1, r2, #5
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	440a      	add	r2, r1
 800795c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007960:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007964:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007966:	e006      	b.n	8007976 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	77fb      	strb	r3, [r7, #31]
      break;
 800796c:	e004      	b.n	8007978 <USB_HC_Init+0x14c>
      break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <USB_HC_Init+0x14c>
      break;
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <USB_HC_Init+0x14c>
      break;
 8007976:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	78fa      	ldrb	r2, [r7, #3]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	440a      	add	r2, r1
 800798e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007992:	f043 0302 	orr.w	r3, r3, #2
 8007996:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	2101      	movs	r1, #1
 80079a8:	fa01 f303 	lsl.w	r3, r1, r3
 80079ac:	6939      	ldr	r1, [r7, #16]
 80079ae:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80079b2:	4313      	orrs	r3, r2
 80079b4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80079c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da03      	bge.n	80079d2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80079ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	e001      	b.n	80079d6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff feff 	bl	80077da <USB_GetHostSpeed>
 80079dc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80079de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d106      	bne.n	80079f4 <USB_HC_Init+0x1c8>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d003      	beq.n	80079f4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80079ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f0:	617b      	str	r3, [r7, #20]
 80079f2:	e001      	b.n	80079f8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079f8:	787b      	ldrb	r3, [r7, #1]
 80079fa:	059b      	lsls	r3, r3, #22
 80079fc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a00:	78bb      	ldrb	r3, [r7, #2]
 8007a02:	02db      	lsls	r3, r3, #11
 8007a04:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a08:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a0e:	049b      	lsls	r3, r3, #18
 8007a10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007a14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a16:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007a18:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007a1c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	0159      	lsls	r1, r3, #5
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	440b      	add	r3, r1
 8007a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a2e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007a34:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007a36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d003      	beq.n	8007a46 <USB_HC_Init+0x21a>
 8007a3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10f      	bne.n	8007a66 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	78fa      	ldrb	r2, [r7, #3]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a64:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b08c      	sub	sp, #48	; 0x30
 8007a74:	af02      	add	r7, sp, #8
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	785b      	ldrb	r3, [r3, #1]
 8007a86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a8c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d02d      	beq.n	8007af6 <USB_HC_StartXfer+0x86>
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	791b      	ldrb	r3, [r3, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d129      	bne.n	8007af6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d117      	bne.n	8007ad8 <USB_HC_StartXfer+0x68>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	79db      	ldrb	r3, [r3, #7]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <USB_HC_StartXfer+0x48>
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	79db      	ldrb	r3, [r3, #7]
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d10f      	bne.n	8007ad8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	6a3b      	ldr	r3, [r7, #32]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	6a3a      	ldr	r2, [r7, #32]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ad6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <USB_HC_StartXfer+0x86>
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	795b      	ldrb	r3, [r3, #5]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d107      	bne.n	8007af6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	785b      	ldrb	r3, [r3, #1]
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 fa0f 	bl	8007f10 <USB_DoPing>
      return HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	e0f8      	b.n	8007ce8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d018      	beq.n	8007b30 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	8912      	ldrh	r2, [r2, #8]
 8007b06:	4413      	add	r3, r2
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	8912      	ldrh	r2, [r2, #8]
 8007b0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b12:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007b14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007b16:	8b7b      	ldrh	r3, [r7, #26]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d90b      	bls.n	8007b34 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007b1c:	8b7b      	ldrh	r3, [r7, #26]
 8007b1e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	8912      	ldrh	r2, [r2, #8]
 8007b26:	fb03 f202 	mul.w	r2, r3, r2
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	611a      	str	r2, [r3, #16]
 8007b2e:	e001      	b.n	8007b34 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007b30:	2301      	movs	r3, #1
 8007b32:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	78db      	ldrb	r3, [r3, #3]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d007      	beq.n	8007b4c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	8912      	ldrh	r2, [r2, #8]
 8007b42:	fb03 f202 	mul.w	r2, r3, r2
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	611a      	str	r2, [r3, #16]
 8007b4a:	e003      	b.n	8007b54 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	695a      	ldr	r2, [r3, #20]
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b5e:	04d9      	lsls	r1, r3, #19
 8007b60:	4b63      	ldr	r3, [pc, #396]	; (8007cf0 <USB_HC_StartXfer+0x280>)
 8007b62:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b64:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	7a9b      	ldrb	r3, [r3, #10]
 8007b6a:	075b      	lsls	r3, r3, #29
 8007b6c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b70:	69f9      	ldr	r1, [r7, #28]
 8007b72:	0148      	lsls	r0, r1, #5
 8007b74:	6a39      	ldr	r1, [r7, #32]
 8007b76:	4401      	add	r1, r0
 8007b78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b7c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b7e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d009      	beq.n	8007b9a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	68d9      	ldr	r1, [r3, #12]
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b96:	460a      	mov	r2, r1
 8007b98:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bf0c      	ite	eq
 8007baa:	2301      	moveq	r3, #1
 8007bac:	2300      	movne	r3, #0
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	6a3a      	ldr	r2, [r7, #32]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bcc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007bd0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	6a3b      	ldr	r3, [r7, #32]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	7e7b      	ldrb	r3, [r7, #25]
 8007be2:	075b      	lsls	r3, r3, #29
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	0148      	lsls	r0, r1, #5
 8007be8:	6a39      	ldr	r1, [r7, #32]
 8007bea:	4401      	add	r1, r0
 8007bec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c0a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	78db      	ldrb	r3, [r3, #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c1a:	613b      	str	r3, [r7, #16]
 8007c1c:	e003      	b.n	8007c26 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c24:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c2c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e04e      	b.n	8007ce8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	78db      	ldrb	r3, [r3, #3]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d149      	bne.n	8007ce6 <USB_HC_StartXfer+0x276>
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d045      	beq.n	8007ce6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	79db      	ldrb	r3, [r3, #7]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d830      	bhi.n	8007cc4 <USB_HC_StartXfer+0x254>
 8007c62:	a201      	add	r2, pc, #4	; (adr r2, 8007c68 <USB_HC_StartXfer+0x1f8>)
 8007c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c68:	08007c79 	.word	0x08007c79
 8007c6c:	08007c9d 	.word	0x08007c9d
 8007c70:	08007c79 	.word	0x08007c79
 8007c74:	08007c9d 	.word	0x08007c9d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	3303      	adds	r3, #3
 8007c7e:	089b      	lsrs	r3, r3, #2
 8007c80:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c82:	8afa      	ldrh	r2, [r7, #22]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d91c      	bls.n	8007cc8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f043 0220 	orr.w	r2, r3, #32
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c9a:	e015      	b.n	8007cc8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	3303      	adds	r3, #3
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007ca6:	8afa      	ldrh	r2, [r7, #22]
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d90a      	bls.n	8007ccc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	619a      	str	r2, [r3, #24]
        }
        break;
 8007cc2:	e003      	b.n	8007ccc <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e002      	b.n	8007cce <USB_HC_StartXfer+0x25e>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <USB_HC_StartXfer+0x25e>
        break;
 8007ccc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	68d9      	ldr	r1, [r3, #12]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785a      	ldrb	r2, [r3, #1]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	2000      	movs	r0, #0
 8007cde:	9000      	str	r0, [sp, #0]
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff f901 	bl	8006ee8 <USB_WritePacket>
  }

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	; 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	1ff80000 	.word	0x1ff80000

08007cf4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d06:	695b      	ldr	r3, [r3, #20]
 8007d08:	b29b      	uxth	r3, r3
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3714      	adds	r7, #20
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b089      	sub	sp, #36	; 0x24
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	0c9b      	lsrs	r3, r3, #18
 8007d3e:	f003 0303 	and.w	r3, r3, #3
 8007d42:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	0fdb      	lsrs	r3, r3, #31
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d104      	bne.n	8007d70 <USB_HC_Halt+0x5a>
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e0c8      	b.n	8007f02 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d002      	beq.n	8007d7c <USB_HC_Halt+0x66>
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d163      	bne.n	8007e44 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	015a      	lsls	r2, r3, #5
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	4413      	add	r3, r2
 8007d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	0151      	lsls	r1, r2, #5
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	440a      	add	r2, r1
 8007d92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d9a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f040 80ab 	bne.w	8007f00 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d133      	bne.n	8007e1e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	69ba      	ldr	r2, [r7, #24]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	69fa      	ldr	r2, [r7, #28]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007dd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dd4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007df4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e02:	d81d      	bhi.n	8007e40 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1a:	d0ec      	beq.n	8007df6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e1c:	e070      	b.n	8007f00 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e3c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e3e:	e05f      	b.n	8007f00 <USB_HC_Halt+0x1ea>
            break;
 8007e40:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e42:	e05d      	b.n	8007f00 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	015a      	lsls	r2, r3, #5
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	0151      	lsls	r1, r2, #5
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	440a      	add	r2, r1
 8007e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e62:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d133      	bne.n	8007edc <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	0151      	lsls	r1, r2, #5
 8007e86:	69fa      	ldr	r2, [r7, #28]
 8007e88:	440a      	add	r2, r1
 8007e8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e92:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	015a      	lsls	r2, r3, #5
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	0151      	lsls	r1, r2, #5
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	440a      	add	r2, r1
 8007eaa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ec0:	d81d      	bhi.n	8007efe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ec2:	69bb      	ldr	r3, [r7, #24]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed8:	d0ec      	beq.n	8007eb4 <USB_HC_Halt+0x19e>
 8007eda:	e011      	b.n	8007f00 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	69ba      	ldr	r2, [r7, #24]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	69fa      	ldr	r2, [r7, #28]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	e000      	b.n	8007f00 <USB_HC_Halt+0x1ea>
          break;
 8007efe:	bf00      	nop
    }
  }

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3724      	adds	r7, #36	; 0x24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007f20:	78fb      	ldrb	r3, [r7, #3]
 8007f22:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007f24:	2301      	movs	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	04da      	lsls	r2, r3, #19
 8007f2c:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <USB_DoPing+0x74>)
 8007f2e:	4013      	ands	r3, r2
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	0151      	lsls	r1, r2, #5
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	440a      	add	r2, r1
 8007f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f58:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f60:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	015a      	lsls	r2, r3, #5
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	1ff80000 	.word	0x1ff80000

08007f88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fd ff98 	bl	8005ed2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007fa2:	2110      	movs	r1, #16
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fe f94f 	bl	8006248 <USB_FlushTxFifo>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fe f97b 	bl	80062b0 <USB_FlushRxFifo>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	61bb      	str	r3, [r7, #24]
 8007fc8:	e01f      	b.n	800800a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fe0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ff0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffe:	461a      	mov	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	3301      	adds	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b0f      	cmp	r3, #15
 800800e:	d9dc      	bls.n	8007fca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	e034      	b.n	8008080 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800802c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008034:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800803c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800804a:	461a      	mov	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3301      	adds	r3, #1
 8008054:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800805c:	d80c      	bhi.n	8008078 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008070:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008074:	d0ec      	beq.n	8008050 <USB_StopHost+0xc8>
 8008076:	e000      	b.n	800807a <USB_StopHost+0xf2>
        break;
 8008078:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	3301      	adds	r3, #1
 800807e:	61bb      	str	r3, [r7, #24]
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b0f      	cmp	r3, #15
 8008084:	d9c7      	bls.n	8008016 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808c:	461a      	mov	r2, r3
 800808e:	f04f 33ff 	mov.w	r3, #4294967295
 8008092:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f04f 32ff 	mov.w	r2, #4294967295
 800809a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fd ff07 	bl	8005eb0 <USB_EnableGlobalInt>

  return ret;
 80080a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3720      	adds	r7, #32
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b084      	sub	sp, #16
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80080b8:	2010      	movs	r0, #16
 80080ba:	f004 fc99 	bl	800c9f0 <USBD_static_malloc>
 80080be:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d109      	bne.n	80080da <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	32b0      	adds	r2, #176	; 0xb0
 80080d0:	2100      	movs	r1, #0
 80080d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80080d6:	2302      	movs	r3, #2
 80080d8:	e048      	b.n	800816c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	32b0      	adds	r2, #176	; 0xb0
 80080e4:	68f9      	ldr	r1, [r7, #12]
 80080e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	32b0      	adds	r2, #176	; 0xb0
 80080f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	7c1b      	ldrb	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10d      	bne.n	8008122 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008106:	4b1b      	ldr	r3, [pc, #108]	; (8008174 <USBD_HID_Init+0xc8>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 020f 	and.w	r2, r3, #15
 800810e:	6879      	ldr	r1, [r7, #4]
 8008110:	4613      	mov	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	440b      	add	r3, r1
 800811a:	3326      	adds	r3, #38	; 0x26
 800811c:	2207      	movs	r2, #7
 800811e:	801a      	strh	r2, [r3, #0]
 8008120:	e00c      	b.n	800813c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008122:	4b14      	ldr	r3, [pc, #80]	; (8008174 <USBD_HID_Init+0xc8>)
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	f003 020f 	and.w	r2, r3, #15
 800812a:	6879      	ldr	r1, [r7, #4]
 800812c:	4613      	mov	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	3326      	adds	r3, #38	; 0x26
 8008138:	220a      	movs	r2, #10
 800813a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800813c:	4b0d      	ldr	r3, [pc, #52]	; (8008174 <USBD_HID_Init+0xc8>)
 800813e:	7819      	ldrb	r1, [r3, #0]
 8008140:	2304      	movs	r3, #4
 8008142:	2203      	movs	r2, #3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f004 faf4 	bl	800c732 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800814a:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <USBD_HID_Init+0xc8>)
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 020f 	and.w	r2, r3, #15
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	3324      	adds	r3, #36	; 0x24
 8008160:	2201      	movs	r2, #1
 8008162:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	200000bf 	.word	0x200000bf

08008178 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008184:	4b1f      	ldr	r3, [pc, #124]	; (8008204 <USBD_HID_DeInit+0x8c>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f004 faf7 	bl	800c77e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008190:	4b1c      	ldr	r3, [pc, #112]	; (8008204 <USBD_HID_DeInit+0x8c>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 020f 	and.w	r2, r3, #15
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	4413      	add	r3, r2
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	440b      	add	r3, r1
 80081a4:	3324      	adds	r3, #36	; 0x24
 80081a6:	2200      	movs	r2, #0
 80081a8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80081aa:	4b16      	ldr	r3, [pc, #88]	; (8008204 <USBD_HID_DeInit+0x8c>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 020f 	and.w	r2, r3, #15
 80081b2:	6879      	ldr	r1, [r7, #4]
 80081b4:	4613      	mov	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	3326      	adds	r3, #38	; 0x26
 80081c0:	2200      	movs	r2, #0
 80081c2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	32b0      	adds	r2, #176	; 0xb0
 80081ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d011      	beq.n	80081fa <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	32b0      	adds	r2, #176	; 0xb0
 80081e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081e4:	4618      	mov	r0, r3
 80081e6:	f004 fc11 	bl	800ca0c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	32b0      	adds	r2, #176	; 0xb0
 80081f4:	2100      	movs	r1, #0
 80081f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200000bf 	.word	0x200000bf

08008208 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	32b0      	adds	r2, #176	; 0xb0
 800821c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008220:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008230:	2303      	movs	r3, #3
 8008232:	e0e8      	b.n	8008406 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823c:	2b00      	cmp	r3, #0
 800823e:	d046      	beq.n	80082ce <USBD_HID_Setup+0xc6>
 8008240:	2b20      	cmp	r3, #32
 8008242:	f040 80d8 	bne.w	80083f6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	3b02      	subs	r3, #2
 800824c:	2b09      	cmp	r3, #9
 800824e:	d836      	bhi.n	80082be <USBD_HID_Setup+0xb6>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <USBD_HID_Setup+0x50>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	080082af 	.word	0x080082af
 800825c:	0800828f 	.word	0x0800828f
 8008260:	080082bf 	.word	0x080082bf
 8008264:	080082bf 	.word	0x080082bf
 8008268:	080082bf 	.word	0x080082bf
 800826c:	080082bf 	.word	0x080082bf
 8008270:	080082bf 	.word	0x080082bf
 8008274:	080082bf 	.word	0x080082bf
 8008278:	0800829d 	.word	0x0800829d
 800827c:	08008281 	.word	0x08008281
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	b2db      	uxtb	r3, r3
 8008286:	461a      	mov	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	601a      	str	r2, [r3, #0]
          break;
 800828c:	e01e      	b.n	80082cc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fbff 	bl	8009a98 <USBD_CtlSendData>
          break;
 800829a:	e017      	b.n	80082cc <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	885b      	ldrh	r3, [r3, #2]
 80082a0:	0a1b      	lsrs	r3, r3, #8
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	605a      	str	r2, [r3, #4]
          break;
 80082ac:	e00e      	b.n	80082cc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	3304      	adds	r3, #4
 80082b2:	2201      	movs	r2, #1
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 fbee 	bl	8009a98 <USBD_CtlSendData>
          break;
 80082bc:	e006      	b.n	80082cc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fb78 	bl	80099b6 <USBD_CtlError>
          ret = USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	75fb      	strb	r3, [r7, #23]
          break;
 80082ca:	bf00      	nop
      }
      break;
 80082cc:	e09a      	b.n	8008404 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	f200 8086 	bhi.w	80083e4 <USBD_HID_Setup+0x1dc>
 80082d8:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <USBD_HID_Setup+0xd8>)
 80082da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082de:	bf00      	nop
 80082e0:	08008311 	.word	0x08008311
 80082e4:	080083f3 	.word	0x080083f3
 80082e8:	080083e5 	.word	0x080083e5
 80082ec:	080083e5 	.word	0x080083e5
 80082f0:	080083e5 	.word	0x080083e5
 80082f4:	080083e5 	.word	0x080083e5
 80082f8:	0800833b 	.word	0x0800833b
 80082fc:	080083e5 	.word	0x080083e5
 8008300:	080083e5 	.word	0x080083e5
 8008304:	080083e5 	.word	0x080083e5
 8008308:	08008393 	.word	0x08008393
 800830c:	080083bd 	.word	0x080083bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d107      	bne.n	800832c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800831c:	f107 030a 	add.w	r3, r7, #10
 8008320:	2202      	movs	r2, #2
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fbb7 	bl	8009a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800832a:	e063      	b.n	80083f4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fb41 	bl	80099b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008334:	2303      	movs	r3, #3
 8008336:	75fb      	strb	r3, [r7, #23]
          break;
 8008338:	e05c      	b.n	80083f4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	0a1b      	lsrs	r3, r3, #8
 8008340:	b29b      	uxth	r3, r3
 8008342:	2b22      	cmp	r3, #34	; 0x22
 8008344:	d108      	bne.n	8008358 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	88db      	ldrh	r3, [r3, #6]
 800834a:	2b3f      	cmp	r3, #63	; 0x3f
 800834c:	bf28      	it	cs
 800834e:	233f      	movcs	r3, #63	; 0x3f
 8008350:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <USBD_HID_Setup+0x208>)
 8008354:	613b      	str	r3, [r7, #16]
 8008356:	e015      	b.n	8008384 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	885b      	ldrh	r3, [r3, #2]
 800835c:	0a1b      	lsrs	r3, r3, #8
 800835e:	b29b      	uxth	r3, r3
 8008360:	2b21      	cmp	r3, #33	; 0x21
 8008362:	d108      	bne.n	8008376 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008364:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <USBD_HID_Setup+0x20c>)
 8008366:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	88db      	ldrh	r3, [r3, #6]
 800836c:	2b09      	cmp	r3, #9
 800836e:	bf28      	it	cs
 8008370:	2309      	movcs	r3, #9
 8008372:	82bb      	strh	r3, [r7, #20]
 8008374:	e006      	b.n	8008384 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 fb1c 	bl	80099b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	75fb      	strb	r3, [r7, #23]
            break;
 8008382:	e037      	b.n	80083f4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008384:	8abb      	ldrh	r3, [r7, #20]
 8008386:	461a      	mov	r2, r3
 8008388:	6939      	ldr	r1, [r7, #16]
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fb84 	bl	8009a98 <USBD_CtlSendData>
          break;
 8008390:	e030      	b.n	80083f4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b03      	cmp	r3, #3
 800839c:	d107      	bne.n	80083ae <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3308      	adds	r3, #8
 80083a2:	2201      	movs	r2, #1
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fb76 	bl	8009a98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083ac:	e022      	b.n	80083f4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fb00 	bl	80099b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ba:	e01b      	b.n	80083f4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d106      	bne.n	80083d6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	885b      	ldrh	r3, [r3, #2]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	461a      	mov	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d4:	e00e      	b.n	80083f4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 faec 	bl	80099b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80083de:	2303      	movs	r3, #3
 80083e0:	75fb      	strb	r3, [r7, #23]
          break;
 80083e2:	e007      	b.n	80083f4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f001 fae5 	bl	80099b6 <USBD_CtlError>
          ret = USBD_FAIL;
 80083ec:	2303      	movs	r3, #3
 80083ee:	75fb      	strb	r3, [r7, #23]
          break;
 80083f0:	e000      	b.n	80083f4 <USBD_HID_Setup+0x1ec>
          break;
 80083f2:	bf00      	nop
      }
      break;
 80083f4:	e006      	b.n	8008404 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fadc 	bl	80099b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80083fe:	2303      	movs	r3, #3
 8008400:	75fb      	strb	r3, [r7, #23]
      break;
 8008402:	bf00      	nop
  }

  return (uint8_t)ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000080 	.word	0x20000080
 8008414:	20000068 	.word	0x20000068

08008418 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	32b0      	adds	r2, #176	; 0xb0
 8008430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008434:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	e014      	b.n	800846a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b03      	cmp	r3, #3
 800844a:	d10d      	bne.n	8008468 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	7b1b      	ldrb	r3, [r3, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2201      	movs	r2, #1
 8008458:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800845a:	4b06      	ldr	r3, [pc, #24]	; (8008474 <USBD_HID_SendReport+0x5c>)
 800845c:	7819      	ldrb	r1, [r3, #0]
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f004 fa33 	bl	800c8ce <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200000bf 	.word	0x200000bf

08008478 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008480:	2181      	movs	r1, #129	; 0x81
 8008482:	4809      	ldr	r0, [pc, #36]	; (80084a8 <USBD_HID_GetFSCfgDesc+0x30>)
 8008484:	f000 fc35 	bl	8008cf2 <USBD_GetEpDesc>
 8008488:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	220a      	movs	r2, #10
 8008494:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2222      	movs	r2, #34	; 0x22
 800849a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800849c:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000044 	.word	0x20000044

080084ac <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80084b4:	2181      	movs	r1, #129	; 0x81
 80084b6:	4809      	ldr	r0, [pc, #36]	; (80084dc <USBD_HID_GetHSCfgDesc+0x30>)
 80084b8:	f000 fc1b 	bl	8008cf2 <USBD_GetEpDesc>
 80084bc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2207      	movs	r2, #7
 80084c8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2222      	movs	r2, #34	; 0x22
 80084ce:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80084d0:	4b02      	ldr	r3, [pc, #8]	; (80084dc <USBD_HID_GetHSCfgDesc+0x30>)
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000044 	.word	0x20000044

080084e0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80084e8:	2181      	movs	r1, #129	; 0x81
 80084ea:	4809      	ldr	r0, [pc, #36]	; (8008510 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80084ec:	f000 fc01 	bl	8008cf2 <USBD_GetEpDesc>
 80084f0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	220a      	movs	r2, #10
 80084fc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2222      	movs	r2, #34	; 0x22
 8008502:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008504:	4b02      	ldr	r3, [pc, #8]	; (8008510 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000044 	.word	0x20000044

08008514 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	32b0      	adds	r2, #176	; 0xb0
 800852a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852e:	2200      	movs	r2, #0
 8008530:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	220a      	movs	r2, #10
 800854c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800854e:	4b03      	ldr	r3, [pc, #12]	; (800855c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	20000074 	.word	0x20000074

08008560 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008574:	2303      	movs	r3, #3
 8008576:	e01f      	b.n	80085b8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	79fa      	ldrb	r2, [r7, #7]
 80085aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f004 f859 	bl	800c664 <USBD_LL_Init>
 80085b2:	4603      	mov	r3, r0
 80085b4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085ca:	2300      	movs	r3, #0
 80085cc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d101      	bne.n	80085d8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e025      	b.n	8008624 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32ae      	adds	r2, #174	; 0xae
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00f      	beq.n	8008614 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	32ae      	adds	r2, #174	; 0xae
 80085fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	f107 020e 	add.w	r2, r7, #14
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	4602      	mov	r2, r0
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800861a:	1c5a      	adds	r2, r3, #1
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f004 f861 	bl	800c6fc <USBD_LL_Start>
 800863a:	4603      	mov	r3, r0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800864c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b084      	sub	sp, #16
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	460b      	mov	r3, r1
 8008664:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008666:	2300      	movs	r3, #0
 8008668:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d009      	beq.n	8008688 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	78fa      	ldrb	r2, [r7, #3]
 800867e:	4611      	mov	r1, r2
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	78fa      	ldrb	r2, [r7, #3]
 80086ac:	4611      	mov	r1, r2
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80086bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b084      	sub	sp, #16
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d6:	6839      	ldr	r1, [r7, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f001 f932 	bl	8009942 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086ec:	461a      	mov	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d01a      	beq.n	8008738 <USBD_LL_SetupStage+0x72>
 8008702:	2b02      	cmp	r3, #2
 8008704:	d822      	bhi.n	800874c <USBD_LL_SetupStage+0x86>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <USBD_LL_SetupStage+0x4a>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d00a      	beq.n	8008724 <USBD_LL_SetupStage+0x5e>
 800870e:	e01d      	b.n	800874c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fb5f 	bl	8008ddc <USBD_StdDevReq>
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
      break;
 8008722:	e020      	b.n	8008766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fbc7 	bl	8008ec0 <USBD_StdItfReq>
 8008732:	4603      	mov	r3, r0
 8008734:	73fb      	strb	r3, [r7, #15]
      break;
 8008736:	e016      	b.n	8008766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fc29 	bl	8008f98 <USBD_StdEPReq>
 8008746:	4603      	mov	r3, r0
 8008748:	73fb      	strb	r3, [r7, #15]
      break;
 800874a:	e00c      	b.n	8008766 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008756:	b2db      	uxtb	r3, r3
 8008758:	4619      	mov	r1, r3
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f004 f82e 	bl	800c7bc <USBD_LL_StallEP>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
      break;
 8008764:	bf00      	nop
  }

  return ret;
 8008766:	7bfb      	ldrb	r3, [r7, #15]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	460b      	mov	r3, r1
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008782:	7afb      	ldrb	r3, [r7, #11]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d16e      	bne.n	8008866 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800878e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008796:	2b03      	cmp	r3, #3
 8008798:	f040 8098 	bne.w	80088cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d913      	bls.n	80087d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	1ad2      	subs	r2, r2, r3
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	4293      	cmp	r3, r2
 80087c0:	bf28      	it	cs
 80087c2:	4613      	movcs	r3, r2
 80087c4:	461a      	mov	r2, r3
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f001 f991 	bl	8009af0 <USBD_CtlContinueRx>
 80087ce:	e07d      	b.n	80088cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d014      	beq.n	8008808 <USBD_LL_DataOutStage+0x98>
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d81d      	bhi.n	800881e <USBD_LL_DataOutStage+0xae>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d002      	beq.n	80087ec <USBD_LL_DataOutStage+0x7c>
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d003      	beq.n	80087f2 <USBD_LL_DataOutStage+0x82>
 80087ea:	e018      	b.n	800881e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75bb      	strb	r3, [r7, #22]
            break;
 80087f0:	e018      	b.n	8008824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	4619      	mov	r1, r3
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f000 fa5e 	bl	8008cbe <USBD_CoreFindIF>
 8008802:	4603      	mov	r3, r0
 8008804:	75bb      	strb	r3, [r7, #22]
            break;
 8008806:	e00d      	b.n	8008824 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800880e:	b2db      	uxtb	r3, r3
 8008810:	4619      	mov	r1, r3
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f000 fa60 	bl	8008cd8 <USBD_CoreFindEP>
 8008818:	4603      	mov	r3, r0
 800881a:	75bb      	strb	r3, [r7, #22]
            break;
 800881c:	e002      	b.n	8008824 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800881e:	2300      	movs	r3, #0
 8008820:	75bb      	strb	r3, [r7, #22]
            break;
 8008822:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008824:	7dbb      	ldrb	r3, [r7, #22]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d119      	bne.n	800885e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b03      	cmp	r3, #3
 8008834:	d113      	bne.n	800885e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008836:	7dba      	ldrb	r2, [r7, #22]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	32ae      	adds	r2, #174	; 0xae
 800883c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00b      	beq.n	800885e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008846:	7dba      	ldrb	r2, [r7, #22]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800884e:	7dba      	ldrb	r2, [r7, #22]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	32ae      	adds	r2, #174	; 0xae
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f001 f957 	bl	8009b12 <USBD_CtlSendStatus>
 8008864:	e032      	b.n	80088cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4619      	mov	r1, r3
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f000 fa31 	bl	8008cd8 <USBD_CoreFindEP>
 8008876:	4603      	mov	r3, r0
 8008878:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800887a:	7dbb      	ldrb	r3, [r7, #22]
 800887c:	2bff      	cmp	r3, #255	; 0xff
 800887e:	d025      	beq.n	80088cc <USBD_LL_DataOutStage+0x15c>
 8008880:	7dbb      	ldrb	r3, [r7, #22]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d122      	bne.n	80088cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888c:	b2db      	uxtb	r3, r3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d117      	bne.n	80088c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008892:	7dba      	ldrb	r2, [r7, #22]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	32ae      	adds	r2, #174	; 0xae
 8008898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889c:	699b      	ldr	r3, [r3, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00f      	beq.n	80088c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80088a2:	7dba      	ldrb	r2, [r7, #22]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80088aa:	7dba      	ldrb	r2, [r7, #22]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	32ae      	adds	r2, #174	; 0xae
 80088b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	7afa      	ldrb	r2, [r7, #11]
 80088b8:	4611      	mov	r1, r2
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	4798      	blx	r3
 80088be:	4603      	mov	r3, r0
 80088c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
 80088ca:	e000      	b.n	80088ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3718      	adds	r7, #24
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b086      	sub	sp, #24
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	460b      	mov	r3, r1
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80088e4:	7afb      	ldrb	r3, [r7, #11]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d16f      	bne.n	80089ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3314      	adds	r3, #20
 80088ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d15a      	bne.n	80089b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	689a      	ldr	r2, [r3, #8]
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	429a      	cmp	r2, r3
 8008904:	d914      	bls.n	8008930 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	689a      	ldr	r2, [r3, #8]
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	1ad2      	subs	r2, r2, r3
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	461a      	mov	r2, r3
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f001 f8d6 	bl	8009ace <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008922:	2300      	movs	r3, #0
 8008924:	2200      	movs	r2, #0
 8008926:	2100      	movs	r1, #0
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f003 fff1 	bl	800c910 <USBD_LL_PrepareReceive>
 800892e:	e03f      	b.n	80089b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	429a      	cmp	r2, r3
 800893a:	d11c      	bne.n	8008976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008944:	429a      	cmp	r2, r3
 8008946:	d316      	bcc.n	8008976 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008952:	429a      	cmp	r2, r3
 8008954:	d20f      	bcs.n	8008976 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008956:	2200      	movs	r2, #0
 8008958:	2100      	movs	r1, #0
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f001 f8b7 	bl	8009ace <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008968:	2300      	movs	r3, #0
 800896a:	2200      	movs	r2, #0
 800896c:	2100      	movs	r1, #0
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f003 ffce 	bl	800c910 <USBD_LL_PrepareReceive>
 8008974:	e01c      	b.n	80089b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b03      	cmp	r3, #3
 8008980:	d10f      	bne.n	80089a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80089a2:	2180      	movs	r1, #128	; 0x80
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f003 ff09 	bl	800c7bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f001 f8c4 	bl	8009b38 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d03a      	beq.n	8008a30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f7ff fe42 	bl	8008644 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089c8:	e032      	b.n	8008a30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f000 f97f 	bl	8008cd8 <USBD_CoreFindEP>
 80089da:	4603      	mov	r3, r0
 80089dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089de:	7dfb      	ldrb	r3, [r7, #23]
 80089e0:	2bff      	cmp	r3, #255	; 0xff
 80089e2:	d025      	beq.n	8008a30 <USBD_LL_DataInStage+0x15a>
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d122      	bne.n	8008a30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d11c      	bne.n	8008a30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80089f6:	7dfa      	ldrb	r2, [r7, #23]
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	32ae      	adds	r2, #174	; 0xae
 80089fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d014      	beq.n	8008a30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008a06:	7dfa      	ldrb	r2, [r7, #23]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008a0e:	7dfa      	ldrb	r2, [r7, #23]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	32ae      	adds	r2, #174	; 0xae
 8008a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	7afa      	ldrb	r2, [r7, #11]
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	4798      	blx	r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008a2c:	7dbb      	ldrb	r3, [r7, #22]
 8008a2e:	e000      	b.n	8008a32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}

08008a3a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a3a:	b580      	push	{r7, lr}
 8008a3c:	b084      	sub	sp, #16
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d014      	beq.n	8008aa0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00e      	beq.n	8008aa0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6852      	ldr	r2, [r2, #4]
 8008a8e:	b2d2      	uxtb	r2, r2
 8008a90:	4611      	mov	r1, r2
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	4798      	blx	r3
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d001      	beq.n	8008aa0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008aa0:	2340      	movs	r3, #64	; 0x40
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f003 fe43 	bl	800c732 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2240      	movs	r2, #64	; 0x40
 8008ab8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008abc:	2340      	movs	r3, #64	; 0x40
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2180      	movs	r1, #128	; 0x80
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f003 fe35 	bl	800c732 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2240      	movs	r2, #64	; 0x40
 8008ad2:	621a      	str	r2, [r3, #32]

  return ret;
 8008ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ade:	b480      	push	{r7}
 8008ae0:	b083      	sub	sp, #12
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008afe:	b480      	push	{r7}
 8008b00:	b083      	sub	sp, #12
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2204      	movs	r2, #4
 8008b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d106      	bne.n	8008b4c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	370c      	adds	r7, #12
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr

08008b5a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b082      	sub	sp, #8
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d110      	bne.n	8008b90 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00b      	beq.n	8008b90 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b7e:	69db      	ldr	r3, [r3, #28]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	69db      	ldr	r3, [r3, #28]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b082      	sub	sp, #8
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	32ae      	adds	r2, #174	; 0xae
 8008bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e01c      	b.n	8008bf6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d115      	bne.n	8008bf4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32ae      	adds	r2, #174	; 0xae
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	32ae      	adds	r2, #174	; 0xae
 8008be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	4611      	mov	r1, r2
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	32ae      	adds	r2, #174	; 0xae
 8008c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d101      	bne.n	8008c20 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e01c      	b.n	8008c5a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d115      	bne.n	8008c58 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	32ae      	adds	r2, #174	; 0xae
 8008c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	32ae      	adds	r2, #174	; 0xae
 8008c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	4611      	mov	r1, r2
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3708      	adds	r7, #8
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b083      	sub	sp, #12
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	6852      	ldr	r2, [r2, #4]
 8008ca2:	b2d2      	uxtb	r2, r2
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}

08008cbe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b083      	sub	sp, #12
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008cca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008ce4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b086      	sub	sp, #24
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	885b      	ldrh	r3, [r3, #2]
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d920      	bls.n	8008d5c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008d22:	e013      	b.n	8008d4c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008d24:	f107 030a 	add.w	r3, r7, #10
 8008d28:	4619      	mov	r1, r3
 8008d2a:	6978      	ldr	r0, [r7, #20]
 8008d2c:	f000 f81b 	bl	8008d66 <USBD_GetNextDesc>
 8008d30:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	2b05      	cmp	r3, #5
 8008d38:	d108      	bne.n	8008d4c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	789b      	ldrb	r3, [r3, #2]
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d008      	beq.n	8008d5a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	885b      	ldrh	r3, [r3, #2]
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	897b      	ldrh	r3, [r7, #10]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d8e5      	bhi.n	8008d24 <USBD_GetEpDesc+0x32>
 8008d58:	e000      	b.n	8008d5c <USBD_GetEpDesc+0x6a>
          break;
 8008d5a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008d5c:	693b      	ldr	r3, [r7, #16]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b085      	sub	sp, #20
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	881a      	ldrh	r2, [r3, #0]
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	4413      	add	r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4413      	add	r3, r2
 8008d90:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008d92:	68fb      	ldr	r3, [r7, #12]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	3301      	adds	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008dbe:	8a3b      	ldrh	r3, [r7, #16]
 8008dc0:	021b      	lsls	r3, r3, #8
 8008dc2:	b21a      	sxth	r2, r3
 8008dc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	b21b      	sxth	r3, r3
 8008dcc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008dce:	89fb      	ldrh	r3, [r7, #14]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	371c      	adds	r7, #28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008df2:	2b40      	cmp	r3, #64	; 0x40
 8008df4:	d005      	beq.n	8008e02 <USBD_StdDevReq+0x26>
 8008df6:	2b40      	cmp	r3, #64	; 0x40
 8008df8:	d857      	bhi.n	8008eaa <USBD_StdDevReq+0xce>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00f      	beq.n	8008e1e <USBD_StdDevReq+0x42>
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d153      	bne.n	8008eaa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	32ae      	adds	r2, #174	; 0xae
 8008e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	4798      	blx	r3
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e1c:	e04a      	b.n	8008eb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	785b      	ldrb	r3, [r3, #1]
 8008e22:	2b09      	cmp	r3, #9
 8008e24:	d83b      	bhi.n	8008e9e <USBD_StdDevReq+0xc2>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <USBD_StdDevReq+0x50>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08008e95 	.word	0x08008e95
 8008e34:	08008e9f 	.word	0x08008e9f
 8008e38:	08008e8b 	.word	0x08008e8b
 8008e3c:	08008e9f 	.word	0x08008e9f
 8008e40:	08008e5f 	.word	0x08008e5f
 8008e44:	08008e55 	.word	0x08008e55
 8008e48:	08008e9f 	.word	0x08008e9f
 8008e4c:	08008e77 	.word	0x08008e77
 8008e50:	08008e69 	.word	0x08008e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa3c 	bl	80092d4 <USBD_GetDescriptor>
          break;
 8008e5c:	e024      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fbcb 	bl	80095fc <USBD_SetAddress>
          break;
 8008e66:	e01f      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fc0a 	bl	8009684 <USBD_SetConfig>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
          break;
 8008e74:	e018      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008e76:	6839      	ldr	r1, [r7, #0]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fcad 	bl	80097d8 <USBD_GetConfig>
          break;
 8008e7e:	e013      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fcde 	bl	8009844 <USBD_GetStatus>
          break;
 8008e88:	e00e      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fd0d 	bl	80098ac <USBD_SetFeature>
          break;
 8008e92:	e009      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fd31 	bl	80098fe <USBD_ClrFeature>
          break;
 8008e9c:	e004      	b.n	8008ea8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fd88 	bl	80099b6 <USBD_CtlError>
          break;
 8008ea6:	bf00      	nop
      }
      break;
 8008ea8:	e004      	b.n	8008eb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fd82 	bl	80099b6 <USBD_CtlError>
      break;
 8008eb2:	bf00      	nop
  }

  return ret;
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop

08008ec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d005      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d852      	bhi.n	8008f84 <USBD_StdItfReq+0xc4>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <USBD_StdItfReq+0x26>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	d14e      	bne.n	8008f84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d840      	bhi.n	8008f76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	889b      	ldrh	r3, [r3, #4]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d836      	bhi.n	8008f6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	889b      	ldrh	r3, [r3, #4]
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	4619      	mov	r1, r3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff fed9 	bl	8008cbe <USBD_CoreFindIF>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	2bff      	cmp	r3, #255	; 0xff
 8008f14:	d01d      	beq.n	8008f52 <USBD_StdItfReq+0x92>
 8008f16:	7bbb      	ldrb	r3, [r7, #14]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d11a      	bne.n	8008f52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008f1c:	7bba      	ldrb	r2, [r7, #14]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32ae      	adds	r2, #174	; 0xae
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00f      	beq.n	8008f4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008f2c:	7bba      	ldrb	r2, [r7, #14]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008f34:	7bba      	ldrb	r2, [r7, #14]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	32ae      	adds	r2, #174	; 0xae
 8008f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	4798      	blx	r3
 8008f46:	4603      	mov	r3, r0
 8008f48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f4a:	e004      	b.n	8008f56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008f50:	e001      	b.n	8008f56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	88db      	ldrh	r3, [r3, #6]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d110      	bne.n	8008f80 <USBD_StdItfReq+0xc0>
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10d      	bne.n	8008f80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fdd4 	bl	8009b12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008f6a:	e009      	b.n	8008f80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008f6c:	6839      	ldr	r1, [r7, #0]
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fd21 	bl	80099b6 <USBD_CtlError>
          break;
 8008f74:	e004      	b.n	8008f80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008f76:	6839      	ldr	r1, [r7, #0]
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fd1c 	bl	80099b6 <USBD_CtlError>
          break;
 8008f7e:	e000      	b.n	8008f82 <USBD_StdItfReq+0xc2>
          break;
 8008f80:	bf00      	nop
      }
      break;
 8008f82:	e004      	b.n	8008f8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 fd15 	bl	80099b6 <USBD_CtlError>
      break;
 8008f8c:	bf00      	nop
  }

  return ret;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	889b      	ldrh	r3, [r3, #4]
 8008faa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fb4:	2b40      	cmp	r3, #64	; 0x40
 8008fb6:	d007      	beq.n	8008fc8 <USBD_StdEPReq+0x30>
 8008fb8:	2b40      	cmp	r3, #64	; 0x40
 8008fba:	f200 817f 	bhi.w	80092bc <USBD_StdEPReq+0x324>
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d02a      	beq.n	8009018 <USBD_StdEPReq+0x80>
 8008fc2:	2b20      	cmp	r3, #32
 8008fc4:	f040 817a 	bne.w	80092bc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f7ff fe83 	bl	8008cd8 <USBD_CoreFindEP>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008fd6:	7b7b      	ldrb	r3, [r7, #13]
 8008fd8:	2bff      	cmp	r3, #255	; 0xff
 8008fda:	f000 8174 	beq.w	80092c6 <USBD_StdEPReq+0x32e>
 8008fde:	7b7b      	ldrb	r3, [r7, #13]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f040 8170 	bne.w	80092c6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008fe6:	7b7a      	ldrb	r2, [r7, #13]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008fee:	7b7a      	ldrb	r2, [r7, #13]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	32ae      	adds	r2, #174	; 0xae
 8008ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 8163 	beq.w	80092c6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009000:	7b7a      	ldrb	r2, [r7, #13]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	32ae      	adds	r2, #174	; 0xae
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	4798      	blx	r3
 8009012:	4603      	mov	r3, r0
 8009014:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009016:	e156      	b.n	80092c6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	785b      	ldrb	r3, [r3, #1]
 800901c:	2b03      	cmp	r3, #3
 800901e:	d008      	beq.n	8009032 <USBD_StdEPReq+0x9a>
 8009020:	2b03      	cmp	r3, #3
 8009022:	f300 8145 	bgt.w	80092b0 <USBD_StdEPReq+0x318>
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 809b 	beq.w	8009162 <USBD_StdEPReq+0x1ca>
 800902c:	2b01      	cmp	r3, #1
 800902e:	d03c      	beq.n	80090aa <USBD_StdEPReq+0x112>
 8009030:	e13e      	b.n	80092b0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b02      	cmp	r3, #2
 800903c:	d002      	beq.n	8009044 <USBD_StdEPReq+0xac>
 800903e:	2b03      	cmp	r3, #3
 8009040:	d016      	beq.n	8009070 <USBD_StdEPReq+0xd8>
 8009042:	e02c      	b.n	800909e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <USBD_StdEPReq+0xce>
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	2b80      	cmp	r3, #128	; 0x80
 800904e:	d00a      	beq.n	8009066 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f003 fbb1 	bl	800c7bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800905a:	2180      	movs	r1, #128	; 0x80
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f003 fbad 	bl	800c7bc <USBD_LL_StallEP>
 8009062:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009064:	e020      	b.n	80090a8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fca4 	bl	80099b6 <USBD_CtlError>
              break;
 800906e:	e01b      	b.n	80090a8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	885b      	ldrh	r3, [r3, #2]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d10e      	bne.n	8009096 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <USBD_StdEPReq+0xfe>
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b80      	cmp	r3, #128	; 0x80
 8009082:	d008      	beq.n	8009096 <USBD_StdEPReq+0xfe>
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	88db      	ldrh	r3, [r3, #6]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d104      	bne.n	8009096 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f003 fb93 	bl	800c7bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fd3b 	bl	8009b12 <USBD_CtlSendStatus>

              break;
 800909c:	e004      	b.n	80090a8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fc88 	bl	80099b6 <USBD_CtlError>
              break;
 80090a6:	bf00      	nop
          }
          break;
 80090a8:	e107      	b.n	80092ba <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d002      	beq.n	80090bc <USBD_StdEPReq+0x124>
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d016      	beq.n	80090e8 <USBD_StdEPReq+0x150>
 80090ba:	e04b      	b.n	8009154 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00d      	beq.n	80090de <USBD_StdEPReq+0x146>
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b80      	cmp	r3, #128	; 0x80
 80090c6:	d00a      	beq.n	80090de <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	4619      	mov	r1, r3
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f003 fb75 	bl	800c7bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80090d2:	2180      	movs	r1, #128	; 0x80
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f003 fb71 	bl	800c7bc <USBD_LL_StallEP>
 80090da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80090dc:	e040      	b.n	8009160 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80090de:	6839      	ldr	r1, [r7, #0]
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fc68 	bl	80099b6 <USBD_CtlError>
              break;
 80090e6:	e03b      	b.n	8009160 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	885b      	ldrh	r3, [r3, #2]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d136      	bne.n	800915e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d004      	beq.n	8009104 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f003 fb7b 	bl	800c7fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fd04 	bl	8009b12 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800910a:	7bbb      	ldrb	r3, [r7, #14]
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fde2 	bl	8008cd8 <USBD_CoreFindEP>
 8009114:	4603      	mov	r3, r0
 8009116:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009118:	7b7b      	ldrb	r3, [r7, #13]
 800911a:	2bff      	cmp	r3, #255	; 0xff
 800911c:	d01f      	beq.n	800915e <USBD_StdEPReq+0x1c6>
 800911e:	7b7b      	ldrb	r3, [r7, #13]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d11c      	bne.n	800915e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009124:	7b7a      	ldrb	r2, [r7, #13]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800912c:	7b7a      	ldrb	r2, [r7, #13]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	32ae      	adds	r2, #174	; 0xae
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d010      	beq.n	800915e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800913c:	7b7a      	ldrb	r2, [r7, #13]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	32ae      	adds	r2, #174	; 0xae
 8009142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	4798      	blx	r3
 800914e:	4603      	mov	r3, r0
 8009150:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009152:	e004      	b.n	800915e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fc2d 	bl	80099b6 <USBD_CtlError>
              break;
 800915c:	e000      	b.n	8009160 <USBD_StdEPReq+0x1c8>
              break;
 800915e:	bf00      	nop
          }
          break;
 8009160:	e0ab      	b.n	80092ba <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b02      	cmp	r3, #2
 800916c:	d002      	beq.n	8009174 <USBD_StdEPReq+0x1dc>
 800916e:	2b03      	cmp	r3, #3
 8009170:	d032      	beq.n	80091d8 <USBD_StdEPReq+0x240>
 8009172:	e097      	b.n	80092a4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <USBD_StdEPReq+0x1f2>
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	2b80      	cmp	r3, #128	; 0x80
 800917e:	d004      	beq.n	800918a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fc17 	bl	80099b6 <USBD_CtlError>
                break;
 8009188:	e091      	b.n	80092ae <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800918a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800918e:	2b00      	cmp	r3, #0
 8009190:	da0b      	bge.n	80091aa <USBD_StdEPReq+0x212>
 8009192:	7bbb      	ldrb	r3, [r7, #14]
 8009194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	3310      	adds	r3, #16
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	4413      	add	r3, r2
 80091a6:	3304      	adds	r3, #4
 80091a8:	e00b      	b.n	80091c2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80091b0:	4613      	mov	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80091bc:	687a      	ldr	r2, [r7, #4]
 80091be:	4413      	add	r3, r2
 80091c0:	3304      	adds	r3, #4
 80091c2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	2202      	movs	r2, #2
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fc61 	bl	8009a98 <USBD_CtlSendData>
              break;
 80091d6:	e06a      	b.n	80092ae <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80091d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	da11      	bge.n	8009204 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	f003 020f 	and.w	r2, r3, #15
 80091e6:	6879      	ldr	r1, [r7, #4]
 80091e8:	4613      	mov	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	440b      	add	r3, r1
 80091f2:	3324      	adds	r3, #36	; 0x24
 80091f4:	881b      	ldrh	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d117      	bne.n	800922a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fbda 	bl	80099b6 <USBD_CtlError>
                  break;
 8009202:	e054      	b.n	80092ae <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009204:	7bbb      	ldrb	r3, [r7, #14]
 8009206:	f003 020f 	and.w	r2, r3, #15
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4613      	mov	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	440b      	add	r3, r1
 8009216:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d104      	bne.n	800922a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fbc7 	bl	80099b6 <USBD_CtlError>
                  break;
 8009228:	e041      	b.n	80092ae <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800922a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da0b      	bge.n	800924a <USBD_StdEPReq+0x2b2>
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009238:	4613      	mov	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	3310      	adds	r3, #16
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	4413      	add	r3, r2
 8009246:	3304      	adds	r3, #4
 8009248:	e00b      	b.n	8009262 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800924a:	7bbb      	ldrb	r3, [r7, #14]
 800924c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009250:	4613      	mov	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4413      	add	r3, r2
 8009260:	3304      	adds	r3, #4
 8009262:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009264:	7bbb      	ldrb	r3, [r7, #14]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <USBD_StdEPReq+0x2d8>
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b80      	cmp	r3, #128	; 0x80
 800926e:	d103      	bne.n	8009278 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	e00e      	b.n	8009296 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f003 fadb 	bl	800c838 <USBD_LL_IsStallEP>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	e002      	b.n	8009296 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	2202      	movs	r2, #2
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 fbfb 	bl	8009a98 <USBD_CtlSendData>
              break;
 80092a2:	e004      	b.n	80092ae <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 fb85 	bl	80099b6 <USBD_CtlError>
              break;
 80092ac:	bf00      	nop
          }
          break;
 80092ae:	e004      	b.n	80092ba <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fb7f 	bl	80099b6 <USBD_CtlError>
          break;
 80092b8:	bf00      	nop
      }
      break;
 80092ba:	e005      	b.n	80092c8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fb79 	bl	80099b6 <USBD_CtlError>
      break;
 80092c4:	e000      	b.n	80092c8 <USBD_StdEPReq+0x330>
      break;
 80092c6:	bf00      	nop
  }

  return ret;
 80092c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3710      	adds	r7, #16
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	0a1b      	lsrs	r3, r3, #8
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	3b01      	subs	r3, #1
 80092f4:	2b0e      	cmp	r3, #14
 80092f6:	f200 8152 	bhi.w	800959e <USBD_GetDescriptor+0x2ca>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <USBD_GetDescriptor+0x2c>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009371 	.word	0x08009371
 8009304:	08009389 	.word	0x08009389
 8009308:	080093c9 	.word	0x080093c9
 800930c:	0800959f 	.word	0x0800959f
 8009310:	0800959f 	.word	0x0800959f
 8009314:	0800953f 	.word	0x0800953f
 8009318:	0800956b 	.word	0x0800956b
 800931c:	0800959f 	.word	0x0800959f
 8009320:	0800959f 	.word	0x0800959f
 8009324:	0800959f 	.word	0x0800959f
 8009328:	0800959f 	.word	0x0800959f
 800932c:	0800959f 	.word	0x0800959f
 8009330:	0800959f 	.word	0x0800959f
 8009334:	0800959f 	.word	0x0800959f
 8009338:	0800933d 	.word	0x0800933d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	69db      	ldr	r3, [r3, #28]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800935e:	e126      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fb27 	bl	80099b6 <USBD_CtlError>
        err++;
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	3301      	adds	r3, #1
 800936c:	72fb      	strb	r3, [r7, #11]
      break;
 800936e:	e11e      	b.n	80095ae <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	7c12      	ldrb	r2, [r2, #16]
 800937c:	f107 0108 	add.w	r1, r7, #8
 8009380:	4610      	mov	r0, r2
 8009382:	4798      	blx	r3
 8009384:	60f8      	str	r0, [r7, #12]
      break;
 8009386:	e112      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7c1b      	ldrb	r3, [r3, #16]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10d      	bne.n	80093ac <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009398:	f107 0208 	add.w	r2, r7, #8
 800939c:	4610      	mov	r0, r2
 800939e:	4798      	blx	r3
 80093a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	2202      	movs	r2, #2
 80093a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80093aa:	e100      	b.n	80095ae <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b4:	f107 0208 	add.w	r2, r7, #8
 80093b8:	4610      	mov	r0, r2
 80093ba:	4798      	blx	r3
 80093bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	3301      	adds	r3, #1
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
      break;
 80093c6:	e0f2      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	885b      	ldrh	r3, [r3, #2]
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b05      	cmp	r3, #5
 80093d0:	f200 80ac 	bhi.w	800952c <USBD_GetDescriptor+0x258>
 80093d4:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBD_GetDescriptor+0x108>)
 80093d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093da:	bf00      	nop
 80093dc:	080093f5 	.word	0x080093f5
 80093e0:	08009429 	.word	0x08009429
 80093e4:	0800945d 	.word	0x0800945d
 80093e8:	08009491 	.word	0x08009491
 80093ec:	080094c5 	.word	0x080094c5
 80093f0:	080094f9 	.word	0x080094f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00b      	beq.n	8009418 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009416:	e091      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009418:	6839      	ldr	r1, [r7, #0]
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 facb 	bl	80099b6 <USBD_CtlError>
            err++;
 8009420:	7afb      	ldrb	r3, [r7, #11]
 8009422:	3301      	adds	r3, #1
 8009424:	72fb      	strb	r3, [r7, #11]
          break;
 8009426:	e089      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	7c12      	ldrb	r2, [r2, #16]
 8009440:	f107 0108 	add.w	r1, r7, #8
 8009444:	4610      	mov	r0, r2
 8009446:	4798      	blx	r3
 8009448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800944a:	e077      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800944c:	6839      	ldr	r1, [r7, #0]
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fab1 	bl	80099b6 <USBD_CtlError>
            err++;
 8009454:	7afb      	ldrb	r3, [r7, #11]
 8009456:	3301      	adds	r3, #1
 8009458:	72fb      	strb	r3, [r7, #11]
          break;
 800945a:	e06f      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00b      	beq.n	8009480 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	7c12      	ldrb	r2, [r2, #16]
 8009474:	f107 0108 	add.w	r1, r7, #8
 8009478:	4610      	mov	r0, r2
 800947a:	4798      	blx	r3
 800947c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800947e:	e05d      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fa97 	bl	80099b6 <USBD_CtlError>
            err++;
 8009488:	7afb      	ldrb	r3, [r7, #11]
 800948a:	3301      	adds	r3, #1
 800948c:	72fb      	strb	r3, [r7, #11]
          break;
 800948e:	e055      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	7c12      	ldrb	r2, [r2, #16]
 80094a8:	f107 0108 	add.w	r1, r7, #8
 80094ac:	4610      	mov	r0, r2
 80094ae:	4798      	blx	r3
 80094b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094b2:	e043      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094b4:	6839      	ldr	r1, [r7, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa7d 	bl	80099b6 <USBD_CtlError>
            err++;
 80094bc:	7afb      	ldrb	r3, [r7, #11]
 80094be:	3301      	adds	r3, #1
 80094c0:	72fb      	strb	r3, [r7, #11]
          break;
 80094c2:	e03b      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	7c12      	ldrb	r2, [r2, #16]
 80094dc:	f107 0108 	add.w	r1, r7, #8
 80094e0:	4610      	mov	r0, r2
 80094e2:	4798      	blx	r3
 80094e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094e6:	e029      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 fa63 	bl	80099b6 <USBD_CtlError>
            err++;
 80094f0:	7afb      	ldrb	r3, [r7, #11]
 80094f2:	3301      	adds	r3, #1
 80094f4:	72fb      	strb	r3, [r7, #11]
          break;
 80094f6:	e021      	b.n	800953c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	7c12      	ldrb	r2, [r2, #16]
 8009510:	f107 0108 	add.w	r1, r7, #8
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800951a:	e00f      	b.n	800953c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 fa49 	bl	80099b6 <USBD_CtlError>
            err++;
 8009524:	7afb      	ldrb	r3, [r7, #11]
 8009526:	3301      	adds	r3, #1
 8009528:	72fb      	strb	r3, [r7, #11]
          break;
 800952a:	e007      	b.n	800953c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa41 	bl	80099b6 <USBD_CtlError>
          err++;
 8009534:	7afb      	ldrb	r3, [r7, #11]
 8009536:	3301      	adds	r3, #1
 8009538:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800953a:	bf00      	nop
      }
      break;
 800953c:	e037      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7c1b      	ldrb	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	f107 0208 	add.w	r2, r7, #8
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
 8009556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009558:	e029      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800955a:	6839      	ldr	r1, [r7, #0]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 fa2a 	bl	80099b6 <USBD_CtlError>
        err++;
 8009562:	7afb      	ldrb	r3, [r7, #11]
 8009564:	3301      	adds	r3, #1
 8009566:	72fb      	strb	r3, [r7, #11]
      break;
 8009568:	e021      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	7c1b      	ldrb	r3, [r3, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10d      	bne.n	800958e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957a:	f107 0208 	add.w	r2, r7, #8
 800957e:	4610      	mov	r0, r2
 8009580:	4798      	blx	r3
 8009582:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	2207      	movs	r2, #7
 800958a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800958c:	e00f      	b.n	80095ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800958e:	6839      	ldr	r1, [r7, #0]
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 fa10 	bl	80099b6 <USBD_CtlError>
        err++;
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	3301      	adds	r3, #1
 800959a:	72fb      	strb	r3, [r7, #11]
      break;
 800959c:	e007      	b.n	80095ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fa08 	bl	80099b6 <USBD_CtlError>
      err++;
 80095a6:	7afb      	ldrb	r3, [r7, #11]
 80095a8:	3301      	adds	r3, #1
 80095aa:	72fb      	strb	r3, [r7, #11]
      break;
 80095ac:	bf00      	nop
  }

  if (err != 0U)
 80095ae:	7afb      	ldrb	r3, [r7, #11]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d11e      	bne.n	80095f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	88db      	ldrh	r3, [r3, #6]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d016      	beq.n	80095ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80095bc:	893b      	ldrh	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00e      	beq.n	80095e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	88da      	ldrh	r2, [r3, #6]
 80095c6:	893b      	ldrh	r3, [r7, #8]
 80095c8:	4293      	cmp	r3, r2
 80095ca:	bf28      	it	cs
 80095cc:	4613      	movcs	r3, r2
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80095d2:	893b      	ldrh	r3, [r7, #8]
 80095d4:	461a      	mov	r2, r3
 80095d6:	68f9      	ldr	r1, [r7, #12]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fa5d 	bl	8009a98 <USBD_CtlSendData>
 80095de:	e009      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f9e7 	bl	80099b6 <USBD_CtlError>
 80095e8:	e004      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 fa91 	bl	8009b12 <USBD_CtlSendStatus>
 80095f0:	e000      	b.n	80095f4 <USBD_GetDescriptor+0x320>
    return;
 80095f2:	bf00      	nop
  }
}
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop

080095fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	889b      	ldrh	r3, [r3, #4]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d131      	bne.n	8009672 <USBD_SetAddress+0x76>
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	88db      	ldrh	r3, [r3, #6]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d12d      	bne.n	8009672 <USBD_SetAddress+0x76>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	885b      	ldrh	r3, [r3, #2]
 800961a:	2b7f      	cmp	r3, #127	; 0x7f
 800961c:	d829      	bhi.n	8009672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	885b      	ldrh	r3, [r3, #2]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b03      	cmp	r3, #3
 8009634:	d104      	bne.n	8009640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f9bc 	bl	80099b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	e01d      	b.n	800967c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	7bfa      	ldrb	r2, [r7, #15]
 8009644:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f003 f91f 	bl	800c890 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fa5d 	bl	8009b12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009658:	7bfb      	ldrb	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d004      	beq.n	8009668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2202      	movs	r2, #2
 8009662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009666:	e009      	b.n	800967c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009670:	e004      	b.n	800967c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 f99e 	bl	80099b6 <USBD_CtlError>
  }
}
 800967a:	bf00      	nop
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	885b      	ldrh	r3, [r3, #2]
 8009696:	b2da      	uxtb	r2, r3
 8009698:	4b4e      	ldr	r3, [pc, #312]	; (80097d4 <USBD_SetConfig+0x150>)
 800969a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800969c:	4b4d      	ldr	r3, [pc, #308]	; (80097d4 <USBD_SetConfig+0x150>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d905      	bls.n	80096b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f985 	bl	80099b6 <USBD_CtlError>
    return USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e08c      	b.n	80097ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d002      	beq.n	80096c2 <USBD_SetConfig+0x3e>
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d029      	beq.n	8009714 <USBD_SetConfig+0x90>
 80096c0:	e075      	b.n	80097ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80096c2:	4b44      	ldr	r3, [pc, #272]	; (80097d4 <USBD_SetConfig+0x150>)
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d020      	beq.n	800970c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80096ca:	4b42      	ldr	r3, [pc, #264]	; (80097d4 <USBD_SetConfig+0x150>)
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80096d4:	4b3f      	ldr	r3, [pc, #252]	; (80097d4 <USBD_SetConfig+0x150>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7fe ffbd 	bl	800865a <USBD_SetClassConfig>
 80096e0:	4603      	mov	r3, r0
 80096e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d008      	beq.n	80096fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80096ea:	6839      	ldr	r1, [r7, #0]
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 f962 	bl	80099b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2202      	movs	r2, #2
 80096f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80096fa:	e065      	b.n	80097c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa08 	bl	8009b12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2203      	movs	r2, #3
 8009706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800970a:	e05d      	b.n	80097c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fa00 	bl	8009b12 <USBD_CtlSendStatus>
      break;
 8009712:	e059      	b.n	80097c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009714:	4b2f      	ldr	r3, [pc, #188]	; (80097d4 <USBD_SetConfig+0x150>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d112      	bne.n	8009742 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2202      	movs	r2, #2
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009724:	4b2b      	ldr	r3, [pc, #172]	; (80097d4 <USBD_SetConfig+0x150>)
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800972e:	4b29      	ldr	r3, [pc, #164]	; (80097d4 <USBD_SetConfig+0x150>)
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7fe ffac 	bl	8008692 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f9e9 	bl	8009b12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009740:	e042      	b.n	80097c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009742:	4b24      	ldr	r3, [pc, #144]	; (80097d4 <USBD_SetConfig+0x150>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	461a      	mov	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d02a      	beq.n	80097a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f7fe ff9a 	bl	8008692 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800975e:	4b1d      	ldr	r3, [pc, #116]	; (80097d4 <USBD_SetConfig+0x150>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009768:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <USBD_SetConfig+0x150>)
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	4619      	mov	r1, r3
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe ff73 	bl	800865a <USBD_SetClassConfig>
 8009774:	4603      	mov	r3, r0
 8009776:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00f      	beq.n	800979e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f918 	bl	80099b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	4619      	mov	r1, r3
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7fe ff7f 	bl	8008692 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800979c:	e014      	b.n	80097c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f9b7 	bl	8009b12 <USBD_CtlSendStatus>
      break;
 80097a4:	e010      	b.n	80097c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f9b3 	bl	8009b12 <USBD_CtlSendStatus>
      break;
 80097ac:	e00c      	b.n	80097c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80097ae:	6839      	ldr	r1, [r7, #0]
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f000 f900 	bl	80099b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097b6:	4b07      	ldr	r3, [pc, #28]	; (80097d4 <USBD_SetConfig+0x150>)
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fe ff68 	bl	8008692 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80097c2:	2303      	movs	r3, #3
 80097c4:	73fb      	strb	r3, [r7, #15]
      break;
 80097c6:	bf00      	nop
  }

  return ret;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000278 	.word	0x20000278

080097d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	88db      	ldrh	r3, [r3, #6]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d004      	beq.n	80097f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f8e2 	bl	80099b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80097f2:	e023      	b.n	800983c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	dc02      	bgt.n	8009806 <USBD_GetConfig+0x2e>
 8009800:	2b00      	cmp	r3, #0
 8009802:	dc03      	bgt.n	800980c <USBD_GetConfig+0x34>
 8009804:	e015      	b.n	8009832 <USBD_GetConfig+0x5a>
 8009806:	2b03      	cmp	r3, #3
 8009808:	d00b      	beq.n	8009822 <USBD_GetConfig+0x4a>
 800980a:	e012      	b.n	8009832 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	3308      	adds	r3, #8
 8009816:	2201      	movs	r2, #1
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 f93c 	bl	8009a98 <USBD_CtlSendData>
        break;
 8009820:	e00c      	b.n	800983c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3304      	adds	r3, #4
 8009826:	2201      	movs	r2, #1
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 f934 	bl	8009a98 <USBD_CtlSendData>
        break;
 8009830:	e004      	b.n	800983c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009832:	6839      	ldr	r1, [r7, #0]
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f8be 	bl	80099b6 <USBD_CtlError>
        break;
 800983a:	bf00      	nop
}
 800983c:	bf00      	nop
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009854:	b2db      	uxtb	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	2b02      	cmp	r3, #2
 800985a:	d81e      	bhi.n	800989a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	88db      	ldrh	r3, [r3, #6]
 8009860:	2b02      	cmp	r3, #2
 8009862:	d004      	beq.n	800986e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 f8a5 	bl	80099b6 <USBD_CtlError>
        break;
 800986c:	e01a      	b.n	80098a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800987a:	2b00      	cmp	r3, #0
 800987c:	d005      	beq.n	800988a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68db      	ldr	r3, [r3, #12]
 8009882:	f043 0202 	orr.w	r2, r3, #2
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	330c      	adds	r3, #12
 800988e:	2202      	movs	r2, #2
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f900 	bl	8009a98 <USBD_CtlSendData>
      break;
 8009898:	e004      	b.n	80098a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f88a 	bl	80099b6 <USBD_CtlError>
      break;
 80098a2:	bf00      	nop
  }
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	885b      	ldrh	r3, [r3, #2]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d107      	bne.n	80098ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f923 	bl	8009b12 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80098cc:	e013      	b.n	80098f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	885b      	ldrh	r3, [r3, #2]
 80098d2:	2b02      	cmp	r3, #2
 80098d4:	d10b      	bne.n	80098ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	889b      	ldrh	r3, [r3, #4]
 80098da:	0a1b      	lsrs	r3, r3, #8
 80098dc:	b29b      	uxth	r3, r3
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f913 	bl	8009b12 <USBD_CtlSendStatus>
}
 80098ec:	e003      	b.n	80098f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80098ee:	6839      	ldr	r1, [r7, #0]
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 f860 	bl	80099b6 <USBD_CtlError>
}
 80098f6:	bf00      	nop
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b082      	sub	sp, #8
 8009902:	af00      	add	r7, sp, #0
 8009904:	6078      	str	r0, [r7, #4]
 8009906:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800990e:	b2db      	uxtb	r3, r3
 8009910:	3b01      	subs	r3, #1
 8009912:	2b02      	cmp	r3, #2
 8009914:	d80b      	bhi.n	800992e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	885b      	ldrh	r3, [r3, #2]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d10c      	bne.n	8009938 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f8f3 	bl	8009b12 <USBD_CtlSendStatus>
      }
      break;
 800992c:	e004      	b.n	8009938 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f840 	bl	80099b6 <USBD_CtlError>
      break;
 8009936:	e000      	b.n	800993a <USBD_ClrFeature+0x3c>
      break;
 8009938:	bf00      	nop
  }
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	781a      	ldrb	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3301      	adds	r3, #1
 800996a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f7ff fa17 	bl	8008da0 <SWAPBYTE>
 8009972:	4603      	mov	r3, r0
 8009974:	461a      	mov	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3301      	adds	r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3301      	adds	r3, #1
 8009984:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff fa0a 	bl	8008da0 <SWAPBYTE>
 800998c:	4603      	mov	r3, r0
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	3301      	adds	r3, #1
 8009998:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80099a0:	68f8      	ldr	r0, [r7, #12]
 80099a2:	f7ff f9fd 	bl	8008da0 <SWAPBYTE>
 80099a6:	4603      	mov	r3, r0
 80099a8:	461a      	mov	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	80da      	strh	r2, [r3, #6]
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80099c0:	2180      	movs	r1, #128	; 0x80
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f002 fefa 	bl	800c7bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80099c8:	2100      	movs	r1, #0
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f002 fef6 	bl	800c7bc <USBD_LL_StallEP>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d036      	beq.n	8009a5c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80099f2:	6938      	ldr	r0, [r7, #16]
 80099f4:	f000 f836 	bl	8009a64 <USBD_GetLen>
 80099f8:	4603      	mov	r3, r0
 80099fa:	3301      	adds	r3, #1
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	b29a      	uxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	7812      	ldrb	r2, [r2, #0]
 8009a10:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a12:	7dfb      	ldrb	r3, [r7, #23]
 8009a14:	3301      	adds	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009a18:	7dfb      	ldrb	r3, [r7, #23]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	2203      	movs	r2, #3
 8009a20:	701a      	strb	r2, [r3, #0]
  idx++;
 8009a22:	7dfb      	ldrb	r3, [r7, #23]
 8009a24:	3301      	adds	r3, #1
 8009a26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009a28:	e013      	b.n	8009a52 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	4413      	add	r3, r2
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	613b      	str	r3, [r7, #16]
    idx++;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	68ba      	ldr	r2, [r7, #8]
 8009a46:	4413      	add	r3, r2
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
    idx++;
 8009a4c:	7dfb      	ldrb	r3, [r7, #23]
 8009a4e:	3301      	adds	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d1e7      	bne.n	8009a2a <USBD_GetString+0x52>
 8009a5a:	e000      	b.n	8009a5e <USBD_GetString+0x86>
    return;
 8009a5c:	bf00      	nop
  }
}
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009a74:	e005      	b.n	8009a82 <USBD_GetLen+0x1e>
  {
    len++;
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f5      	bne.n	8009a76 <USBD_GetLen+0x12>
  }

  return len;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f002 ff05 	bl	800c8ce <USBD_LL_Transmit>

  return USBD_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	2100      	movs	r1, #0
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f002 fef4 	bl	800c8ce <USBD_LL_Transmit>

  return USBD_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	2100      	movs	r1, #0
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f002 ff04 	bl	800c910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}

08009b12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009b12:	b580      	push	{r7, lr}
 8009b14:	b082      	sub	sp, #8
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2204      	movs	r2, #4
 8009b1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009b22:	2300      	movs	r3, #0
 8009b24:	2200      	movs	r2, #0
 8009b26:	2100      	movs	r1, #0
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f002 fed0 	bl	800c8ce <USBD_LL_Transmit>

  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2205      	movs	r2, #5
 8009b44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f002 fede 	bl	800c910 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3708      	adds	r7, #8
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009b60:	b590      	push	{r4, r7, lr}
 8009b62:	b08b      	sub	sp, #44	; 0x2c
 8009b64:	af04      	add	r7, sp, #16
 8009b66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b72:	7919      	ldrb	r1, [r3, #4]
 8009b74:	23ff      	movs	r3, #255	; 0xff
 8009b76:	2201      	movs	r2, #1
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 ff75 	bl	800aa68 <USBH_FindInterface>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b82:	7dbb      	ldrb	r3, [r7, #22]
 8009b84:	2bff      	cmp	r3, #255	; 0xff
 8009b86:	d002      	beq.n	8009b8e <USBH_HID_InterfaceInit+0x2e>
 8009b88:	7dbb      	ldrb	r3, [r7, #22]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d901      	bls.n	8009b92 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e108      	b.n	8009da4 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
 8009b94:	4619      	mov	r1, r3
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 ff4a 	bl	800aa30 <USBH_SelectInterface>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8009ba0:	7d7b      	ldrb	r3, [r7, #21]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e0fc      	b.n	8009da4 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009bb0:	2034      	movs	r0, #52	; 0x34
 8009bb2:	f003 faa1 	bl	800d0f8 <malloc>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8009bca:	2302      	movs	r3, #2
 8009bcc:	e0ea      	b.n	8009da4 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8009bce:	2234      	movs	r2, #52	; 0x34
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	6938      	ldr	r0, [r7, #16]
 8009bd4:	f003 faa0 	bl	800d118 <memset>

  HID_Handle->state = HID_ERROR;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	2207      	movs	r2, #7
 8009bdc:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8009bde:	7dbb      	ldrb	r3, [r7, #22]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	211a      	movs	r1, #26
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d103      	bne.n	8009bfc <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	4a6d      	ldr	r2, [pc, #436]	; (8009dac <USBH_HID_InterfaceInit+0x24c>)
 8009bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8009bfa:	e010      	b.n	8009c1e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8009bfc:	7dbb      	ldrb	r3, [r7, #22]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	211a      	movs	r1, #26
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	4413      	add	r3, r2
 8009c08:	f203 3349 	addw	r3, r3, #841	; 0x349
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d103      	bne.n	8009c1a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	4a66      	ldr	r2, [pc, #408]	; (8009db0 <USBH_HID_InterfaceInit+0x250>)
 8009c16:	631a      	str	r2, [r3, #48]	; 0x30
 8009c18:	e001      	b.n	8009c1e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e0c2      	b.n	8009da4 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2200      	movs	r2, #0
 8009c22:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2200      	movs	r2, #0
 8009c28:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009c2a:	7dbb      	ldrb	r3, [r7, #22]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	211a      	movs	r1, #26
 8009c30:	fb01 f303 	mul.w	r3, r1, r3
 8009c34:	4413      	add	r3, r2
 8009c36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009c40:	7dbb      	ldrb	r3, [r7, #22]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	211a      	movs	r1, #26
 8009c46:	fb01 f303 	mul.w	r3, r1, r3
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009c50:	881a      	ldrh	r2, [r3, #0]
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8009c56:	7dbb      	ldrb	r3, [r7, #22]
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	211a      	movs	r1, #26
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	4413      	add	r3, r2
 8009c62:	f203 3352 	addw	r3, r3, #850	; 0x352
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	8b9b      	ldrh	r3, [r3, #28]
 8009c72:	2b09      	cmp	r3, #9
 8009c74:	d802      	bhi.n	8009c7c <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	220a      	movs	r2, #10
 8009c7a:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8009c7c:	7dbb      	ldrb	r3, [r7, #22]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	211a      	movs	r1, #26
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	bf28      	it	cs
 8009c92:	2302      	movcs	r3, #2
 8009c94:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
 8009c9a:	e07d      	b.n	8009d98 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8009c9c:	7dbb      	ldrb	r3, [r7, #22]
 8009c9e:	7df9      	ldrb	r1, [r7, #23]
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	3101      	adds	r1, #1
 8009ca4:	00c9      	lsls	r1, r1, #3
 8009ca6:	201a      	movs	r0, #26
 8009ca8:	fb00 f303 	mul.w	r3, r0, r3
 8009cac:	440b      	add	r3, r1
 8009cae:	4413      	add	r3, r2
 8009cb0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	da35      	bge.n	8009d28 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009cbc:	7dbb      	ldrb	r3, [r7, #22]
 8009cbe:	7df9      	ldrb	r1, [r7, #23]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	3101      	adds	r1, #1
 8009cc4:	00c9      	lsls	r1, r1, #3
 8009cc6:	201a      	movs	r0, #26
 8009cc8:	fb00 f303 	mul.w	r3, r0, r3
 8009ccc:	440b      	add	r3, r1
 8009cce:	4413      	add	r3, r2
 8009cd0:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	791b      	ldrb	r3, [r3, #4]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f002 f9b8 	bl	800c056 <USBH_AllocPipe>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	461a      	mov	r2, r3
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	7859      	ldrb	r1, [r3, #1]
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	7918      	ldrb	r0, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	8b12      	ldrh	r2, [r2, #24]
 8009d06:	9202      	str	r2, [sp, #8]
 8009d08:	2203      	movs	r2, #3
 8009d0a:	9201      	str	r2, [sp, #4]
 8009d0c:	9300      	str	r3, [sp, #0]
 8009d0e:	4623      	mov	r3, r4
 8009d10:	4602      	mov	r2, r0
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f002 f970 	bl	800bff8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f003 f93b 	bl	800cf9c <USBH_LL_SetToggle>
 8009d26:	e034      	b.n	8009d92 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8009d28:	7dbb      	ldrb	r3, [r7, #22]
 8009d2a:	7df9      	ldrb	r1, [r7, #23]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	3101      	adds	r1, #1
 8009d30:	00c9      	lsls	r1, r1, #3
 8009d32:	201a      	movs	r0, #26
 8009d34:	fb00 f303 	mul.w	r3, r0, r3
 8009d38:	440b      	add	r3, r1
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	78db      	ldrb	r3, [r3, #3]
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f002 f982 	bl	800c056 <USBH_AllocPipe>
 8009d52:	4603      	mov	r3, r0
 8009d54:	461a      	mov	r2, r3
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	7819      	ldrb	r1, [r3, #0]
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	78d8      	ldrb	r0, [r3, #3]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	8b12      	ldrh	r2, [r2, #24]
 8009d72:	9202      	str	r2, [sp, #8]
 8009d74:	2203      	movs	r2, #3
 8009d76:	9201      	str	r2, [sp, #4]
 8009d78:	9300      	str	r3, [sp, #0]
 8009d7a:	4623      	mov	r3, r4
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f002 f93a 	bl	800bff8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f003 f905 	bl	800cf9c <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
 8009d94:	3301      	adds	r3, #1
 8009d96:	75fb      	strb	r3, [r7, #23]
 8009d98:	7dfa      	ldrb	r2, [r7, #23]
 8009d9a:	7bfb      	ldrb	r3, [r7, #15]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	f4ff af7d 	bcc.w	8009c9c <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	371c      	adds	r7, #28
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd90      	pop	{r4, r7, pc}
 8009dac:	0800a4b1 	.word	0x0800a4b1
 8009db0:	0800a6f9 	.word	0x0800a6f9

08009db4 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009dc2:	69db      	ldr	r3, [r3, #28]
 8009dc4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00e      	beq.n	8009dec <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f002 f92e 	bl	800c036 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f002 f959 	bl	800c098 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00e      	beq.n	8009e12 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f002 f91b 	bl	800c036 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f002 f946 	bl	800c098 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e24:	69db      	ldr	r3, [r3, #28]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f003 f96e 	bl	800d108 <free>
    phost->pActiveClass->pData = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e32:	2200      	movs	r2, #0
 8009e34:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e56:	69db      	ldr	r3, [r3, #28]
 8009e58:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	795b      	ldrb	r3, [r3, #5]
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d860      	bhi.n	8009f24 <USBH_HID_ClassRequest+0xe4>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <USBH_HID_ClassRequest+0x28>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009f25 	.word	0x08009f25
 8009e70:	08009e9b 	.word	0x08009e9b
 8009e74:	08009e81 	.word	0x08009e81
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009eef 	.word	0x08009eef
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	331c      	adds	r3, #28
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f000 f9cd 	bl	800a22c <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2202      	movs	r2, #2
 8009e96:	715a      	strb	r2, [r3, #5]

      break;
 8009e98:	e04b      	b.n	8009f32 <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 f930 	bl	800a106 <USBH_HID_GetHIDReportDescriptor>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d103      	bne.n	8009eb8 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	2204      	movs	r2, #4
 8009eb4:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8009eb6:	e037      	b.n	8009f28 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d134      	bne.n	8009f28 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec2:	e031      	b.n	8009f28 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	2100      	movs	r1, #0
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f935 	bl	800a138 <USBH_HID_SetIdle>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8009ed2:	7bbb      	ldrb	r3, [r7, #14]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d103      	bne.n	8009ee0 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2205      	movs	r2, #5
 8009edc:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8009ede:	e025      	b.n	8009f2c <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	d122      	bne.n	8009f2c <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	2205      	movs	r2, #5
 8009eea:	715a      	strb	r2, [r3, #5]
      break;
 8009eec:	e01e      	b.n	8009f2c <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8009eee:	2100      	movs	r1, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f975 	bl	800a1e0 <USBH_HID_SetProtocol>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10b      	bne.n	8009f18 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2201      	movs	r2, #1
 8009f04:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	4798      	blx	r3
        status = USBH_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 8009f16:	e00b      	b.n	8009f30 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8009f18:	7bbb      	ldrb	r3, [r7, #14]
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d108      	bne.n	8009f30 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8009f1e:	2302      	movs	r3, #2
 8009f20:	73fb      	strb	r3, [r7, #15]
      break;
 8009f22:	e005      	b.n	8009f30 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 8009f24:	bf00      	nop
 8009f26:	e004      	b.n	8009f32 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f28:	bf00      	nop
 8009f2a:	e002      	b.n	8009f32 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f2c:	bf00      	nop
 8009f2e:	e000      	b.n	8009f32 <USBH_HID_ClassRequest+0xf2>
      break;
 8009f30:	bf00      	nop
  }

  return status;
 8009f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af02      	add	r7, sp, #8
 8009f42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	789b      	ldrb	r3, [r3, #2]
 8009f56:	2b06      	cmp	r3, #6
 8009f58:	f200 80a9 	bhi.w	800a0ae <USBH_HID_Process+0x172>
 8009f5c:	a201      	add	r2, pc, #4	; (adr r2, 8009f64 <USBH_HID_Process+0x28>)
 8009f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f62:	bf00      	nop
 8009f64:	08009f81 	.word	0x08009f81
 8009f68:	08009f91 	.word	0x08009f91
 8009f6c:	0800a0af 	.word	0x0800a0af
 8009f70:	0800a0af 	.word	0x0800a0af
 8009f74:	0800a001 	.word	0x0800a001
 8009f78:	08009feb 	.word	0x08009feb
 8009f7c:	0800a02f 	.word	0x0800a02f
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f8e:	e093      	b.n	800a0b8 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	695a      	ldr	r2, [r3, #20]
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	8b1b      	ldrh	r3, [r3, #24]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f8f0 	bl	800a188 <USBH_HID_GetReport>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009fac:	7dfb      	ldrb	r3, [r7, #23]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d103      	bne.n	8009fba <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2205      	movs	r2, #5
 8009fb6:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fb8:	e07e      	b.n	800a0b8 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8009fba:	7dfb      	ldrb	r3, [r7, #23]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d105      	bne.n	8009fcc <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fca:	e075      	b.n	800a0b8 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d105      	bne.n	8009fde <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2205      	movs	r2, #5
 8009fd6:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	75fb      	strb	r3, [r7, #23]
      break;
 8009fdc:	e06c      	b.n	800a0b8 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2207      	movs	r2, #7
 8009fe2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8009fe8:	e066      	b.n	800a0b8 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d05c      	beq.n	800a0b2 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	2204      	movs	r2, #4
 8009ffc:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ffe:	e058      	b.n	800a0b2 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	785b      	ldrb	r3, [r3, #1]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f001 ffd3 	bl	800bfba <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	2206      	movs	r2, #6
 800a018:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 800a02c:	e044      	b.n	800a0b8 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f002 ff87 	bl	800cf48 <USBH_LL_GetURBState>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d120      	bne.n	800a082 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f002 feec 	bl	800ce24 <USBH_LL_GetLastXferSize>
 800a04c:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d12e      	bne.n	800a0b6 <USBH_HID_Process+0x17a>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d02b      	beq.n	800a0b6 <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	f103 0008 	add.w	r0, r3, #8
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	6959      	ldr	r1, [r3, #20]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	8b1b      	ldrh	r3, [r3, #24]
 800a06c:	461a      	mov	r2, r3
 800a06e:	f000 f9ca 	bl	800a406 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7f6 fabc 	bl	80005f8 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800a080:	e019      	b.n	800a0b6 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	785b      	ldrb	r3, [r3, #1]
 800a086:	4619      	mov	r1, r3
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f002 ff5d 	bl	800cf48 <USBH_LL_GetURBState>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b05      	cmp	r3, #5
 800a092:	d110      	bne.n	800a0b6 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	7e9b      	ldrb	r3, [r3, #26]
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f001 fab1 	bl	800b602 <USBH_ClrFeature>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2204      	movs	r2, #4
 800a0aa:	709a      	strb	r2, [r3, #2]
      break;
 800a0ac:	e003      	b.n	800a0b6 <USBH_HID_Process+0x17a>

    default:
      break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <USBH_HID_Process+0x17c>
      break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <USBH_HID_Process+0x17c>
      break;
 800a0b6:	bf00      	nop
  }

  return status;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop

0800a0c4 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	789b      	ldrb	r3, [r3, #2]
 800a0da:	2b06      	cmp	r3, #6
 800a0dc:	d10c      	bne.n	800a0f8 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	8b92      	ldrh	r2, [r2, #28]
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d302      	bcc.n	800a0f8 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2204      	movs	r2, #4
 800a0f6:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b086      	sub	sp, #24
 800a10a:	af02      	add	r7, sp, #8
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	460b      	mov	r3, r1
 800a110:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a118:	887b      	ldrh	r3, [r7, #2]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	4613      	mov	r3, r2
 800a11e:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800a122:	2101      	movs	r1, #1
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f001 f9cc 	bl	800b4c2 <USBH_GetDescriptor>
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800a12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	460b      	mov	r3, r1
 800a142:	70fb      	strb	r3, [r7, #3]
 800a144:	4613      	mov	r3, r2
 800a146:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2221      	movs	r2, #33	; 0x21
 800a14c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	220a      	movs	r2, #10
 800a152:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800a154:	78fb      	ldrb	r3, [r7, #3]
 800a156:	b29b      	uxth	r3, r3
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	78bb      	ldrb	r3, [r7, #2]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	4313      	orrs	r3, r2
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 fd0f 	bl	800bb9c <USBH_CtlReq>
 800a17e:	4603      	mov	r3, r0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3708      	adds	r7, #8
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	460b      	mov	r3, r1
 800a194:	72fb      	strb	r3, [r7, #11]
 800a196:	4613      	mov	r3, r2
 800a198:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	22a1      	movs	r2, #161	; 0xa1
 800a19e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	7abb      	ldrb	r3, [r7, #10]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800a1c0:	7e3b      	ldrb	r3, [r7, #24]
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800a1c8:	7e3b      	ldrb	r3, [r7, #24]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6879      	ldr	r1, [r7, #4]
 800a1d0:	68f8      	ldr	r0, [r7, #12]
 800a1d2:	f001 fce3 	bl	800bb9c <USBH_CtlReq>
 800a1d6:	4603      	mov	r3, r0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3710      	adds	r7, #16
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2221      	movs	r2, #33	; 0x21
 800a1f0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	220b      	movs	r2, #11
 800a1f6:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d003      	beq.n	800a206 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	825a      	strh	r2, [r3, #18]
 800a204:	e002      	b.n	800a20c <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800a218:	2200      	movs	r2, #0
 800a21a:	2100      	movs	r1, #0
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 fcbd 	bl	800bb9c <USBH_CtlReq>
 800a222:	4603      	mov	r3, r0

}
 800a224:	4618      	mov	r0, r3
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	3302      	adds	r3, #2
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	b29a      	uxth	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	3303      	adds	r3, #3
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	021b      	lsls	r3, r3, #8
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800a252:	897b      	ldrh	r3, [r7, #10]
 800a254:	2b09      	cmp	r3, #9
 800a256:	d943      	bls.n	800a2e0 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a258:	2309      	movs	r3, #9
 800a25a:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800a25c:	e03c      	b.n	800a2d8 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a25e:	f107 0308 	add.w	r3, r7, #8
 800a262:	4619      	mov	r1, r3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f001 fc7e 	bl	800bb66 <USBH_GetNextDesc>
 800a26a:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	2b21      	cmp	r3, #33	; 0x21
 800a272:	d131      	bne.n	800a2d8 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	781a      	ldrb	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	785a      	ldrb	r2, [r3, #1]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	3302      	adds	r3, #2
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3303      	adds	r3, #3
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	b29b      	uxth	r3, r3
 800a298:	4313      	orrs	r3, r2
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	791a      	ldrb	r2, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	795a      	ldrb	r2, [r3, #5]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	799a      	ldrb	r2, [r3, #6]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	3307      	adds	r3, #7
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	811a      	strh	r2, [r3, #8]
        break;
 800a2d4:	bf00      	nop
      }
    }
  }
}
 800a2d6:	e003      	b.n	800a2e0 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 800a2d8:	893b      	ldrh	r3, [r7, #8]
 800a2da:	897a      	ldrh	r2, [r7, #10]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d8be      	bhi.n	800a25e <USBH_HID_ParseHIDDesc+0x32>
}
 800a2e0:	bf00      	nop
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800a2f0:	23ff      	movs	r3, #255	; 0xff
 800a2f2:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b0b      	cmp	r3, #11
 800a2fc:	d117      	bne.n	800a32e <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800a304:	4619      	mov	r1, r3
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	231a      	movs	r3, #26
 800a30a:	fb01 f303 	mul.w	r3, r1, r3
 800a30e:	4413      	add	r3, r2
 800a310:	f203 3349 	addw	r3, r3, #841	; 0x349
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800a318:	7bbb      	ldrb	r3, [r7, #14]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d102      	bne.n	800a324 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 800a31e:	2302      	movs	r3, #2
 800a320:	73fb      	strb	r3, [r7, #15]
 800a322:	e004      	b.n	800a32e <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800a324:	7bbb      	ldrb	r3, [r7, #14]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d101      	bne.n	800a32e <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800a32a:	2301      	movs	r3, #1
 800a32c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	4613      	mov	r3, r2
 800a348:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	88fa      	ldrh	r2, [r7, #6]
 800a360:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	68ba      	ldr	r2, [r7, #8]
 800a366:	601a      	str	r2, [r3, #0]
}
 800a368:	bf00      	nop
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	7a9b      	ldrb	r3, [r3, #10]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d131      	bne.n	800a3f2 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2201      	movs	r2, #1
 800a392:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a394:	2300      	movs	r3, #0
 800a396:	82fb      	strh	r3, [r7, #22]
 800a398:	e027      	b.n	800a3ea <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	88da      	ldrh	r2, [r3, #6]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	889b      	ldrh	r3, [r3, #4]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d019      	beq.n	800a3da <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	88d2      	ldrh	r2, [r2, #6]
 800a3ae:	441a      	add	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	1c59      	adds	r1, r3, #1
 800a3b4:	6139      	str	r1, [r7, #16]
 800a3b6:	7812      	ldrb	r2, [r2, #0]
 800a3b8:	701a      	strb	r2, [r3, #0]
        f->tail++;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	88db      	ldrh	r3, [r3, #6]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	88da      	ldrh	r2, [r3, #6]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	891b      	ldrh	r3, [r3, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d108      	bne.n	800a3e4 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	80da      	strh	r2, [r3, #6]
 800a3d8:	e004      	b.n	800a3e4 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	729a      	strb	r2, [r3, #10]
        return i;
 800a3e0:	8afb      	ldrh	r3, [r7, #22]
 800a3e2:	e00a      	b.n	800a3fa <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800a3e4:	8afb      	ldrh	r3, [r7, #22]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	82fb      	strh	r3, [r7, #22]
 800a3ea:	8afa      	ldrh	r2, [r7, #22]
 800a3ec:	88fb      	ldrh	r3, [r7, #6]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d3d3      	bcc.n	800a39a <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a3f8:	88fb      	ldrh	r3, [r7, #6]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	371c      	adds	r7, #28
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800a406:	b480      	push	{r7}
 800a408:	b087      	sub	sp, #28
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	60f8      	str	r0, [r7, #12]
 800a40e:	60b9      	str	r1, [r7, #8]
 800a410:	4613      	mov	r3, r2
 800a412:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	7a9b      	ldrb	r3, [r3, #10]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d13c      	bne.n	800a49a <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2201      	movs	r2, #1
 800a424:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800a426:	2300      	movs	r3, #0
 800a428:	82fb      	strh	r3, [r7, #22]
 800a42a:	e032      	b.n	800a492 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	889b      	ldrh	r3, [r3, #4]
 800a430:	3301      	adds	r3, #1
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	88d2      	ldrh	r2, [r2, #6]
 800a436:	4293      	cmp	r3, r2
 800a438:	d00a      	beq.n	800a450 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	889b      	ldrh	r3, [r3, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800a444:	4293      	cmp	r3, r2
 800a446:	d108      	bne.n	800a45a <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	88db      	ldrh	r3, [r3, #6]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	729a      	strb	r2, [r3, #10]
        return i;
 800a456:	8afb      	ldrh	r3, [r7, #22]
 800a458:	e023      	b.n	800a4a2 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	613a      	str	r2, [r7, #16]
 800a460:	68fa      	ldr	r2, [r7, #12]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	68f9      	ldr	r1, [r7, #12]
 800a466:	8889      	ldrh	r1, [r1, #4]
 800a468:	440a      	add	r2, r1
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	7013      	strb	r3, [r2, #0]
        f->head++;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	889b      	ldrh	r3, [r3, #4]
 800a472:	3301      	adds	r3, #1
 800a474:	b29a      	uxth	r2, r3
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	889a      	ldrh	r2, [r3, #4]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	891b      	ldrh	r3, [r3, #8]
 800a482:	429a      	cmp	r2, r3
 800a484:	d102      	bne.n	800a48c <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 800a48c:	8afb      	ldrh	r3, [r7, #22]
 800a48e:	3301      	adds	r3, #1
 800a490:	82fb      	strh	r3, [r7, #22]
 800a492:	8afa      	ldrh	r2, [r7, #22]
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	429a      	cmp	r2, r3
 800a498:	d3c8      	bcc.n	800a42c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800a4a0:	88fb      	ldrh	r3, [r7, #6]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	371c      	adds	r7, #28
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a4be:	69db      	ldr	r3, [r3, #28]
 800a4c0:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 800a4ce:	4b1f      	ldr	r3, [pc, #124]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800a4d4:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800a4da:	4b1c      	ldr	r3, [pc, #112]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 800a4e0:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800a4e6:	4b19      	ldr	r3, [pc, #100]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 800a4ec:	4b17      	ldr	r3, [pc, #92]	; (800a54c <USBH_HID_KeybdInit+0x9c>)
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
 800a4f6:	e00c      	b.n	800a512 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800a4f8:	4a15      	ldr	r2, [pc, #84]	; (800a550 <USBH_HID_KeybdInit+0xa0>)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800a502:	4a14      	ldr	r2, [pc, #80]	; (800a554 <USBH_HID_KeybdInit+0xa4>)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2100      	movs	r1, #0
 800a508:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2b01      	cmp	r3, #1
 800a516:	d9ef      	bls.n	800a4f8 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	8b1b      	ldrh	r3, [r3, #24]
 800a51c:	2b08      	cmp	r3, #8
 800a51e:	d902      	bls.n	800a526 <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2208      	movs	r2, #8
 800a524:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	4a0a      	ldr	r2, [pc, #40]	; (800a554 <USBH_HID_KeybdInit+0xa4>)
 800a52a:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f103 0008 	add.w	r0, r3, #8
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a538:	2250      	movs	r2, #80	; 0x50
 800a53a:	4619      	mov	r1, r3
 800a53c:	f7ff fefe 	bl	800a33c <USBH_HID_FifoInit>

  return USBH_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	2000027c 	.word	0x2000027c
 800a550:	20000294 	.word	0x20000294
 800a554:	2000028c 	.word	0x2000028c

0800a558 <USBH_HID_GetKeybdInfo>:
  *         The function return keyboard information.
  * @param  phost: Host handle
  * @retval keyboard information
  */
HID_KEYBD_Info_TypeDef *USBH_HID_GetKeybdInfo(USBH_HandleTypeDef *phost)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_KeybdDecode(phost) == USBH_OK)
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f80d 	bl	800a580 <USBH_HID_KeybdDecode>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <USBH_HID_GetKeybdInfo+0x18>
  {
    return &keybd_info;
 800a56c:	4b03      	ldr	r3, [pc, #12]	; (800a57c <USBH_HID_GetKeybdInfo+0x24>)
 800a56e:	e000      	b.n	800a572 <USBH_HID_GetKeybdInfo+0x1a>
  }
  else
  {
    return NULL;
 800a570:	2300      	movs	r3, #0
  }
}
 800a572:	4618      	mov	r0, r3
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	2000027c 	.word	0x2000027c

0800a580 <USBH_HID_KeybdDecode>:
  *         The function decode keyboard data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_KeybdDecode(USBH_HandleTypeDef *phost)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint8_t x;

  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a58e:	69db      	ldr	r3, [r3, #28]
 800a590:	60bb      	str	r3, [r7, #8]
  if (HID_Handle->length == 0U)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	8b1b      	ldrh	r3, [r3, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <USBH_HID_KeybdDecode+0x1e>
  {
    return USBH_FAIL;
 800a59a:	2302      	movs	r3, #2
 800a59c:	e066      	b.n	800a66c <USBH_HID_KeybdDecode+0xec>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &keybd_report_data, HID_Handle->length) ==  HID_Handle->length)
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	f103 0008 	add.w	r0, r3, #8
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	8b1b      	ldrh	r3, [r3, #24]
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	4932      	ldr	r1, [pc, #200]	; (800a674 <USBH_HID_KeybdDecode+0xf4>)
 800a5ac:	f7ff fee2 	bl	800a374 <USBH_HID_FifoRead>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	8b1b      	ldrh	r3, [r3, #24]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d156      	bne.n	800a66a <USBH_HID_KeybdDecode+0xea>
  {
    keybd_info.lctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lctrl, 0U);
 800a5bc:	2100      	movs	r1, #0
 800a5be:	482e      	ldr	r0, [pc, #184]	; (800a678 <USBH_HID_KeybdDecode+0xf8>)
 800a5c0:	f000 f8e4 	bl	800a78c <HID_ReadItem>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	4b2c      	ldr	r3, [pc, #176]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a5ca:	705a      	strb	r2, [r3, #1]
    keybd_info.lshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lshift, 0U);
 800a5cc:	2100      	movs	r1, #0
 800a5ce:	482c      	ldr	r0, [pc, #176]	; (800a680 <USBH_HID_KeybdDecode+0x100>)
 800a5d0:	f000 f8dc 	bl	800a78c <HID_ReadItem>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	b2da      	uxtb	r2, r3
 800a5d8:	4b28      	ldr	r3, [pc, #160]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a5da:	709a      	strb	r2, [r3, #2]
    keybd_info.lalt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lalt, 0U);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	4829      	ldr	r0, [pc, #164]	; (800a684 <USBH_HID_KeybdDecode+0x104>)
 800a5e0:	f000 f8d4 	bl	800a78c <HID_ReadItem>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	4b24      	ldr	r3, [pc, #144]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a5ea:	70da      	strb	r2, [r3, #3]
    keybd_info.lgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_lgui, 0U);
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4826      	ldr	r0, [pc, #152]	; (800a688 <USBH_HID_KeybdDecode+0x108>)
 800a5f0:	f000 f8cc 	bl	800a78c <HID_ReadItem>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b20      	ldr	r3, [pc, #128]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a5fa:	711a      	strb	r2, [r3, #4]
    keybd_info.rctrl = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rctrl, 0U);
 800a5fc:	2100      	movs	r1, #0
 800a5fe:	4823      	ldr	r0, [pc, #140]	; (800a68c <USBH_HID_KeybdDecode+0x10c>)
 800a600:	f000 f8c4 	bl	800a78c <HID_ReadItem>
 800a604:	4603      	mov	r3, r0
 800a606:	b2da      	uxtb	r2, r3
 800a608:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a60a:	715a      	strb	r2, [r3, #5]
    keybd_info.rshift = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rshift, 0U);
 800a60c:	2100      	movs	r1, #0
 800a60e:	4820      	ldr	r0, [pc, #128]	; (800a690 <USBH_HID_KeybdDecode+0x110>)
 800a610:	f000 f8bc 	bl	800a78c <HID_ReadItem>
 800a614:	4603      	mov	r3, r0
 800a616:	b2da      	uxtb	r2, r3
 800a618:	4b18      	ldr	r3, [pc, #96]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a61a:	719a      	strb	r2, [r3, #6]
    keybd_info.ralt = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_ralt, 0U);
 800a61c:	2100      	movs	r1, #0
 800a61e:	481d      	ldr	r0, [pc, #116]	; (800a694 <USBH_HID_KeybdDecode+0x114>)
 800a620:	f000 f8b4 	bl	800a78c <HID_ReadItem>
 800a624:	4603      	mov	r3, r0
 800a626:	b2da      	uxtb	r2, r3
 800a628:	4b14      	ldr	r3, [pc, #80]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a62a:	71da      	strb	r2, [r3, #7]
    keybd_info.rgui = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_rgui, 0U);
 800a62c:	2100      	movs	r1, #0
 800a62e:	481a      	ldr	r0, [pc, #104]	; (800a698 <USBH_HID_KeybdDecode+0x118>)
 800a630:	f000 f8ac 	bl	800a78c <HID_ReadItem>
 800a634:	4603      	mov	r3, r0
 800a636:	b2da      	uxtb	r2, r3
 800a638:	4b10      	ldr	r3, [pc, #64]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a63a:	721a      	strb	r2, [r3, #8]

    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a63c:	2300      	movs	r3, #0
 800a63e:	73fb      	strb	r3, [r7, #15]
 800a640:	e00e      	b.n	800a660 <USBH_HID_KeybdDecode+0xe0>
    {
      keybd_info.keys[x] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &imp_0_key_array, x);
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	4619      	mov	r1, r3
 800a646:	4815      	ldr	r0, [pc, #84]	; (800a69c <USBH_HID_KeybdDecode+0x11c>)
 800a648:	f000 f8a0 	bl	800a78c <HID_ReadItem>
 800a64c:	4602      	mov	r2, r0
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	b2d1      	uxtb	r1, r2
 800a652:	4a0a      	ldr	r2, [pc, #40]	; (800a67c <USBH_HID_KeybdDecode+0xfc>)
 800a654:	4413      	add	r3, r2
 800a656:	460a      	mov	r2, r1
 800a658:	725a      	strb	r2, [r3, #9]
    for (x = 0U; x < sizeof(keybd_info.keys); x++)
 800a65a:	7bfb      	ldrb	r3, [r7, #15]
 800a65c:	3301      	adds	r3, #1
 800a65e:	73fb      	strb	r3, [r7, #15]
 800a660:	7bfb      	ldrb	r3, [r7, #15]
 800a662:	2b05      	cmp	r3, #5
 800a664:	d9ed      	bls.n	800a642 <USBH_HID_KeybdDecode+0xc2>
    }

    return USBH_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	e000      	b.n	800a66c <USBH_HID_KeybdDecode+0xec>
  }
  return   USBH_FAIL;
 800a66a:	2302      	movs	r3, #2
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20000294 	.word	0x20000294
 800a678:	0800daa4 	.word	0x0800daa4
 800a67c:	2000027c 	.word	0x2000027c
 800a680:	0800dac4 	.word	0x0800dac4
 800a684:	0800dae4 	.word	0x0800dae4
 800a688:	0800db04 	.word	0x0800db04
 800a68c:	0800db24 	.word	0x0800db24
 800a690:	0800db44 	.word	0x0800db44
 800a694:	0800db64 	.word	0x0800db64
 800a698:	0800db84 	.word	0x0800db84
 800a69c:	0800dba4 	.word	0x0800dba4

0800a6a0 <USBH_HID_GetASCIICode>:
  * @param  phost: Host handle
  * @param  info: Keyboard information
  * @retval ASCII code
  */
uint8_t USBH_HID_GetASCIICode(HID_KEYBD_Info_TypeDef *info)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint8_t   output;
  if ((info->lshift != 0U) || (info->rshift != 0U))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	789b      	ldrb	r3, [r3, #2]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d103      	bne.n	800a6b8 <USBH_HID_GetASCIICode+0x18>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	799b      	ldrb	r3, [r3, #6]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d009      	beq.n	800a6cc <USBH_HID_GetASCIICode+0x2c>
  {
    output =  HID_KEYBRD_ShiftKey[HID_KEYBRD_Codes[info->keys[0]]];
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	7a5b      	ldrb	r3, [r3, #9]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4b0b      	ldr	r3, [pc, #44]	; (800a6ec <USBH_HID_GetASCIICode+0x4c>)
 800a6c0:	5c9b      	ldrb	r3, [r3, r2]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <USBH_HID_GetASCIICode+0x50>)
 800a6c6:	5c9b      	ldrb	r3, [r3, r2]
 800a6c8:	73fb      	strb	r3, [r7, #15]
 800a6ca:	e008      	b.n	800a6de <USBH_HID_GetASCIICode+0x3e>
  }
  else
  {
    output =  HID_KEYBRD_Key[HID_KEYBRD_Codes[info->keys[0]]];
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	7a5b      	ldrb	r3, [r3, #9]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <USBH_HID_GetASCIICode+0x4c>)
 800a6d4:	5c9b      	ldrb	r3, [r3, r2]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <USBH_HID_GetASCIICode+0x54>)
 800a6da:	5c9b      	ldrb	r3, [r3, r2]
 800a6dc:	73fb      	strb	r3, [r7, #15]
  }
  return output;
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3714      	adds	r7, #20
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	0800dccc 	.word	0x0800dccc
 800a6f0:	0800dc48 	.word	0x0800dc48
 800a6f4:	0800dbc4 	.word	0x0800dbc4

0800a6f8 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 800a70a:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <USBH_HID_MouseInit+0x88>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800a710:	4b1b      	ldr	r3, [pc, #108]	; (800a780 <USBH_HID_MouseInit+0x88>)
 800a712:	2200      	movs	r2, #0
 800a714:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800a716:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <USBH_HID_MouseInit+0x88>)
 800a718:	2200      	movs	r2, #0
 800a71a:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 800a71c:	4b18      	ldr	r3, [pc, #96]	; (800a780 <USBH_HID_MouseInit+0x88>)
 800a71e:	2200      	movs	r2, #0
 800a720:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800a722:	4b17      	ldr	r3, [pc, #92]	; (800a780 <USBH_HID_MouseInit+0x88>)
 800a724:	2200      	movs	r2, #0
 800a726:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a728:	2300      	movs	r3, #0
 800a72a:	60fb      	str	r3, [r7, #12]
 800a72c:	e00c      	b.n	800a748 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 800a72e:	4a15      	ldr	r2, [pc, #84]	; (800a784 <USBH_HID_MouseInit+0x8c>)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2100      	movs	r1, #0
 800a734:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800a738:	4a13      	ldr	r2, [pc, #76]	; (800a788 <USBH_HID_MouseInit+0x90>)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2100      	movs	r1, #0
 800a73e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	3301      	adds	r3, #1
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d9ef      	bls.n	800a72e <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	8b1b      	ldrh	r3, [r3, #24]
 800a752:	2b08      	cmp	r3, #8
 800a754:	d902      	bls.n	800a75c <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	2208      	movs	r2, #8
 800a75a:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4a0a      	ldr	r2, [pc, #40]	; (800a788 <USBH_HID_MouseInit+0x90>)
 800a760:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f103 0008 	add.w	r0, r3, #8
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a76e:	2250      	movs	r2, #80	; 0x50
 800a770:	4619      	mov	r1, r3
 800a772:	f7ff fde3 	bl	800a33c <USBH_HID_FifoInit>

  return USBH_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}
 800a780:	2000029c 	.word	0x2000029c
 800a784:	200002a4 	.word	0x200002a4
 800a788:	200002ac 	.word	0x200002ac

0800a78c <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b089      	sub	sp, #36	; 0x24
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	7a1b      	ldrb	r3, [r3, #8]
 800a7aa:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7a5b      	ldrb	r3, [r3, #9]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d01a      	beq.n	800a7ea <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	7a5b      	ldrb	r3, [r3, #9]
 800a7b8:	78fa      	ldrb	r2, [r7, #3]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d301      	bcc.n	800a7c2 <HID_ReadItem+0x36>
    {
      return (0U);
 800a7be:	2300      	movs	r3, #0
 800a7c0:	e078      	b.n	800a8b4 <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800a7c2:	78fb      	ldrb	r3, [r7, #3]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6852      	ldr	r2, [r2, #4]
 800a7c8:	fb02 f303 	mul.w	r3, r2, r3
 800a7cc:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800a7ce:	7cfb      	ldrb	r3, [r7, #19]
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	4413      	add	r3, r2
 800a7de:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	f003 0307 	and.w	r3, r3, #7
 800a7e8:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	61bb      	str	r3, [r7, #24]
 800a7ee:	e00a      	b.n	800a806 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fe:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	3301      	adds	r3, #1
 800a804:	61bb      	str	r3, [r7, #24]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	f003 0307 	and.w	r3, r3, #7
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d004      	beq.n	800a81c <HID_ReadItem+0x90>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	08db      	lsrs	r3, r3, #3
 800a818:	3301      	adds	r3, #1
 800a81a:	e002      	b.n	800a822 <HID_ReadItem+0x96>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	08db      	lsrs	r3, r3, #3
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	4293      	cmp	r3, r2
 800a826:	d8e3      	bhi.n	800a7f0 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 800a828:	7cfb      	ldrb	r3, [r7, #19]
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	40da      	lsrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	f04f 31ff 	mov.w	r1, #4294967295
 800a836:	fa01 f303 	lsl.w	r3, r1, r3
 800a83a:	43db      	mvns	r3, r3
 800a83c:	4013      	ands	r3, r2
 800a83e:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	69fa      	ldr	r2, [r7, #28]
 800a846:	429a      	cmp	r2, r3
 800a848:	d304      	bcc.n	800a854 <HID_ReadItem+0xc8>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	69fa      	ldr	r2, [r7, #28]
 800a850:	429a      	cmp	r2, r3
 800a852:	d901      	bls.n	800a858 <HID_ReadItem+0xcc>
  {
    return (0U);
 800a854:	2300      	movs	r3, #0
 800a856:	e02d      	b.n	800a8b4 <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	7a9b      	ldrb	r3, [r3, #10]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d01e      	beq.n	800a89e <HID_ReadItem+0x112>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	3b01      	subs	r3, #1
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d014      	beq.n	800a89e <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	fa02 f303 	lsl.w	r3, r2, r3
 800a87e:	425b      	negs	r3, r3
 800a880:	69fa      	ldr	r2, [r7, #28]
 800a882:	4313      	orrs	r3, r2
 800a884:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	e010      	b.n	800a8b4 <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	fb02 f303 	mul.w	r3, r2, r3
 800a89c:	e00a      	b.n	800a8b4 <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HID_ReadItem+0x11e>
    {
      return (val);
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	e004      	b.n	800a8b4 <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
 800a8ae:	69fa      	ldr	r2, [r7, #28]
 800a8b0:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3724      	adds	r7, #36	; 0x24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b084      	sub	sp, #16
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e029      	b.n	800a92c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	79fa      	ldrb	r2, [r7, #7]
 800a8dc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 f81f 	bl	800a934 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f002 f9bf 	bl	800cca8 <USBH_LL_Init>

  return USBH_OK;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	3710      	adds	r7, #16
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]
 800a944:	e009      	b.n	800a95a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	33e0      	adds	r3, #224	; 0xe0
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	4413      	add	r3, r2
 800a950:	2200      	movs	r2, #0
 800a952:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	3301      	adds	r3, #1
 800a958:	60fb      	str	r3, [r7, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b0f      	cmp	r3, #15
 800a95e:	d9f2      	bls.n	800a946 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a960:	2300      	movs	r3, #0
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	e009      	b.n	800a97a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	4413      	add	r3, r2
 800a96c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a970:	2200      	movs	r2, #0
 800a972:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	3301      	adds	r3, #1
 800a978:	60fb      	str	r3, [r7, #12]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a980:	d3f1      	bcc.n	800a966 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2240      	movs	r2, #64	; 0x40
 800a9a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d016      	beq.n	800aa1e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d10e      	bne.n	800aa18 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aa00:	1c59      	adds	r1, r3, #1
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	33de      	adds	r3, #222	; 0xde
 800aa0c:	6839      	ldr	r1, [r7, #0]
 800aa0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	e004      	b.n	800aa22 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	73fb      	strb	r3, [r7, #15]
 800aa1c:	e001      	b.n	800aa22 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aa1e:	2302      	movs	r3, #2
 800aa20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	460b      	mov	r3, r1
 800aa3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d204      	bcs.n	800aa56 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	78fa      	ldrb	r2, [r7, #3]
 800aa50:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aa54:	e001      	b.n	800aa5a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aa56:	2302      	movs	r3, #2
 800aa58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	4608      	mov	r0, r1
 800aa72:	4611      	mov	r1, r2
 800aa74:	461a      	mov	r2, r3
 800aa76:	4603      	mov	r3, r0
 800aa78:	70fb      	strb	r3, [r7, #3]
 800aa7a:	460b      	mov	r3, r1
 800aa7c:	70bb      	strb	r3, [r7, #2]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800aa82:	2300      	movs	r3, #0
 800aa84:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aa86:	2300      	movs	r3, #0
 800aa88:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aa90:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aa92:	e025      	b.n	800aae0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800aa94:	7dfb      	ldrb	r3, [r7, #23]
 800aa96:	221a      	movs	r2, #26
 800aa98:	fb02 f303 	mul.w	r3, r2, r3
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	795b      	ldrb	r3, [r3, #5]
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d002      	beq.n	800aab6 <USBH_FindInterface+0x4e>
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	2bff      	cmp	r3, #255	; 0xff
 800aab4:	d111      	bne.n	800aada <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800aaba:	78ba      	ldrb	r2, [r7, #2]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d002      	beq.n	800aac6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aac0:	78bb      	ldrb	r3, [r7, #2]
 800aac2:	2bff      	cmp	r3, #255	; 0xff
 800aac4:	d109      	bne.n	800aada <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800aaca:	787a      	ldrb	r2, [r7, #1]
 800aacc:	429a      	cmp	r2, r3
 800aace:	d002      	beq.n	800aad6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800aad0:	787b      	ldrb	r3, [r7, #1]
 800aad2:	2bff      	cmp	r3, #255	; 0xff
 800aad4:	d101      	bne.n	800aada <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	e006      	b.n	800aae8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800aada:	7dfb      	ldrb	r3, [r7, #23]
 800aadc:	3301      	adds	r3, #1
 800aade:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d9d6      	bls.n	800aa94 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800aae6:	23ff      	movs	r3, #255	; 0xff
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	371c      	adds	r7, #28
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f002 f919 	bl	800cd34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800ab02:	2101      	movs	r1, #1
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f002 fa32 	bl	800cf6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3708      	adds	r7, #8
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af04      	add	r7, sp, #16
 800ab1a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d102      	bne.n	800ab36 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2203      	movs	r2, #3
 800ab34:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b0b      	cmp	r3, #11
 800ab3e:	f200 81be 	bhi.w	800aebe <USBH_Process+0x3aa>
 800ab42:	a201      	add	r2, pc, #4	; (adr r2, 800ab48 <USBH_Process+0x34>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab79 	.word	0x0800ab79
 800ab4c:	0800abab 	.word	0x0800abab
 800ab50:	0800ac13 	.word	0x0800ac13
 800ab54:	0800ae59 	.word	0x0800ae59
 800ab58:	0800aebf 	.word	0x0800aebf
 800ab5c:	0800acb7 	.word	0x0800acb7
 800ab60:	0800adff 	.word	0x0800adff
 800ab64:	0800aced 	.word	0x0800aced
 800ab68:	0800ad0d 	.word	0x0800ad0d
 800ab6c:	0800ad2d 	.word	0x0800ad2d
 800ab70:	0800ad71 	.word	0x0800ad71
 800ab74:	0800ae41 	.word	0x0800ae41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f000 819e 	beq.w	800aec2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ab8c:	20c8      	movs	r0, #200	; 0xc8
 800ab8e:	f002 fa35 	bl	800cffc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f002 f92b 	bl	800cdee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aba8:	e18b      	b.n	800aec2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d107      	bne.n	800abc4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800abc2:	e18d      	b.n	800aee0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800abca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800abce:	d914      	bls.n	800abfa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800abd6:	3301      	adds	r3, #1
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	d903      	bls.n	800abf2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	220d      	movs	r2, #13
 800abee:	701a      	strb	r2, [r3, #0]
      break;
 800abf0:	e176      	b.n	800aee0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
      break;
 800abf8:	e172      	b.n	800aee0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ac00:	f103 020a 	add.w	r2, r3, #10
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ac0a:	200a      	movs	r0, #10
 800ac0c:	f002 f9f6 	bl	800cffc <USBH_Delay>
      break;
 800ac10:	e166      	b.n	800aee0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ac22:	2104      	movs	r1, #4
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ac28:	2064      	movs	r0, #100	; 0x64
 800ac2a:	f002 f9e7 	bl	800cffc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f002 f8b6 	bl	800cda0 <USBH_LL_GetSpeed>
 800ac34:	4603      	mov	r3, r0
 800ac36:	461a      	mov	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2205      	movs	r2, #5
 800ac42:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ac44:	2100      	movs	r1, #0
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 fa05 	bl	800c056 <USBH_AllocPipe>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ac54:	2180      	movs	r1, #128	; 0x80
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f001 f9fd 	bl	800c056 <USBH_AllocPipe>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	461a      	mov	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	7919      	ldrb	r1, [r3, #4]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ac78:	b292      	uxth	r2, r2
 800ac7a:	9202      	str	r2, [sp, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	9201      	str	r2, [sp, #4]
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4603      	mov	r3, r0
 800ac84:	2280      	movs	r2, #128	; 0x80
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f001 f9b6 	bl	800bff8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7959      	ldrb	r1, [r3, #5]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800aca0:	b292      	uxth	r2, r2
 800aca2:	9202      	str	r2, [sp, #8]
 800aca4:	2200      	movs	r2, #0
 800aca6:	9201      	str	r2, [sp, #4]
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	4603      	mov	r3, r0
 800acac:	2200      	movs	r2, #0
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 f9a2 	bl	800bff8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800acb4:	e114      	b.n	800aee0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f918 	bl	800aeec <USBH_HandleEnum>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800acc0:	7bbb      	ldrb	r3, [r7, #14]
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f040 80fe 	bne.w	800aec6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d103      	bne.n	800ace4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2208      	movs	r2, #8
 800ace0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ace2:	e0f0      	b.n	800aec6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2207      	movs	r2, #7
 800ace8:	701a      	strb	r2, [r3, #0]
      break;
 800acea:	e0ec      	b.n	800aec6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 80e9 	beq.w	800aeca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800acfe:	2101      	movs	r1, #1
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2208      	movs	r2, #8
 800ad08:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800ad0a:	e0de      	b.n	800aeca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4619      	mov	r1, r3
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 fc2c 	bl	800b574 <USBH_SetCfg>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f040 80d5 	bne.w	800aece <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2209      	movs	r2, #9
 800ad28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad2a:	e0d0      	b.n	800aece <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d016      	beq.n	800ad68 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fc3c 	bl	800b5ba <USBH_SetFeature>
 800ad42:	4603      	mov	r3, r0
 800ad44:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d103      	bne.n	800ad56 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	220a      	movs	r2, #10
 800ad52:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ad54:	e0bd      	b.n	800aed2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800ad56:	7bbb      	ldrb	r3, [r7, #14]
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	f040 80b9 	bne.w	800aed2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	220a      	movs	r2, #10
 800ad64:	701a      	strb	r2, [r3, #0]
      break;
 800ad66:	e0b4      	b.n	800aed2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	220a      	movs	r2, #10
 800ad6c:	701a      	strb	r2, [r3, #0]
      break;
 800ad6e:	e0b0      	b.n	800aed2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 80ad 	beq.w	800aed6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ad84:	2300      	movs	r3, #0
 800ad86:	73fb      	strb	r3, [r7, #15]
 800ad88:	e016      	b.n	800adb8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800ad8a:	7bfa      	ldrb	r2, [r7, #15]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	32de      	adds	r2, #222	; 0xde
 800ad90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad94:	791a      	ldrb	r2, [r3, #4]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d108      	bne.n	800adb2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800ada0:	7bfa      	ldrb	r2, [r7, #15]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	32de      	adds	r2, #222	; 0xde
 800ada6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800adb0:	e005      	b.n	800adbe <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	3301      	adds	r3, #1
 800adb6:	73fb      	strb	r3, [r7, #15]
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0e5      	beq.n	800ad8a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	4798      	blx	r3
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d109      	bne.n	800adee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2206      	movs	r2, #6
 800adde:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ade6:	2103      	movs	r1, #3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800adec:	e073      	b.n	800aed6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	220d      	movs	r2, #13
 800adf2:	701a      	strb	r2, [r3, #0]
      break;
 800adf4:	e06f      	b.n	800aed6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	220d      	movs	r2, #13
 800adfa:	701a      	strb	r2, [r3, #0]
      break;
 800adfc:	e06b      	b.n	800aed6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d017      	beq.n	800ae38 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	4798      	blx	r3
 800ae14:	4603      	mov	r3, r0
 800ae16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	b2db      	uxtb	r3, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d103      	bne.n	800ae28 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	220b      	movs	r2, #11
 800ae24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ae26:	e058      	b.n	800aeda <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d154      	bne.n	800aeda <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	220d      	movs	r2, #13
 800ae34:	701a      	strb	r2, [r3, #0]
      break;
 800ae36:	e050      	b.n	800aeda <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	220d      	movs	r2, #13
 800ae3c:	701a      	strb	r2, [r3, #0]
      break;
 800ae3e:	e04c      	b.n	800aeda <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d049      	beq.n	800aede <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
      }
      break;
 800ae56:	e042      	b.n	800aede <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fd67 	bl	800a934 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d009      	beq.n	800ae84 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d005      	beq.n	800ae9a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ae94:	2105      	movs	r1, #5
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d107      	bne.n	800aeb6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7ff fe20 	bl	800aaf4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800aeb4:	e014      	b.n	800aee0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f001 ff3c 	bl	800cd34 <USBH_LL_Start>
      break;
 800aebc:	e010      	b.n	800aee0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800aebe:	bf00      	nop
 800aec0:	e00e      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aec2:	bf00      	nop
 800aec4:	e00c      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aec6:	bf00      	nop
 800aec8:	e00a      	b.n	800aee0 <USBH_Process+0x3cc>
    break;
 800aeca:	bf00      	nop
 800aecc:	e008      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aece:	bf00      	nop
 800aed0:	e006      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aed2:	bf00      	nop
 800aed4:	e004      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aed6:	bf00      	nop
 800aed8:	e002      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aeda:	bf00      	nop
 800aedc:	e000      	b.n	800aee0 <USBH_Process+0x3cc>
      break;
 800aede:	bf00      	nop
  }
  return USBH_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop

0800aeec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800aef4:	2301      	movs	r3, #1
 800aef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800aef8:	2301      	movs	r3, #1
 800aefa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	2b07      	cmp	r3, #7
 800af02:	f200 81c1 	bhi.w	800b288 <USBH_HandleEnum+0x39c>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <USBH_HandleEnum+0x20>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af2d 	.word	0x0800af2d
 800af10:	0800afeb 	.word	0x0800afeb
 800af14:	0800b055 	.word	0x0800b055
 800af18:	0800b0e3 	.word	0x0800b0e3
 800af1c:	0800b14d 	.word	0x0800b14d
 800af20:	0800b1bd 	.word	0x0800b1bd
 800af24:	0800b203 	.word	0x0800b203
 800af28:	0800b249 	.word	0x0800b249
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800af2c:	2108      	movs	r1, #8
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fa50 	bl	800b3d4 <USBH_Get_DevDesc>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800af38:	7bbb      	ldrb	r3, [r7, #14]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d130      	bne.n	800afa0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	7919      	ldrb	r1, [r3, #4]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800af62:	b292      	uxth	r2, r2
 800af64:	9202      	str	r2, [sp, #8]
 800af66:	2200      	movs	r2, #0
 800af68:	9201      	str	r2, [sp, #4]
 800af6a:	9300      	str	r3, [sp, #0]
 800af6c:	4603      	mov	r3, r0
 800af6e:	2280      	movs	r2, #128	; 0x80
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f001 f841 	bl	800bff8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7959      	ldrb	r1, [r3, #5]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800af8a:	b292      	uxth	r2, r2
 800af8c:	9202      	str	r2, [sp, #8]
 800af8e:	2200      	movs	r2, #0
 800af90:	9201      	str	r2, [sp, #4]
 800af92:	9300      	str	r3, [sp, #0]
 800af94:	4603      	mov	r3, r0
 800af96:	2200      	movs	r2, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 f82d 	bl	800bff8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800af9e:	e175      	b.n	800b28c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800afa0:	7bbb      	ldrb	r3, [r7, #14]
 800afa2:	2b03      	cmp	r3, #3
 800afa4:	f040 8172 	bne.w	800b28c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afae:	3301      	adds	r3, #1
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800afbe:	2b03      	cmp	r3, #3
 800afc0:	d903      	bls.n	800afca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	220d      	movs	r2, #13
 800afc6:	701a      	strb	r2, [r3, #0]
      break;
 800afc8:	e160      	b.n	800b28c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	795b      	ldrb	r3, [r3, #5]
 800afce:	4619      	mov	r1, r3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f001 f861 	bl	800c098 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	791b      	ldrb	r3, [r3, #4]
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 f85b 	bl	800c098 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	701a      	strb	r2, [r3, #0]
      break;
 800afe8:	e150      	b.n	800b28c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800afea:	2112      	movs	r1, #18
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9f1 	bl	800b3d4 <USBH_Get_DevDesc>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d103      	bne.n	800b004 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2202      	movs	r2, #2
 800b000:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b002:	e145      	b.n	800b290 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b03      	cmp	r3, #3
 800b008:	f040 8142 	bne.w	800b290 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b012:	3301      	adds	r3, #1
 800b014:	b2da      	uxtb	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b022:	2b03      	cmp	r3, #3
 800b024:	d903      	bls.n	800b02e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	220d      	movs	r2, #13
 800b02a:	701a      	strb	r2, [r3, #0]
      break;
 800b02c:	e130      	b.n	800b290 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	795b      	ldrb	r3, [r3, #5]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f82f 	bl	800c098 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	791b      	ldrb	r3, [r3, #4]
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 f829 	bl	800c098 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
      break;
 800b052:	e11d      	b.n	800b290 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b054:	2101      	movs	r1, #1
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 fa68 	bl	800b52c <USBH_SetAddress>
 800b05c:	4603      	mov	r3, r0
 800b05e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b060:	7bbb      	ldrb	r3, [r7, #14]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d132      	bne.n	800b0cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b066:	2002      	movs	r0, #2
 800b068:	f001 ffc8 	bl	800cffc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2201      	movs	r2, #1
 800b070:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2203      	movs	r2, #3
 800b078:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	7919      	ldrb	r1, [r3, #4]
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b08e:	b292      	uxth	r2, r2
 800b090:	9202      	str	r2, [sp, #8]
 800b092:	2200      	movs	r2, #0
 800b094:	9201      	str	r2, [sp, #4]
 800b096:	9300      	str	r3, [sp, #0]
 800b098:	4603      	mov	r3, r0
 800b09a:	2280      	movs	r2, #128	; 0x80
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 ffab 	bl	800bff8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	7959      	ldrb	r1, [r3, #5]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b0b6:	b292      	uxth	r2, r2
 800b0b8:	9202      	str	r2, [sp, #8]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	9201      	str	r2, [sp, #4]
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 ff97 	bl	800bff8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b0ca:	e0e3      	b.n	800b294 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	2b03      	cmp	r3, #3
 800b0d0:	f040 80e0 	bne.w	800b294 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	220d      	movs	r2, #13
 800b0d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	705a      	strb	r2, [r3, #1]
      break;
 800b0e0:	e0d8      	b.n	800b294 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b0e2:	2109      	movs	r1, #9
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f99d 	bl	800b424 <USBH_Get_CfgDesc>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d103      	bne.n	800b0fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2204      	movs	r2, #4
 800b0f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b0fa:	e0cd      	b.n	800b298 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	f040 80ca 	bne.w	800b298 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b10a:	3301      	adds	r3, #1
 800b10c:	b2da      	uxtb	r2, r3
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b11a:	2b03      	cmp	r3, #3
 800b11c:	d903      	bls.n	800b126 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	220d      	movs	r2, #13
 800b122:	701a      	strb	r2, [r3, #0]
      break;
 800b124:	e0b8      	b.n	800b298 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	795b      	ldrb	r3, [r3, #5]
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 ffb3 	bl	800c098 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	791b      	ldrb	r3, [r3, #4]
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 ffad 	bl	800c098 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
      break;
 800b14a:	e0a5      	b.n	800b298 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f965 	bl	800b424 <USBH_Get_CfgDesc>
 800b15a:	4603      	mov	r3, r0
 800b15c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b15e:	7bbb      	ldrb	r3, [r7, #14]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d103      	bne.n	800b16c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2205      	movs	r2, #5
 800b168:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b16a:	e097      	b.n	800b29c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	2b03      	cmp	r3, #3
 800b170:	f040 8094 	bne.w	800b29c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b17a:	3301      	adds	r3, #1
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d903      	bls.n	800b196 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	220d      	movs	r2, #13
 800b192:	701a      	strb	r2, [r3, #0]
      break;
 800b194:	e082      	b.n	800b29c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	795b      	ldrb	r3, [r3, #5]
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 ff7b 	bl	800c098 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	791b      	ldrb	r3, [r3, #4]
 800b1a6:	4619      	mov	r1, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 ff75 	bl	800c098 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	701a      	strb	r2, [r3, #0]
      break;
 800b1ba:	e06f      	b.n	800b29c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d019      	beq.n	800b1fa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b1d2:	23ff      	movs	r3, #255	; 0xff
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f000 f949 	bl	800b46c <USBH_Get_StringDesc>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d103      	bne.n	800b1ec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2206      	movs	r2, #6
 800b1e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b1ea:	e059      	b.n	800b2a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b1ec:	7bbb      	ldrb	r3, [r7, #14]
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d156      	bne.n	800b2a0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2206      	movs	r2, #6
 800b1f6:	705a      	strb	r2, [r3, #1]
      break;
 800b1f8:	e052      	b.n	800b2a0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2206      	movs	r2, #6
 800b1fe:	705a      	strb	r2, [r3, #1]
      break;
 800b200:	e04e      	b.n	800b2a0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d019      	beq.n	800b240 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b218:	23ff      	movs	r3, #255	; 0xff
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f926 	bl	800b46c <USBH_Get_StringDesc>
 800b220:	4603      	mov	r3, r0
 800b222:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b224:	7bbb      	ldrb	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d103      	bne.n	800b232 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2207      	movs	r2, #7
 800b22e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b230:	e038      	b.n	800b2a4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b232:	7bbb      	ldrb	r3, [r7, #14]
 800b234:	2b03      	cmp	r3, #3
 800b236:	d135      	bne.n	800b2a4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2207      	movs	r2, #7
 800b23c:	705a      	strb	r2, [r3, #1]
      break;
 800b23e:	e031      	b.n	800b2a4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2207      	movs	r2, #7
 800b244:	705a      	strb	r2, [r3, #1]
      break;
 800b246:	e02d      	b.n	800b2a4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d017      	beq.n	800b282 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b25e:	23ff      	movs	r3, #255	; 0xff
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f903 	bl	800b46c <USBH_Get_StringDesc>
 800b266:	4603      	mov	r3, r0
 800b268:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b26a:	7bbb      	ldrb	r3, [r7, #14]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d102      	bne.n	800b276 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b274:	e018      	b.n	800b2a8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b276:	7bbb      	ldrb	r3, [r7, #14]
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d115      	bne.n	800b2a8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b27c:	2300      	movs	r3, #0
 800b27e:	73fb      	strb	r3, [r7, #15]
      break;
 800b280:	e012      	b.n	800b2a8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]
      break;
 800b286:	e00f      	b.n	800b2a8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b288:	bf00      	nop
 800b28a:	e00e      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b28c:	bf00      	nop
 800b28e:	e00c      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b290:	bf00      	nop
 800b292:	e00a      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b294:	bf00      	nop
 800b296:	e008      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b298:	bf00      	nop
 800b29a:	e006      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b29c:	bf00      	nop
 800b29e:	e004      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b2a0:	bf00      	nop
 800b2a2:	e002      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b2a4:	bf00      	nop
 800b2a6:	e000      	b.n	800b2aa <USBH_HandleEnum+0x3be>
      break;
 800b2a8:	bf00      	nop
  }
  return Status;
 800b2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3710      	adds	r7, #16
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	683a      	ldr	r2, [r7, #0]
 800b2c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b2c6:	bf00      	nop
 800b2c8:	370c      	adds	r7, #12
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr

0800b2d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f000 f804 	bl	800b2f6 <USBH_HandleSof>
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	2b0b      	cmp	r3, #11
 800b306:	d10a      	bne.n	800b31e <USBH_HandleSof+0x28>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d005      	beq.n	800b31e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	4798      	blx	r3
  }
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2201      	movs	r2, #1
 800b332:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800b336:	bf00      	nop
}
 800b338:	370c      	adds	r7, #12
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b352:	bf00      	nop
}
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f001 fcdc 	bl	800cd6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	791b      	ldrb	r3, [r3, #4]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fe6d 	bl	800c098 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	795b      	ldrb	r3, [r3, #5]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fe67 	bl	800c098 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af02      	add	r7, sp, #8
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b3e6:	78fb      	ldrb	r3, [r7, #3]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	4613      	mov	r3, r2
 800b3ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b3f2:	2100      	movs	r1, #0
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f000 f864 	bl	800b4c2 <USBH_GetDescriptor>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800b3fe:	7bfb      	ldrb	r3, [r7, #15]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b410:	78fa      	ldrb	r2, [r7, #3]
 800b412:	b292      	uxth	r2, r2
 800b414:	4619      	mov	r1, r3
 800b416:	f000 f918 	bl	800b64a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af02      	add	r7, sp, #8
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	331c      	adds	r3, #28
 800b434:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b436:	887b      	ldrh	r3, [r7, #2]
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b440:	2100      	movs	r1, #0
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 f83d 	bl	800b4c2 <USBH_GetDescriptor>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d107      	bne.n	800b462 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	461a      	mov	r2, r3
 800b456:	68b9      	ldr	r1, [r7, #8]
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f987 	bl	800b76c <USBH_ParseCfgDesc>
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b462:	7bfb      	ldrb	r3, [r7, #15]
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b088      	sub	sp, #32
 800b470:	af02      	add	r7, sp, #8
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	607a      	str	r2, [r7, #4]
 800b476:	461a      	mov	r2, r3
 800b478:	460b      	mov	r3, r1
 800b47a:	72fb      	strb	r3, [r7, #11]
 800b47c:	4613      	mov	r3, r2
 800b47e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b480:	7afb      	ldrb	r3, [r7, #11]
 800b482:	b29b      	uxth	r3, r3
 800b484:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b488:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b490:	893b      	ldrh	r3, [r7, #8]
 800b492:	9300      	str	r3, [sp, #0]
 800b494:	460b      	mov	r3, r1
 800b496:	2100      	movs	r1, #0
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f000 f812 	bl	800b4c2 <USBH_GetDescriptor>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d107      	bne.n	800b4b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b4ae:	893a      	ldrh	r2, [r7, #8]
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fb24 	bl	800bb00 <USBH_ParseStringDesc>
  }

  return status;
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3718      	adds	r7, #24
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}

0800b4c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	607b      	str	r3, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	72fb      	strb	r3, [r7, #11]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	789b      	ldrb	r3, [r3, #2]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d11c      	bne.n	800b516 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b4dc:	7afb      	ldrb	r3, [r7, #11]
 800b4de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2206      	movs	r2, #6
 800b4ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	893a      	ldrh	r2, [r7, #8]
 800b4f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b4f4:	893b      	ldrh	r3, [r7, #8]
 800b4f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4fe:	d104      	bne.n	800b50a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f240 4209 	movw	r2, #1033	; 0x409
 800b506:	829a      	strh	r2, [r3, #20]
 800b508:	e002      	b.n	800b510 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8b3a      	ldrh	r2, [r7, #24]
 800b514:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b516:	8b3b      	ldrh	r3, [r7, #24]
 800b518:	461a      	mov	r2, r3
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 fb3d 	bl	800bb9c <USBH_CtlReq>
 800b522:	4603      	mov	r3, r0
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	789b      	ldrb	r3, [r3, #2]
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d10f      	bne.n	800b560 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2205      	movs	r2, #5
 800b54a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b54c:	78fb      	ldrb	r3, [r7, #3]
 800b54e:	b29a      	uxth	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2200      	movs	r2, #0
 800b558:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b560:	2200      	movs	r2, #0
 800b562:	2100      	movs	r1, #0
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 fb19 	bl	800bb9c <USBH_CtlReq>
 800b56a:	4603      	mov	r3, r0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3708      	adds	r7, #8
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	789b      	ldrb	r3, [r3, #2]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d10e      	bne.n	800b5a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2209      	movs	r2, #9
 800b592:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	887a      	ldrh	r2, [r7, #2]
 800b598:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 faf6 	bl	800bb9c <USBH_CtlReq>
 800b5b0:	4603      	mov	r3, r0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3708      	adds	r7, #8
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	789b      	ldrb	r3, [r3, #2]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d10f      	bne.n	800b5ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2203      	movs	r2, #3
 800b5d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b5da:	78fb      	ldrb	r3, [r7, #3]
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	2100      	movs	r1, #0
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fad2 	bl	800bb9c <USBH_CtlReq>
 800b5f8:	4603      	mov	r3, r0
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	789b      	ldrb	r3, [r3, #2]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d10f      	bne.n	800b636 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2200      	movs	r2, #0
 800b626:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b628:	78fb      	ldrb	r3, [r7, #3]
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b636:	2200      	movs	r2, #0
 800b638:	2100      	movs	r1, #0
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 faae 	bl	800bb9c <USBH_CtlReq>
 800b640:	4603      	mov	r3, r0
}
 800b642:	4618      	mov	r0, r3
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b64a:	b480      	push	{r7}
 800b64c:	b085      	sub	sp, #20
 800b64e:	af00      	add	r7, sp, #0
 800b650:	60f8      	str	r0, [r7, #12]
 800b652:	60b9      	str	r1, [r7, #8]
 800b654:	4613      	mov	r3, r2
 800b656:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	781a      	ldrb	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	785a      	ldrb	r2, [r3, #1]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	3302      	adds	r3, #2
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	b29a      	uxth	r2, r3
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	3303      	adds	r3, #3
 800b674:	781b      	ldrb	r3, [r3, #0]
 800b676:	b29b      	uxth	r3, r3
 800b678:	021b      	lsls	r3, r3, #8
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	4313      	orrs	r3, r2
 800b67e:	b29a      	uxth	r2, r3
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	791a      	ldrb	r2, [r3, #4]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	795a      	ldrb	r2, [r3, #5]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	799a      	ldrb	r2, [r3, #6]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	79da      	ldrb	r2, [r3, #7]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	79db      	ldrb	r3, [r3, #7]
 800b6a8:	2b20      	cmp	r3, #32
 800b6aa:	dc11      	bgt.n	800b6d0 <USBH_ParseDevDesc+0x86>
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	db16      	blt.n	800b6de <USBH_ParseDevDesc+0x94>
 800b6b0:	3b08      	subs	r3, #8
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b8:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b6bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bf14      	ite	ne
 800b6c4:	2301      	movne	r3, #1
 800b6c6:	2300      	moveq	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d102      	bne.n	800b6d4 <USBH_ParseDevDesc+0x8a>
 800b6ce:	e006      	b.n	800b6de <USBH_ParseDevDesc+0x94>
 800b6d0:	2b40      	cmp	r3, #64	; 0x40
 800b6d2:	d104      	bne.n	800b6de <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	79da      	ldrb	r2, [r3, #7]
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	71da      	strb	r2, [r3, #7]
      break;
 800b6dc:	e003      	b.n	800b6e6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2240      	movs	r2, #64	; 0x40
 800b6e2:	71da      	strb	r2, [r3, #7]
      break;
 800b6e4:	bf00      	nop
  }

  if (length > 8U)
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	2b08      	cmp	r3, #8
 800b6ea:	d939      	bls.n	800b760 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	3309      	adds	r3, #9
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	4313      	orrs	r3, r2
 800b702:	b29a      	uxth	r2, r3
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	330a      	adds	r3, #10
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	b29a      	uxth	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	330b      	adds	r3, #11
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	021b      	lsls	r3, r3, #8
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	4313      	orrs	r3, r2
 800b71e:	b29a      	uxth	r2, r3
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b724:	68bb      	ldr	r3, [r7, #8]
 800b726:	330c      	adds	r3, #12
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	330d      	adds	r3, #13
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	b29b      	uxth	r3, r3
 800b734:	021b      	lsls	r3, r3, #8
 800b736:	b29b      	uxth	r3, r3
 800b738:	4313      	orrs	r3, r2
 800b73a:	b29a      	uxth	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	7b9a      	ldrb	r2, [r3, #14]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	7bda      	ldrb	r2, [r3, #15]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	7c1a      	ldrb	r2, [r3, #16]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	7c5a      	ldrb	r2, [r3, #17]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	745a      	strb	r2, [r3, #17]
  }
}
 800b760:	bf00      	nop
 800b762:	3714      	adds	r7, #20
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08c      	sub	sp, #48	; 0x30
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	4613      	mov	r3, r2
 800b778:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b780:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	781a      	ldrb	r2, [r3, #0]
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	785a      	ldrb	r2, [r3, #1]
 800b7a8:	6a3b      	ldr	r3, [r7, #32]
 800b7aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	3302      	adds	r3, #2
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	3303      	adds	r3, #3
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	021b      	lsls	r3, r3, #8
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c8:	bf28      	it	cs
 800b7ca:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b7ce:	b29a      	uxth	r2, r3
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	791a      	ldrb	r2, [r3, #4]
 800b7d8:	6a3b      	ldr	r3, [r7, #32]
 800b7da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	795a      	ldrb	r2, [r3, #5]
 800b7e0:	6a3b      	ldr	r3, [r7, #32]
 800b7e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	799a      	ldrb	r2, [r3, #6]
 800b7e8:	6a3b      	ldr	r3, [r7, #32]
 800b7ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	79da      	ldrb	r2, [r3, #7]
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	7a1a      	ldrb	r2, [r3, #8]
 800b7f8:	6a3b      	ldr	r3, [r7, #32]
 800b7fa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b09      	cmp	r3, #9
 800b802:	d002      	beq.n	800b80a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	2209      	movs	r2, #9
 800b808:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b80a:	88fb      	ldrh	r3, [r7, #6]
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	f240 809d 	bls.w	800b94c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b812:	2309      	movs	r3, #9
 800b814:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b816:	2300      	movs	r3, #0
 800b818:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b81a:	e081      	b.n	800b920 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b81c:	f107 0316 	add.w	r3, r7, #22
 800b820:	4619      	mov	r1, r3
 800b822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b824:	f000 f99f 	bl	800bb66 <USBH_GetNextDesc>
 800b828:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	785b      	ldrb	r3, [r3, #1]
 800b82e:	2b04      	cmp	r3, #4
 800b830:	d176      	bne.n	800b920 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b09      	cmp	r3, #9
 800b838:	d002      	beq.n	800b840 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	2209      	movs	r2, #9
 800b83e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b844:	221a      	movs	r2, #26
 800b846:	fb02 f303 	mul.w	r3, r2, r3
 800b84a:	3308      	adds	r3, #8
 800b84c:	6a3a      	ldr	r2, [r7, #32]
 800b84e:	4413      	add	r3, r2
 800b850:	3302      	adds	r3, #2
 800b852:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b854:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b856:	69f8      	ldr	r0, [r7, #28]
 800b858:	f000 f87e 	bl	800b958 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b85c:	2300      	movs	r3, #0
 800b85e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b866:	e043      	b.n	800b8f0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b868:	f107 0316 	add.w	r3, r7, #22
 800b86c:	4619      	mov	r1, r3
 800b86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b870:	f000 f979 	bl	800bb66 <USBH_GetNextDesc>
 800b874:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b878:	785b      	ldrb	r3, [r3, #1]
 800b87a:	2b05      	cmp	r3, #5
 800b87c:	d138      	bne.n	800b8f0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	795b      	ldrb	r3, [r3, #5]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10f      	bne.n	800b8a6 <USBH_ParseCfgDesc+0x13a>
 800b886:	69fb      	ldr	r3, [r7, #28]
 800b888:	799b      	ldrb	r3, [r3, #6]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d10b      	bne.n	800b8a6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	79db      	ldrb	r3, [r3, #7]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10f      	bne.n	800b8b6 <USBH_ParseCfgDesc+0x14a>
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b09      	cmp	r3, #9
 800b89c:	d00b      	beq.n	800b8b6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	2209      	movs	r2, #9
 800b8a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b8a4:	e007      	b.n	800b8b6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b07      	cmp	r3, #7
 800b8ac:	d004      	beq.n	800b8b8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	2207      	movs	r2, #7
 800b8b2:	701a      	strb	r2, [r3, #0]
 800b8b4:	e000      	b.n	800b8b8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b8b6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8c0:	3201      	adds	r2, #1
 800b8c2:	00d2      	lsls	r2, r2, #3
 800b8c4:	211a      	movs	r1, #26
 800b8c6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ca:	4413      	add	r3, r2
 800b8cc:	3308      	adds	r3, #8
 800b8ce:	6a3a      	ldr	r2, [r7, #32]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	3304      	adds	r3, #4
 800b8d4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8d8:	69b9      	ldr	r1, [r7, #24]
 800b8da:	68f8      	ldr	r0, [r7, #12]
 800b8dc:	f000 f86b 	bl	800b9b6 <USBH_ParseEPDesc>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b8e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	791b      	ldrb	r3, [r3, #4]
 800b8f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d204      	bcs.n	800b906 <USBH_ParseCfgDesc+0x19a>
 800b8fc:	6a3b      	ldr	r3, [r7, #32]
 800b8fe:	885a      	ldrh	r2, [r3, #2]
 800b900:	8afb      	ldrh	r3, [r7, #22]
 800b902:	429a      	cmp	r2, r3
 800b904:	d8b0      	bhi.n	800b868 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	791b      	ldrb	r3, [r3, #4]
 800b90a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b90e:	429a      	cmp	r2, r3
 800b910:	d201      	bcs.n	800b916 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b912:	2303      	movs	r3, #3
 800b914:	e01c      	b.n	800b950 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b91a:	3301      	adds	r3, #1
 800b91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b924:	2b01      	cmp	r3, #1
 800b926:	d805      	bhi.n	800b934 <USBH_ParseCfgDesc+0x1c8>
 800b928:	6a3b      	ldr	r3, [r7, #32]
 800b92a:	885a      	ldrh	r2, [r3, #2]
 800b92c:	8afb      	ldrh	r3, [r7, #22]
 800b92e:	429a      	cmp	r2, r3
 800b930:	f63f af74 	bhi.w	800b81c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	791b      	ldrb	r3, [r3, #4]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	bf28      	it	cs
 800b93c:	2302      	movcs	r3, #2
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b944:	429a      	cmp	r2, r3
 800b946:	d201      	bcs.n	800b94c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b948:	2303      	movs	r3, #3
 800b94a:	e001      	b.n	800b950 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b94c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b950:	4618      	mov	r0, r3
 800b952:	3730      	adds	r7, #48	; 0x30
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781a      	ldrb	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	785a      	ldrb	r2, [r3, #1]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	789a      	ldrb	r2, [r3, #2]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	78da      	ldrb	r2, [r3, #3]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	791a      	ldrb	r2, [r3, #4]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	795a      	ldrb	r2, [r3, #5]
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	799a      	ldrb	r2, [r3, #6]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	79da      	ldrb	r2, [r3, #7]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	7a1a      	ldrb	r2, [r3, #8]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	721a      	strb	r2, [r3, #8]
}
 800b9aa:	bf00      	nop
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b087      	sub	sp, #28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	60b9      	str	r1, [r7, #8]
 800b9c0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	781a      	ldrb	r2, [r3, #0]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	785a      	ldrb	r2, [r3, #1]
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	789a      	ldrb	r2, [r3, #2]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	78da      	ldrb	r2, [r3, #3]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3305      	adds	r3, #5
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	021b      	lsls	r3, r3, #8
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	799a      	ldrb	r2, [r3, #6]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	889b      	ldrh	r3, [r3, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800ba12:	2303      	movs	r3, #3
 800ba14:	75fb      	strb	r3, [r7, #23]
 800ba16:	e033      	b.n	800ba80 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	889b      	ldrh	r3, [r3, #4]
 800ba1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba20:	f023 0307 	bic.w	r3, r3, #7
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	889b      	ldrh	r3, [r3, #4]
 800ba2e:	b21a      	sxth	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	3304      	adds	r3, #4
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	b299      	uxth	r1, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3305      	adds	r3, #5
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	430b      	orrs	r3, r1
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d110      	bne.n	800ba72 <USBH_ParseEPDesc+0xbc>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	3304      	adds	r3, #4
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	b299      	uxth	r1, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3305      	adds	r3, #5
 800ba5c:	781b      	ldrb	r3, [r3, #0]
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	021b      	lsls	r3, r3, #8
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	430b      	orrs	r3, r1
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	b21b      	sxth	r3, r3
 800ba6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba6e:	b21b      	sxth	r3, r3
 800ba70:	e001      	b.n	800ba76 <USBH_ParseEPDesc+0xc0>
 800ba72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba76:	4313      	orrs	r3, r2
 800ba78:	b21b      	sxth	r3, r3
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d116      	bne.n	800bab8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	78db      	ldrb	r3, [r3, #3]
 800ba8e:	f003 0303 	and.w	r3, r3, #3
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d005      	beq.n	800baa2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	78db      	ldrb	r3, [r3, #3]
 800ba9a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d127      	bne.n	800baf2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	799b      	ldrb	r3, [r3, #6]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d003      	beq.n	800bab2 <USBH_ParseEPDesc+0xfc>
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	799b      	ldrb	r3, [r3, #6]
 800baae:	2b10      	cmp	r3, #16
 800bab0:	d91f      	bls.n	800baf2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bab2:	2303      	movs	r3, #3
 800bab4:	75fb      	strb	r3, [r7, #23]
 800bab6:	e01c      	b.n	800baf2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	78db      	ldrb	r3, [r3, #3]
 800babc:	f003 0303 	and.w	r3, r3, #3
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10a      	bne.n	800bada <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	799b      	ldrb	r3, [r3, #6]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d003      	beq.n	800bad4 <USBH_ParseEPDesc+0x11e>
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	799b      	ldrb	r3, [r3, #6]
 800bad0:	2b10      	cmp	r3, #16
 800bad2:	d90e      	bls.n	800baf2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800bad4:	2303      	movs	r3, #3
 800bad6:	75fb      	strb	r3, [r7, #23]
 800bad8:	e00b      	b.n	800baf2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	78db      	ldrb	r3, [r3, #3]
 800bade:	f003 0303 	and.w	r3, r3, #3
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d105      	bne.n	800baf2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	799b      	ldrb	r3, [r3, #6]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d101      	bne.n	800baf2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800baee:	2303      	movs	r3, #3
 800baf0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800baf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	371c      	adds	r7, #28
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3301      	adds	r3, #1
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b03      	cmp	r3, #3
 800bb16:	d120      	bne.n	800bb5a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	1e9a      	subs	r2, r3, #2
 800bb1e:	88fb      	ldrh	r3, [r7, #6]
 800bb20:	4293      	cmp	r3, r2
 800bb22:	bf28      	it	cs
 800bb24:	4613      	movcs	r3, r2
 800bb26:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	3302      	adds	r3, #2
 800bb2c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bb2e:	2300      	movs	r3, #0
 800bb30:	82fb      	strh	r3, [r7, #22]
 800bb32:	e00b      	b.n	800bb4c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bb34:	8afb      	ldrh	r3, [r7, #22]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	781a      	ldrb	r2, [r3, #0]
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	3301      	adds	r3, #1
 800bb44:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bb46:	8afb      	ldrh	r3, [r7, #22]
 800bb48:	3302      	adds	r3, #2
 800bb4a:	82fb      	strh	r3, [r7, #22]
 800bb4c:	8afa      	ldrh	r2, [r7, #22]
 800bb4e:	8abb      	ldrh	r3, [r7, #20]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d3ef      	bcc.n	800bb34 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2200      	movs	r2, #0
 800bb58:	701a      	strb	r2, [r3, #0]
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bb66:	b480      	push	{r7}
 800bb68:	b085      	sub	sp, #20
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	881a      	ldrh	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b29b      	uxth	r3, r3
 800bb7a:	4413      	add	r3, r2
 800bb7c:	b29a      	uxth	r2, r3
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3714      	adds	r7, #20
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	789b      	ldrb	r3, [r3, #2]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d002      	beq.n	800bbbc <USBH_CtlReq+0x20>
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d00f      	beq.n	800bbda <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bbba:	e027      	b.n	800bc0c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	88fa      	ldrh	r2, [r7, #6]
 800bbc6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	75fb      	strb	r3, [r7, #23]
      break;
 800bbd8:	e018      	b.n	800bc0c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f000 f81c 	bl	800bc18 <USBH_HandleControl>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <USBH_CtlReq+0x54>
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d106      	bne.n	800bbfe <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	761a      	strb	r2, [r3, #24]
      break;
 800bbfc:	e005      	b.n	800bc0a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d102      	bne.n	800bc0a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2201      	movs	r2, #1
 800bc08:	709a      	strb	r2, [r3, #2]
      break;
 800bc0a:	bf00      	nop
  }
  return status;
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bc20:	2301      	movs	r3, #1
 800bc22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	7e1b      	ldrb	r3, [r3, #24]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	2b0a      	cmp	r3, #10
 800bc30:	f200 8156 	bhi.w	800bee0 <USBH_HandleControl+0x2c8>
 800bc34:	a201      	add	r2, pc, #4	; (adr r2, 800bc3c <USBH_HandleControl+0x24>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc69 	.word	0x0800bc69
 800bc40:	0800bc83 	.word	0x0800bc83
 800bc44:	0800bced 	.word	0x0800bced
 800bc48:	0800bd13 	.word	0x0800bd13
 800bc4c:	0800bd4b 	.word	0x0800bd4b
 800bc50:	0800bd75 	.word	0x0800bd75
 800bc54:	0800bdc7 	.word	0x0800bdc7
 800bc58:	0800bde9 	.word	0x0800bde9
 800bc5c:	0800be25 	.word	0x0800be25
 800bc60:	0800be4b 	.word	0x0800be4b
 800bc64:	0800be89 	.word	0x0800be89
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f103 0110 	add.w	r1, r3, #16
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	795b      	ldrb	r3, [r3, #5]
 800bc72:	461a      	mov	r2, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f943 	bl	800bf00 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	761a      	strb	r2, [r3, #24]
      break;
 800bc80:	e139      	b.n	800bef6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	795b      	ldrb	r3, [r3, #5]
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f001 f95d 	bl	800cf48 <USBH_LL_GetURBState>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bc92:	7bbb      	ldrb	r3, [r7, #14]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d11e      	bne.n	800bcd6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7c1b      	ldrb	r3, [r3, #16]
 800bc9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bca0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	8adb      	ldrh	r3, [r3, #22]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bcaa:	7b7b      	ldrb	r3, [r7, #13]
 800bcac:	2b80      	cmp	r3, #128	; 0x80
 800bcae:	d103      	bne.n	800bcb8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2203      	movs	r2, #3
 800bcb4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bcb6:	e115      	b.n	800bee4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2205      	movs	r2, #5
 800bcbc:	761a      	strb	r2, [r3, #24]
      break;
 800bcbe:	e111      	b.n	800bee4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800bcc0:	7b7b      	ldrb	r3, [r7, #13]
 800bcc2:	2b80      	cmp	r3, #128	; 0x80
 800bcc4:	d103      	bne.n	800bcce <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2209      	movs	r2, #9
 800bcca:	761a      	strb	r2, [r3, #24]
      break;
 800bccc:	e10a      	b.n	800bee4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	761a      	strb	r2, [r3, #24]
      break;
 800bcd4:	e106      	b.n	800bee4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d003      	beq.n	800bce4 <USBH_HandleControl+0xcc>
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	f040 8100 	bne.w	800bee4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	220b      	movs	r2, #11
 800bce8:	761a      	strb	r2, [r3, #24]
      break;
 800bcea:	e0fb      	b.n	800bee4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6899      	ldr	r1, [r3, #8]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	899a      	ldrh	r2, [r3, #12]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	791b      	ldrb	r3, [r3, #4]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f93a 	bl	800bf7e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	761a      	strb	r2, [r3, #24]
      break;
 800bd10:	e0f1      	b.n	800bef6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	791b      	ldrb	r3, [r3, #4]
 800bd16:	4619      	mov	r1, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 f915 	bl	800cf48 <USBH_LL_GetURBState>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d102      	bne.n	800bd2e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2209      	movs	r2, #9
 800bd2c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bd2e:	7bbb      	ldrb	r3, [r7, #14]
 800bd30:	2b05      	cmp	r3, #5
 800bd32:	d102      	bne.n	800bd3a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bd34:	2303      	movs	r3, #3
 800bd36:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd38:	e0d6      	b.n	800bee8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800bd3a:	7bbb      	ldrb	r3, [r7, #14]
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	f040 80d3 	bne.w	800bee8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	220b      	movs	r2, #11
 800bd46:	761a      	strb	r2, [r3, #24]
      break;
 800bd48:	e0ce      	b.n	800bee8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6899      	ldr	r1, [r3, #8]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	899a      	ldrh	r2, [r3, #12]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	795b      	ldrb	r3, [r3, #5]
 800bd56:	2001      	movs	r0, #1
 800bd58:	9000      	str	r0, [sp, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f8ea 	bl	800bf34 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bd66:	b29a      	uxth	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2206      	movs	r2, #6
 800bd70:	761a      	strb	r2, [r3, #24]
      break;
 800bd72:	e0c0      	b.n	800bef6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	795b      	ldrb	r3, [r3, #5]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	6878      	ldr	r0, [r7, #4]
 800bd7c:	f001 f8e4 	bl	800cf48 <USBH_LL_GetURBState>
 800bd80:	4603      	mov	r3, r0
 800bd82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d103      	bne.n	800bd92 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2207      	movs	r2, #7
 800bd8e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bd90:	e0ac      	b.n	800beec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	2b05      	cmp	r3, #5
 800bd96:	d105      	bne.n	800bda4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	220c      	movs	r2, #12
 800bd9c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800bd9e:	2303      	movs	r3, #3
 800bda0:	73fb      	strb	r3, [r7, #15]
      break;
 800bda2:	e0a3      	b.n	800beec <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d103      	bne.n	800bdb2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2205      	movs	r2, #5
 800bdae:	761a      	strb	r2, [r3, #24]
      break;
 800bdb0:	e09c      	b.n	800beec <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bdb2:	7bbb      	ldrb	r3, [r7, #14]
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	f040 8099 	bne.w	800beec <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	220b      	movs	r2, #11
 800bdbe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	73fb      	strb	r3, [r7, #15]
      break;
 800bdc4:	e092      	b.n	800beec <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	791b      	ldrb	r3, [r3, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2100      	movs	r1, #0
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 f8d5 	bl	800bf7e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdda:	b29a      	uxth	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2208      	movs	r2, #8
 800bde4:	761a      	strb	r2, [r3, #24]

      break;
 800bde6:	e086      	b.n	800bef6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	791b      	ldrb	r3, [r3, #4]
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f001 f8aa 	bl	800cf48 <USBH_LL_GetURBState>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	2b01      	cmp	r3, #1
 800bdfc:	d105      	bne.n	800be0a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	220d      	movs	r2, #13
 800be02:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800be04:	2300      	movs	r3, #0
 800be06:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be08:	e072      	b.n	800bef0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d103      	bne.n	800be18 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	220b      	movs	r2, #11
 800be14:	761a      	strb	r2, [r3, #24]
      break;
 800be16:	e06b      	b.n	800bef0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800be18:	7bbb      	ldrb	r3, [r7, #14]
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	d168      	bne.n	800bef0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800be1e:	2303      	movs	r3, #3
 800be20:	73fb      	strb	r3, [r7, #15]
      break;
 800be22:	e065      	b.n	800bef0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	795b      	ldrb	r3, [r3, #5]
 800be28:	2201      	movs	r2, #1
 800be2a:	9200      	str	r2, [sp, #0]
 800be2c:	2200      	movs	r2, #0
 800be2e:	2100      	movs	r1, #0
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 f87f 	bl	800bf34 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	220a      	movs	r2, #10
 800be46:	761a      	strb	r2, [r3, #24]
      break;
 800be48:	e055      	b.n	800bef6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	795b      	ldrb	r3, [r3, #5]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 f879 	bl	800cf48 <USBH_LL_GetURBState>
 800be56:	4603      	mov	r3, r0
 800be58:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d105      	bne.n	800be6c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	220d      	movs	r2, #13
 800be68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800be6a:	e043      	b.n	800bef4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	2b02      	cmp	r3, #2
 800be70:	d103      	bne.n	800be7a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2209      	movs	r2, #9
 800be76:	761a      	strb	r2, [r3, #24]
      break;
 800be78:	e03c      	b.n	800bef4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d139      	bne.n	800bef4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	220b      	movs	r2, #11
 800be84:	761a      	strb	r2, [r3, #24]
      break;
 800be86:	e035      	b.n	800bef4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	7e5b      	ldrb	r3, [r3, #25]
 800be8c:	3301      	adds	r3, #1
 800be8e:	b2da      	uxtb	r2, r3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	765a      	strb	r2, [r3, #25]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7e5b      	ldrb	r3, [r3, #25]
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d806      	bhi.n	800beaa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bea8:	e025      	b.n	800bef6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800beb0:	2106      	movs	r1, #6
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	795b      	ldrb	r3, [r3, #5]
 800bec0:	4619      	mov	r1, r3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f8e8 	bl	800c098 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	791b      	ldrb	r3, [r3, #4]
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f8e2 	bl	800c098 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800beda:	2302      	movs	r3, #2
 800bedc:	73fb      	strb	r3, [r7, #15]
      break;
 800bede:	e00a      	b.n	800bef6 <USBH_HandleControl+0x2de>

    default:
      break;
 800bee0:	bf00      	nop
 800bee2:	e008      	b.n	800bef6 <USBH_HandleControl+0x2de>
      break;
 800bee4:	bf00      	nop
 800bee6:	e006      	b.n	800bef6 <USBH_HandleControl+0x2de>
      break;
 800bee8:	bf00      	nop
 800beea:	e004      	b.n	800bef6 <USBH_HandleControl+0x2de>
      break;
 800beec:	bf00      	nop
 800beee:	e002      	b.n	800bef6 <USBH_HandleControl+0x2de>
      break;
 800bef0:	bf00      	nop
 800bef2:	e000      	b.n	800bef6 <USBH_HandleControl+0x2de>
      break;
 800bef4:	bf00      	nop
  }

  return status;
 800bef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b088      	sub	sp, #32
 800bf04:	af04      	add	r7, sp, #16
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf0e:	79f9      	ldrb	r1, [r7, #7]
 800bf10:	2300      	movs	r3, #0
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	2308      	movs	r3, #8
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	9301      	str	r3, [sp, #4]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	9300      	str	r3, [sp, #0]
 800bf20:	2300      	movs	r3, #0
 800bf22:	2200      	movs	r2, #0
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f000 ffde 	bl	800cee6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3710      	adds	r7, #16
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}

0800bf34 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af04      	add	r7, sp, #16
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	4611      	mov	r1, r2
 800bf40:	461a      	mov	r2, r3
 800bf42:	460b      	mov	r3, r1
 800bf44:	80fb      	strh	r3, [r7, #6]
 800bf46:	4613      	mov	r3, r2
 800bf48:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d001      	beq.n	800bf58 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf58:	7979      	ldrb	r1, [r7, #5]
 800bf5a:	7e3b      	ldrb	r3, [r7, #24]
 800bf5c:	9303      	str	r3, [sp, #12]
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	9302      	str	r3, [sp, #8]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	9301      	str	r3, [sp, #4]
 800bf66:	2301      	movs	r3, #1
 800bf68:	9300      	str	r3, [sp, #0]
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 ffb9 	bl	800cee6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bf74:	2300      	movs	r3, #0
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b088      	sub	sp, #32
 800bf82:	af04      	add	r7, sp, #16
 800bf84:	60f8      	str	r0, [r7, #12]
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	4611      	mov	r1, r2
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	80fb      	strh	r3, [r7, #6]
 800bf90:	4613      	mov	r3, r2
 800bf92:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bf94:	7979      	ldrb	r1, [r7, #5]
 800bf96:	2300      	movs	r3, #0
 800bf98:	9303      	str	r3, [sp, #12]
 800bf9a:	88fb      	ldrh	r3, [r7, #6]
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 ff9b 	bl	800cee6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bfb0:	2300      	movs	r3, #0

}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3710      	adds	r7, #16
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b088      	sub	sp, #32
 800bfbe:	af04      	add	r7, sp, #16
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	60b9      	str	r1, [r7, #8]
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	460b      	mov	r3, r1
 800bfca:	71fb      	strb	r3, [r7, #7]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	79b9      	ldrb	r1, [r7, #6]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	9203      	str	r2, [sp, #12]
 800bfda:	9302      	str	r3, [sp, #8]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f000 ff7c 	bl	800cee6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800bfee:	2300      	movs	r3, #0
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3710      	adds	r7, #16
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af04      	add	r7, sp, #16
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	4608      	mov	r0, r1
 800c002:	4611      	mov	r1, r2
 800c004:	461a      	mov	r2, r3
 800c006:	4603      	mov	r3, r0
 800c008:	70fb      	strb	r3, [r7, #3]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70bb      	strb	r3, [r7, #2]
 800c00e:	4613      	mov	r3, r2
 800c010:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c012:	7878      	ldrb	r0, [r7, #1]
 800c014:	78ba      	ldrb	r2, [r7, #2]
 800c016:	78f9      	ldrb	r1, [r7, #3]
 800c018:	8b3b      	ldrh	r3, [r7, #24]
 800c01a:	9302      	str	r3, [sp, #8]
 800c01c:	7d3b      	ldrb	r3, [r7, #20]
 800c01e:	9301      	str	r3, [sp, #4]
 800c020:	7c3b      	ldrb	r3, [r7, #16]
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	4603      	mov	r3, r0
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 ff0f 	bl	800ce4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3708      	adds	r7, #8
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b082      	sub	sp, #8
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
 800c03e:	460b      	mov	r3, r1
 800c040:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c042:	78fb      	ldrb	r3, [r7, #3]
 800c044:	4619      	mov	r1, r3
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 ff2e 	bl	800cea8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b084      	sub	sp, #16
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	6078      	str	r0, [r7, #4]
 800c05e:	460b      	mov	r3, r1
 800c060:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 f836 	bl	800c0d4 <USBH_GetFreePipe>
 800c068:	4603      	mov	r3, r0
 800c06a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c06c:	89fb      	ldrh	r3, [r7, #14]
 800c06e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c072:	4293      	cmp	r3, r2
 800c074:	d00a      	beq.n	800c08c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c076:	78fa      	ldrb	r2, [r7, #3]
 800c078:	89fb      	ldrh	r3, [r7, #14]
 800c07a:	f003 030f 	and.w	r3, r3, #15
 800c07e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c082:	6879      	ldr	r1, [r7, #4]
 800c084:	33e0      	adds	r3, #224	; 0xe0
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	440b      	add	r3, r1
 800c08a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c08c:	89fb      	ldrh	r3, [r7, #14]
 800c08e:	b2db      	uxtb	r3, r3
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c098:	b480      	push	{r7}
 800c09a:	b083      	sub	sp, #12
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	2b0f      	cmp	r3, #15
 800c0a8:	d80d      	bhi.n	800c0c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c0aa:	78fb      	ldrb	r3, [r7, #3]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	33e0      	adds	r3, #224	; 0xe0
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	33e0      	adds	r3, #224	; 0xe0
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
 800c0e4:	e00f      	b.n	800c106 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	33e0      	adds	r3, #224	; 0xe0
 800c0ec:	009b      	lsls	r3, r3, #2
 800c0ee:	4413      	add	r3, r2
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c0fa:	7bfb      	ldrb	r3, [r7, #15]
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	e007      	b.n	800c110 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	3301      	adds	r3, #1
 800c104:	73fb      	strb	r3, [r7, #15]
 800c106:	7bfb      	ldrb	r3, [r7, #15]
 800c108:	2b0f      	cmp	r3, #15
 800c10a:	d9ec      	bls.n	800c0e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c10c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c110:	4618      	mov	r0, r3
 800c112:	3714      	adds	r7, #20
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c120:	2200      	movs	r2, #0
 800c122:	490e      	ldr	r1, [pc, #56]	; (800c15c <MX_USB_DEVICE_Init+0x40>)
 800c124:	480e      	ldr	r0, [pc, #56]	; (800c160 <MX_USB_DEVICE_Init+0x44>)
 800c126:	f7fc fa1b 	bl	8008560 <USBD_Init>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d001      	beq.n	800c134 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c130:	f7f4 fd5c 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800c134:	490b      	ldr	r1, [pc, #44]	; (800c164 <MX_USB_DEVICE_Init+0x48>)
 800c136:	480a      	ldr	r0, [pc, #40]	; (800c160 <MX_USB_DEVICE_Init+0x44>)
 800c138:	f7fc fa42 	bl	80085c0 <USBD_RegisterClass>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d001      	beq.n	800c146 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c142:	f7f4 fd53 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c146:	4806      	ldr	r0, [pc, #24]	; (800c160 <MX_USB_DEVICE_Init+0x44>)
 800c148:	f7fc fa70 	bl	800862c <USBD_Start>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d001      	beq.n	800c156 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800c152:	f7f4 fd4b 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c156:	bf00      	nop
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	200000e0 	.word	0x200000e0
 800c160:	200002b4 	.word	0x200002b4
 800c164:	2000000c 	.word	0x2000000c

0800c168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2212      	movs	r2, #18
 800c178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c17a:	4b03      	ldr	r3, [pc, #12]	; (800c188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	20000100 	.word	0x20000100

0800c18c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	4603      	mov	r3, r0
 800c194:	6039      	str	r1, [r7, #0]
 800c196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2204      	movs	r2, #4
 800c19c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c19e:	4b03      	ldr	r3, [pc, #12]	; (800c1ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	20000120 	.word	0x20000120

0800c1b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	6039      	str	r1, [r7, #0]
 800c1ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c1bc:	79fb      	ldrb	r3, [r7, #7]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1c2:	683a      	ldr	r2, [r7, #0]
 800c1c4:	4907      	ldr	r1, [pc, #28]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1c6:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1c8:	f7fd fc06 	bl	80099d8 <USBD_GetString>
 800c1cc:	e004      	b.n	800c1d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c1ce:	683a      	ldr	r2, [r7, #0]
 800c1d0:	4904      	ldr	r1, [pc, #16]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c1d2:	4805      	ldr	r0, [pc, #20]	; (800c1e8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c1d4:	f7fd fc00 	bl	80099d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c1d8:	4b02      	ldr	r3, [pc, #8]	; (800c1e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	20000590 	.word	0x20000590
 800c1e8:	0800da44 	.word	0x0800da44

0800c1ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	6039      	str	r1, [r7, #0]
 800c1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	4904      	ldr	r1, [pc, #16]	; (800c20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c1fc:	4804      	ldr	r0, [pc, #16]	; (800c210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c1fe:	f7fd fbeb 	bl	80099d8 <USBD_GetString>
  return USBD_StrDesc;
 800c202:	4b02      	ldr	r3, [pc, #8]	; (800c20c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c204:	4618      	mov	r0, r3
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	20000590 	.word	0x20000590
 800c210:	0800da5c 	.word	0x0800da5c

0800c214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	6039      	str	r1, [r7, #0]
 800c21e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	221a      	movs	r2, #26
 800c224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c226:	f000 f855 	bl	800c2d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c22a:	4b02      	ldr	r3, [pc, #8]	; (800c234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20000124 	.word	0x20000124

0800c238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	4603      	mov	r3, r0
 800c240:	6039      	str	r1, [r7, #0]
 800c242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d105      	bne.n	800c256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	4907      	ldr	r1, [pc, #28]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c24e:	4808      	ldr	r0, [pc, #32]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c250:	f7fd fbc2 	bl	80099d8 <USBD_GetString>
 800c254:	e004      	b.n	800c260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	4904      	ldr	r1, [pc, #16]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c25a:	4805      	ldr	r0, [pc, #20]	; (800c270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c25c:	f7fd fbbc 	bl	80099d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c260:	4b02      	ldr	r3, [pc, #8]	; (800c26c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	20000590 	.word	0x20000590
 800c270:	0800da70 	.word	0x0800da70

0800c274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	4603      	mov	r3, r0
 800c27c:	6039      	str	r1, [r7, #0]
 800c27e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d105      	bne.n	800c292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c286:	683a      	ldr	r2, [r7, #0]
 800c288:	4907      	ldr	r1, [pc, #28]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c28a:	4808      	ldr	r0, [pc, #32]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c28c:	f7fd fba4 	bl	80099d8 <USBD_GetString>
 800c290:	e004      	b.n	800c29c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	4904      	ldr	r1, [pc, #16]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c296:	4805      	ldr	r0, [pc, #20]	; (800c2ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c298:	f7fd fb9e 	bl	80099d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c29c:	4b02      	ldr	r3, [pc, #8]	; (800c2a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20000590 	.word	0x20000590
 800c2ac:	0800da7c 	.word	0x0800da7c

0800c2b0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	6039      	str	r1, [r7, #0]
 800c2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	220c      	movs	r2, #12
 800c2c0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800c2c2:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	370c      	adds	r7, #12
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	20000114 	.word	0x20000114

0800c2d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c2da:	4b0f      	ldr	r3, [pc, #60]	; (800c318 <Get_SerialNum+0x44>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c2e0:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <Get_SerialNum+0x48>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c2e6:	4b0e      	ldr	r3, [pc, #56]	; (800c320 <Get_SerialNum+0x4c>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d009      	beq.n	800c30e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c2fa:	2208      	movs	r2, #8
 800c2fc:	4909      	ldr	r1, [pc, #36]	; (800c324 <Get_SerialNum+0x50>)
 800c2fe:	68f8      	ldr	r0, [r7, #12]
 800c300:	f000 f814 	bl	800c32c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c304:	2204      	movs	r2, #4
 800c306:	4908      	ldr	r1, [pc, #32]	; (800c328 <Get_SerialNum+0x54>)
 800c308:	68b8      	ldr	r0, [r7, #8]
 800c30a:	f000 f80f 	bl	800c32c <IntToUnicode>
  }
}
 800c30e:	bf00      	nop
 800c310:	3710      	adds	r7, #16
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	1fff7a10 	.word	0x1fff7a10
 800c31c:	1fff7a14 	.word	0x1fff7a14
 800c320:	1fff7a18 	.word	0x1fff7a18
 800c324:	20000126 	.word	0x20000126
 800c328:	20000136 	.word	0x20000136

0800c32c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b087      	sub	sp, #28
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c33e:	2300      	movs	r3, #0
 800c340:	75fb      	strb	r3, [r7, #23]
 800c342:	e027      	b.n	800c394 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	0f1b      	lsrs	r3, r3, #28
 800c348:	2b09      	cmp	r3, #9
 800c34a:	d80b      	bhi.n	800c364 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	0f1b      	lsrs	r3, r3, #28
 800c350:	b2da      	uxtb	r2, r3
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	005b      	lsls	r3, r3, #1
 800c356:	4619      	mov	r1, r3
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	440b      	add	r3, r1
 800c35c:	3230      	adds	r2, #48	; 0x30
 800c35e:	b2d2      	uxtb	r2, r2
 800c360:	701a      	strb	r2, [r3, #0]
 800c362:	e00a      	b.n	800c37a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	0f1b      	lsrs	r3, r3, #28
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	005b      	lsls	r3, r3, #1
 800c36e:	4619      	mov	r1, r3
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	440b      	add	r3, r1
 800c374:	3237      	adds	r2, #55	; 0x37
 800c376:	b2d2      	uxtb	r2, r2
 800c378:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	011b      	lsls	r3, r3, #4
 800c37e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c380:	7dfb      	ldrb	r3, [r7, #23]
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	3301      	adds	r3, #1
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	4413      	add	r3, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	3301      	adds	r3, #1
 800c392:	75fb      	strb	r3, [r7, #23]
 800c394:	7dfa      	ldrb	r2, [r7, #23]
 800c396:	79fb      	ldrb	r3, [r7, #7]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d3d3      	bcc.n	800c344 <IntToUnicode+0x18>
  }
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	371c      	adds	r7, #28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
	...

0800c3ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b0a0      	sub	sp, #128	; 0x80
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c3b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	605a      	str	r2, [r3, #4]
 800c3be:	609a      	str	r2, [r3, #8]
 800c3c0:	60da      	str	r2, [r3, #12]
 800c3c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c3c4:	f107 0310 	add.w	r3, r7, #16
 800c3c8:	225c      	movs	r2, #92	; 0x5c
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 fea3 	bl	800d118 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c3da:	d149      	bne.n	800c470 <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c3dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c3e6:	f107 0310 	add.w	r3, r7, #16
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7f8 f8a2 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d001      	beq.n	800c3fa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800c3f6:	f7f4 fbf9 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	4b1e      	ldr	r3, [pc, #120]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	4a1d      	ldr	r2, [pc, #116]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c404:	f043 0301 	orr.w	r3, r3, #1
 800c408:	6313      	str	r3, [r2, #48]	; 0x30
 800c40a:	4b1b      	ldr	r3, [pc, #108]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c416:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c41a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c41c:	2302      	movs	r3, #2
 800c41e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c420:	2300      	movs	r3, #0
 800c422:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c424:	2303      	movs	r3, #3
 800c426:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c428:	230a      	movs	r3, #10
 800c42a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c42c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c430:	4619      	mov	r1, r3
 800c432:	4812      	ldr	r0, [pc, #72]	; (800c47c <HAL_PCD_MspInit+0xd0>)
 800c434:	f7f4 feb0 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c438:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c43e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c442:	6353      	str	r3, [r2, #52]	; 0x34
 800c444:	2300      	movs	r3, #0
 800c446:	60bb      	str	r3, [r7, #8]
 800c448:	4b0b      	ldr	r3, [pc, #44]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44c:	4a0a      	ldr	r2, [pc, #40]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c44e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c452:	6453      	str	r3, [r2, #68]	; 0x44
 800c454:	4b08      	ldr	r3, [pc, #32]	; (800c478 <HAL_PCD_MspInit+0xcc>)
 800c456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c45c:	60bb      	str	r3, [r7, #8]
 800c45e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c460:	2200      	movs	r2, #0
 800c462:	2100      	movs	r1, #0
 800c464:	2043      	movs	r0, #67	; 0x43
 800c466:	f7f4 fe60 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c46a:	2043      	movs	r0, #67	; 0x43
 800c46c:	f7f4 fe79 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c470:	bf00      	nop
 800c472:	3780      	adds	r7, #128	; 0x80
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	40023800 	.word	0x40023800
 800c47c:	40020000 	.word	0x40020000

0800c480 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c494:	4619      	mov	r1, r3
 800c496:	4610      	mov	r0, r2
 800c498:	f7fc f915 	bl	80086c6 <USBD_LL_SetupStage>
}
 800c49c:	bf00      	nop
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4b6:	78fa      	ldrb	r2, [r7, #3]
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	00db      	lsls	r3, r3, #3
 800c4be:	4413      	add	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	78fb      	ldrb	r3, [r7, #3]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f7fc f94f 	bl	8008770 <USBD_LL_DataOutStage>
}
 800c4d2:	bf00      	nop
 800c4d4:	3708      	adds	r7, #8
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}

0800c4da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c4ec:	78fa      	ldrb	r2, [r7, #3]
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	00db      	lsls	r3, r3, #3
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	440b      	add	r3, r1
 800c4fa:	334c      	adds	r3, #76	; 0x4c
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	4619      	mov	r1, r3
 800c502:	f7fc f9e8 	bl	80088d6 <USBD_LL_DataInStage>
}
 800c506:	bf00      	nop
 800c508:	3708      	adds	r7, #8
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fc fb1c 	bl	8008b5a <USBD_LL_SOF>
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c532:	2301      	movs	r3, #1
 800c534:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c53e:	2300      	movs	r3, #0
 800c540:	73fb      	strb	r3, [r7, #15]
 800c542:	e008      	b.n	800c556 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	2b02      	cmp	r3, #2
 800c54a:	d102      	bne.n	800c552 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
 800c550:	e001      	b.n	800c556 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c552:	f7f4 fb4b 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c55c:	7bfa      	ldrb	r2, [r7, #15]
 800c55e:	4611      	mov	r1, r2
 800c560:	4618      	mov	r0, r3
 800c562:	f7fc fabc 	bl	8008ade <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c56c:	4618      	mov	r0, r3
 800c56e:	f7fc fa64 	bl	8008a3a <USBD_LL_Reset>
}
 800c572:	bf00      	nop
 800c574:	3710      	adds	r7, #16
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
	...

0800c57c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fc fab7 	bl	8008afe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	6812      	ldr	r2, [r2, #0]
 800c59e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c5a2:	f043 0301 	orr.w	r3, r3, #1
 800c5a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1b      	ldr	r3, [r3, #32]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d005      	beq.n	800c5bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c5b0:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <HAL_PCD_SuspendCallback+0x48>)
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	4a03      	ldr	r2, [pc, #12]	; (800c5c4 <HAL_PCD_SuspendCallback+0x48>)
 800c5b6:	f043 0306 	orr.w	r3, r3, #6
 800c5ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c5bc:	bf00      	nop
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	e000ed00 	.word	0xe000ed00

0800c5c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f7fc faa7 	bl	8008b2a <USBD_LL_Resume>
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c5f6:	78fa      	ldrb	r2, [r7, #3]
 800c5f8:	4611      	mov	r1, r2
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f7fc faff 	bl	8008bfe <USBD_LL_IsoOUTIncomplete>
}
 800c600:	bf00      	nop
 800c602:	3708      	adds	r7, #8
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c61a:	78fa      	ldrb	r2, [r7, #3]
 800c61c:	4611      	mov	r1, r2
 800c61e:	4618      	mov	r0, r3
 800c620:	f7fc fabb 	bl	8008b9a <USBD_LL_IsoINIncomplete>
}
 800c624:	bf00      	nop
 800c626:	3708      	adds	r7, #8
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7fc fb11 	bl	8008c62 <USBD_LL_DevConnected>
}
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c656:	4618      	mov	r0, r3
 800c658:	f7fc fb0e 	bl	8008c78 <USBD_LL_DevDisconnected>
}
 800c65c:	bf00      	nop
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d13c      	bne.n	800c6ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c674:	4a20      	ldr	r2, [pc, #128]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a1e      	ldr	r2, [pc, #120]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c680:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c684:	4b1c      	ldr	r3, [pc, #112]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c686:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c68a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800c68c:	4b1a      	ldr	r3, [pc, #104]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c68e:	2206      	movs	r2, #6
 800c690:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c692:	4b19      	ldr	r3, [pc, #100]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c694:	2202      	movs	r2, #2
 800c696:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c698:	4b17      	ldr	r3, [pc, #92]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c69e:	4b16      	ldr	r3, [pc, #88]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6a0:	2202      	movs	r2, #2
 800c6a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c6a4:	4b14      	ldr	r3, [pc, #80]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c6aa:	4b13      	ldr	r3, [pc, #76]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c6b0:	4b11      	ldr	r3, [pc, #68]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c6b6:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c6bc:	4b0e      	ldr	r3, [pc, #56]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6be:	2200      	movs	r2, #0
 800c6c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c6c2:	480d      	ldr	r0, [pc, #52]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6c4:	f7f6 fb6a 	bl	8002d9c <HAL_PCD_Init>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c6ce:	f7f4 fa8d 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c6d2:	2180      	movs	r1, #128	; 0x80
 800c6d4:	4808      	ldr	r0, [pc, #32]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6d6:	f7f7 fdde 	bl	8004296 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c6da:	2240      	movs	r2, #64	; 0x40
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4806      	ldr	r0, [pc, #24]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6e0:	f7f7 fd92 	bl	8004208 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c6e4:	2280      	movs	r2, #128	; 0x80
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	4803      	ldr	r0, [pc, #12]	; (800c6f8 <USBD_LL_Init+0x94>)
 800c6ea:	f7f7 fd8d 	bl	8004208 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20000790 	.word	0x20000790

0800c6fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c708:	2300      	movs	r3, #0
 800c70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c712:	4618      	mov	r0, r3
 800c714:	f7f6 fc66 	bl	8002fe4 <HAL_PCD_Start>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 f97e 	bl	800ca20 <USBD_Get_USB_Status>
 800c724:	4603      	mov	r3, r0
 800c726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c728:	7bbb      	ldrb	r3, [r7, #14]
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b084      	sub	sp, #16
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
 800c73a:	4608      	mov	r0, r1
 800c73c:	4611      	mov	r1, r2
 800c73e:	461a      	mov	r2, r3
 800c740:	4603      	mov	r3, r0
 800c742:	70fb      	strb	r3, [r7, #3]
 800c744:	460b      	mov	r3, r1
 800c746:	70bb      	strb	r3, [r7, #2]
 800c748:	4613      	mov	r3, r2
 800c74a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c75a:	78bb      	ldrb	r3, [r7, #2]
 800c75c:	883a      	ldrh	r2, [r7, #0]
 800c75e:	78f9      	ldrb	r1, [r7, #3]
 800c760:	f7f7 f964 	bl	8003a2c <HAL_PCD_EP_Open>
 800c764:	4603      	mov	r3, r0
 800c766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c768:	7bfb      	ldrb	r3, [r7, #15]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 f958 	bl	800ca20 <USBD_Get_USB_Status>
 800c770:	4603      	mov	r3, r0
 800c772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c774:	7bbb      	ldrb	r3, [r7, #14]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b084      	sub	sp, #16
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	460b      	mov	r3, r1
 800c788:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c78e:	2300      	movs	r3, #0
 800c790:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c798:	78fa      	ldrb	r2, [r7, #3]
 800c79a:	4611      	mov	r1, r2
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7f7 f9ad 	bl	8003afc <HAL_PCD_EP_Close>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 f939 	bl	800ca20 <USBD_Get_USB_Status>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7d6:	78fa      	ldrb	r2, [r7, #3]
 800c7d8:	4611      	mov	r1, r2
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7f7 fa6d 	bl	8003cba <HAL_PCD_EP_SetStall>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 f91a 	bl	800ca20 <USBD_Get_USB_Status>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b084      	sub	sp, #16
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c806:	2300      	movs	r3, #0
 800c808:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c814:	78fa      	ldrb	r2, [r7, #3]
 800c816:	4611      	mov	r1, r2
 800c818:	4618      	mov	r0, r3
 800c81a:	f7f7 fab2 	bl	8003d82 <HAL_PCD_EP_ClrStall>
 800c81e:	4603      	mov	r3, r0
 800c820:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c822:	7bfb      	ldrb	r3, [r7, #15]
 800c824:	4618      	mov	r0, r3
 800c826:	f000 f8fb 	bl	800ca20 <USBD_Get_USB_Status>
 800c82a:	4603      	mov	r3, r0
 800c82c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c84a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c84c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c850:	2b00      	cmp	r3, #0
 800c852:	da0b      	bge.n	800c86c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c85a:	68f9      	ldr	r1, [r7, #12]
 800c85c:	4613      	mov	r3, r2
 800c85e:	00db      	lsls	r3, r3, #3
 800c860:	4413      	add	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	440b      	add	r3, r1
 800c866:	333e      	adds	r3, #62	; 0x3e
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	e00b      	b.n	800c884 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c86c:	78fb      	ldrb	r3, [r7, #3]
 800c86e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c872:	68f9      	ldr	r1, [r7, #12]
 800c874:	4613      	mov	r3, r2
 800c876:	00db      	lsls	r3, r3, #3
 800c878:	4413      	add	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	440b      	add	r3, r1
 800c87e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c882:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c884:	4618      	mov	r0, r3
 800c886:	3714      	adds	r7, #20
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	460b      	mov	r3, r1
 800c89a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c89c:	2300      	movs	r3, #0
 800c89e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c8aa:	78fa      	ldrb	r2, [r7, #3]
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7f7 f897 	bl	80039e2 <HAL_PCD_SetAddress>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 f8b0 	bl	800ca20 <USBD_Get_USB_Status>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c8ec:	7af9      	ldrb	r1, [r7, #11]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	f7f7 f998 	bl	8003c26 <HAL_PCD_EP_Transmit>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 f88f 	bl	800ca20 <USBD_Get_USB_Status>
 800c902:	4603      	mov	r3, r0
 800c904:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c906:	7dbb      	ldrb	r3, [r7, #22]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3718      	adds	r7, #24
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	607a      	str	r2, [r7, #4]
 800c91a:	603b      	str	r3, [r7, #0]
 800c91c:	460b      	mov	r3, r1
 800c91e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c924:	2300      	movs	r3, #0
 800c926:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c92e:	7af9      	ldrb	r1, [r7, #11]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	f7f7 f92c 	bl	8003b90 <HAL_PCD_EP_Receive>
 800c938:	4603      	mov	r3, r0
 800c93a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f86e 	bl	800ca20 <USBD_Get_USB_Status>
 800c944:	4603      	mov	r3, r0
 800c946:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c948:	7dbb      	ldrb	r3, [r7, #22]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
	...

0800c954 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c960:	78fb      	ldrb	r3, [r7, #3]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d002      	beq.n	800c96c <HAL_PCDEx_LPM_Callback+0x18>
 800c966:	2b01      	cmp	r3, #1
 800c968:	d01f      	beq.n	800c9aa <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c96a:	e03b      	b.n	800c9e4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d007      	beq.n	800c984 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800c974:	f7f4 f82e 	bl	80009d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c978:	4b1c      	ldr	r3, [pc, #112]	; (800c9ec <HAL_PCDEx_LPM_Callback+0x98>)
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	4a1b      	ldr	r2, [pc, #108]	; (800c9ec <HAL_PCDEx_LPM_Callback+0x98>)
 800c97e:	f023 0306 	bic.w	r3, r3, #6
 800c982:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	6812      	ldr	r2, [r2, #0]
 800c992:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c996:	f023 0301 	bic.w	r3, r3, #1
 800c99a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fc f8c1 	bl	8008b2a <USBD_LL_Resume>
    break;
 800c9a8:	e01c      	b.n	800c9e4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6812      	ldr	r2, [r2, #0]
 800c9b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9bc:	f043 0301 	orr.w	r3, r3, #1
 800c9c0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fc f898 	bl	8008afe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a1b      	ldr	r3, [r3, #32]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d005      	beq.n	800c9e2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c9d6:	4b05      	ldr	r3, [pc, #20]	; (800c9ec <HAL_PCDEx_LPM_Callback+0x98>)
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	4a04      	ldr	r2, [pc, #16]	; (800c9ec <HAL_PCDEx_LPM_Callback+0x98>)
 800c9dc:	f043 0306 	orr.w	r3, r3, #6
 800c9e0:	6113      	str	r3, [r2, #16]
    break;
 800c9e2:	bf00      	nop
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	e000ed00 	.word	0xe000ed00

0800c9f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c9f8:	4b03      	ldr	r3, [pc, #12]	; (800ca08 <USBD_static_malloc+0x18>)
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	20000c9c 	.word	0x20000c9c

0800ca0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]

}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	2b03      	cmp	r3, #3
 800ca32:	d817      	bhi.n	800ca64 <USBD_Get_USB_Status+0x44>
 800ca34:	a201      	add	r2, pc, #4	; (adr r2, 800ca3c <USBD_Get_USB_Status+0x1c>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800ca4d 	.word	0x0800ca4d
 800ca40:	0800ca53 	.word	0x0800ca53
 800ca44:	0800ca59 	.word	0x0800ca59
 800ca48:	0800ca5f 	.word	0x0800ca5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca50:	e00b      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca52:	2303      	movs	r3, #3
 800ca54:	73fb      	strb	r3, [r7, #15]
    break;
 800ca56:	e008      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca5c:	e005      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	73fb      	strb	r3, [r7, #15]
    break;
 800ca62:	e002      	b.n	800ca6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca64:	2303      	movs	r3, #3
 800ca66:	73fb      	strb	r3, [r7, #15]
    break;
 800ca68:	bf00      	nop
  }
  return usb_status;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3714      	adds	r7, #20
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	490e      	ldr	r1, [pc, #56]	; (800cab8 <MX_USB_HOST_Init+0x40>)
 800ca80:	480e      	ldr	r0, [pc, #56]	; (800cabc <MX_USB_HOST_Init+0x44>)
 800ca82:	f7fd ff1d 	bl	800a8c0 <USBH_Init>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ca8c:	f7f4 f8ae 	bl	8000bec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 800ca90:	490b      	ldr	r1, [pc, #44]	; (800cac0 <MX_USB_HOST_Init+0x48>)
 800ca92:	480a      	ldr	r0, [pc, #40]	; (800cabc <MX_USB_HOST_Init+0x44>)
 800ca94:	f7fd ffa2 	bl	800a9dc <USBH_RegisterClass>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d001      	beq.n	800caa2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ca9e:	f7f4 f8a5 	bl	8000bec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800caa2:	4806      	ldr	r0, [pc, #24]	; (800cabc <MX_USB_HOST_Init+0x44>)
 800caa4:	f7fe f826 	bl	800aaf4 <USBH_Start>
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800caae:	f7f4 f89d 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cab2:	bf00      	nop
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	0800cad9 	.word	0x0800cad9
 800cabc:	20000cb0 	.word	0x20000cb0
 800cac0:	200000c0 	.word	0x200000c0

0800cac4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800cac8:	4802      	ldr	r0, [pc, #8]	; (800cad4 <MX_USB_HOST_Process+0x10>)
 800caca:	f7fe f823 	bl	800ab14 <USBH_Process>
}
 800cace:	bf00      	nop
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	20000cb0 	.word	0x20000cb0

0800cad8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	460b      	mov	r3, r1
 800cae2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cae4:	78fb      	ldrb	r3, [r7, #3]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	2b04      	cmp	r3, #4
 800caea:	d819      	bhi.n	800cb20 <USBH_UserProcess+0x48>
 800caec:	a201      	add	r2, pc, #4	; (adr r2, 800caf4 <USBH_UserProcess+0x1c>)
 800caee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf2:	bf00      	nop
 800caf4:	0800cb21 	.word	0x0800cb21
 800caf8:	0800cb11 	.word	0x0800cb11
 800cafc:	0800cb21 	.word	0x0800cb21
 800cb00:	0800cb19 	.word	0x0800cb19
 800cb04:	0800cb09 	.word	0x0800cb09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800cb08:	4b09      	ldr	r3, [pc, #36]	; (800cb30 <USBH_UserProcess+0x58>)
 800cb0a:	2203      	movs	r2, #3
 800cb0c:	701a      	strb	r2, [r3, #0]
  break;
 800cb0e:	e008      	b.n	800cb22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800cb10:	4b07      	ldr	r3, [pc, #28]	; (800cb30 <USBH_UserProcess+0x58>)
 800cb12:	2202      	movs	r2, #2
 800cb14:	701a      	strb	r2, [r3, #0]
  break;
 800cb16:	e004      	b.n	800cb22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb18:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <USBH_UserProcess+0x58>)
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	701a      	strb	r2, [r3, #0]
  break;
 800cb1e:	e000      	b.n	800cb22 <USBH_UserProcess+0x4a>

  default:
  break;
 800cb20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb22:	bf00      	nop
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	20001088 	.word	0x20001088

0800cb34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b0a0      	sub	sp, #128	; 0x80
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cb40:	2200      	movs	r2, #0
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	605a      	str	r2, [r3, #4]
 800cb46:	609a      	str	r2, [r3, #8]
 800cb48:	60da      	str	r2, [r3, #12]
 800cb4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800cb4c:	f107 0310 	add.w	r3, r7, #16
 800cb50:	225c      	movs	r2, #92	; 0x5c
 800cb52:	2100      	movs	r1, #0
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 fadf 	bl	800d118 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	4a25      	ldr	r2, [pc, #148]	; (800cbf4 <HAL_HCD_MspInit+0xc0>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d143      	bne.n	800cbec <HAL_HCD_MspInit+0xb8>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800cb64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800cb6e:	f107 0310 	add.w	r3, r7, #16
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7f7 fcde 	bl	8004534 <HAL_RCCEx_PeriphCLKConfig>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d001      	beq.n	800cb82 <HAL_HCD_MspInit+0x4e>
    {
      Error_Handler();
 800cb7e:	f7f4 f835 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
 800cb86:	4b1c      	ldr	r3, [pc, #112]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8a:	4a1b      	ldr	r2, [pc, #108]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cb8c:	f043 0302 	orr.w	r3, r3, #2
 800cb90:	6313      	str	r3, [r2, #48]	; 0x30
 800cb92:	4b19      	ldr	r3, [pc, #100]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb96:	f003 0302 	and.w	r3, r3, #2
 800cb9a:	60fb      	str	r3, [r7, #12]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800cb9e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800cba2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cba4:	2302      	movs	r3, #2
 800cba6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbac:	2303      	movs	r3, #3
 800cbae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cbb0:	230c      	movs	r3, #12
 800cbb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4810      	ldr	r0, [pc, #64]	; (800cbfc <HAL_HCD_MspInit+0xc8>)
 800cbbc:	f7f4 faec 	bl	8001198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	60bb      	str	r3, [r7, #8]
 800cbc4:	4b0c      	ldr	r3, [pc, #48]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc8:	4a0b      	ldr	r2, [pc, #44]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cbca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbce:	6313      	str	r3, [r2, #48]	; 0x30
 800cbd0:	4b09      	ldr	r3, [pc, #36]	; (800cbf8 <HAL_HCD_MspInit+0xc4>)
 800cbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbd8:	60bb      	str	r3, [r7, #8]
 800cbda:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2100      	movs	r1, #0
 800cbe0:	204d      	movs	r0, #77	; 0x4d
 800cbe2:	f7f4 faa2 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cbe6:	204d      	movs	r0, #77	; 0x4d
 800cbe8:	f7f4 fabb 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cbec:	bf00      	nop
 800cbee:	3780      	adds	r7, #128	; 0x80
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	40040000 	.word	0x40040000
 800cbf8:	40023800 	.word	0x40023800
 800cbfc:	40020400 	.word	0x40020400

0800cc00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe fb5f 	bl	800b2d2 <USBH_LL_IncTimer>
}
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7fe fb97 	bl	800b35e <USBH_LL_Connect>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7fe fba0 	bl	800b38c <USBH_LL_Disconnect>
}
 800cc4c:	bf00      	nop
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	70fb      	strb	r3, [r7, #3]
 800cc60:	4613      	mov	r3, r2
 800cc62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cc64:	bf00      	nop
 800cc66:	370c      	adds	r7, #12
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fe fb51 	bl	800b326 <USBH_LL_PortEnabled>
}
 800cc84:	bf00      	nop
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fb51 	bl	800b342 <USBH_LL_PortDisabled>
}
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d132      	bne.n	800cd20 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ccba:	4a1c      	ldr	r2, [pc, #112]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a19      	ldr	r2, [pc, #100]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccc6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ccca:	4b18      	ldr	r3, [pc, #96]	; (800cd2c <USBH_LL_Init+0x84>)
 800cccc:	4a18      	ldr	r2, [pc, #96]	; (800cd30 <USBH_LL_Init+0x88>)
 800ccce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
 800ccd0:	4b16      	ldr	r3, [pc, #88]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccd2:	2210      	movs	r2, #16
 800ccd4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ccd6:	4b15      	ldr	r3, [pc, #84]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccd8:	2201      	movs	r2, #1
 800ccda:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ccdc:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccde:	2200      	movs	r2, #0
 800cce0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800cce2:	4b12      	ldr	r3, [pc, #72]	; (800cd2c <USBH_LL_Init+0x84>)
 800cce4:	2202      	movs	r2, #2
 800cce6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800cce8:	4b10      	ldr	r3, [pc, #64]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ccee:	4b0f      	ldr	r3, [pc, #60]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <USBH_LL_Init+0x84>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cd00:	480a      	ldr	r0, [pc, #40]	; (800cd2c <USBH_LL_Init+0x84>)
 800cd02:	f7f4 fc41 	bl	8001588 <HAL_HCD_Init>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800cd0c:	f7f3 ff6e 	bl	8000bec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800cd10:	4806      	ldr	r0, [pc, #24]	; (800cd2c <USBH_LL_Init+0x84>)
 800cd12:	f7f5 f824 	bl	8001d5e <HAL_HCD_GetCurrentFrame>
 800cd16:	4603      	mov	r3, r0
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7fe faca 	bl	800b2b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3708      	adds	r7, #8
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	2000108c 	.word	0x2000108c
 800cd30:	40040000 	.word	0x40040000

0800cd34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd40:	2300      	movs	r3, #0
 800cd42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7f4 ff91 	bl	8001c72 <HAL_HCD_Start>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 f95c 	bl	800d014 <USBH_Get_USB_Status>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd76:	2300      	movs	r3, #0
 800cd78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7f4 ff99 	bl	8001cb8 <HAL_HCD_Stop>
 800cd86:	4603      	mov	r3, r0
 800cd88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f000 f941 	bl	800d014 <USBH_Get_USB_Status>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3710      	adds	r7, #16
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cda8:	2301      	movs	r3, #1
 800cdaa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f7f4 ffe1 	bl	8001d7a <HAL_HCD_GetCurrentSpeed>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d00c      	beq.n	800cdd8 <USBH_LL_GetSpeed+0x38>
 800cdbe:	2b02      	cmp	r3, #2
 800cdc0:	d80d      	bhi.n	800cdde <USBH_LL_GetSpeed+0x3e>
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d002      	beq.n	800cdcc <USBH_LL_GetSpeed+0x2c>
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d003      	beq.n	800cdd2 <USBH_LL_GetSpeed+0x32>
 800cdca:	e008      	b.n	800cdde <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd0:	e008      	b.n	800cde4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdd6:	e005      	b.n	800cde4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cdd8:	2302      	movs	r3, #2
 800cdda:	73fb      	strb	r3, [r7, #15]
    break;
 800cddc:	e002      	b.n	800cde4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cdde:	2301      	movs	r3, #1
 800cde0:	73fb      	strb	r3, [r7, #15]
    break;
 800cde2:	bf00      	nop
  }
  return  speed;
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3710      	adds	r7, #16
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7f4 ff74 	bl	8001cf2 <HAL_HCD_ResetPort>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce0e:	7bfb      	ldrb	r3, [r7, #15]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 f8ff 	bl	800d014 <USBH_Get_USB_Status>
 800ce16:	4603      	mov	r3, r0
 800ce18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	460b      	mov	r3, r1
 800ce2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ce36:	78fa      	ldrb	r2, [r7, #3]
 800ce38:	4611      	mov	r1, r2
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7f4 ff7b 	bl	8001d36 <HAL_HCD_HC_GetXferCount>
 800ce40:	4603      	mov	r3, r0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3708      	adds	r7, #8
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce4a:	b590      	push	{r4, r7, lr}
 800ce4c:	b089      	sub	sp, #36	; 0x24
 800ce4e:	af04      	add	r7, sp, #16
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	4608      	mov	r0, r1
 800ce54:	4611      	mov	r1, r2
 800ce56:	461a      	mov	r2, r3
 800ce58:	4603      	mov	r3, r0
 800ce5a:	70fb      	strb	r3, [r7, #3]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70bb      	strb	r3, [r7, #2]
 800ce60:	4613      	mov	r3, r2
 800ce62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce68:	2300      	movs	r3, #0
 800ce6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ce72:	787c      	ldrb	r4, [r7, #1]
 800ce74:	78ba      	ldrb	r2, [r7, #2]
 800ce76:	78f9      	ldrb	r1, [r7, #3]
 800ce78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ce7a:	9302      	str	r3, [sp, #8]
 800ce7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ce80:	9301      	str	r3, [sp, #4]
 800ce82:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce86:	9300      	str	r3, [sp, #0]
 800ce88:	4623      	mov	r3, r4
 800ce8a:	f7f4 fbdf 	bl	800164c <HAL_HCD_HC_Init>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
 800ce94:	4618      	mov	r0, r3
 800ce96:	f000 f8bd 	bl	800d014 <USBH_Get_USB_Status>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd90      	pop	{r4, r7, pc}

0800cea8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cec2:	78fa      	ldrb	r2, [r7, #3]
 800cec4:	4611      	mov	r1, r2
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7f4 fc4f 	bl	800176a <HAL_HCD_HC_Halt>
 800cecc:	4603      	mov	r3, r0
 800cece:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ced0:	7bfb      	ldrb	r3, [r7, #15]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f000 f89e 	bl	800d014 <USBH_Get_USB_Status>
 800ced8:	4603      	mov	r3, r0
 800ceda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cedc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cee6:	b590      	push	{r4, r7, lr}
 800cee8:	b089      	sub	sp, #36	; 0x24
 800ceea:	af04      	add	r7, sp, #16
 800ceec:	6078      	str	r0, [r7, #4]
 800ceee:	4608      	mov	r0, r1
 800cef0:	4611      	mov	r1, r2
 800cef2:	461a      	mov	r2, r3
 800cef4:	4603      	mov	r3, r0
 800cef6:	70fb      	strb	r3, [r7, #3]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70bb      	strb	r3, [r7, #2]
 800cefc:	4613      	mov	r3, r2
 800cefe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf04:	2300      	movs	r3, #0
 800cf06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800cf0e:	787c      	ldrb	r4, [r7, #1]
 800cf10:	78ba      	ldrb	r2, [r7, #2]
 800cf12:	78f9      	ldrb	r1, [r7, #3]
 800cf14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cf18:	9303      	str	r3, [sp, #12]
 800cf1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cf1c:	9302      	str	r3, [sp, #8]
 800cf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	4623      	mov	r3, r4
 800cf2a:	f7f4 fc41 	bl	80017b0 <HAL_HCD_HC_SubmitRequest>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf32:	7bfb      	ldrb	r3, [r7, #15]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 f86d 	bl	800d014 <USBH_Get_USB_Status>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}

0800cf48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	460b      	mov	r3, r1
 800cf52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cf5a:	78fa      	ldrb	r2, [r7, #3]
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7f4 fed5 	bl	8001d0e <HAL_HCD_HC_GetURBState>
 800cf64:	4603      	mov	r3, r0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}

0800cf6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cf6e:	b580      	push	{r7, lr}
 800cf70:	b082      	sub	sp, #8
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
 800cf76:	460b      	mov	r3, r1
 800cf78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d103      	bne.n	800cf8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cf84:	78fb      	ldrb	r3, [r7, #3]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f000 f870 	bl	800d06c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cf8c:	20c8      	movs	r0, #200	; 0xc8
 800cf8e:	f7f3 ffcd 	bl	8000f2c <HAL_Delay>
  return USBH_OK;
 800cf92:	2300      	movs	r3, #0
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b085      	sub	sp, #20
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	70fb      	strb	r3, [r7, #3]
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800cfb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	212c      	movs	r1, #44	; 0x2c
 800cfba:	fb01 f303 	mul.w	r3, r1, r3
 800cfbe:	4413      	add	r3, r2
 800cfc0:	333b      	adds	r3, #59	; 0x3b
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d009      	beq.n	800cfdc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cfc8:	78fb      	ldrb	r3, [r7, #3]
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	212c      	movs	r1, #44	; 0x2c
 800cfce:	fb01 f303 	mul.w	r3, r1, r3
 800cfd2:	4413      	add	r3, r2
 800cfd4:	3354      	adds	r3, #84	; 0x54
 800cfd6:	78ba      	ldrb	r2, [r7, #2]
 800cfd8:	701a      	strb	r2, [r3, #0]
 800cfda:	e008      	b.n	800cfee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cfdc:	78fb      	ldrb	r3, [r7, #3]
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	212c      	movs	r1, #44	; 0x2c
 800cfe2:	fb01 f303 	mul.w	r3, r1, r3
 800cfe6:	4413      	add	r3, r2
 800cfe8:	3355      	adds	r3, #85	; 0x55
 800cfea:	78ba      	ldrb	r2, [r7, #2]
 800cfec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3714      	adds	r7, #20
 800cff4:	46bd      	mov	sp, r7
 800cff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffa:	4770      	bx	lr

0800cffc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f7f3 ff91 	bl	8000f2c <HAL_Delay>
}
 800d00a:	bf00      	nop
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d014:	b480      	push	{r7}
 800d016:	b085      	sub	sp, #20
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d022:	79fb      	ldrb	r3, [r7, #7]
 800d024:	2b03      	cmp	r3, #3
 800d026:	d817      	bhi.n	800d058 <USBH_Get_USB_Status+0x44>
 800d028:	a201      	add	r2, pc, #4	; (adr r2, 800d030 <USBH_Get_USB_Status+0x1c>)
 800d02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02e:	bf00      	nop
 800d030:	0800d041 	.word	0x0800d041
 800d034:	0800d047 	.word	0x0800d047
 800d038:	0800d04d 	.word	0x0800d04d
 800d03c:	0800d053 	.word	0x0800d053
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
    break;
 800d044:	e00b      	b.n	800d05e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d046:	2302      	movs	r3, #2
 800d048:	73fb      	strb	r3, [r7, #15]
    break;
 800d04a:	e008      	b.n	800d05e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d04c:	2301      	movs	r3, #1
 800d04e:	73fb      	strb	r3, [r7, #15]
    break;
 800d050:	e005      	b.n	800d05e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d052:	2302      	movs	r3, #2
 800d054:	73fb      	strb	r3, [r7, #15]
    break;
 800d056:	e002      	b.n	800d05e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d058:	2302      	movs	r3, #2
 800d05a:	73fb      	strb	r3, [r7, #15]
    break;
 800d05c:	bf00      	nop
  }
  return usb_status;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3714      	adds	r7, #20
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr

0800d06c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d076:	79fb      	ldrb	r3, [r7, #7]
 800d078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d07a:	79fb      	ldrb	r3, [r7, #7]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d102      	bne.n	800d086 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d080:	2301      	movs	r3, #1
 800d082:	73fb      	strb	r3, [r7, #15]
 800d084:	e001      	b.n	800d08a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,(GPIO_PinState)data);
 800d08a:	7bfb      	ldrb	r3, [r7, #15]
 800d08c:	461a      	mov	r2, r3
 800d08e:	2120      	movs	r1, #32
 800d090:	4803      	ldr	r0, [pc, #12]	; (800d0a0 <MX_DriverVbusHS+0x34>)
 800d092:	f7f4 fa2d 	bl	80014f0 <HAL_GPIO_WritePin>
}
 800d096:	bf00      	nop
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	40020000 	.word	0x40020000

0800d0a4 <__errno>:
 800d0a4:	4b01      	ldr	r3, [pc, #4]	; (800d0ac <__errno+0x8>)
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	20000140 	.word	0x20000140

0800d0b0 <__libc_init_array>:
 800d0b0:	b570      	push	{r4, r5, r6, lr}
 800d0b2:	4d0d      	ldr	r5, [pc, #52]	; (800d0e8 <__libc_init_array+0x38>)
 800d0b4:	4c0d      	ldr	r4, [pc, #52]	; (800d0ec <__libc_init_array+0x3c>)
 800d0b6:	1b64      	subs	r4, r4, r5
 800d0b8:	10a4      	asrs	r4, r4, #2
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	42a6      	cmp	r6, r4
 800d0be:	d109      	bne.n	800d0d4 <__libc_init_array+0x24>
 800d0c0:	4d0b      	ldr	r5, [pc, #44]	; (800d0f0 <__libc_init_array+0x40>)
 800d0c2:	4c0c      	ldr	r4, [pc, #48]	; (800d0f4 <__libc_init_array+0x44>)
 800d0c4:	f000 fc9e 	bl	800da04 <_init>
 800d0c8:	1b64      	subs	r4, r4, r5
 800d0ca:	10a4      	asrs	r4, r4, #2
 800d0cc:	2600      	movs	r6, #0
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	d105      	bne.n	800d0de <__libc_init_array+0x2e>
 800d0d2:	bd70      	pop	{r4, r5, r6, pc}
 800d0d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0d8:	4798      	blx	r3
 800d0da:	3601      	adds	r6, #1
 800d0dc:	e7ee      	b.n	800d0bc <__libc_init_array+0xc>
 800d0de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e2:	4798      	blx	r3
 800d0e4:	3601      	adds	r6, #1
 800d0e6:	e7f2      	b.n	800d0ce <__libc_init_array+0x1e>
 800d0e8:	0800ddf0 	.word	0x0800ddf0
 800d0ec:	0800ddf0 	.word	0x0800ddf0
 800d0f0:	0800ddf0 	.word	0x0800ddf0
 800d0f4:	0800ddf4 	.word	0x0800ddf4

0800d0f8 <malloc>:
 800d0f8:	4b02      	ldr	r3, [pc, #8]	; (800d104 <malloc+0xc>)
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	f000 b87f 	b.w	800d200 <_malloc_r>
 800d102:	bf00      	nop
 800d104:	20000140 	.word	0x20000140

0800d108 <free>:
 800d108:	4b02      	ldr	r3, [pc, #8]	; (800d114 <free+0xc>)
 800d10a:	4601      	mov	r1, r0
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f000 b80b 	b.w	800d128 <_free_r>
 800d112:	bf00      	nop
 800d114:	20000140 	.word	0x20000140

0800d118 <memset>:
 800d118:	4402      	add	r2, r0
 800d11a:	4603      	mov	r3, r0
 800d11c:	4293      	cmp	r3, r2
 800d11e:	d100      	bne.n	800d122 <memset+0xa>
 800d120:	4770      	bx	lr
 800d122:	f803 1b01 	strb.w	r1, [r3], #1
 800d126:	e7f9      	b.n	800d11c <memset+0x4>

0800d128 <_free_r>:
 800d128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d12a:	2900      	cmp	r1, #0
 800d12c:	d044      	beq.n	800d1b8 <_free_r+0x90>
 800d12e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d132:	9001      	str	r0, [sp, #4]
 800d134:	2b00      	cmp	r3, #0
 800d136:	f1a1 0404 	sub.w	r4, r1, #4
 800d13a:	bfb8      	it	lt
 800d13c:	18e4      	addlt	r4, r4, r3
 800d13e:	f000 f903 	bl	800d348 <__malloc_lock>
 800d142:	4a1e      	ldr	r2, [pc, #120]	; (800d1bc <_free_r+0x94>)
 800d144:	9801      	ldr	r0, [sp, #4]
 800d146:	6813      	ldr	r3, [r2, #0]
 800d148:	b933      	cbnz	r3, 800d158 <_free_r+0x30>
 800d14a:	6063      	str	r3, [r4, #4]
 800d14c:	6014      	str	r4, [r2, #0]
 800d14e:	b003      	add	sp, #12
 800d150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d154:	f000 b8fe 	b.w	800d354 <__malloc_unlock>
 800d158:	42a3      	cmp	r3, r4
 800d15a:	d908      	bls.n	800d16e <_free_r+0x46>
 800d15c:	6825      	ldr	r5, [r4, #0]
 800d15e:	1961      	adds	r1, r4, r5
 800d160:	428b      	cmp	r3, r1
 800d162:	bf01      	itttt	eq
 800d164:	6819      	ldreq	r1, [r3, #0]
 800d166:	685b      	ldreq	r3, [r3, #4]
 800d168:	1949      	addeq	r1, r1, r5
 800d16a:	6021      	streq	r1, [r4, #0]
 800d16c:	e7ed      	b.n	800d14a <_free_r+0x22>
 800d16e:	461a      	mov	r2, r3
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	b10b      	cbz	r3, 800d178 <_free_r+0x50>
 800d174:	42a3      	cmp	r3, r4
 800d176:	d9fa      	bls.n	800d16e <_free_r+0x46>
 800d178:	6811      	ldr	r1, [r2, #0]
 800d17a:	1855      	adds	r5, r2, r1
 800d17c:	42a5      	cmp	r5, r4
 800d17e:	d10b      	bne.n	800d198 <_free_r+0x70>
 800d180:	6824      	ldr	r4, [r4, #0]
 800d182:	4421      	add	r1, r4
 800d184:	1854      	adds	r4, r2, r1
 800d186:	42a3      	cmp	r3, r4
 800d188:	6011      	str	r1, [r2, #0]
 800d18a:	d1e0      	bne.n	800d14e <_free_r+0x26>
 800d18c:	681c      	ldr	r4, [r3, #0]
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	6053      	str	r3, [r2, #4]
 800d192:	4421      	add	r1, r4
 800d194:	6011      	str	r1, [r2, #0]
 800d196:	e7da      	b.n	800d14e <_free_r+0x26>
 800d198:	d902      	bls.n	800d1a0 <_free_r+0x78>
 800d19a:	230c      	movs	r3, #12
 800d19c:	6003      	str	r3, [r0, #0]
 800d19e:	e7d6      	b.n	800d14e <_free_r+0x26>
 800d1a0:	6825      	ldr	r5, [r4, #0]
 800d1a2:	1961      	adds	r1, r4, r5
 800d1a4:	428b      	cmp	r3, r1
 800d1a6:	bf04      	itt	eq
 800d1a8:	6819      	ldreq	r1, [r3, #0]
 800d1aa:	685b      	ldreq	r3, [r3, #4]
 800d1ac:	6063      	str	r3, [r4, #4]
 800d1ae:	bf04      	itt	eq
 800d1b0:	1949      	addeq	r1, r1, r5
 800d1b2:	6021      	streq	r1, [r4, #0]
 800d1b4:	6054      	str	r4, [r2, #4]
 800d1b6:	e7ca      	b.n	800d14e <_free_r+0x26>
 800d1b8:	b003      	add	sp, #12
 800d1ba:	bd30      	pop	{r4, r5, pc}
 800d1bc:	20001390 	.word	0x20001390

0800d1c0 <sbrk_aligned>:
 800d1c0:	b570      	push	{r4, r5, r6, lr}
 800d1c2:	4e0e      	ldr	r6, [pc, #56]	; (800d1fc <sbrk_aligned+0x3c>)
 800d1c4:	460c      	mov	r4, r1
 800d1c6:	6831      	ldr	r1, [r6, #0]
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	b911      	cbnz	r1, 800d1d2 <sbrk_aligned+0x12>
 800d1cc:	f000 f88c 	bl	800d2e8 <_sbrk_r>
 800d1d0:	6030      	str	r0, [r6, #0]
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f000 f887 	bl	800d2e8 <_sbrk_r>
 800d1da:	1c43      	adds	r3, r0, #1
 800d1dc:	d00a      	beq.n	800d1f4 <sbrk_aligned+0x34>
 800d1de:	1cc4      	adds	r4, r0, #3
 800d1e0:	f024 0403 	bic.w	r4, r4, #3
 800d1e4:	42a0      	cmp	r0, r4
 800d1e6:	d007      	beq.n	800d1f8 <sbrk_aligned+0x38>
 800d1e8:	1a21      	subs	r1, r4, r0
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f000 f87c 	bl	800d2e8 <_sbrk_r>
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d101      	bne.n	800d1f8 <sbrk_aligned+0x38>
 800d1f4:	f04f 34ff 	mov.w	r4, #4294967295
 800d1f8:	4620      	mov	r0, r4
 800d1fa:	bd70      	pop	{r4, r5, r6, pc}
 800d1fc:	20001394 	.word	0x20001394

0800d200 <_malloc_r>:
 800d200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d204:	1ccd      	adds	r5, r1, #3
 800d206:	f025 0503 	bic.w	r5, r5, #3
 800d20a:	3508      	adds	r5, #8
 800d20c:	2d0c      	cmp	r5, #12
 800d20e:	bf38      	it	cc
 800d210:	250c      	movcc	r5, #12
 800d212:	2d00      	cmp	r5, #0
 800d214:	4607      	mov	r7, r0
 800d216:	db01      	blt.n	800d21c <_malloc_r+0x1c>
 800d218:	42a9      	cmp	r1, r5
 800d21a:	d905      	bls.n	800d228 <_malloc_r+0x28>
 800d21c:	230c      	movs	r3, #12
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	2600      	movs	r6, #0
 800d222:	4630      	mov	r0, r6
 800d224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d228:	4e2e      	ldr	r6, [pc, #184]	; (800d2e4 <_malloc_r+0xe4>)
 800d22a:	f000 f88d 	bl	800d348 <__malloc_lock>
 800d22e:	6833      	ldr	r3, [r6, #0]
 800d230:	461c      	mov	r4, r3
 800d232:	bb34      	cbnz	r4, 800d282 <_malloc_r+0x82>
 800d234:	4629      	mov	r1, r5
 800d236:	4638      	mov	r0, r7
 800d238:	f7ff ffc2 	bl	800d1c0 <sbrk_aligned>
 800d23c:	1c43      	adds	r3, r0, #1
 800d23e:	4604      	mov	r4, r0
 800d240:	d14d      	bne.n	800d2de <_malloc_r+0xde>
 800d242:	6834      	ldr	r4, [r6, #0]
 800d244:	4626      	mov	r6, r4
 800d246:	2e00      	cmp	r6, #0
 800d248:	d140      	bne.n	800d2cc <_malloc_r+0xcc>
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	4631      	mov	r1, r6
 800d24e:	4638      	mov	r0, r7
 800d250:	eb04 0803 	add.w	r8, r4, r3
 800d254:	f000 f848 	bl	800d2e8 <_sbrk_r>
 800d258:	4580      	cmp	r8, r0
 800d25a:	d13a      	bne.n	800d2d2 <_malloc_r+0xd2>
 800d25c:	6821      	ldr	r1, [r4, #0]
 800d25e:	3503      	adds	r5, #3
 800d260:	1a6d      	subs	r5, r5, r1
 800d262:	f025 0503 	bic.w	r5, r5, #3
 800d266:	3508      	adds	r5, #8
 800d268:	2d0c      	cmp	r5, #12
 800d26a:	bf38      	it	cc
 800d26c:	250c      	movcc	r5, #12
 800d26e:	4629      	mov	r1, r5
 800d270:	4638      	mov	r0, r7
 800d272:	f7ff ffa5 	bl	800d1c0 <sbrk_aligned>
 800d276:	3001      	adds	r0, #1
 800d278:	d02b      	beq.n	800d2d2 <_malloc_r+0xd2>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	442b      	add	r3, r5
 800d27e:	6023      	str	r3, [r4, #0]
 800d280:	e00e      	b.n	800d2a0 <_malloc_r+0xa0>
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	1b52      	subs	r2, r2, r5
 800d286:	d41e      	bmi.n	800d2c6 <_malloc_r+0xc6>
 800d288:	2a0b      	cmp	r2, #11
 800d28a:	d916      	bls.n	800d2ba <_malloc_r+0xba>
 800d28c:	1961      	adds	r1, r4, r5
 800d28e:	42a3      	cmp	r3, r4
 800d290:	6025      	str	r5, [r4, #0]
 800d292:	bf18      	it	ne
 800d294:	6059      	strne	r1, [r3, #4]
 800d296:	6863      	ldr	r3, [r4, #4]
 800d298:	bf08      	it	eq
 800d29a:	6031      	streq	r1, [r6, #0]
 800d29c:	5162      	str	r2, [r4, r5]
 800d29e:	604b      	str	r3, [r1, #4]
 800d2a0:	4638      	mov	r0, r7
 800d2a2:	f104 060b 	add.w	r6, r4, #11
 800d2a6:	f000 f855 	bl	800d354 <__malloc_unlock>
 800d2aa:	f026 0607 	bic.w	r6, r6, #7
 800d2ae:	1d23      	adds	r3, r4, #4
 800d2b0:	1af2      	subs	r2, r6, r3
 800d2b2:	d0b6      	beq.n	800d222 <_malloc_r+0x22>
 800d2b4:	1b9b      	subs	r3, r3, r6
 800d2b6:	50a3      	str	r3, [r4, r2]
 800d2b8:	e7b3      	b.n	800d222 <_malloc_r+0x22>
 800d2ba:	6862      	ldr	r2, [r4, #4]
 800d2bc:	42a3      	cmp	r3, r4
 800d2be:	bf0c      	ite	eq
 800d2c0:	6032      	streq	r2, [r6, #0]
 800d2c2:	605a      	strne	r2, [r3, #4]
 800d2c4:	e7ec      	b.n	800d2a0 <_malloc_r+0xa0>
 800d2c6:	4623      	mov	r3, r4
 800d2c8:	6864      	ldr	r4, [r4, #4]
 800d2ca:	e7b2      	b.n	800d232 <_malloc_r+0x32>
 800d2cc:	4634      	mov	r4, r6
 800d2ce:	6876      	ldr	r6, [r6, #4]
 800d2d0:	e7b9      	b.n	800d246 <_malloc_r+0x46>
 800d2d2:	230c      	movs	r3, #12
 800d2d4:	603b      	str	r3, [r7, #0]
 800d2d6:	4638      	mov	r0, r7
 800d2d8:	f000 f83c 	bl	800d354 <__malloc_unlock>
 800d2dc:	e7a1      	b.n	800d222 <_malloc_r+0x22>
 800d2de:	6025      	str	r5, [r4, #0]
 800d2e0:	e7de      	b.n	800d2a0 <_malloc_r+0xa0>
 800d2e2:	bf00      	nop
 800d2e4:	20001390 	.word	0x20001390

0800d2e8 <_sbrk_r>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	4d06      	ldr	r5, [pc, #24]	; (800d304 <_sbrk_r+0x1c>)
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	4608      	mov	r0, r1
 800d2f2:	602b      	str	r3, [r5, #0]
 800d2f4:	f7f3 fd36 	bl	8000d64 <_sbrk>
 800d2f8:	1c43      	adds	r3, r0, #1
 800d2fa:	d102      	bne.n	800d302 <_sbrk_r+0x1a>
 800d2fc:	682b      	ldr	r3, [r5, #0]
 800d2fe:	b103      	cbz	r3, 800d302 <_sbrk_r+0x1a>
 800d300:	6023      	str	r3, [r4, #0]
 800d302:	bd38      	pop	{r3, r4, r5, pc}
 800d304:	20001398 	.word	0x20001398

0800d308 <siprintf>:
 800d308:	b40e      	push	{r1, r2, r3}
 800d30a:	b500      	push	{lr}
 800d30c:	b09c      	sub	sp, #112	; 0x70
 800d30e:	ab1d      	add	r3, sp, #116	; 0x74
 800d310:	9002      	str	r0, [sp, #8]
 800d312:	9006      	str	r0, [sp, #24]
 800d314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d318:	4809      	ldr	r0, [pc, #36]	; (800d340 <siprintf+0x38>)
 800d31a:	9107      	str	r1, [sp, #28]
 800d31c:	9104      	str	r1, [sp, #16]
 800d31e:	4909      	ldr	r1, [pc, #36]	; (800d344 <siprintf+0x3c>)
 800d320:	f853 2b04 	ldr.w	r2, [r3], #4
 800d324:	9105      	str	r1, [sp, #20]
 800d326:	6800      	ldr	r0, [r0, #0]
 800d328:	9301      	str	r3, [sp, #4]
 800d32a:	a902      	add	r1, sp, #8
 800d32c:	f000 f874 	bl	800d418 <_svfiprintf_r>
 800d330:	9b02      	ldr	r3, [sp, #8]
 800d332:	2200      	movs	r2, #0
 800d334:	701a      	strb	r2, [r3, #0]
 800d336:	b01c      	add	sp, #112	; 0x70
 800d338:	f85d eb04 	ldr.w	lr, [sp], #4
 800d33c:	b003      	add	sp, #12
 800d33e:	4770      	bx	lr
 800d340:	20000140 	.word	0x20000140
 800d344:	ffff0208 	.word	0xffff0208

0800d348 <__malloc_lock>:
 800d348:	4801      	ldr	r0, [pc, #4]	; (800d350 <__malloc_lock+0x8>)
 800d34a:	f000 baf9 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d34e:	bf00      	nop
 800d350:	2000139c 	.word	0x2000139c

0800d354 <__malloc_unlock>:
 800d354:	4801      	ldr	r0, [pc, #4]	; (800d35c <__malloc_unlock+0x8>)
 800d356:	f000 baf4 	b.w	800d942 <__retarget_lock_release_recursive>
 800d35a:	bf00      	nop
 800d35c:	2000139c 	.word	0x2000139c

0800d360 <__ssputs_r>:
 800d360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d364:	688e      	ldr	r6, [r1, #8]
 800d366:	429e      	cmp	r6, r3
 800d368:	4682      	mov	sl, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4690      	mov	r8, r2
 800d36e:	461f      	mov	r7, r3
 800d370:	d838      	bhi.n	800d3e4 <__ssputs_r+0x84>
 800d372:	898a      	ldrh	r2, [r1, #12]
 800d374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d378:	d032      	beq.n	800d3e0 <__ssputs_r+0x80>
 800d37a:	6825      	ldr	r5, [r4, #0]
 800d37c:	6909      	ldr	r1, [r1, #16]
 800d37e:	eba5 0901 	sub.w	r9, r5, r1
 800d382:	6965      	ldr	r5, [r4, #20]
 800d384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d38c:	3301      	adds	r3, #1
 800d38e:	444b      	add	r3, r9
 800d390:	106d      	asrs	r5, r5, #1
 800d392:	429d      	cmp	r5, r3
 800d394:	bf38      	it	cc
 800d396:	461d      	movcc	r5, r3
 800d398:	0553      	lsls	r3, r2, #21
 800d39a:	d531      	bpl.n	800d400 <__ssputs_r+0xa0>
 800d39c:	4629      	mov	r1, r5
 800d39e:	f7ff ff2f 	bl	800d200 <_malloc_r>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	b950      	cbnz	r0, 800d3bc <__ssputs_r+0x5c>
 800d3a6:	230c      	movs	r3, #12
 800d3a8:	f8ca 3000 	str.w	r3, [sl]
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b2:	81a3      	strh	r3, [r4, #12]
 800d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3bc:	6921      	ldr	r1, [r4, #16]
 800d3be:	464a      	mov	r2, r9
 800d3c0:	f000 fac0 	bl	800d944 <memcpy>
 800d3c4:	89a3      	ldrh	r3, [r4, #12]
 800d3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ce:	81a3      	strh	r3, [r4, #12]
 800d3d0:	6126      	str	r6, [r4, #16]
 800d3d2:	6165      	str	r5, [r4, #20]
 800d3d4:	444e      	add	r6, r9
 800d3d6:	eba5 0509 	sub.w	r5, r5, r9
 800d3da:	6026      	str	r6, [r4, #0]
 800d3dc:	60a5      	str	r5, [r4, #8]
 800d3de:	463e      	mov	r6, r7
 800d3e0:	42be      	cmp	r6, r7
 800d3e2:	d900      	bls.n	800d3e6 <__ssputs_r+0x86>
 800d3e4:	463e      	mov	r6, r7
 800d3e6:	6820      	ldr	r0, [r4, #0]
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4641      	mov	r1, r8
 800d3ec:	f000 fab8 	bl	800d960 <memmove>
 800d3f0:	68a3      	ldr	r3, [r4, #8]
 800d3f2:	1b9b      	subs	r3, r3, r6
 800d3f4:	60a3      	str	r3, [r4, #8]
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	4433      	add	r3, r6
 800d3fa:	6023      	str	r3, [r4, #0]
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7db      	b.n	800d3b8 <__ssputs_r+0x58>
 800d400:	462a      	mov	r2, r5
 800d402:	f000 fac7 	bl	800d994 <_realloc_r>
 800d406:	4606      	mov	r6, r0
 800d408:	2800      	cmp	r0, #0
 800d40a:	d1e1      	bne.n	800d3d0 <__ssputs_r+0x70>
 800d40c:	6921      	ldr	r1, [r4, #16]
 800d40e:	4650      	mov	r0, sl
 800d410:	f7ff fe8a 	bl	800d128 <_free_r>
 800d414:	e7c7      	b.n	800d3a6 <__ssputs_r+0x46>
	...

0800d418 <_svfiprintf_r>:
 800d418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d41c:	4698      	mov	r8, r3
 800d41e:	898b      	ldrh	r3, [r1, #12]
 800d420:	061b      	lsls	r3, r3, #24
 800d422:	b09d      	sub	sp, #116	; 0x74
 800d424:	4607      	mov	r7, r0
 800d426:	460d      	mov	r5, r1
 800d428:	4614      	mov	r4, r2
 800d42a:	d50e      	bpl.n	800d44a <_svfiprintf_r+0x32>
 800d42c:	690b      	ldr	r3, [r1, #16]
 800d42e:	b963      	cbnz	r3, 800d44a <_svfiprintf_r+0x32>
 800d430:	2140      	movs	r1, #64	; 0x40
 800d432:	f7ff fee5 	bl	800d200 <_malloc_r>
 800d436:	6028      	str	r0, [r5, #0]
 800d438:	6128      	str	r0, [r5, #16]
 800d43a:	b920      	cbnz	r0, 800d446 <_svfiprintf_r+0x2e>
 800d43c:	230c      	movs	r3, #12
 800d43e:	603b      	str	r3, [r7, #0]
 800d440:	f04f 30ff 	mov.w	r0, #4294967295
 800d444:	e0d1      	b.n	800d5ea <_svfiprintf_r+0x1d2>
 800d446:	2340      	movs	r3, #64	; 0x40
 800d448:	616b      	str	r3, [r5, #20]
 800d44a:	2300      	movs	r3, #0
 800d44c:	9309      	str	r3, [sp, #36]	; 0x24
 800d44e:	2320      	movs	r3, #32
 800d450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d454:	f8cd 800c 	str.w	r8, [sp, #12]
 800d458:	2330      	movs	r3, #48	; 0x30
 800d45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d604 <_svfiprintf_r+0x1ec>
 800d45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	4623      	mov	r3, r4
 800d468:	469a      	mov	sl, r3
 800d46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46e:	b10a      	cbz	r2, 800d474 <_svfiprintf_r+0x5c>
 800d470:	2a25      	cmp	r2, #37	; 0x25
 800d472:	d1f9      	bne.n	800d468 <_svfiprintf_r+0x50>
 800d474:	ebba 0b04 	subs.w	fp, sl, r4
 800d478:	d00b      	beq.n	800d492 <_svfiprintf_r+0x7a>
 800d47a:	465b      	mov	r3, fp
 800d47c:	4622      	mov	r2, r4
 800d47e:	4629      	mov	r1, r5
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff ff6d 	bl	800d360 <__ssputs_r>
 800d486:	3001      	adds	r0, #1
 800d488:	f000 80aa 	beq.w	800d5e0 <_svfiprintf_r+0x1c8>
 800d48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d48e:	445a      	add	r2, fp
 800d490:	9209      	str	r2, [sp, #36]	; 0x24
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 80a2 	beq.w	800d5e0 <_svfiprintf_r+0x1c8>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a6:	f10a 0a01 	add.w	sl, sl, #1
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	9307      	str	r3, [sp, #28]
 800d4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d4b4:	4654      	mov	r4, sl
 800d4b6:	2205      	movs	r2, #5
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	4851      	ldr	r0, [pc, #324]	; (800d604 <_svfiprintf_r+0x1ec>)
 800d4be:	f7f2 fea7 	bl	8000210 <memchr>
 800d4c2:	9a04      	ldr	r2, [sp, #16]
 800d4c4:	b9d8      	cbnz	r0, 800d4fe <_svfiprintf_r+0xe6>
 800d4c6:	06d0      	lsls	r0, r2, #27
 800d4c8:	bf44      	itt	mi
 800d4ca:	2320      	movmi	r3, #32
 800d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d0:	0711      	lsls	r1, r2, #28
 800d4d2:	bf44      	itt	mi
 800d4d4:	232b      	movmi	r3, #43	; 0x2b
 800d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4da:	f89a 3000 	ldrb.w	r3, [sl]
 800d4de:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e0:	d015      	beq.n	800d50e <_svfiprintf_r+0xf6>
 800d4e2:	9a07      	ldr	r2, [sp, #28]
 800d4e4:	4654      	mov	r4, sl
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f04f 0c0a 	mov.w	ip, #10
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f2:	3b30      	subs	r3, #48	; 0x30
 800d4f4:	2b09      	cmp	r3, #9
 800d4f6:	d94e      	bls.n	800d596 <_svfiprintf_r+0x17e>
 800d4f8:	b1b0      	cbz	r0, 800d528 <_svfiprintf_r+0x110>
 800d4fa:	9207      	str	r2, [sp, #28]
 800d4fc:	e014      	b.n	800d528 <_svfiprintf_r+0x110>
 800d4fe:	eba0 0308 	sub.w	r3, r0, r8
 800d502:	fa09 f303 	lsl.w	r3, r9, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	46a2      	mov	sl, r4
 800d50c:	e7d2      	b.n	800d4b4 <_svfiprintf_r+0x9c>
 800d50e:	9b03      	ldr	r3, [sp, #12]
 800d510:	1d19      	adds	r1, r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	9103      	str	r1, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfbb      	ittet	lt
 800d51a:	425b      	neglt	r3, r3
 800d51c:	f042 0202 	orrlt.w	r2, r2, #2
 800d520:	9307      	strge	r3, [sp, #28]
 800d522:	9307      	strlt	r3, [sp, #28]
 800d524:	bfb8      	it	lt
 800d526:	9204      	strlt	r2, [sp, #16]
 800d528:	7823      	ldrb	r3, [r4, #0]
 800d52a:	2b2e      	cmp	r3, #46	; 0x2e
 800d52c:	d10c      	bne.n	800d548 <_svfiprintf_r+0x130>
 800d52e:	7863      	ldrb	r3, [r4, #1]
 800d530:	2b2a      	cmp	r3, #42	; 0x2a
 800d532:	d135      	bne.n	800d5a0 <_svfiprintf_r+0x188>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	9203      	str	r2, [sp, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	bfb8      	it	lt
 800d540:	f04f 33ff 	movlt.w	r3, #4294967295
 800d544:	3402      	adds	r4, #2
 800d546:	9305      	str	r3, [sp, #20]
 800d548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d614 <_svfiprintf_r+0x1fc>
 800d54c:	7821      	ldrb	r1, [r4, #0]
 800d54e:	2203      	movs	r2, #3
 800d550:	4650      	mov	r0, sl
 800d552:	f7f2 fe5d 	bl	8000210 <memchr>
 800d556:	b140      	cbz	r0, 800d56a <_svfiprintf_r+0x152>
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	eba0 000a 	sub.w	r0, r0, sl
 800d55e:	fa03 f000 	lsl.w	r0, r3, r0
 800d562:	9b04      	ldr	r3, [sp, #16]
 800d564:	4303      	orrs	r3, r0
 800d566:	3401      	adds	r4, #1
 800d568:	9304      	str	r3, [sp, #16]
 800d56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d56e:	4826      	ldr	r0, [pc, #152]	; (800d608 <_svfiprintf_r+0x1f0>)
 800d570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d574:	2206      	movs	r2, #6
 800d576:	f7f2 fe4b 	bl	8000210 <memchr>
 800d57a:	2800      	cmp	r0, #0
 800d57c:	d038      	beq.n	800d5f0 <_svfiprintf_r+0x1d8>
 800d57e:	4b23      	ldr	r3, [pc, #140]	; (800d60c <_svfiprintf_r+0x1f4>)
 800d580:	bb1b      	cbnz	r3, 800d5ca <_svfiprintf_r+0x1b2>
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	3307      	adds	r3, #7
 800d586:	f023 0307 	bic.w	r3, r3, #7
 800d58a:	3308      	adds	r3, #8
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d590:	4433      	add	r3, r6
 800d592:	9309      	str	r3, [sp, #36]	; 0x24
 800d594:	e767      	b.n	800d466 <_svfiprintf_r+0x4e>
 800d596:	fb0c 3202 	mla	r2, ip, r2, r3
 800d59a:	460c      	mov	r4, r1
 800d59c:	2001      	movs	r0, #1
 800d59e:	e7a5      	b.n	800d4ec <_svfiprintf_r+0xd4>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	3401      	adds	r4, #1
 800d5a4:	9305      	str	r3, [sp, #20]
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	f04f 0c0a 	mov.w	ip, #10
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b2:	3a30      	subs	r2, #48	; 0x30
 800d5b4:	2a09      	cmp	r2, #9
 800d5b6:	d903      	bls.n	800d5c0 <_svfiprintf_r+0x1a8>
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d0c5      	beq.n	800d548 <_svfiprintf_r+0x130>
 800d5bc:	9105      	str	r1, [sp, #20]
 800d5be:	e7c3      	b.n	800d548 <_svfiprintf_r+0x130>
 800d5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	e7f0      	b.n	800d5ac <_svfiprintf_r+0x194>
 800d5ca:	ab03      	add	r3, sp, #12
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4b0f      	ldr	r3, [pc, #60]	; (800d610 <_svfiprintf_r+0x1f8>)
 800d5d2:	a904      	add	r1, sp, #16
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	f3af 8000 	nop.w
 800d5da:	1c42      	adds	r2, r0, #1
 800d5dc:	4606      	mov	r6, r0
 800d5de:	d1d6      	bne.n	800d58e <_svfiprintf_r+0x176>
 800d5e0:	89ab      	ldrh	r3, [r5, #12]
 800d5e2:	065b      	lsls	r3, r3, #25
 800d5e4:	f53f af2c 	bmi.w	800d440 <_svfiprintf_r+0x28>
 800d5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5ea:	b01d      	add	sp, #116	; 0x74
 800d5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f0:	ab03      	add	r3, sp, #12
 800d5f2:	9300      	str	r3, [sp, #0]
 800d5f4:	462a      	mov	r2, r5
 800d5f6:	4b06      	ldr	r3, [pc, #24]	; (800d610 <_svfiprintf_r+0x1f8>)
 800d5f8:	a904      	add	r1, sp, #16
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	f000 f87a 	bl	800d6f4 <_printf_i>
 800d600:	e7eb      	b.n	800d5da <_svfiprintf_r+0x1c2>
 800d602:	bf00      	nop
 800d604:	0800ddb4 	.word	0x0800ddb4
 800d608:	0800ddbe 	.word	0x0800ddbe
 800d60c:	00000000 	.word	0x00000000
 800d610:	0800d361 	.word	0x0800d361
 800d614:	0800ddba 	.word	0x0800ddba

0800d618 <_printf_common>:
 800d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61c:	4616      	mov	r6, r2
 800d61e:	4699      	mov	r9, r3
 800d620:	688a      	ldr	r2, [r1, #8]
 800d622:	690b      	ldr	r3, [r1, #16]
 800d624:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d628:	4293      	cmp	r3, r2
 800d62a:	bfb8      	it	lt
 800d62c:	4613      	movlt	r3, r2
 800d62e:	6033      	str	r3, [r6, #0]
 800d630:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d634:	4607      	mov	r7, r0
 800d636:	460c      	mov	r4, r1
 800d638:	b10a      	cbz	r2, 800d63e <_printf_common+0x26>
 800d63a:	3301      	adds	r3, #1
 800d63c:	6033      	str	r3, [r6, #0]
 800d63e:	6823      	ldr	r3, [r4, #0]
 800d640:	0699      	lsls	r1, r3, #26
 800d642:	bf42      	ittt	mi
 800d644:	6833      	ldrmi	r3, [r6, #0]
 800d646:	3302      	addmi	r3, #2
 800d648:	6033      	strmi	r3, [r6, #0]
 800d64a:	6825      	ldr	r5, [r4, #0]
 800d64c:	f015 0506 	ands.w	r5, r5, #6
 800d650:	d106      	bne.n	800d660 <_printf_common+0x48>
 800d652:	f104 0a19 	add.w	sl, r4, #25
 800d656:	68e3      	ldr	r3, [r4, #12]
 800d658:	6832      	ldr	r2, [r6, #0]
 800d65a:	1a9b      	subs	r3, r3, r2
 800d65c:	42ab      	cmp	r3, r5
 800d65e:	dc26      	bgt.n	800d6ae <_printf_common+0x96>
 800d660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d664:	1e13      	subs	r3, r2, #0
 800d666:	6822      	ldr	r2, [r4, #0]
 800d668:	bf18      	it	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	0692      	lsls	r2, r2, #26
 800d66e:	d42b      	bmi.n	800d6c8 <_printf_common+0xb0>
 800d670:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d674:	4649      	mov	r1, r9
 800d676:	4638      	mov	r0, r7
 800d678:	47c0      	blx	r8
 800d67a:	3001      	adds	r0, #1
 800d67c:	d01e      	beq.n	800d6bc <_printf_common+0xa4>
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	68e5      	ldr	r5, [r4, #12]
 800d682:	6832      	ldr	r2, [r6, #0]
 800d684:	f003 0306 	and.w	r3, r3, #6
 800d688:	2b04      	cmp	r3, #4
 800d68a:	bf08      	it	eq
 800d68c:	1aad      	subeq	r5, r5, r2
 800d68e:	68a3      	ldr	r3, [r4, #8]
 800d690:	6922      	ldr	r2, [r4, #16]
 800d692:	bf0c      	ite	eq
 800d694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d698:	2500      	movne	r5, #0
 800d69a:	4293      	cmp	r3, r2
 800d69c:	bfc4      	itt	gt
 800d69e:	1a9b      	subgt	r3, r3, r2
 800d6a0:	18ed      	addgt	r5, r5, r3
 800d6a2:	2600      	movs	r6, #0
 800d6a4:	341a      	adds	r4, #26
 800d6a6:	42b5      	cmp	r5, r6
 800d6a8:	d11a      	bne.n	800d6e0 <_printf_common+0xc8>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e008      	b.n	800d6c0 <_printf_common+0xa8>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	4652      	mov	r2, sl
 800d6b2:	4649      	mov	r1, r9
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	47c0      	blx	r8
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	d103      	bne.n	800d6c4 <_printf_common+0xac>
 800d6bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6c4:	3501      	adds	r5, #1
 800d6c6:	e7c6      	b.n	800d656 <_printf_common+0x3e>
 800d6c8:	18e1      	adds	r1, r4, r3
 800d6ca:	1c5a      	adds	r2, r3, #1
 800d6cc:	2030      	movs	r0, #48	; 0x30
 800d6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6d2:	4422      	add	r2, r4
 800d6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6dc:	3302      	adds	r3, #2
 800d6de:	e7c7      	b.n	800d670 <_printf_common+0x58>
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	4622      	mov	r2, r4
 800d6e4:	4649      	mov	r1, r9
 800d6e6:	4638      	mov	r0, r7
 800d6e8:	47c0      	blx	r8
 800d6ea:	3001      	adds	r0, #1
 800d6ec:	d0e6      	beq.n	800d6bc <_printf_common+0xa4>
 800d6ee:	3601      	adds	r6, #1
 800d6f0:	e7d9      	b.n	800d6a6 <_printf_common+0x8e>
	...

0800d6f4 <_printf_i>:
 800d6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f8:	7e0f      	ldrb	r7, [r1, #24]
 800d6fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6fc:	2f78      	cmp	r7, #120	; 0x78
 800d6fe:	4691      	mov	r9, r2
 800d700:	4680      	mov	r8, r0
 800d702:	460c      	mov	r4, r1
 800d704:	469a      	mov	sl, r3
 800d706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d70a:	d807      	bhi.n	800d71c <_printf_i+0x28>
 800d70c:	2f62      	cmp	r7, #98	; 0x62
 800d70e:	d80a      	bhi.n	800d726 <_printf_i+0x32>
 800d710:	2f00      	cmp	r7, #0
 800d712:	f000 80d8 	beq.w	800d8c6 <_printf_i+0x1d2>
 800d716:	2f58      	cmp	r7, #88	; 0x58
 800d718:	f000 80a3 	beq.w	800d862 <_printf_i+0x16e>
 800d71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d724:	e03a      	b.n	800d79c <_printf_i+0xa8>
 800d726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d72a:	2b15      	cmp	r3, #21
 800d72c:	d8f6      	bhi.n	800d71c <_printf_i+0x28>
 800d72e:	a101      	add	r1, pc, #4	; (adr r1, 800d734 <_printf_i+0x40>)
 800d730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d734:	0800d78d 	.word	0x0800d78d
 800d738:	0800d7a1 	.word	0x0800d7a1
 800d73c:	0800d71d 	.word	0x0800d71d
 800d740:	0800d71d 	.word	0x0800d71d
 800d744:	0800d71d 	.word	0x0800d71d
 800d748:	0800d71d 	.word	0x0800d71d
 800d74c:	0800d7a1 	.word	0x0800d7a1
 800d750:	0800d71d 	.word	0x0800d71d
 800d754:	0800d71d 	.word	0x0800d71d
 800d758:	0800d71d 	.word	0x0800d71d
 800d75c:	0800d71d 	.word	0x0800d71d
 800d760:	0800d8ad 	.word	0x0800d8ad
 800d764:	0800d7d1 	.word	0x0800d7d1
 800d768:	0800d88f 	.word	0x0800d88f
 800d76c:	0800d71d 	.word	0x0800d71d
 800d770:	0800d71d 	.word	0x0800d71d
 800d774:	0800d8cf 	.word	0x0800d8cf
 800d778:	0800d71d 	.word	0x0800d71d
 800d77c:	0800d7d1 	.word	0x0800d7d1
 800d780:	0800d71d 	.word	0x0800d71d
 800d784:	0800d71d 	.word	0x0800d71d
 800d788:	0800d897 	.word	0x0800d897
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	1d1a      	adds	r2, r3, #4
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	602a      	str	r2, [r5, #0]
 800d794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d79c:	2301      	movs	r3, #1
 800d79e:	e0a3      	b.n	800d8e8 <_printf_i+0x1f4>
 800d7a0:	6820      	ldr	r0, [r4, #0]
 800d7a2:	6829      	ldr	r1, [r5, #0]
 800d7a4:	0606      	lsls	r6, r0, #24
 800d7a6:	f101 0304 	add.w	r3, r1, #4
 800d7aa:	d50a      	bpl.n	800d7c2 <_printf_i+0xce>
 800d7ac:	680e      	ldr	r6, [r1, #0]
 800d7ae:	602b      	str	r3, [r5, #0]
 800d7b0:	2e00      	cmp	r6, #0
 800d7b2:	da03      	bge.n	800d7bc <_printf_i+0xc8>
 800d7b4:	232d      	movs	r3, #45	; 0x2d
 800d7b6:	4276      	negs	r6, r6
 800d7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7bc:	485e      	ldr	r0, [pc, #376]	; (800d938 <_printf_i+0x244>)
 800d7be:	230a      	movs	r3, #10
 800d7c0:	e019      	b.n	800d7f6 <_printf_i+0x102>
 800d7c2:	680e      	ldr	r6, [r1, #0]
 800d7c4:	602b      	str	r3, [r5, #0]
 800d7c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d7ca:	bf18      	it	ne
 800d7cc:	b236      	sxthne	r6, r6
 800d7ce:	e7ef      	b.n	800d7b0 <_printf_i+0xbc>
 800d7d0:	682b      	ldr	r3, [r5, #0]
 800d7d2:	6820      	ldr	r0, [r4, #0]
 800d7d4:	1d19      	adds	r1, r3, #4
 800d7d6:	6029      	str	r1, [r5, #0]
 800d7d8:	0601      	lsls	r1, r0, #24
 800d7da:	d501      	bpl.n	800d7e0 <_printf_i+0xec>
 800d7dc:	681e      	ldr	r6, [r3, #0]
 800d7de:	e002      	b.n	800d7e6 <_printf_i+0xf2>
 800d7e0:	0646      	lsls	r6, r0, #25
 800d7e2:	d5fb      	bpl.n	800d7dc <_printf_i+0xe8>
 800d7e4:	881e      	ldrh	r6, [r3, #0]
 800d7e6:	4854      	ldr	r0, [pc, #336]	; (800d938 <_printf_i+0x244>)
 800d7e8:	2f6f      	cmp	r7, #111	; 0x6f
 800d7ea:	bf0c      	ite	eq
 800d7ec:	2308      	moveq	r3, #8
 800d7ee:	230a      	movne	r3, #10
 800d7f0:	2100      	movs	r1, #0
 800d7f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7f6:	6865      	ldr	r5, [r4, #4]
 800d7f8:	60a5      	str	r5, [r4, #8]
 800d7fa:	2d00      	cmp	r5, #0
 800d7fc:	bfa2      	ittt	ge
 800d7fe:	6821      	ldrge	r1, [r4, #0]
 800d800:	f021 0104 	bicge.w	r1, r1, #4
 800d804:	6021      	strge	r1, [r4, #0]
 800d806:	b90e      	cbnz	r6, 800d80c <_printf_i+0x118>
 800d808:	2d00      	cmp	r5, #0
 800d80a:	d04d      	beq.n	800d8a8 <_printf_i+0x1b4>
 800d80c:	4615      	mov	r5, r2
 800d80e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d812:	fb03 6711 	mls	r7, r3, r1, r6
 800d816:	5dc7      	ldrb	r7, [r0, r7]
 800d818:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d81c:	4637      	mov	r7, r6
 800d81e:	42bb      	cmp	r3, r7
 800d820:	460e      	mov	r6, r1
 800d822:	d9f4      	bls.n	800d80e <_printf_i+0x11a>
 800d824:	2b08      	cmp	r3, #8
 800d826:	d10b      	bne.n	800d840 <_printf_i+0x14c>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	07de      	lsls	r6, r3, #31
 800d82c:	d508      	bpl.n	800d840 <_printf_i+0x14c>
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	6861      	ldr	r1, [r4, #4]
 800d832:	4299      	cmp	r1, r3
 800d834:	bfde      	ittt	le
 800d836:	2330      	movle	r3, #48	; 0x30
 800d838:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d83c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d840:	1b52      	subs	r2, r2, r5
 800d842:	6122      	str	r2, [r4, #16]
 800d844:	f8cd a000 	str.w	sl, [sp]
 800d848:	464b      	mov	r3, r9
 800d84a:	aa03      	add	r2, sp, #12
 800d84c:	4621      	mov	r1, r4
 800d84e:	4640      	mov	r0, r8
 800d850:	f7ff fee2 	bl	800d618 <_printf_common>
 800d854:	3001      	adds	r0, #1
 800d856:	d14c      	bne.n	800d8f2 <_printf_i+0x1fe>
 800d858:	f04f 30ff 	mov.w	r0, #4294967295
 800d85c:	b004      	add	sp, #16
 800d85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d862:	4835      	ldr	r0, [pc, #212]	; (800d938 <_printf_i+0x244>)
 800d864:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d868:	6829      	ldr	r1, [r5, #0]
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d870:	6029      	str	r1, [r5, #0]
 800d872:	061d      	lsls	r5, r3, #24
 800d874:	d514      	bpl.n	800d8a0 <_printf_i+0x1ac>
 800d876:	07df      	lsls	r7, r3, #31
 800d878:	bf44      	itt	mi
 800d87a:	f043 0320 	orrmi.w	r3, r3, #32
 800d87e:	6023      	strmi	r3, [r4, #0]
 800d880:	b91e      	cbnz	r6, 800d88a <_printf_i+0x196>
 800d882:	6823      	ldr	r3, [r4, #0]
 800d884:	f023 0320 	bic.w	r3, r3, #32
 800d888:	6023      	str	r3, [r4, #0]
 800d88a:	2310      	movs	r3, #16
 800d88c:	e7b0      	b.n	800d7f0 <_printf_i+0xfc>
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	f043 0320 	orr.w	r3, r3, #32
 800d894:	6023      	str	r3, [r4, #0]
 800d896:	2378      	movs	r3, #120	; 0x78
 800d898:	4828      	ldr	r0, [pc, #160]	; (800d93c <_printf_i+0x248>)
 800d89a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d89e:	e7e3      	b.n	800d868 <_printf_i+0x174>
 800d8a0:	0659      	lsls	r1, r3, #25
 800d8a2:	bf48      	it	mi
 800d8a4:	b2b6      	uxthmi	r6, r6
 800d8a6:	e7e6      	b.n	800d876 <_printf_i+0x182>
 800d8a8:	4615      	mov	r5, r2
 800d8aa:	e7bb      	b.n	800d824 <_printf_i+0x130>
 800d8ac:	682b      	ldr	r3, [r5, #0]
 800d8ae:	6826      	ldr	r6, [r4, #0]
 800d8b0:	6961      	ldr	r1, [r4, #20]
 800d8b2:	1d18      	adds	r0, r3, #4
 800d8b4:	6028      	str	r0, [r5, #0]
 800d8b6:	0635      	lsls	r5, r6, #24
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	d501      	bpl.n	800d8c0 <_printf_i+0x1cc>
 800d8bc:	6019      	str	r1, [r3, #0]
 800d8be:	e002      	b.n	800d8c6 <_printf_i+0x1d2>
 800d8c0:	0670      	lsls	r0, r6, #25
 800d8c2:	d5fb      	bpl.n	800d8bc <_printf_i+0x1c8>
 800d8c4:	8019      	strh	r1, [r3, #0]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	6123      	str	r3, [r4, #16]
 800d8ca:	4615      	mov	r5, r2
 800d8cc:	e7ba      	b.n	800d844 <_printf_i+0x150>
 800d8ce:	682b      	ldr	r3, [r5, #0]
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	602a      	str	r2, [r5, #0]
 800d8d4:	681d      	ldr	r5, [r3, #0]
 800d8d6:	6862      	ldr	r2, [r4, #4]
 800d8d8:	2100      	movs	r1, #0
 800d8da:	4628      	mov	r0, r5
 800d8dc:	f7f2 fc98 	bl	8000210 <memchr>
 800d8e0:	b108      	cbz	r0, 800d8e6 <_printf_i+0x1f2>
 800d8e2:	1b40      	subs	r0, r0, r5
 800d8e4:	6060      	str	r0, [r4, #4]
 800d8e6:	6863      	ldr	r3, [r4, #4]
 800d8e8:	6123      	str	r3, [r4, #16]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8f0:	e7a8      	b.n	800d844 <_printf_i+0x150>
 800d8f2:	6923      	ldr	r3, [r4, #16]
 800d8f4:	462a      	mov	r2, r5
 800d8f6:	4649      	mov	r1, r9
 800d8f8:	4640      	mov	r0, r8
 800d8fa:	47d0      	blx	sl
 800d8fc:	3001      	adds	r0, #1
 800d8fe:	d0ab      	beq.n	800d858 <_printf_i+0x164>
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	079b      	lsls	r3, r3, #30
 800d904:	d413      	bmi.n	800d92e <_printf_i+0x23a>
 800d906:	68e0      	ldr	r0, [r4, #12]
 800d908:	9b03      	ldr	r3, [sp, #12]
 800d90a:	4298      	cmp	r0, r3
 800d90c:	bfb8      	it	lt
 800d90e:	4618      	movlt	r0, r3
 800d910:	e7a4      	b.n	800d85c <_printf_i+0x168>
 800d912:	2301      	movs	r3, #1
 800d914:	4632      	mov	r2, r6
 800d916:	4649      	mov	r1, r9
 800d918:	4640      	mov	r0, r8
 800d91a:	47d0      	blx	sl
 800d91c:	3001      	adds	r0, #1
 800d91e:	d09b      	beq.n	800d858 <_printf_i+0x164>
 800d920:	3501      	adds	r5, #1
 800d922:	68e3      	ldr	r3, [r4, #12]
 800d924:	9903      	ldr	r1, [sp, #12]
 800d926:	1a5b      	subs	r3, r3, r1
 800d928:	42ab      	cmp	r3, r5
 800d92a:	dcf2      	bgt.n	800d912 <_printf_i+0x21e>
 800d92c:	e7eb      	b.n	800d906 <_printf_i+0x212>
 800d92e:	2500      	movs	r5, #0
 800d930:	f104 0619 	add.w	r6, r4, #25
 800d934:	e7f5      	b.n	800d922 <_printf_i+0x22e>
 800d936:	bf00      	nop
 800d938:	0800ddc5 	.word	0x0800ddc5
 800d93c:	0800ddd6 	.word	0x0800ddd6

0800d940 <__retarget_lock_acquire_recursive>:
 800d940:	4770      	bx	lr

0800d942 <__retarget_lock_release_recursive>:
 800d942:	4770      	bx	lr

0800d944 <memcpy>:
 800d944:	440a      	add	r2, r1
 800d946:	4291      	cmp	r1, r2
 800d948:	f100 33ff 	add.w	r3, r0, #4294967295
 800d94c:	d100      	bne.n	800d950 <memcpy+0xc>
 800d94e:	4770      	bx	lr
 800d950:	b510      	push	{r4, lr}
 800d952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d95a:	4291      	cmp	r1, r2
 800d95c:	d1f9      	bne.n	800d952 <memcpy+0xe>
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <memmove>:
 800d960:	4288      	cmp	r0, r1
 800d962:	b510      	push	{r4, lr}
 800d964:	eb01 0402 	add.w	r4, r1, r2
 800d968:	d902      	bls.n	800d970 <memmove+0x10>
 800d96a:	4284      	cmp	r4, r0
 800d96c:	4623      	mov	r3, r4
 800d96e:	d807      	bhi.n	800d980 <memmove+0x20>
 800d970:	1e43      	subs	r3, r0, #1
 800d972:	42a1      	cmp	r1, r4
 800d974:	d008      	beq.n	800d988 <memmove+0x28>
 800d976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d97e:	e7f8      	b.n	800d972 <memmove+0x12>
 800d980:	4402      	add	r2, r0
 800d982:	4601      	mov	r1, r0
 800d984:	428a      	cmp	r2, r1
 800d986:	d100      	bne.n	800d98a <memmove+0x2a>
 800d988:	bd10      	pop	{r4, pc}
 800d98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d992:	e7f7      	b.n	800d984 <memmove+0x24>

0800d994 <_realloc_r>:
 800d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	4680      	mov	r8, r0
 800d99a:	4614      	mov	r4, r2
 800d99c:	460e      	mov	r6, r1
 800d99e:	b921      	cbnz	r1, 800d9aa <_realloc_r+0x16>
 800d9a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	4611      	mov	r1, r2
 800d9a6:	f7ff bc2b 	b.w	800d200 <_malloc_r>
 800d9aa:	b92a      	cbnz	r2, 800d9b8 <_realloc_r+0x24>
 800d9ac:	f7ff fbbc 	bl	800d128 <_free_r>
 800d9b0:	4625      	mov	r5, r4
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9b8:	f000 f81b 	bl	800d9f2 <_malloc_usable_size_r>
 800d9bc:	4284      	cmp	r4, r0
 800d9be:	4607      	mov	r7, r0
 800d9c0:	d802      	bhi.n	800d9c8 <_realloc_r+0x34>
 800d9c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9c6:	d812      	bhi.n	800d9ee <_realloc_r+0x5a>
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	f7ff fc18 	bl	800d200 <_malloc_r>
 800d9d0:	4605      	mov	r5, r0
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d0ed      	beq.n	800d9b2 <_realloc_r+0x1e>
 800d9d6:	42bc      	cmp	r4, r7
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4631      	mov	r1, r6
 800d9dc:	bf28      	it	cs
 800d9de:	463a      	movcs	r2, r7
 800d9e0:	f7ff ffb0 	bl	800d944 <memcpy>
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7ff fb9e 	bl	800d128 <_free_r>
 800d9ec:	e7e1      	b.n	800d9b2 <_realloc_r+0x1e>
 800d9ee:	4635      	mov	r5, r6
 800d9f0:	e7df      	b.n	800d9b2 <_realloc_r+0x1e>

0800d9f2 <_malloc_usable_size_r>:
 800d9f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9f6:	1f18      	subs	r0, r3, #4
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfbc      	itt	lt
 800d9fc:	580b      	ldrlt	r3, [r1, r0]
 800d9fe:	18c0      	addlt	r0, r0, r3
 800da00:	4770      	bx	lr
	...

0800da04 <_init>:
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	bf00      	nop
 800da08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0a:	bc08      	pop	{r3}
 800da0c:	469e      	mov	lr, r3
 800da0e:	4770      	bx	lr

0800da10 <_fini>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	bf00      	nop
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr
